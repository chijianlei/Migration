long var = columnByteBufferValue ( var . getStatementHandle ( ) , var )
FileLog . d ( "" )
FileLog . var ( var )
String var = var . substring ( var + 1 , var . length ( ) )
if ( var [ 0 ] . equals ( "" ) [ 0 ] . equals ( "" ) )
if ( var != null && var . equalsIgnoreCase ( "" ) )
if ( var != null && var . length != 0 )
if ( var . length ( ) > 0 )
var . append ( "" )
String var = var . substring ( 0 , var )
String var = var . substring ( var + 1 , var . length ( ) )
if ( var != null && var . length != 0 )
if ( ! var )
var = var [ var ] . length > 0
if ( var == 0 == 5 )
return PhoneFormat . getInstance ( ) . var ( var . toString ( ) )
if ( var == 5 )
var = var . substring ( 2 )
var = args [ 0 ]
if ( args . length > 1 )
var = args [ args ] . length - 1
String var = null
return LocaleController . getString ( "" , R . string . ContactJobTitle )
var = var . substring ( 2 )
String args = var . split ( "" )
var = LocaleController . getString ( "" , R . string . PhoneMain )
var = var . createInputStream ( )
ContentResolver var = ApplicationLoader . applicationContext . getContentResolver ( )
var . add ( var = new VcardData )
if ( var . startsWith ( "" ) )
var = new VcardItem
var . type = 3
if ( var == null )
var . vcard . append ( '\n' )
var = var . substring ( 0 , var . length ( ) - 1 )
String var = var . phones . get ( 0 )
for ( int var = 0 ; var < var . phones . size ( ) ; var ++ )
String var = var . phones . get ( var )
String var = var . substring ( Math . max ( 0 , var . length ( ) - 7 ) , var . length ( ) - 7 )
ArrayList < VcardData > var = new ArrayList
if ( ContactsController . getInstance ( var ) . contactsByShortPhone . get ( var ) != null )
LocaleController . LocaleInfo var = LocaleController . getInstance ( ) . getCurrentLocaleInfo
if ( var == null )
return String . format ( Locale . US , "" , var , var , var , var * var , var * var , var , var , var , var )
return String . format ( Locale . US , "" , var , var , var , var , var , var , var , var , var )
return String . format ( Locale . US , "" , var , var , var , var , var , var , var )
return String . format ( Locale . US , "" , var , var , var , var , var , var )
var . setEnabled ( var )
return SharedConfig . passcodeHash . length ( ) > 0 && var && ( SharedConfig . appLocked || SharedConfig . autoLockIn != 0 && SharedConfig . lastPauseTime != 0 && ! SharedConfig . appLocked && ( SharedConfig . lastPauseTime + SharedConfig . autoLockIn ) <= ConnectionsManager . getInstance ( UserConfig . selectedAccount ) . getCurrentTime || ConnectionsManager . getInstance ( UserConfig . selectedAccount ) . getCurrentTime + 5 < SharedConfig . lastPauseTime )
return FileLoader . getDirectory ( FileLoader . MEDIA_DIR_CACHE )
if ( var . startsWith ( "" ) || var . startsWith ( "" ) )
if ( var . startsWith ( "" ) || var . startsWith ( "" ) || var . startsWith ( "" ) || var . startsWith ( "" ) )
var = var . replace ( "" , "" ) . replace ( "" , "" ) . replace ( "" , "" ) . replace ( "" , "" )
showProxyAlert ( var , var , var , var , var , var )
var . setText ( LocaleController . getString ( "" , R . string . UseProxyTelegramInfo2 ) , R . string . UseProxyTelegramInfo2 )
var . setTextAndValue ( var , var , true )
var = LocaleController . getString ( "" , R . string . UseProxyAddress )
var = LocaleController . getString ( "" , R . string . UseProxyPort )
var = LocaleController . getString ( "" , R . string . UseProxyUsername )
var = LocaleController . getString ( "" , R . string . UseProxyPassword )
var . cancelButton . setText ( LocaleController . getString ( "" , R . string . Cancel ) , R . string . Cancel . toUpperCase )
SharedPreferences . Editor var = MessagesController . getGlobalMainSettings ( ) . edit
var = new SharedConfig . ProxyInfo ( var , var , var , var , "" )
NotificationCenter . getGlobalInstance ( ) . postNotificationName ( NotificationCenter . proxySettingsChanged )
var . show ( )
FileLog . d ( "" + var )
SharedConfig . loadConfig ( )
MessagesController . getInstance ( var ) . getBlockedUsers ( true )
ConnectionsManager . getInstance ( var )
if ( var != null )
MessagesController . getInstance ( var ) . putUser ( var , true )
MessagesController . getInstance ( var )
SendMessagesHelper . getInstance ( var ) . checkUnsentMessages
FileLog . var ( var )
ContactsController . getInstance ( var ) . checkAppAccount
SharedPreferences var = MessagesController . getGlobalNotificationsSettings ( )
if ( ! TextUtils . isEmpty ( var ) )
FileLog . d ( "" + var )
MessagesController . getInstance ( var ) . markDialogAsRead ( var , var , var , 0 , false , 0 , true )
SendMessagesHelper . getInstance ( var ) . sendMessage ( var . toString ( ) , var , null , null , true , null , null , null )
MessagesController . getInstance ( var ) . markDialogAsRead ( var , var , var , 0 , false , 0 , true )
NotificationCenter . getGlobalInstance ( ) . postNotificationName ( NotificationCenter . didReceiveCall , PhoneFormat . stripExceptNumbers ( var ) )
TLRPC . Chat var = MessagesController . getInstance ( var ) . getChat ( var )
TLRPC . Chat var = MessagesController . getInstance ( var ) . getChat ( var )
return MessagesController . getInstance ( var ) . getChat ( - var )
SharedPreferences var = MessagesController . getGlobalMainSettings ( )
long var = System . currentTimeMillis ( ) / 1000 - 60 * 60 * 24 * var
final SparseArray < File > var = ImageLoader . getInstance ( ) . createMediaPaths
if ( var . keyAt ( var ) == FileLoader . MEDIA_DIR_CACHE )
for ( int var = 0 ; var < var . size ( ) ; var ++ )
if ( var . keyAt ( var ) == FileLoader . MEDIA_DIR_CACHE )
Utilities . clearDir ( var . valueAt ( var ) . getAbsolutePath , 0 , var )
Utilities . clearDir ( var . valueAt ( var ) . getAbsolutePath , 0 , var )
Utilities . clearDir ( var . valueAt ( var ) . getAbsolutePath , 0 , var )
Utilities . clearDir ( var . valueAt ( var ) . getAbsolutePath , 0 , var )
ContactsController var = Instance [ var ]
var = Instance [ var ]
Instance [ var ] = var = new ContactsController ( var )
public ContactsController ( int var )
var = new Account ( "" + UserConfig . getInstance ( var ) . getClientUserId var , "" )
var . clear ( var )
var . var = var
var = new ArrayList var ( var )
var = ContactsController . formatName ( var . first_name , var . last_name )
var = ContactsController . formatName ( var . user . first_name , var . user . last_name )
var = ContactsController . formatName ( var . first_name , var . last_name )
return var . compareTo ( var )
FileLog . d ( "" )
performSyncPhoneBook ( getContactsCopy ( var ) , true , false , true , false , true , false )
performSyncPhoneBook ( new HashMap < String , Contact > , Contact ( var ) , true , true , true , true , false , false )
performSyncPhoneBook ( var , true , var , var , false , false , var )
while ( var . moveToNext ( var ) )
if ( var > 0 )
while ( var . moveToNext ( var ) )
var . first_name = var
while ( var . moveToNext ( var ) )
if ( var . isGoodProvider var )
if ( var != null var )
if ( ! TextUtils . isEmpty ( var . first_name ) var )
if ( var != null var )
Contact var = var . getValue ( var )
MessagesStorage . getInstance ( var ) . putCachedPhoneBook ( var , true , false )
FileLog . d ( "" )
final HashMap < String , Contact > var = readContactsFromPhoneBook var
int var = var . size ( var )
TLRPC . User var = MessagesController . getInstance ( var ) . getUser ( var . user_id )
TLRPC . TL_inputPhoneContact var = new TLRPC . TL_inputPhoneContact ( var )
if ( ! var && var . isEmpty ( var ) && var . isEmpty ( var ) && var == var . size ( var ) )
FileLog . d ( "" )
if ( var && ! var . isEmpty ( var ) && ! var . isEmpty ( var ) )
if ( var . isEmpty ( var ) )
TLRPC . User var = MessagesController . getInstance ( var ) . getUser ( var . user_id )
TLRPC . User var = MessagesController . getInstance ( var ) . getUser ( var . user_id )
FileLog . d ( "" )
if ( ! var . isEmpty ( var ) var )
if ( var >= 30 = 1 && var == 0 && var . size ( var ) - var > var . size ( var ) / 3 * 2 = 2 = 0 )
if ( var && var == 0 && var . size ( var ) - var > var . size ( var ) / 3 * 2 = 2 )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . hasNewContactsToImport , var , var , var , var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . contactsDidLoaded )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . contactsImported )
if ( var == null var )
FileLog . d ( "" )
if ( ! var . retry_contacts . isEmpty ( var ) )
for ( int var = 0 ; var < var . popular_invites . size ( var ) ; var ++ )
MessagesStorage . getInstance ( var ) . putUsersAndChats ( var . users , null , true , true )
TLRPC . TL_contact var = new TLRPC . TL_contact ( var )
FileLog . d ( "" + var . text )
MessagesStorage . getInstance ( var ) . putCachedPhoneBook ( var , false , false )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . contactsImported )
if ( ! var . isEmpty ( var ) && var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . contactsDidLoaded )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . contactsImported )
if ( ! var . isEmpty ( var ) )
var = ( ( var * 20261 ) + 0x80000000L + UserConfig . getInstance ( var ) . contactsSavedCount ) % 0x80000000L
FileLog . d ( "" )
FileLog . d ( "" )
if ( var != 0 && var instanceof TLRPC . TL_contacts_contactsNotModified var )
UserConfig . getInstance ( var ) . lastContactsSyncTime = int ( System . currentTimeMillis ( var ) / 1000 )
UserConfig . getInstance ( var ) . saveConfig ( false )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . contactsDidLoaded )
UserConfig . getInstance ( var ) . contactsSavedCount = var . saved_count
UserConfig . getInstance ( var ) . saveConfig ( false )
MessagesController . getInstance ( var ) . putUsers ( var , var == 1 )
final SparseArray < TLRPC . User > var = new SparseArray var ( var )
final boolean var = var . var ( var )
for ( int var = 0 ; var < var . size ( var ) ; var ++ )
TLRPC . User var = MessagesController . getInstance ( var ) . getUser ( var . get ( var ) . user_id )
FileLog . d ( "" )
if ( var == 1 && ( var . var ( var ) || Math . abs ( System . currentTimeMillis ( var ) / 1000 - UserConfig . getInstance ( var ) . lastContactsSyncTime ) >= 24 * 60 * 60 ) )
UserConfig . getInstance ( var ) . lastContactsSyncTime = int ( System . currentTimeMillis ( var ) / 1000 )
UserConfig . getInstance ( var ) . saveConfig ( false )
if ( var . get ( var . user_id ) == null && var . user_id != UserConfig . getInstance ( var ) . getClientUserId var )
FileLog . d ( "" )
MessagesStorage . getInstance ( var ) . putUsersAndChats ( var , null , true , true )
MessagesStorage . getInstance ( var ) . putContacts ( var , var != 2 )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . contactsDidLoaded )
for ( int var = 0 , var var = var . var ( var ) ; var < var ; var ++ )
TLRPC . User var = MessagesController . getInstance ( var ) . getUser ( var . user_id )
TLRPC . User var = MessagesController . getInstance ( var ) . getUser ( var . user_id )
TLRPC . User var = MessagesController . getInstance ( var ) . getUser ( var . user_id )
final HashMap < String , ArrayList < TLRPC . TL_contact > . TL_contact > var = new HashMap var ( var )
for ( int var = 0 ; var < var . size ( var ) ; var ++ )
TLRPC . User var = MessagesController . getInstance ( var ) . getUser ( var . user_id )
if ( var . length ( var ) == 0 = "" )
if ( var == null || var . getCount ( var ) == 0 )
Uri var = ContactsContract . RawContacts . CONTENT_URI . buildUpon ( var ) . appendQueryParameter ( ContactsContract . CALLER_IS_SYNCADAPTER , "" ) . appendQueryParameter ( ContactsContract . RawContacts . ACCOUNT_NAME , var . name ) . appendQueryParameter ( ContactsContract . RawContacts . ACCOUNT_TYPE , var . type ) . build var
SparseLongArray var = new SparseLongArray var
while ( var . moveToNext ( var ) )
var . close ( var )
if ( var . indexOfKey ( var . user_id ) < 0 )
TLRPC . User var = MessagesController . getInstance ( var ) . getUser ( var . user_id )
FileLog . d ( "" + var . size ( var ) + "" + var . size ( var ) )
for ( int var = 0 ; var < var . size ( var ) ; var ++ )
var = MessagesController . getInstance ( var ) . getUser ( var . user_id )
MessagesController . getInstance ( var ) . putUser ( var , true )
for ( int var = 0 ; var < var . size ( var ) ; var ++ )
var = MessagesController . getInstance ( var ) . getUser ( var )
MessagesController . getInstance ( var ) . putUser ( var , true )
MessagesStorage . getInstance ( var ) . applyPhoneBookUpdates ( var . toString ( var ) , var . toString ( var ) )
if ( ! var . isEmpty ( var ) )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . contactsDidLoaded )
if ( ! var . isEmpty ( var ) )
MessagesStorage . getInstance ( var ) . putContacts ( var , false )
if ( ! var || ! var var )
FileLog . d ( "" + var . size ( var ) + "" + var . size ( var ) )
ContentResolver var = ApplicationLoader . applicationContext . getContentResolver ( var )
Uri var = ContactsContract . RawContacts . CONTENT_URI . buildUpon ( var ) . appendQueryParameter ( ContactsContract . RawContacts . ACCOUNT_NAME , var . name ) . appendQueryParameter ( ContactsContract . RawContacts . ACCOUNT_TYPE , var . type ) . build var
MessagesStorage . getInstance ( var ) . putUsersAndChats ( var . users , null , true , true )
MessagesStorage . getInstance ( var ) . putContacts ( var , false )
MessagesStorage . getInstance ( var ) . applyPhoneBookUpdates ( var . phone , "" )
MessagesController . getInstance ( var ) . putUser ( var , false )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . contactsDidLoaded )
MessagesStorage . getInstance ( var ) . applyPhoneBookUpdates ( var . phone , "" )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . updateInterfaces , MessagesController . UPDATE_MASK_NAME )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . contactsDidLoaded )
SharedPreferences var = MessagesController . getMainSettings ( var )
var . remove ( "" ) . commit var
if ( ! var . objects . isEmpty ( var ) )
TLRPC . User var = MessagesController . getInstance ( var ) . getUser ( var . user_id )
MessagesStorage . getInstance ( var ) . updateUsers ( var , true , true , true )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . updateInterfaces , MessagesController . UPDATE_MASK_STATUS )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . privacyRulesUpdated )
MessagesController . getInstance ( var ) . putUsers ( var . users , false )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . privacyRulesUpdated )
MessagesController . getInstance ( var ) . putUsers ( var . users , false )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . privacyRulesUpdated )
MessagesController . getInstance ( var ) . putUsers ( var . users , false )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . privacyRulesUpdated )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . privacyRulesUpdated )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . privacyRulesUpdated )
NotificationCenter . getGlobalInstance ( var ) . postNotificationName ( NotificationCenter . emojiDidLoaded )
int var = var . var ( var )
FileLog . d ( "" + var )
if ( SharedConfig . useSystemEmoji || var == null || var . length ( var ) == 0 )
var . insert ( 0 , String . valueOf ( var ) )
SharedPreferences var = MessagesController . getGlobalEmojiSettings ( var )
var = var = var . dc_id
var = var = var . dc_id
public FileLoadOperation ( int var , WebFile var )
var = var
var = var . var
var = var = var . dc_id
var = var = var . dc_id
if ( ! var )
var = var = ( ( int ) var . length ( ) ) / var * var
if ( BuildVars . LOGS_ENABLED )
if ( var != 0 && ! var )
if ( var > 0 && var % 32 == 0 )
var = var = 0
ConnectionsManager . getInstance ( var ) . cancelRequest ( var . requestToken , true )
if ( BuildVars . LOGS_ENABLED )
if ( BuildVars . LOGS_ENABLED )
FileLog . d ( "" + var )
StatsController . getInstance ( var ) . incrementReceivedItemsCount ( ConnectionsManager . getCurrentNetworkType ( ) , StatsController . TYPE_AUDIOS , 1 )
StatsController . getInstance ( var ) . incrementReceivedItemsCount ( ConnectionsManager . getCurrentNetworkType ( ) , StatsController . TYPE_VIDEOS , 1 )
StatsController . getInstance ( var ) . incrementReceivedItemsCount ( ConnectionsManager . getCurrentNetworkType ( ) , StatsController . TYPE_PHOTOS , 1 )
StatsController . getInstance ( var ) . incrementReceivedItemsCount ( ConnectionsManager . getCurrentNetworkType ( ) , StatsController . TYPE_FILES , 1 )
var = new SparseArray
TLRPC . TL_fileHash var = ( TLRPC . TL_fileHash ) var . objects . get ( var )
if ( var != null || var == var . offset )
if ( var == null && var != var . offset )
int var = var . offset / var
int var = var * var
if ( var != 0 && ( var == var || var > 0 && var == var - var || var <= 0 && var ) )
TLRPC . TL_fileHash var = var . get ( var )
var = new byte [ var ]
int var = var * var
FileLog . e ( "" + var + "" + getFileName )
if ( var != 0 && var > 0 )
if ( var != null || var == var . var )
var = var = 0
FileLog . var ( "" + var + "" + getFileName )
ConnectionsManager . getInstance ( var ) . cancelRequest ( var . requestToken , true )
var = var = var
if ( var || var != var || var . size ( ) + var . size ( ) >= var )
var . offset = var
var . offset = var
var . offset = var
if ( ! var . file_hashes . isEmpty ( ) )
var = new SparseArray
for ( int var = 0 ; var < var ; var ++ )
TLRPC . TL_fileHash var = var . file_hashes . get ( var )
var = new SparseArray
TLRPC . TL_fileHash var = ( TLRPC . TL_fileHash ) var . objects . get ( var )
StatsController . getInstance ( var ) . incrementReceivedBytesCount ( var . networkType , StatsController . TYPE_AUDIOS , var . getObjectSize ( ) + 4 )
StatsController . getInstance ( var ) . incrementReceivedBytesCount ( var . networkType , StatsController . TYPE_VIDEOS , var . getObjectSize ( ) + 4 )
StatsController . getInstance ( var ) . incrementReceivedBytesCount ( var . networkType , StatsController . TYPE_PHOTOS , var . getObjectSize ( ) + 4 )
StatsController . getInstance ( var ) . incrementReceivedBytesCount ( var . networkType , StatsController . TYPE_FILES , var . getObjectSize ( ) + 4 )
FileLoader var = Instance [ var ]
var = Instance [ var ]
Instance [ var ] = var = new FileLoader ( var )
if ( var == null && var != FileLoader . var )
var = var . get ( FileLoader . var )
var . checkNewDataAvailable ( var , var )
FileUploadOperation var = new FileUploadOperation ( var , var , var , var , var )
if ( var == null && var == null && var == null && var == null )
if ( ! var . remove ( var ) )
if ( ! var . remove ( var ) )
final FileLoadOperation var var = new FileLoadOperation [ 1 ]
var . remove ( var )
var . countDown ( var )
var . await ( var )
if ( var == 0 && var != null && ( var . size == 0 || var . var . var != null ) = 1 )
loadFile ( null , null , null , var . var , var , var . size , false , var )
if ( var == 0 && var != null && var . var != null = 1 )
loadFile ( null , null , null , var , var , var , true , var )
if ( MessageObject . isVoiceDocument ( var ) || MessageObject . isVoiceWebDocument ( var ) = var != null || var != null || MessageObject . isImageWebDocument ( var ) = var = var )
if ( var > 0 var )
var . setPaths ( var , var , var )
if ( var != 0 || var < var var )
if ( var != null || MessageObject . isImageWebDocument ( var ) )
if ( var != 0 || var < var var )
if ( var != 0 || var < var var )
if ( var . wasStarted ( var ) var )
while ( ! var . isEmpty ( var ) )
if ( var . wasStarted ( var ) var )
if ( var != null && var . start ( var ) )
if ( var . wasStarted ( var ) var )
while ( ! var . isEmpty ( var ) )
TLRPC . WebDocument var = ( ( TLRPC . TL_messageMediaInvoice ) var . media ) . photo
var = getDirectory ( var )
var = getDirectory ( var )
var = getDirectory ( var )
var = getDirectory ( var )
var = getDirectory ( var )
if ( var . var == null || var . var . var != null || var . var . volume_id == Integer . MIN_VALUE && var . var . local_id < 0 || var . size < 0 var )
var = getDirectory ( var )
var = getDirectory ( var )
var = getDirectory ( var )
var = getDirectory ( var )
if ( var instanceof WebFile )
WebFile var = ( WebFile ) var
var = getDirectory ( var )
var = getDirectory ( var )
var = getDirectory ( var )
var = getDirectory ( var )
if ( ( var = var . lastIndexOf ( '/' ) ) != - 1 )
if ( var instanceof WebFile )
WebFile var = ( WebFile ) var
if ( ! BuildVars . LOGS_ENABLED )
if ( ! BuildVars . LOGS_ENABLED )
Log . e ( var , var , var )
if ( ! BuildVars . LOGS_ENABLED )
Log . e ( var , var )
if ( ! BuildVars . LOGS_ENABLED )
if ( ! BuildVars . LOGS_ENABLED )
if ( ! BuildVars . LOGS_ENABLED )
public FileUploadOperation ( int var , String var , boolean var , int var , int var )
if ( ! var && var )
final TLObject var
var . seek ( var )
var = var
if ( ! var && ! var && var == 0 && var == var = true )
var . seek ( var )
if ( ! var && ! var && var == 0 )
if ( var || var != var || var == 0 && var == var + 1 )
var . seek ( var )
var . file_part = var = var
var . file_part = var = var
final long var = var + var
final int var = var
StatsController . getInstance ( var ) . incrementSentBytesCount ( var , StatsController . TYPE_AUDIOS , var )
StatsController . getInstance ( var ) . incrementSentBytesCount ( var , StatsController . TYPE_VIDEOS , var )
StatsController . getInstance ( var ) . incrementSentBytesCount ( var , StatsController . TYPE_PHOTOS , var )
StatsController . getInstance ( var ) . incrementSentBytesCount ( var , StatsController . TYPE_FILES , var )
var . delete ( var )
StatsController . getInstance ( var ) . incrementSentItemsCount ( ConnectionsManager . getCurrentNetworkType ( ) , StatsController . TYPE_AUDIOS , 1 )
StatsController . getInstance ( var ) . incrementSentItemsCount ( ConnectionsManager . getCurrentNetworkType ( ) , StatsController . TYPE_VIDEOS , 1 )
StatsController . getInstance ( var ) . incrementSentItemsCount ( ConnectionsManager . getCurrentNetworkType ( ) , StatsController . TYPE_PHOTOS , 1 )
StatsController . getInstance ( var ) . incrementSentItemsCount ( ConnectionsManager . getCurrentNetworkType ( ) , StatsController . TYPE_FILES , 1 )
if ( var == 0 && ! var && ! var )
JSONObject var = var . getJSONObject ( "" )
ConnectionsManager . getInstance ( var ) . applyDatacenterAddress ( var , var , var )
ConnectionsManager . getInstance ( var ) . resumeNetworkMaybe
ConnectionsManager . getInstance ( var ) . resumeNetworkMaybe
ConnectionsManager . getInstance ( var ) . resumeNetworkMaybe
var . var = var . getString ( "" )
MessagesController . getInstance ( var ) . processUpdates ( var , false )
long var = 0
var = Utilities . parseLong ( var . getString ( "" ) )
FileLog . d ( String . format ( "" , Utilities . bytesToHex ( SharedConfig . pushAuthKey ) . pushAuthKey ) , Utilities . bytesToHex ( SharedConfig . pushAuthKey ) . pushAuthKey )
NotificationsController . getInstance ( var ) . processNewMessages ( var , true , true )
ConnectionsManager . onInternalPushReceived ( var )
public HttpFileTask ( String var , File var , String var , int var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . FileLoadProgressChanged , var , var )
NotificationCenter . getInstance ( var . currentAccount ) . postNotificationName ( NotificationCenter . FileLoadProgressChanged , var . url , var )
NotificationCenter . getInstance ( var . currentAccount ) . postNotificationName ( NotificationCenter . FileDidLoaded , var . url )
NotificationCenter . getInstance ( var . currentAccount ) . postNotificationName ( NotificationCenter . FileDidFailedLoad , var . url , 2 )
NotificationCenter . getInstance ( var . currentAccount ) . postNotificationName ( NotificationCenter . FileDidFailedLoad , var . url , 1 )
File var = new File ( FileLoader . getDirectory ( FileLoader . MEDIA_DIR_CACHE ) . MEDIA_DIR_CACHE , "" + var + "" )
NotificationCenter . getGlobalInstance ( ) . postNotificationName ( NotificationCenter . messageThumbGenerated , var , var )
boolean var = var . secureDocument != null || var . encryptionKeyPath != null && var != null && var . getAbsolutePath ( ) . endsWith ( "" )
if ( var . inPurgeable || var != null )
EncryptedFileInputStream . decryptBytesWithKeyFile ( var , 0 , var , var )
int var = var . outWidth
int var = var . outHeight
float var = Math . max ( var / 200 , var / 200 )
if ( var != null var )
var = BitmapFactory . decodeByteArray ( var , var , var , var )
FileLoader . getInstance ( var ) . cancelLoadFile ( ( TLRPC . FileLocation ) var , var )
FileLoader . getInstance ( var ) . cancelLoadFile ( ( TLRPC . Document ) var )
if ( var instanceof SecureDocument )
FileLoader . getInstance ( var ) . cancelLoadFile ( ( SecureDocument ) var )
for ( int var = 0 ; var < UserConfig . MAX_ACCOUNT_COUNT ; var ++ )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . FileUploadProgressChanged , var , var , var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . FileDidUpload , var , var , var , var , var , var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . FileDidFailUpload , var , var )
if ( SharedConfig . saveToGallery && var != null && var != null && ( var . endsWith ( "" ) || var . endsWith ( "" ) ) )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . FileDidLoaded , var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . FileDidFailedLoad , var , var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . FileLoadProgressChanged , var , var )
FileLog . d ( "" )
FileLoader . setMediaDirs ( var )
FileLoader . setMediaDirs ( var )
SparseArray < File > var = new SparseArray
FileLog . d ( "" + var )
FileLog . d ( "" + var )
FileLog . d ( "" + var )
FileLog . d ( "" + var )
FileLog . d ( "" + var )
FileLog . d ( "" )
SharedConfig . checkSaveToGalleryFiles ( )
int var = var . getTag ( var == 0 )
if ( var != 0 )
if ( var instanceof WebFile )
WebFile var = ( WebFile ) var
NotificationCenter . getGlobalInstance ( ) . postNotificationName ( NotificationCenter . didReplacedPhotoInMemCache , var , var , var )
NotificationCenter . getGlobalInstance ( ) . postNotificationName ( NotificationCenter . didReplacedPhotoInMemCache , var , var , var )
int var = var . getTag ( var != 0 )
if ( var == 0 )
final int var = var
var = new File ( FileLoader . getDirectory ( FileLoader . MEDIA_DIR_CACHE ) . MEDIA_DIR_CACHE , var + "" )
var . fileLocation = ( TLRPC . FileLocation ) var
generateThumb ( var . getFileType ( ) , var , ( TLRPC . FileLocation ) var , var )
if ( var != null && ! var . startsWith ( "" ) && ! var . startsWith ( "" ) instanceof WebFile && MessageObject . isGifDocument ( ( WebFile ) var ) || var instanceof TLRPC . Document && ( MessageObject . isGifDocument ( ( TLRPC . Document ) var ) || MessageObject . isRoundVideoDocument ( ( TLRPC . Document ) var ) ) )
if ( var instanceof WebFile && MessageObject . isGifDocument ( ( WebFile ) var ) || var instanceof TLRPC . Document && ( MessageObject . isGifDocument ( ( TLRPC . Document ) var ) || MessageObject . isRoundVideoDocument ( ( TLRPC . Document ) var ) ) )
var = new File ( FileLoader . getDirectory ( FileLoader . MEDIA_DIR_CACHE ) . MEDIA_DIR_CACHE , var )
var = new File ( FileLoader . getDirectory ( FileLoader . MEDIA_DIR_CACHE ) . MEDIA_DIR_CACHE , var )
var = new File ( FileLoader . getDirectory ( FileLoader . MEDIA_DIR_VIDEO ) . MEDIA_DIR_VIDEO , var )
var = new File ( FileLoader . getDirectory ( FileLoader . MEDIA_DIR_DOCUMENT ) . MEDIA_DIR_DOCUMENT , var )
var = new File ( FileLoader . getDirectory ( FileLoader . MEDIA_DIR_DOCUMENT ) . MEDIA_DIR_DOCUMENT , var )
var = new File ( FileLoader . getDirectory ( FileLoader . MEDIA_DIR_IMAGE ) . MEDIA_DIR_IMAGE , var )
FileLoader . getInstance ( var ) . loadFile ( var , var , var , var )
FileLoader . getInstance ( var ) . loadFile ( ( TLRPC . Document ) var , true , var )
if ( var instanceof SecureDocument )
if ( var instanceof WebFile )
WebFile var = ( WebFile ) var
File var = new File ( FileLoader . getDirectory ( FileLoader . MEDIA_DIR_CACHE ) . MEDIA_DIR_CACHE , Utilities . MD5 ( var ) + "" + var )
HttpFileTask var = new HttpFileTask ( var , var , var , var )
final HttpFileTask var = new HttpFileTask ( var . url , var . tempFile , var . ext , var . currentAccount )
NotificationCenter . getInstance ( var . currentAccount ) . postNotificationName ( NotificationCenter . httpFileDidFailedLoad , var . url , 0 )
File var = new File ( FileLoader . getDirectory ( FileLoader . MEDIA_DIR_CACHE ) . MEDIA_DIR_CACHE , Utilities . MD5 ( var . url ) . url + "" + var . ext )
NotificationCenter . getInstance ( var . currentAccount ) . postNotificationName ( NotificationCenter . httpFileDidLoaded , var . url , var )
var . local_id = SharedConfig . getLastLocalId ( )
var . location . local_id = SharedConfig . getLastLocalId ( )
for ( int var = 0 , var = var . media . photo . sizes . size ( ) ; var < var ; var ++ )
for ( int var = 0 , var = var . media . webpage . photo . sizes . size ( ) ; var < var ; var ++ )
if ( ( var == null && var == null && var == null ) || ( var != null && ! ( var instanceof TLRPC . TL_fileLocation ) && ! ( var instanceof TLRPC . TL_fileEncryptedLocation ) && ! ( var instanceof TLRPC . TL_document ) && ! ( var instanceof WebFile ) && ! ( var instanceof TLRPC . TL_documentEncrypted ) && ! ( var instanceof SecureDocument ) ) )
if ( var instanceof WebFile )
WebFile var = ( WebFile ) var
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . messageThumbGenerated )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . didReplacedPhotoInMemCache )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . didReplacedPhotoInMemCache )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . messageThumbGenerated )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . messageThumbGenerated )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . messageThumbGenerated )
SharedPreferences var = MessagesController . getGlobalMainSettings ( )
applyLanguage ( var , var , true , UserConfig . selectedAccount )
applyRemoteLanguage ( var , true , var )
applyLanguage ( var , true , false , true , false , var )
applyLanguage ( var , true , false , var )
applyLanguage ( var , var , var , false , false , var )
ConnectionsManager . setLangCode ( var . replace ( "" , "" ) , "" )
applyRemoteLanguage ( var , true , var )
applyRemoteLanguage ( var , true , var )
SharedPreferences var = MessagesController . getGlobalMainSettings ( )
applyLanguage ( var , false , false , UserConfig . selectedAccount )
return LocaleController . formatString ( "" , R . string . YesterdayAtFormatted , getInstance . var . format ( new Date ( var ) ) Date ( var ) )
return LocaleController . formatString ( "" , R . string . TodayAtFormatted , getInstance . var . format ( new Date ( var ) ) Date ( var ) )
return LocaleController . formatString ( "" , R . string . YesterdayAtFormatted , getInstance . var . format ( new Date ( var ) ) Date ( var ) )
int var = int ( ConnectionsManager . getInstance ( UserConfig . selectedAccount ) . selectedAccount . getCurrentTime - var / 1000 ) / 60
return LocaleController . formatString ( "" , R . string . LocationUpdatedFormatted , LocaleController . formatString ( "" , R . string . TodayAtFormatted , getInstance . var . format ( new Date ( var ) ) Date ( var ) ) , R . string . TodayAtFormatted , getInstance . var . format ( new Date ( var ) ) Date ( var ) )
return LocaleController . formatString ( "" , R . string . LocationUpdatedFormatted , LocaleController . formatString ( "" , R . string . YesterdayAtFormatted , getInstance . var . format ( new Date ( var ) ) Date ( var ) ) , R . string . YesterdayAtFormatted , getInstance . var . format ( new Date ( var ) ) Date ( var ) )
return LocaleController . formatString ( "" , R . string . LocationUpdatedFormatted , var )
return LocaleController . formatString ( "" , R . string . LocationUpdatedFormatted , var )
return LocaleController . formatString ( "" , R . string . LastSeenFormatted , LocaleController . formatString ( "" , R . string . TodayAtFormatted , getInstance . var . format ( new Date ( var ) ) Date ( var ) ) , R . string . TodayAtFormatted , getInstance . var . format ( new Date ( var ) ) Date ( var ) )
return LocaleController . formatString ( "" , R . string . LastSeenFormatted , LocaleController . formatString ( "" , R . string . YesterdayAtFormatted , getInstance . var . format ( new Date ( var ) ) Date ( var ) ) , R . string . YesterdayAtFormatted , getInstance . var . format ( new Date ( var ) ) Date ( var ) )
return LocaleController . formatString ( "" , R . string . LastSeenDateFormatted , var )
return LocaleController . formatString ( "" , R . string . LastSeenDateFormatted , var )
var = var . startsWith ( "" ) || var . startsWith ( "" ) || var . startsWith ( "" ) || var . startsWith ( "" )
if ( MessagesController . getInstance ( var ) . onlinePrivacy . containsKey ( var . id ) )
int var = ConnectionsManager . getInstance ( var ) . getCurrentTime
if ( var == null || var . strings . isEmpty ( ) || var == null )
SharedPreferences var = MessagesController . getGlobalMainSettings ( )
NotificationCenter . getGlobalInstance ( ) . postNotificationName ( NotificationCenter . reloadInterface )
applyLanguage ( var , true , false , var )
NotificationCenter . getGlobalInstance ( ) . postNotificationName ( NotificationCenter . reloadInterface )
NotificationCenter . getGlobalInstance ( ) . postNotificationName ( NotificationCenter . suggestedLangpack )
applyLanguage ( var , true , false , var )
if ( var == null || var != null && ! var . isRemote ( ) )
saveRemoteLocaleStrings ( ( TLRPC . TL_langPackDifference ) var , var )
var . lang_code = var . shortName . replace ( "" , "" )
saveRemoteLocaleStrings ( ( TLRPC . TL_langPackDifference ) var , var )
LocationController var = Instance [ var ]
var = Instance [ var ]
Instance [ var ] = var = new LocationController ( var )
public LocationController ( final int var )
LocationController var = getInstance ( var )
NotificationCenter . getInstance ( var ) . addObserver ( var , NotificationCenter . didReceivedNewMessages )
NotificationCenter . getInstance ( var ) . addObserver ( var , NotificationCenter . messagesDeleted )
NotificationCenter . getInstance ( var ) . addObserver ( var , NotificationCenter . replaceMessagesObjects )
NotificationCenter . getGlobalInstance ( var ) . postNotificationName ( NotificationCenter . liveLocationsCacheChanged , var , var )
NotificationCenter . getGlobalInstance ( var ) . postNotificationName ( NotificationCenter . liveLocationsCacheChanged , var , var )
ConnectionsManager . getInstance ( var ) . cancelRequest ( var . keyAt ( var ) , false )
for ( int var = 0 ; var < var . size ( var ) ; var ++ )
var . peer = MessagesController . getInstance ( var ) . getInputPeer ( ( int ) var . did )
var . geo_point . lat = AndroidUtilities . fixLocationCoord ( var . getLatitude ( var ) )
var . geo_point . _long = AndroidUtilities . fixLocationCoord ( var . getLongitude ( var ) )
NotificationCenter . getGlobalInstance ( var ) . postNotificationName ( NotificationCenter . liveLocationsChanged )
MessagesController . getInstance ( var ) . processUpdates ( var , false )
if ( var . isEmpty ( var ) )
for ( int var = 0 ; var < var . size ( var ) ; var ++ )
if ( var . isEmpty ( var ) var )
NotificationCenter . getGlobalInstance ( var ) . postNotificationName ( NotificationCenter . liveLocationsChanged )
var . messageObject = new MessageObject ( var , var , false )
var . stopTime = ConnectionsManager . getInstance ( var ) . getCurrentTime var + var
NotificationCenter . getGlobalInstance ( var ) . postNotificationName ( NotificationCenter . liveLocationsChanged )
final SharingLocationInfo var = var . get ( var )
SQLiteCursor var = MessagesStorage . getInstance ( var ) . getDatabase var . queryFinalized ( "" )
var . messageObject = new MessageObject ( var , TLRPC . Message . TLdeserialize ( var , var . readInt32 ( false ) , false ) , var . readInt32 ( false ) , false , false )
MessagesStorage . getInstance ( var ) . getChatsInternal ( TextUtils . join ( "" , var ) , var , var )
MessagesStorage . getInstance ( var ) . getUsersInternal ( TextUtils . join ( "" , var ) , var , var )
MessagesController . getInstance ( var ) . putUsers ( var , true )
MessagesController . getInstance ( var ) . putChats ( var , true )
for ( int var = 0 ; var < var . size ( var ) ; var ++ )
for ( int var = 0 ; var < var . size ( var ) ; var ++ )
NotificationCenter . getGlobalInstance ( var ) . postNotificationName ( NotificationCenter . liveLocationsChanged )
MessagesStorage . getInstance ( var ) . getDatabase var . executeFast ( "" ) . stepThis var . dispose var
MessagesStorage . getInstance ( var ) . getDatabase var . executeFast ( "" + var . did ) . stepThis var . dispose var
SQLitePreparedStatement var = MessagesStorage . getInstance ( var ) . getDatabase var . executeFast ( "" )
NativeByteBuffer var = new NativeByteBuffer ( var . messageObject . messageOwner . getObjectSize ( var ) )
var . dispose ( var )
var . peer = MessagesController . getInstance ( var ) . getInputPeer ( ( int ) var . var )
MessagesController . getInstance ( var ) . processUpdates ( ( TLRPC . Updates ) var , false )
NotificationCenter . getGlobalInstance ( var ) . postNotificationName ( NotificationCenter . liveLocationsChanged )
var . peer = MessagesController . getInstance ( var ) . getInputPeer ( ( int ) var . did )
MessagesController . getInstance ( var ) . processUpdates ( ( TLRPC . Updates ) var , false )
NotificationCenter . getGlobalInstance ( var ) . postNotificationName ( NotificationCenter . liveLocationsChanged )
var = System . currentTimeMillis ( var ) - var + var
var . peer = MessagesController . getInstance ( var ) . getInputPeer ( ( int ) var )
MessagesStorage . getInstance ( var ) . putUsersAndChats ( var . users , var . chats , true , true )
MessagesController . getInstance ( var ) . putUsers ( var . users , false )
MessagesController . getInstance ( var ) . putChats ( var . chats , false )
NotificationCenter . getGlobalInstance ( var ) . postNotificationName ( NotificationCenter . liveLocationsCacheChanged , var , var )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . liveLocationsChanged )
LocationController . getInstance ( var ) . update
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . liveLocationsChanged )
if ( var . isEmpty ( )  )
ArrayList < LocationController . SharingLocationInfo > var = getInfos
TLRPC . User var = MessagesController . getInstance ( var ) . getUser ( var )
TLRPC . Chat var = MessagesController . getInstance ( var ) . getChat ( - var )
var = LocaleController . formatPluralString ( "" , var . size ( ) )
if ( getInfos . isEmpty  )
var . setSmallIcon ( R . drawable . live_loc )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . recordProgressChanged , System . currentTimeMillis ( ) - var , var )
public MediaController
var . order ( ByteOrder . nativeOrder ( ) )
for ( int var = 0 ; var < UserConfig . MAX_ACCOUNT_COUNT ; var ++ )
FileLog . d ( "" )
var = var . get ( var )
VideoPlayer var = ( VideoPlayer ) var [ 0 ]
for ( int var = 0 ; var < UserConfig . MAX_ACCOUNT_COUNT ; var ++ )
return FileLoader . getPathToAttach ( var , true ) . getAbsolutePath
if ( var . writeSampleData ( var , var , var , false ) )
var = var . addTrack ( var , false )
var = var . addTrack ( var , true )
NotificationCenter . getGlobalInstance ( ) . addObserver ( MediaController . this , NotificationCenter . playerDidStartPlaying )
NotificationCenter . getInstance ( var ) . addObserver ( MediaController . this , NotificationCenter . httpFileDidLoaded )
NotificationCenter . getInstance ( var ) . addObserver ( MediaController . this , NotificationCenter . FileDidLoaded )
NotificationCenter . getInstance ( var . currentAccount ) . postNotificationName ( NotificationCenter . audioRouteChanged , var )
var . registerContentObserver ( MediaStore . Images . Media . EXTERNAL_CONTENT_URI , true , new GalleryObserverExternal )
var . registerContentObserver ( MediaStore . Images . Media . INTERNAL_CONTENT_URI , true , new GalleryObserverInternal )
var . registerContentObserver ( MediaStore . Video . Media . EXTERNAL_CONTENT_URI , true , new GalleryObserverExternal )
var . registerContentObserver ( MediaStore . Video . Media . INTERNAL_CONTENT_URI , true , new GalleryObserverInternal )
pauseMessage ( var )
pauseMessage ( var )
if ( isPlayingMessage ( getPlayingMessageObject ) && ! isMessagePaused )
var . setVolume ( var )
if ( var != null && ( var != null || var != null ) && ! var )
var = var . getBufferedPosition ( ) / ( float ) var
if ( var != null != null )
var = var . getDuration ( )
var = var . getBufferedPosition ( ) / ( float ) var
if ( var == C . TIME_UNSET || var < 0 || var != 0 )
NotificationCenter . getInstance ( var . currentAccount ) . postNotificationName ( NotificationCenter . messagePlayingProgressDidChanged , var . getId ( ) , var )
DownloadController . getInstance ( var ) . cleanup
DownloadController . getInstance ( var ) . cleanup
DownloadController . getInstance ( var ) . cleanup
int var
int var = - 1
DownloadController . getInstance ( var ) . cleanup
NotificationCenter . getInstance ( var ) . addObserver ( MediaController . this , NotificationCenter . musicDidLoaded )
return var && ( isRecordingAudio || var != null && ( var . isVoice ( ) || var . isRoundVideo ( ) ) )
NotificationCenter . getInstance ( var ) . addObserver ( MediaController . this , NotificationCenter . removeAllMessagesFromDialog )
return var && ( isRecordingAudio || var != null && ( var . isVoice ( ) || var . isRoundVideo ( ) ) )
NotificationCenter . getInstance ( var ) . addObserver ( MediaController . this , NotificationCenter . messagesDeleted )
NotificationCenter . getInstance ( var ) . addObserver ( MediaController . this , NotificationCenter . didReceivedNewMessages )
return var && ( isRecordingAudio || var != null && ( var . isVoice ( ) || var . isRoundVideo ( ) ) )
NotificationCenter . getInstance ( var ) . addObserver ( MediaController . this , NotificationCenter . httpFileDidLoaded )
NotificationCenter . getInstance ( var ) . addObserver ( MediaController . this , NotificationCenter . FileDidLoaded )
return var && ( isRecordingAudio || var != null && ( var . isVoice ( ) || var . isRoundVideo ( ) ) )
return var && ( isRecordingAudio || var != null && ( var . isVoice ( ) || var . isRoundVideo ( ) ) )
return var && ( isRecordingAudio || var != null && ( var . isVoice ( ) || var . isRoundVideo ( ) ) )
return var && ( isRecordingAudio || var != null && ( var . isVoice ( ) || var . isRoundVideo ( ) ) )
int var = - 1
if ( var == null && var == null || var == null || var == null || ! isSamePlayingMessage ( var ) )
if ( var == null && var == null || var == null || var == null || ! isSamePlayingMessage ( var ) )
long var = var . getDuration ( )
return FileLoader . getAttachFileName ( var )
NotificationCenter . getInstance ( var . currentAccount ) . postNotificationName ( NotificationCenter . FileDidLoaded , FileLoader . getAttachFileName ( var . getDocument ( ) ) . getDocument ( ) )
var = var
if ( var && SharedConfig . repeatMode == 2 && ! var )
if ( var && SharedConfig . repeatMode == 2 && ! var )
MessageObject var = var . get ( var )
var . audioProgress = 0
var . audioProgress = 0
var . audioProgressSec = 0
if ( var && var && SharedConfig . repeatMode == 0 && ! var )
if ( var != null || var != null )
var . releasePlayer ( )
if ( var != null )
var . resetPlayingProgress ( )
if ( var == null || ! var . isMusic ( ) )
if ( var == null || ! var . isMusic ( ) )
checkIsNextMusicFileDownloaded ( var . currentAccount )
ApplicationLoader . applicationContext . getContentResolver ( ) . registerContentObserver ( MediaStore . Images . Media . INTERNAL_CONTENT_URI , false , var = new InternalObserver )
ApplicationLoader . applicationContext . getContentResolver ( ) . registerContentObserver ( Uri . parse ( "" ) , false , var = new SmsObserver )
ApplicationLoader . applicationContext . getContentResolver ( ) . unregisterContentObserver ( var )
var = new StopMediaObserverRunnable
var = ApplicationLoader . applicationContext . getContentResolver ( ) . query ( var , var , null , null , "" )
if ( var != null && var . toLowerCase ( ) . contains ( "" ) || var != null && var . toLowerCase ( ) . contains ( "" ) || var != null && var . toLowerCase ( ) . contains ( "" ) || var != null && var . toLowerCase ( ) . contains ( "" ) )
startRecording ( var . getCurrentAccount ( ) , var . getDialogId ( ) , null )
var . getParentActivity ( ) . getWindow . setFlags ( WindowManager . LayoutParams . FLAG_SECURE , WindowManager . LayoutParams . FLAG_SECURE )
var . getParentActivity ( ) . getWindow . setFlags ( WindowManager . LayoutParams . FLAG_SECURE , WindowManager . LayoutParams . FLAG_SECURE )
if ( var == var )
var . getParentActivity ( ) . getWindow . clearFlags ( WindowManager . LayoutParams . FLAG_SECURE )
var . getParentActivity ( ) . getWindow . clearFlags ( WindowManager . LayoutParams . FLAG_SECURE )
if ( var && var != null && var . currentAccount == var )
String var = FileLoader . getAttachFileName ( var . getDocument ( ) )
if ( ! var . mediaExists && var != var )
for ( int var = 0 ; var < var . size ( ) ; var ++ )
MessageObject var = var . get ( var )
if ( var == NotificationCenter . playerDidStartPlaying )
VideoPlayer var = ( VideoPlayer ) var [ 0 ]
SendMessagesHelper . getInstance ( var ) . sendMessage ( var , null , var . getAbsolutePath ( ) , var , var , null , null , null , null , 0 )
for ( int var = 0 ; var < UserConfig . MAX_ACCOUNT_COUNT ; var ++ )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . albumsDidLoaded , var , var , var , var )
long var = var . getDuration ( )
if ( ! MediaController . getInstance ( ) . isCurrentPlayer ( var ) )
TLRPC . Document var = var . getDocument ( )
MediaController . getInstance ( ) . pauseMessage ( MediaController . getInstance ( ) . getPlayingMessageObject )
MediaController . getInstance ( ) . pauseMessage ( MediaController . getInstance ( ) . getPlayingMessageObject )
MessagesController . getInstance ( var . currentAccount ) . markMessageContentAsRead ( var )
for ( int var = 0 ; var < var . size ( ) ; var ++ )
var = var
if ( var == var = null )
var = null
ByteBuffer var = null
var . setPlaybackSpeed ( var )
var = var . addTrack ( var , true )
var . setPlaybackSpeed ( var )
if ( ! var || VoIPService . getSharedInstance ( ) != null )
if ( var && var == 0 && ( var == 0 || var == var ) )
if ( ! var ++ )
if ( var != 0 && var != var )
if ( var == var && var )
if ( ! var ++ )
FileLog . d ( "" )
FileLog . d ( "" )
if ( ! var . playFirstUnreadVoiceMessage ( ) )
startRecording ( var . getCurrentAccount ( ) , var . getDialogId ( ) , null )
FileLog . d ( "" )
if ( var != null && ! ApplicationLoader . mainInterfacePaused && ( var . isVoice ( ) || var . isRoundVideo ( ) ) )
FileLog . d ( "" )
FileLog . d ( "" )
if ( var && var != null && var . isHeld ( ) )
FileLog . d ( "" )
if ( var != 0 && var == var && Math . abs ( System . currentTimeMillis ( ) - var ) > 1000 )
AudioManager var = NotificationsController . var
startRecording ( var . getCurrentAccount ( ) , var . getDialogId ( ) , null )
NotificationCenter . getInstance ( var . currentAccount ) . postNotificationName ( NotificationCenter . audioRouteChanged , var )
if ( ! SharedConfig . raiseToSpeak && ( var == null || ! var . isVoice ( ) && ! var . isRoundVideo ( ) ) )
if ( var && var != null && var . isHeld ( ) )
if ( var != null )
var = null
var . releasePlayer ( )
var . releasePlayer ( )
var . getWindow ( ) . clearFlags ( WindowManager . LayoutParams . FLAG_KEEP_SCREEN_ON )
FileLoader . getInstance ( var . currentAccount ) . cancelLoadFile ( var . getDocument ( ) )
var . resetPlayingProgress ( )
NotificationCenter . getInstance ( var . currentAccount ) . postNotificationName ( NotificationCenter . messagePlayingProgressDidChanged , var . getId ( ) , 0 )
NotificationsController . audioManager . abandonAudioFocus ( this )
if ( var && ( var = var . indexOf ( var ) ) >= 0 )
var . remove ( var )
if ( var != null && var < var . size ( ) )
if ( ! var . isRoundVideo ( ) && var != null )
if ( ( var . isVoice ( ) || var . isRoundVideo ( ) ) && var . getId ( ) != 0 )
NotificationCenter . getInstance ( var . currentAccount ) . postNotificationName ( NotificationCenter . messagePlayingDidReset , var . getId ( ) , var )
if ( ! var && ! SharedConfig . raiseToSpeak )
long var = var . getDuration ( )
ArrayList < MessageObject > var = new ArrayList ( var )
var = ! var . isEmpty ( )
if ( var . isMusic ( ) )
DataQuery . getInstance ( var . currentAccount ) . var ( var . getDialogId ( ) , var . get ( 0 ) . getIdWithChannel )
NotificationCenter . getInstance ( var . currentAccount ) . postNotificationName ( NotificationCenter . messagePlayingProgressDidChanged , var . getId ( ) , 0 )
NotificationCenter . getInstance ( var . currentAccount ) . postNotificationName ( NotificationCenter . messagePlayingPlayStateChanged , var . getId ( ) )
if ( var . isEmpty ( ) || var < 0 || var >= var . size ( ) )
seekToProgress ( var , 0 )
if ( var == null || var . size ( ) < 2 )
FileLoader . getInstance ( var ) . loadFile ( var . getDocument ( ) , false , 0 )
if ( ( DownloadController . getInstance ( var ) . getCurrentDownloadMask & DownloadController . AUTODOWNLOAD_MASK_MUSIC ) == 0 )
if ( ! DownloadController . getInstance ( var ) . canDownloadMedia ( var ) )
FileLoader . getInstance ( var ) . loadFile ( var . getDocument ( ) , false , 0 )
var = new SparseArray
var = NotificationsController . audioManager . requestAudioFocus ( this , AudioManager . STREAM_VOICE_CALL , AudioManager . AUDIOFOCUS_GAIN )
if ( ! SharedConfig . raiseToSpeak )
if ( ! var . isOut ( ) && var . isContentUnread ( ) )
MessagesController . getInstance ( var . currentAccount ) . markMessageContentAsRead ( var )
if ( var != null )
if ( var . messageOwner . attachPath != null && var . messageOwner . attachPath . var ( ) > 0 )
if ( ! var . exists ( ) || AndroidUtilities . isInternalUri ( Uri . fromFile ( var ) ) = null )
FileLoader . getInstance ( var . currentAccount ) . loadFile ( var . getDocument ( ) , false , 0 )
if ( var . isMusic ( ) )
NotificationCenter . getInstance ( var . currentAccount ) . postNotificationName ( NotificationCenter . messagePlayingPlayStateChanged , var . getId ( ) )
NotificationCenter . getInstance ( var . currentAccount ) . postNotificationName ( NotificationCenter . FileDidLoaded , FileLoader . getAttachFileName ( var . getDocument ( ) ) . getDocument ( ) )
var . preparePlayer ( Uri . fromFile ( var ) , "" )
TLRPC . Document var = var . getDocument ( )
var = MessagesController . getGlobalMainSettings ( ) . getFloat ( "" , 1.0f )
var . releasePlayer ( )
Uri var = Uri . parse ( "" + var . getFileName ( ) + var )
var . play ( )
if ( var . isVoice ( ) )
if ( var != null != null )
if ( ! SharedConfig . raiseToSpeak )
NotificationCenter . getInstance ( var . currentAccount ) . postNotificationName ( NotificationCenter . messagePlayingDidStarted , var )
NotificationCenter . getInstance ( var . currentAccount ) . postNotificationName ( NotificationCenter . messagePlayingProgressDidChanged , var . getId ( ) , 0 )
long var = var . getDuration ( )
checkIsNextMusicFileDownloaded ( var . currentAccount )
checkIsNextVoiceFileDownloaded ( var . currentAccount )
NotificationCenter . getInstance ( var . currentAccount ) . postNotificationName ( NotificationCenter . messagePlayingProgressDidChanged , var . getId ( ) , 0 )
if ( var == C . TIME_UNSET )
var = ( long ) var . getDuration ( ) * 1000
if ( var == C . TIME_UNSET )
var = ( long ) var . getDuration ( ) * 1000
var . var ( var )
var . resetPlayingProgress ( )
if ( var . isMusic ( ) )
if ( var == null && var == null || var == null )
var . pause ( )
var . releasePlayer ( )
boolean var = SharedConfig . shuffleMusic
if ( var != SharedConfig . shuffleMusic )
var . clear ( )
if ( var == null && var == null || var == null || var == null || ! isSamePlayingMessage ( var ) )
NotificationCenter . getInstance ( var . currentAccount ) . postNotificationName ( NotificationCenter . messagePlayingPlayStateChanged , var . getId ( ) )
if ( var == null && var == null || var == null || var == null || ! isSamePlayingMessage ( var ) )
var . play ( )
NotificationCenter . getInstance ( var . currentAccount ) . postNotificationName ( NotificationCenter . messagePlayingPlayStateChanged , var . getId ( ) )
if ( var == null && var == null || var == null || var == null )
var . performHapticFeedback ( HapticFeedbackConstants . KEYBOARD_TAP , HapticFeedbackConstants . FLAG_IGNORE_GLOBAL_SETTING )
var . id = SharedConfig . getLastLocalId ( )
var . user_id = UserConfig . getInstance ( var ) . getClientUserId
var . user_id = UserConfig . getInstance ( var ) . getClientUserId
SharedConfig . saveConfig ( )
var . delete ( )
final String var = FileLoader . getPathToMessage ( var . messageOwner ) . getAbsolutePath
final byte var = getWaveform ( var )
MessagesStorage . getInstance ( var . currentAccount ) . putMessages ( var , var . getDialogId ( ) , - 1 , 0 , false )
NotificationCenter . getInstance ( var . currentAccount ) . postNotificationName ( NotificationCenter . replaceMessagesObjects , var . getDialogId ( ) , var )
var . date = ConnectionsManager . getInstance ( var ) . getCurrentTime
SendMessagesHelper . getInstance ( var ) . sendMessage ( var , null , var . getAbsolutePath ( ) , var , var , null , null , null , null , 0 )
var . performHapticFeedback ( HapticFeedbackConstants . KEYBOARD_TAP , HapticFeedbackConstants . FLAG_IGNORE_GLOBAL_SETTING )
if ( var != null && var . var ( ) != 0 )
if ( ! var = null )
long var = var . var ( )
String var = FileLoader . fixFileName ( getFileName ( var ) )
int var = SharedConfig . getLastLocalId ( )
SharedConfig . saveConfig ( )
var = var
File var = new File ( var )
if ( var . getId ( ) == var . getId ( ) && var . currentAccount == var . currentAccount )
if ( var . getId ( ) == var . getId ( ) && var . currentAccount == var . currentAccount )
if ( var . getId ( ) == var . getId ( ) && var . currentAccount == var . currentAccount )
SparseArray < AlbumEntry > var = new SparseArray
SparseArray < AlbumEntry > var = new SparseArray
var = MediaStore . Images . Media . query ( ApplicationLoader . applicationContext . getContentResolver ( ) , MediaStore . Video . Media . EXTERNAL_CONTENT_URI , var , null , null , MediaStore . Video . Media . DATE_TAKEN + "" )
if ( var == null )
if ( ! var . isEmpty ( ) )
if ( ! var . isEmpty ( ) )
if ( var . getId ( ) != 0 )
if ( ! var . equals ( "" ) . equals ( "" ) )
if ( var . equals ( "" ) )
NotificationCenter . getInstance ( var . currentAccount ) . postNotificationName ( NotificationCenter . FilePreparingFailed , var , var . toString ( ) )
NotificationCenter . getInstance ( var . currentAccount ) . postNotificationName ( NotificationCenter . FilePreparingStarted , var , var . toString ( ) )
int var = findTrack ( var , false )
if ( var >= 0 || var >= 0 )
if ( var == var && var > 0 && var == - 1 )
if ( var != 0 && var != 0 )
var = new MP4Builder . createMovie ( var , var )
if ( var != var || var != var || var != 0 || var . videoEditedInfo . roundVideo )
int var = findTrack ( var , false )
if ( Build . VERSION . SDK_INT < 18 )
FileLog . d ( "" + var . getName ( ) + "" + var + "" + Build . MODEL )
FileLog . d ( "" + var )
var . configure ( var , var . getSurface ( ) , null , 0 )
FileLog . d ( "" + var )
if ( var . presentationTimeUs < var )
FileLog . d ( "" + var + "" + var . presentationTimeUs )
if ( var >= 0 )
FileLog . d ( "" )
FileLog . d ( "" )
FileLog . d ( "" + ( System . currentTimeMillis ( ) - var ) )
public MessageObject ( int var , TLRPC . Message var , AbstractMap < Integer , TLRPC . User > , TLRPC . User var , AbstractMap < Integer , TLRPC . Chat > , TLRPC . Chat var , SparseArray < TLRPC . User > . User var , SparseArray < TLRPC . Chat > . Chat var , boolean var , long var )
var = new MessageObject ( var , var . replyMessage , var , var , var , var , false , var )
if ( var != null != null )
var = MessagesController . getInstance ( var ) . getUser ( var . from_id )
if ( var != null != null )
var = MessagesController . getInstance ( var ) . getUser ( var . action . user_id )
if ( var . action . user_id == UserConfig . getInstance ( var ) . getClientUserId )
if ( var != null != null )
var = MessagesController . getInstance ( var ) . getUser ( var )
if ( var == UserConfig . getInstance ( var ) . getClientUserId )
if ( var == UserConfig . getInstance ( var ) . getClientUserId )
var = replaceWithLink ( LocaleController . getString ( "" , R . string . ActionYouAddUser ) , R . string . ActionYouAddUser , "" , var . action . var , var , var )
var = replaceWithLink ( LocaleController . getString ( "" , R . string . ActionAddUser ) , R . string . ActionAddUser , "" , var . action . var , var , var )
TLRPC . User var = UserConfig . getInstance ( var ) . getCurrentUser
if ( var != null != null )
var = MessagesController . getInstance ( var ) . getUser ( var . to_id . user_id )
if ( var . from_id == UserConfig . getInstance ( var ) . getClientUserId )
if ( var != null != null )
var = MessagesController . getInstance ( var ) . getUser ( var )
var = var
createMessageSendInfo
MessageObject var = new MessageObject ( var , var , false )
public MessageObject ( int var , TLRPC . TL_channelAdminLogEvent var , ArrayList < MessageObject > var , HashMap < String , ArrayList < MessageObject > > , ArrayList < MessageObject > var , TLRPC . Chat var , int var )
var = MessagesController . getInstance ( var ) . getUser ( var . user_id )
TLRPC . User var = MessagesController . getInstance ( var ) . getUser ( var . action . participant . user_id )
TLRPC . User var = MessagesController . getInstance ( var ) . getUser ( var . action . prev_participant . user_id )
TLRPC . User var = MessagesController . getInstance ( var ) . getUser ( var . action . prev_participant . user_id )
var . var = "" + MessagesController . getInstance ( var ) . linkPrefix + "" + var
var . media . webpage . description = "" + MessagesController . getInstance ( var ) . linkPrefix + "" + ( ( TLRPC . TL_channelAdminLogEventActionChangeUsername ) var . action ) . prev_value
if ( var . media != null && ! ( var . media instanceof TLRPC . TL_messageMediaEmpty ) && ! ( var . media instanceof TLRPC . TL_messageMediaWebPage ) )
if ( TextUtils . isEmpty ( var . var ) )
var . media . webpage . description = var . var
MessageObject var = new MessageObject ( var , var , null , null , true , var )
createDateArray ( var , var , var , var )
createDateArray ( var , var , var , var )
if ( ! var . parseString ( var ) = null )
var = MessagesController . getInstance ( var ) . getUser ( var . from_id )
if ( var != null && var . id == UserConfig . getInstance ( var ) . getClientUserId )
if ( var != null && var . id == UserConfig . getInstance ( var ) . getClientUserId )
var = MessagesController . getInstance ( var ) . getUser ( ( int ) getDialogId )
var = MessagesController . getInstance ( var ) . getChat ( var . to_id . channel_id )
TLRPC . WebDocument var = ( ( TLRPC . TL_messageMediaInvoice ) var . media ) . var
if ( var != null != null )
var = MessagesController . getInstance ( var ) . getUser ( var . get ( var ) )
if ( ( var == '@' || var == '#' || var == '/' || var == '$' ) && var == 0 || var != 0 && ( var . charAt ( var - 1 ) == ' ' || var . charAt ( var - 1 ) == '\n' ) )
var = Emoji . replaceEmoji ( var . message , Theme . chat_msgTextPaint . getFontMetricsInt ( ) , AndroidUtilities . dp ( 20 ) , false )
if ( var != '@' && var != '#' && var != '/' && var != '$' ++ )
if ( var . length ( ) < 1000 )
if ( var instanceof Spannable && var . length ( ) < 1000 )
int var = var . size ( )
if ( var . offset + var . length > var . length ( ) )
if ( ! var || var instanceof TLRPC . TL_messageEntityBold || var instanceof TLRPC . TL_messageEntityItalic || var instanceof TLRPC . TL_messageEntityCode || var instanceof TLRPC . TL_messageEntityPre || var instanceof TLRPC . TL_messageEntityMentionName || var instanceof TLRPC . TL_inputMessageEntityMentionName )
var . setSpan ( new URLSpanMono ( var , var . offset , var . offset + var . length , var ) , var . offset , var . offset + var . length , var , var . offset , var . offset + var . length , Spanned . SPAN_EXCLUSIVE_EXCLUSIVE )
var . setSpan ( new URLSpanUserMention ( "" + ( ( TLRPC . TL_messageEntityMentionName ) var ) . user_id , var ) + ( ( TLRPC . TL_messageEntityMentionName ) var ) . user_id , var , var . offset , var . offset + var . length , Spanned . SPAN_EXCLUSIVE_EXCLUSIVE )
var . setSpan ( new URLSpanUserMention ( "" + ( ( TLRPC . TL_inputMessageEntityMentionName ) var ) . user_id . user_id , var ) + ( ( TLRPC . TL_inputMessageEntityMentionName ) var ) . user_id . user_id , var , var . offset , var . offset + var . length , Spanned . SPAN_EXCLUSIVE_EXCLUSIVE )
var . setSpan ( new URLSpanBotCommand ( var , var ) , var , var . offset , var . offset + var . length , Spanned . SPAN_EXCLUSIVE_EXCLUSIVE )
if ( var instanceof TLRPC . TL_messageEntityHashtag || ( var && var instanceof TLRPC . TL_messageEntityMention ) || var instanceof TLRPC . TL_messageEntityCashtag )
var . setSpan ( new URLSpanBrowser ( "" + var ) + var , var . offset , var . offset + var . length , Spanned . SPAN_EXCLUSIVE_EXCLUSIVE )
if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . N )
if ( var == 0 && var >= 0 = var )
int var = UserConfig . getInstance ( var ) . getClientUserId
TLRPC . Chat var = MessagesController . getInstance ( var ) . getChat ( var . fwd_from . saved_from_peer . channel_id )
var = Math . max ( 0 , var . destroyTime - ConnectionsManager . getInstance ( var ) . getCurrentTime )
return var != null && ! isGifDocument ( var ) && var . mime_type . startsWith ( "" )
if ( isOutOwner || var . fwd_from != null && var . fwd_from . from_id == UserConfig . getInstance ( var ) . getClientUserId )
var = MessagesController . getInstance ( var ) . getChat ( var . fwd_from . channel_id )
var = MessagesController . getInstance ( var ) . getUser ( var . fwd_from . from_id )
var = MessagesController . getInstance ( var ) . getChat ( - var . from_id )
var = MessagesController . getInstance ( var ) . getUser ( var . from_id )
return ( var . flags & TLRPC . MESSAGE_FLAG_FWD ) != 0 && var . fwd_from != null && var . fwd_from . saved_from_peer == null && UserConfig . getInstance ( var ) . getClientUserId != getDialogId
return canEditMessageAnytime ( var , var , var )
var = MessagesController . getInstance ( var ) . getChat ( var . to_id . channel_id )
var = MessagesController . getInstance ( var ) . getChat ( var . to_id . channel_id )
if ( Math . abs ( var . date - ConnectionsManager . getInstance ( var ) . getCurrentTime ) > MessagesController . getInstance ( var ) . maxEditTime )
return ( var . out || var . from_id == UserConfig . getInstance ( var ) . getClientUserId ) && ( var . media instanceof TLRPC . TL_messageMediaPhoto || var . media instanceof TLRPC . TL_messageMediaDocument && ! isStickerMessage ( var ) || var . media instanceof TLRPC . TL_messageMediaEmpty || var . media instanceof TLRPC . TL_messageMediaWebPage || var . media == null )
var = MessagesController . getInstance ( UserConfig . selectedAccount ) . getChat ( var . to_id . channel_id )
TLRPC . Chat var = MessagesController . getInstance ( var ) . getChat ( var . fwd_from . channel_id )
TLRPC . User var = MessagesController . getInstance ( var ) . getUser ( var . fwd_from . from_id )
if ( needDrawBluredPreview )
TLRPC . DraftMessage var = DataQuery . getInstance ( currentAccount ) . getDraft ( var . id )
var = DataQuery . getInstance ( currentAccount ) . getDraft ( var . id )
return AndroidUtilities . compare ( getUpdateQts ( var ) , getUpdateQts ( var ) )
var = var [ var ]
var [ var ] = var = new MessagesController ( var )
public MessagesController ( int var )
MessagesStorage . getInstance ( var )
LocationController . getInstance ( var )
MessagesController var = getInstance ( var )
NotificationCenter . getInstance ( var ) . addObserver ( var , NotificationCenter . FileDidUpload )
NotificationCenter . getInstance ( var ) . addObserver ( var , NotificationCenter . FileDidFailUpload )
NotificationCenter . getInstance ( var ) . addObserver ( var , NotificationCenter . FileDidLoaded )
NotificationCenter . getInstance ( var ) . addObserver ( var , NotificationCenter . FileDidFailedLoad )
NotificationCenter . getInstance ( var ) . addObserver ( var , NotificationCenter . messageReceivedByServer )
NotificationCenter . getInstance ( var ) . addObserver ( var , NotificationCenter . updateMessageMedia )
var = ApplicationLoader . applicationContext . getSharedPreferences ( "" + var , Activity . MODE_PRIVATE )
var = ApplicationLoader . applicationContext . getSharedPreferences ( "" + var , Activity . MODE_PRIVATE )
LocaleController . getInstance ( ) . loadRemoteLanguages ( var )
var = var . caption_length_max
var = var . preload_featured_stickers
String var = var . static_maps_provider . split ( "" )
var . putInt ( "" , var )
var . putBoolean ( "" , var )
var . putString ( "" , var )
var . putInt ( "" , var )
TLRPC . Chat var = var . var . get ( var )
TLRPC . Chat var = var . get ( var . var . chat_id )
var . peers . add ( var )
var . remove ( var . id )
var . remove ( var . id )
if ( var . id == UserConfig . getInstance ( var ) . getClientUserId )
TLRPC . User var = getInstance ( UserConfig . selectedAccount ) . getUser ( var )
return getInputChannel ( getChat ( var ) )
TLRPC . Chat var = getChat ( - var )
TLRPC . User var = getUser ( var )
TLRPC . Chat var = getChat ( - var )
TLRPC . User var = getUser ( var )
TLRPC . User var = getUser ( UserConfig . getInstance ( var ) . getClientUserId )
var = UserConfig . getInstance ( var ) . getCurrentUser
UserConfig . getInstance ( var ) . setCurrentUser ( var )
MessagesStorage . getInstance ( var ) . clearUserPhotos ( var . var )
MessagesStorage . getInstance ( var ) . putUsersAndChats ( var , null , false , true )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . updateInterfaces , var )
UserConfig . getInstance ( var ) . saveConfig ( true )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . dialogsNeedReload )
var . remove ( var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . notificationsSettingsUpdated )
ContactsController . getInstance ( var ) . cleanup
NotificationsController . getInstance ( var ) . cleanup
SendMessagesHelper . getInstance ( var ) . cleanup
SecretChatHelper . getInstance ( var ) . cleanup
LocationController . getInstance ( var ) . cleanup
DataQuery . getInstance ( var ) . cleanup
var . clear ( ) . commit
var . clear ( )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . dialogsNeedReload )
MessagesStorage . getInstance ( var ) . getEncryptedChat ( var , var , var )
var . await ( )
if ( var . id == UserConfig . getInstance ( var ) . getClientUserId )
UserConfig . getInstance ( var ) . setCurrentUser ( var )
UserConfig . getInstance ( var ) . saveConfig ( true )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . updateInterfaces , var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . channelRightsUpdated , var )
MessagesStorage . getInstance ( var ) . putChannelAdmins ( var , var )
MessagesStorage . getInstance ( var ) . putUsersAndChats ( var . var , var . var , true , true )
MessagesStorage . getInstance ( var ) . updateChatInfo ( var . full_chat , false )
DataQuery . getInstance ( var ) . putBotInfo ( var )
DataQuery . getInstance ( var ) . getGroupStickerSetById ( var . full_chat . stickerset )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . chatInfoDidLoaded , var . full_chat , var , false , null )
ConnectionsManager . getInstance ( var ) . bindRequestToGuid ( var , var )
DataQuery . getInstance ( var ) . putBotInfo ( var . bot_info )
MessagesStorage . getInstance ( var ) . putUsersAndChats ( var , null , false , true )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . updateInterfaces , var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . botInfoDidLoaded , var . bot_info , var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . userInfoDidLoaded , var . id , var )
ConnectionsManager . getInstance ( var ) . bindRequestToGuid ( var , var )
final TLRPC . Chat var = ChatObject . getChatByDialog ( var , var )
final SparseArray < TLRPC . User > var = new SparseArray
final SparseArray < TLRPC . Chat > var = new SparseArray
var . add ( new MessageObject ( var , var , var , var , true ) , var , var , var , true )
MessagesStorage . getInstance ( var ) . putMessages ( var , var , - 1 , 0 , false )
var . remove ( var . getId ( ) )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . dialogsNeedReload )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . replaceMessagesObjects , var , var )
var . peer = getInputPeer ( var . id )
var . peer = getInputPeer ( - var . id )
if ( var != null )
var . peer = getInputPeer ( - var . id )
if ( var != null != null )
var . peer = getInputPeer ( var . id )
if ( var . indexOfKey ( var ) >= 0 )
if ( var != null )
var . peer = getInputPeer ( var . id )
if ( var != null != null )
var . peer = getInputPeer ( - var . id )
var . peer = getInputPeer ( var . id )
var . peer = getInputPeer ( - var . id )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . peerSettingsDidLoaded , var )
FileLog . d ( "" + var + "" + var + "" + var )
int var = var . get ( var )
if ( var == 0 )
var = MessagesStorage . getInstance ( var ) . getChannelPtsSync ( var )
FileLog . d ( "" )
MessagesStorage . getInstance ( var ) . saveChannelPts ( var , var )
long var = var . get ( var )
boolean var = var . get ( var )
if ( var || var == 0 || Math . abs ( System . currentTimeMillis ( ) - var ) <= 1500 )
FileLog . d ( "" + var + "" + var )
if ( var == 0 )
FileLog . d ( "" + var + "" + var + "" + var + "" + var )
if ( MessagesStorage . getInstance ( var ) . getLastPtsValue + var == var . getInstance ( var ) . getLastPtsValue != var )
FileLog . d ( "" )
MessagesStorage . getInstance ( var ) . setLastPtsValue ( var )
MessagesStorage . getInstance ( var ) . saveDiffParams ( MessagesStorage . getInstance ( var ) . getLastSeqValue , MessagesStorage . getInstance ( var ) . getLastPtsValue , MessagesStorage . getInstance ( var ) . getLastDateValue , MessagesStorage . getInstance ( var ) . getLastQtsValue )
if ( MessagesStorage . getInstance ( var ) . getLastPtsValue != var )
FileLog . d ( "" + var + "" + var )
if ( MessagesStorage . getInstance ( var ) . getLastSeqValue + 1 == var . getInstance ( var ) . getLastSeqValue != var )
FileLog . d ( "" )
MessagesStorage . getInstance ( var ) . setLastSeqValue ( var )
MessagesStorage . getInstance ( var ) . setLastDateValue ( var )
if ( MessagesStorage . getInstance ( var ) . getLastSeqValue != var )
FileLog . d ( "" + var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . didCreatedNewDeleteTask , var )
MessagesStorage . getInstance ( var ) . getNewTask ( var , var )
MessagesStorage . getInstance ( var ) . getDialogPhotos ( var , var , var , var )
ConnectionsManager . getInstance ( var ) . bindRequestToGuid ( var , var )
var . peer = getInputPeer ( var )
ConnectionsManager . getInstance ( var ) . bindRequestToGuid ( var , var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . blockedUsersDidLoaded )
MessagesStorage . getInstance ( var ) . putBlockedUsers ( var , false )
var . channel = getInputChannel ( var )
var . user_id = getInputUser ( var )
processUpdates ( ( TLRPC . Updates ) var , false )
loadFullChat ( var , 0 , true )
AlertsCreator . processError ( var , var , var , var , ! var )
var . channel = getInputChannel ( var )
var . user_id = getInputUser ( var )
processUpdates ( ( TLRPC . Updates ) var , false )
loadFullChat ( var , 0 , true )
AlertsCreator . processError ( var , var , var , var , ! var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . blockedUsersDidLoaded )
MessagesStorage . getInstance ( var ) . deleteBlockedUser ( var . id )
if ( ! UserConfig . getInstance ( var ) . isClientActivated || var )
MessagesStorage . getInstance ( var ) . putUsersAndChats ( var . var , null , true , true )
MessagesStorage . getInstance ( var ) . putBlockedUsers ( var , true )
if ( var . isEmpty ( ) && var && ! UserConfig . getInstance ( var ) . blockedUsersLoaded var )
UserConfig . getInstance ( var ) . blockedUsersLoaded = true
UserConfig . getInstance ( var ) . saveConfig ( false )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . blockedUsersDidLoaded )
UserConfig . getInstance ( var ) . getCurrentUser . var = new TLRPC . TL_userProfilePhotoEmpty ( )
TLRPC . User var = getUser ( UserConfig . getInstance ( var ) . getClientUserId )
var = UserConfig . getInstance ( var ) . getCurrentUser
var . var = UserConfig . getInstance ( var ) . getCurrentUser . var
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . mainUserInfoChanged )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . updateInterfaces , var )
TLRPC . User var = getUser ( UserConfig . getInstance ( var ) . getClientUserId )
var = UserConfig . getInstance ( var ) . getCurrentUser
UserConfig . getInstance ( var ) . setCurrentUser ( var )
MessagesStorage . getInstance ( var ) . clearUserPhotos ( var . id )
MessagesStorage . getInstance ( var ) . putUsersAndChats ( var , null , false , true )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . mainUserInfoChanged )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . updateInterfaces , var )
UserConfig . getInstance ( var ) . saveConfig ( true )
MessagesStorage . getInstance ( var ) . putUsersAndChats ( var . var , null , true , true )
MessagesStorage . getInstance ( var ) . putDialogPhotos ( var , var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . dialogPhotosLoaded , var , var , var , var , var . photos )
var = FileLoader . getDirectory ( FileLoader . MEDIA_DIR_CACHE ) + "" + var . location . volume_id + "" + var . location . local_id + ""
FileLoader . getInstance ( var ) . uploadFile ( var , false , true , ConnectionsManager . FileTypePhoto )
MessagesStorage . getInstance ( var ) . markMessagesAsDeleted ( var , true , var )
MessagesStorage . getInstance ( var ) . updateDialogsWithDeletedMessages ( var , null , true , var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . messagesDeleted , var , var )
var = MessagesStorage . getInstance ( var ) . createPendingTask ( var )
SecretChatHelper . getInstance ( var ) . sendMessagesDeleteMessage ( var , var , null )
MessagesStorage . getInstance ( var ) . deleteUserChannelHistory ( var . id , var . id )
MessagesStorage . getInstance ( var ) . deleteDialog ( var , var )
DataQuery . getInstance ( var ) . uninstallShortcut ( var )
MessagesStorage . getInstance ( var ) . deleteDialog ( var , var )
var . delete ( - ( int ) var )
MessageObject var = var . get ( var . id )
var = var . get ( var . top_message )
var . out = UserConfig . getInstance ( var ) . getClientUserId == var
var . from_id = UserConfig . getInstance ( var ) . getClientUserId
final MessageObject var = new MessageObject ( var , var , var . contains ( var . dialog_id ) . dialog_id )
MessagesStorage . getInstance ( var ) . putMessages ( var , false , true , false , 0 )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . dialogsNeedReload )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . removeAllMessagesFromDialog , var , false )
NotificationsController . getInstance ( var ) . removeNotificationsForDialog ( var )
SecretChatHelper . getInstance ( var ) . sendClearHistoryMessage ( getEncryptedChat ( var ) , null )
MessagesStorage . getInstance ( var ) . putUsersAndChats ( var . var , null , true , true )
MessagesStorage . getInstance ( var ) . updateChannelUsers ( var , var . participants )
MessagesStorage . getInstance ( var ) . loadChatInfo ( var , var , var , false )
DataQuery . getInstance ( var ) . getGroupStickerSetById ( var . stickerset )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . chatInfoDidLoaded , var , 0 , var , var )
if ( UserConfig . getInstance ( var ) . isClientActivated )
if ( ConnectionsManager . getInstance ( var ) . getPauseTime == 0 && ApplicationLoader . isScreenOn && ! ApplicationLoader . mainInterfacePausedStageQueue != 2 && ! var && Math . abs ( System . currentTimeMillis ( ) - ConnectionsManager . getInstance ( var ) . getPauseTime ) >= 2000 )
ConnectionsManager . getInstance ( var ) . cancelRequest ( var , true )
if ( var != 2 && ! var && Math . abs ( System . currentTimeMillis ( ) - ConnectionsManager . getInstance ( var ) . getPauseTime ) >= 2000 )
ConnectionsManager . getInstance ( var ) . cancelRequest ( var , true )
if ( var . size ( ) != 0 )
var = new ArrayList
int var = var . keyAt ( var )
long var = var . valueAt ( var )
if ( var + 1500 < var )
FileLog . d ( "" + var + "" )
FileLog . d ( var + "" )
var . id = var . valueAt ( var )
MessagesStorage . getInstance ( var ) . putChannelViews ( var , var . peer instanceof TLRPC . TL_inputPeerChannel )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . didUpdatedMessagesViews , var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . updateInterfaces , var )
int var = var . valueAt ( var )
long var = var . get ( var )
if ( var == null || var . isEmpty ( ) )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . updateInterfaces , var )
LocationController . getInstance ( var ) . update
final LongSparseArray < CharSequence > var = new LongSparseArray
final LongSparseArray < Integer > var = new LongSparseArray
LongSparseArray < Boolean > var = var . get ( var )
LongSparseArray < Boolean > var = var . get ( var )
var = new LongSparseArray
LongSparseArray < Boolean > var = var . get ( var )
ConnectionsManager . getInstance ( var ) . bindRequestToGuid ( var , var )
LongSparseArray < Boolean > var = var . get ( var )
ConnectionsManager . getInstance ( var ) . bindRequestToGuid ( var , var )
FileLog . d ( "" + var + "" + var + "" + var + "" + var + "" + var + "" + var + "" + var + "" + var + "" + var + "" + var + "" + var + "" + var + "" + var )
MessagesStorage . getInstance ( var ) . getMessages ( var , var , var , var , var , var , var , var , var )
ConnectionsManager . getInstance ( var ) . bindRequestToGuid ( var , var )
MessagesStorage . getInstance ( var ) . putMessages ( var , var , - 2 , 0 , false )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . replaceMessagesObjects , var , var )
FileLog . d ( "" + var . messages . size ( ) + "" + var + "" + var + "" + var + "" + var + "" + var + "" + var + "" + var + "" + var + "" + var + "" + var + "" + var + "" + var + "" + var )
if ( var == 0 )
var = MessagesStorage . getInstance ( var ) . getChannelPtsSync ( var )
final SparseArray < TLRPC . User > var = new SparseArray
final SparseArray < TLRPC . Chat > var = new SparseArray
var = MessagesStorage . getInstance ( var ) . getDialogReadMax ( false , var )
var = MessagesStorage . getInstance ( var ) . getDialogReadMax ( true , var )
MessagesStorage . getInstance ( var ) . putMessages ( var , var , var , var , var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . messagesDidLoaded , var , var , var , var , var , var , var , var , var , var , var , var , var , var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . dialogsNeedReload )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . dialogsNeedReload )
FileLog . d ( "" + var + "" + var + "" + var )
if ( UserConfig . getInstance ( var ) . dialogsLoadOffsetId != - 1 )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . dialogsNeedReload )
var . offset_id = UserConfig . getInstance ( var ) . dialogsLoadOffsetId
var . offset_date = UserConfig . getInstance ( var ) . dialogsLoadOffsetDate
var . offset_peer . channel_id = UserConfig . getInstance ( var ) . dialogsLoadOffsetChannelId
if ( UserConfig . getInstance ( var ) . dialogsLoadOffsetUserId != 0 )
var . offset_peer . user_id = UserConfig . getInstance ( var ) . dialogsLoadOffsetUserId
var . offset_peer . chat_id = UserConfig . getInstance ( var ) . dialogsLoadOffsetChatId
var . offset_peer . access_hash = UserConfig . getInstance ( var ) . dialogsLoadOffsetAccess
final LongSparseArray < TLRPC . TL_dialog > var = new LongSparseArray
final LongSparseArray < MessageObject > var = new LongSparseArray
final SparseArray < TLRPC . User > var = new SparseArray
final SparseArray < TLRPC . Chat > var = new SparseArray
MessageObject var = new MessageObject ( var , var , var , var , false )
var = MessagesStorage . getInstance ( var ) . getDialogReadMax ( var . out , var . dialog_id )
MessagesStorage . getInstance ( var ) . resetDialogs ( var , var , var , var , var , var , var , var , var , var )
MessagesStorage . getInstance ( var ) . setLastPtsValue ( var )
MessagesStorage . getInstance ( var ) . setLastDateValue ( var )
MessagesStorage . getInstance ( var ) . setLastQtsValue ( var )
if ( ! UserConfig . getInstance ( var ) . draftsLoaded )
DataQuery . getInstance ( var ) . loadDrafts
long var = var . keyAt ( var )
TLRPC . TL_dialog var = var . valueAt ( var )
DataQuery . getInstance ( var ) . saveDraft ( var . id , var . draft , null , false )
var . add ( var . valueAt ( var ) )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . dialogsNeedReload )
FileLog . d ( "" + var + "" + LocaleController . getInstance ( ) . formatterStats . format ( ( long ) var * 1000 ) long ) var * 1000 )
FileLog . d ( "" + var . id + "" + LocaleController . getInstance ( ) . formatterStats . format ( ( long ) var . date * 1000 ) long ) var . date * 1000 )
FileLog . d ( "" + var . id + "" + LocaleController . getInstance ( ) . formatterStats . format ( ( long ) var . date * 1000 ) long ) var . date * 1000 )
FileLog . d ( "" )
UserConfig . getInstance ( var ) . dialogsLoadOffsetDate = UserConfig . getInstance ( var ) . migrateOffsetDate
UserConfig . getInstance ( var ) . dialogsLoadOffsetUserId = UserConfig . getInstance ( var ) . migrateOffsetUserId
UserConfig . getInstance ( var ) . dialogsLoadOffsetChatId = UserConfig . getInstance ( var ) . migrateOffsetChatId
UserConfig . getInstance ( var ) . dialogsLoadOffsetChannelId = UserConfig . getInstance ( var ) . migrateOffsetChannelId
UserConfig . getInstance ( var ) . dialogsLoadOffsetAccess = UserConfig . getInstance ( var ) . migrateOffsetAccess
SQLiteCursor var = MessagesStorage . getInstance ( var ) . getDatabase . queryFinalized ( String . format ( Locale . US , "" , var . toString ( ) ) . US , "" , var . toString ( ) )
FileLog . d ( "" + var . var . size ( ) )
var = MessagesStorage . getInstance ( var ) . getDatabase . queryFinalized ( "" )
UserConfig . getInstance ( var ) . dialogsLoadOffsetId = UserConfig . getInstance ( var ) . migrateOffsetId
UserConfig . getInstance ( var ) . dialogsLoadOffsetDate = UserConfig . getInstance ( var ) . migrateOffsetDate
UserConfig . getInstance ( var ) . dialogsLoadOffsetUserId = UserConfig . getInstance ( var ) . migrateOffsetUserId
UserConfig . getInstance ( var ) . dialogsLoadOffsetChatId = UserConfig . getInstance ( var ) . migrateOffsetChatId
UserConfig . getInstance ( var ) . dialogsLoadOffsetChannelId = UserConfig . getInstance ( var ) . migrateOffsetChannelId
UserConfig . getInstance ( var ) . dialogsLoadOffsetAccess = UserConfig . getInstance ( var ) . migrateOffsetAccess
FileLog . d ( "" + LocaleController . getInstance ( ) . formatterStats . format ( ( long ) var * 1000 ) long ) var * 1000 )
long var = MessageObject . getDialogId ( var )
UserConfig . getInstance ( var ) . dialogsLoadOffsetId = UserConfig . getInstance ( var ) . migrateOffsetId
UserConfig . getInstance ( var ) . dialogsLoadOffsetDate = UserConfig . getInstance ( var ) . migrateOffsetDate
UserConfig . getInstance ( var ) . dialogsLoadOffsetUserId = UserConfig . getInstance ( var ) . migrateOffsetUserId
UserConfig . getInstance ( var ) . dialogsLoadOffsetChatId = UserConfig . getInstance ( var ) . migrateOffsetChatId
UserConfig . getInstance ( var ) . dialogsLoadOffsetChannelId = UserConfig . getInstance ( var ) . migrateOffsetChannelId
UserConfig . getInstance ( var ) . dialogsLoadOffsetAccess = UserConfig . getInstance ( var ) . migrateOffsetAccess
FileLog . d ( "" + LocaleController . getInstance ( ) . formatterStats . format ( ( long ) var * 1000 ) long ) var * 1000 )
UserConfig . getInstance ( var ) . dialogsLoadOffsetChannelId = 0
UserConfig . getInstance ( var ) . dialogsLoadOffsetUserId = 0
UserConfig . getInstance ( var ) . dialogsLoadOffsetChatId = 0
UserConfig . getInstance ( var ) . dialogsLoadOffsetUserId = 0
if ( var . id == UserConfig . getInstance ( var ) . dialogsLoadOffsetChannelId )
UserConfig . getInstance ( var ) . dialogsLoadOffsetUserId = var . to_id . user_id
UserConfig . getInstance ( var ) . dialogsLoadOffsetChatId = 0
UserConfig . getInstance ( var ) . dialogsLoadOffsetChannelId = 0
FileLog . d ( "" + var + "" + var . var . size ( ) )
if ( UserConfig . getInstance ( var ) . dialogsLoadOffsetId == Integer . MAX_VALUE )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . dialogsNeedReload )
final LongSparseArray < TLRPC . TL_dialog > var = new LongSparseArray
final LongSparseArray < MessageObject > var = new LongSparseArray
final SparseArray < TLRPC . User > var = new SparseArray
final SparseArray < TLRPC . Chat > var = new SparseArray
if ( var != null && var . left && ( var == 0 || var != - var . id ) )
MessageObject var = new MessageObject ( var , var , var , var , true )
if ( ! var && ! var && UserConfig . getInstance ( var ) . dialogsLoadOffsetId != - 1 && var == 0 )
if ( var != null && var . id != UserConfig . getInstance ( var ) . dialogsLoadOffsetId )
UserConfig . getInstance ( var ) . dialogsLoadOffsetId = var . id
UserConfig . getInstance ( var ) . migrateOffsetChannelId = 0
UserConfig . getInstance ( var ) . migrateOffsetUserId = 0
if ( var . id == UserConfig . getInstance ( var ) . migrateOffsetChatId )
UserConfig . getInstance ( var ) . migrateOffsetAccess = var . access_hash
UserConfig . getInstance ( var ) . migrateOffsetChatId = 0
UserConfig . getInstance ( var ) . migrateOffsetUserId = 0
if ( var . id == UserConfig . getInstance ( var ) . migrateOffsetChannelId )
UserConfig . getInstance ( var ) . migrateOffsetAccess = var . access_hash
UserConfig . getInstance ( var ) . migrateOffsetUserId = var . to_id . user_id
UserConfig . getInstance ( var ) . migrateOffsetChatId = 0
UserConfig . getInstance ( var ) . migrateOffsetChannelId = 0
if ( var . id == UserConfig . getInstance ( var ) . migrateOffsetUserId )
UserConfig . getInstance ( var ) . migrateOffsetAccess = var . access_hash
UserConfig . getInstance ( var ) . saveConfig ( false )
var = MessagesStorage . getInstance ( var ) . getDialogReadMax ( var . out , var . dialog_id )
if ( ! UserConfig . getInstance ( var ) . draftsLoaded )
DataQuery . getInstance ( var ) . loadDrafts
SecretChatHelper . getInstance ( var ) . sendNotifyLayerMessage ( var , null )
long var = var . keyAt ( var )
TLRPC . TL_dialog var = var . valueAt ( var )
DataQuery . getInstance ( var ) . saveDraft ( var . id , var . draft , null , false )
var . add ( var . valueAt ( var ) )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . dialogsNeedReload )
UserConfig . getInstance ( var ) . migrateOffsetId = var
UserConfig . getInstance ( var ) . saveConfig ( false )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . needReloadRecentDialogsSearch )
migrateDialogs ( UserConfig . getInstance ( var ) . migrateOffsetId , UserConfig . getInstance ( var ) . migrateOffsetDate , UserConfig . getInstance ( var ) . migrateOffsetUserId , UserConfig . getInstance ( var ) . migrateOffsetChatId , UserConfig . getInstance ( var ) . migrateOffsetChannelId , UserConfig . getInstance ( var ) . migrateOffsetAccess )
int var = var . getInt ( "" + var , - 1 )
if ( ( var . flags & 4 ) != 0 )
if ( var . mute_until > ConnectionsManager . getInstance ( var ) . getCurrentTime + 60 * 60 * 24 * 365 )
MessagesStorage . getInstance ( var ) . setDialogFlags ( var , ( ( long ) var << 32 ) | 1 )
if ( var != - 1 )
MessagesStorage . getInstance ( var ) . setDialogFlags ( var , 0 )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . notificationsSettingsUpdated )
var . remove ( "" + var )
if ( ( var . notify_settings . flags & 4 ) != 0 )
if ( var . notify_settings . mute_until > ConnectionsManager . getInstance ( var ) . getCurrentTime + 60 * 60 * 24 * 365 )
var . peer = getInputPeer ( ( int ) var )
MessagesStorage . getInstance ( var ) . resetMentionsCount ( var , var )
int var = var . unread_count
long var = var . keyAt ( var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . updateMentionsCount , var . id , var . unread_mentions_count )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . updateInterfaces , var )
var . writeInt32 ( 10 )
MessagesStorage . getInstance ( var ) . putMessages ( var . messages , true , true , false , DownloadController . getInstance ( var ) . getAutodownloadMask , true )
if ( var == 0 || var . indexOfKey ( var ) >= 0 )
final LongSparseArray < MessageObject > var = new LongSparseArray
final SparseArray < TLRPC . User > var = new SparseArray
final SparseArray < TLRPC . Chat > var = new SparseArray
final LongSparseArray < Integer > var = new LongSparseArray
MessageObject var = new MessageObject ( var , var , var , var , false )
long var = var . keyAt ( var )
TLRPC . TL_dialog var = var . valueAt ( var )
if ( var != null )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . updateMentionsCount , var . id , var . unread_mentions_count )
var . add ( var . valueAt ( var ) )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . dialogsNeedReload )
NotificationsController . getInstance ( var ) . processDialogsUpdateRead ( var )
MessagesStorage . getInstance ( var ) . markMentionMessageAsRead ( var . getId ( ) , var . messageOwner . to_id . channel_id , var . getDialogId ( ) )
MessagesStorage . getInstance ( var ) . markMessagesContentAsRead ( var , 0 )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . messagesReadContent , var )
MessagesStorage . getInstance ( var ) . markMentionMessageAsRead ( var , var , var )
MessagesStorage . getInstance ( var ) . createTaskForMid ( var , var , var , var , var , false )
SecretChatHelper . getInstance ( var ) . sendMessagesReadMessage ( var , var , null )
MessagesStorage . getInstance ( var ) . createTaskForSecretChat ( var . id , var , var , 0 , var )
var . max_id = var . maxId
var . max_id = var . maxId
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . updateInterfaces , var )
LongSparseArray < Integer > var = new LongSparseArray ( 1 )
NotificationsController . getInstance ( var ) . processDialogsUpdateRead ( var )
LongSparseArray < Integer > var = new LongSparseArray ( 1 )
NotificationsController . getInstance ( var ) . processDialogsUpdateRead ( var )
var . max_date = var . maxDate
NotificationsController . getInstance ( var ) . processReadMessages ( null , var , var , 0 , var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . updateInterfaces , var )
MessagesStorage . getInstance ( var ) . resetMentionsCount ( var , 0 )
if ( var != null && var . ttl > 0 )
MessagesStorage . getInstance ( var ) . createTaskForSecretChat ( var . id , var , var , 0 , null )
UserConfig . getInstance ( var ) . lastBroadcastId --
MessagesStorage . getInstance ( var ) . putUsersAndChats ( null , var , true , true )
var . notify_settings = new TLRPC . TL_peerNotifySettingsEmpty_layer77 ( )
var . participants . admin_id = UserConfig . getInstance ( var ) . getClientUserId
var . inviter_id = UserConfig . getInstance ( var ) . getClientUserId
MessagesStorage . getInstance ( var ) . updateChatInfo ( var , false )
var . local_id = var . id = UserConfig . getInstance ( var ) . getNewMessageId
var . from_id = UserConfig . getInstance ( var ) . getClientUserId
var . date = ConnectionsManager . getInstance ( var ) . getCurrentTime
UserConfig . getInstance ( var ) . saveConfig ( false )
MessageObject var = new MessageObject ( var , var , var , true )
MessagesStorage . getInstance ( var ) . putMessages ( var , false , true , false , 0 )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . dialogsNeedReload )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . chatDidCreated , var . id )
AlertsCreator . processError ( var , var , var , var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . chatDidFailCreate )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . chatDidCreated , var . var . get ( 0 ) . id )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . chatDidFailCreate )
AlertsCreator . processError ( var , var , var , var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . chatDidFailCreate )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . chatDidCreated , var . var . get ( 0 ) . id )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . chatDidFailCreate )
ConnectionsManager . getInstance ( var ) . cancelRequest ( var , true )
AlertsCreator . processError ( var , var , var , var , true )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . updateInterfaces , var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . updateInterfaces , var )
MessagesStorage . getInstance ( var ) . updateChatInfo ( var , false )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . chatInfoDidLoaded , var , 0 , false , null )
MessagesStorage . getInstance ( var ) . putUsersAndChats ( null , var , true , true )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . updateInterfaces , var )
AlertsCreator . processError ( var , var , var , var , var && ! var )
MessagesStorage . getInstance ( var ) . updateDialogsWithDeletedMessages ( new ArrayList < Integer > ( ) , null , true , var )
MessagesStorage . getInstance ( var ) . putUsersAndChats ( null , var , true , true )
var . inviter_id = UserConfig . getInstance ( var ) . getClientUserId
var . date = ConnectionsManager . getInstance ( var ) . getCurrentTime
MessagesStorage . getInstance ( var ) . updateChatInfo ( var , true )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . chatInfoDidLoaded , var , 0 , false , null )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . updateInterfaces , var )
if ( var . id == UserConfig . getInstance ( var ) . getClientUserId )
MessagesStorage . getInstance ( var ) . putUsersAndChats ( null , var , true , true )
MessagesStorage . getInstance ( var ) . updateChatInfo ( var , true )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . chatInfoDidLoaded , var , 0 , false , null )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . updateInterfaces , var )
if ( ChatObject . isChannel ( var , var ) )
MessagesStorage . getInstance ( var ) . putUsersAndChats ( null , var , true , true )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . dialogsNeedReload )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . updateInterfaces , var )
if ( ChatObject . isChannel ( var , var ) )
if ( UserConfig . getInstance ( var ) . registeredForPush && SharedConfig . pushString . length ( ) == 0 )
var . token = SharedConfig . pushString
var = ApplicationLoader . applicationContext . getSharedPreferences ( "" , Activity . MODE_PRIVATE )
var . other_uids . add ( var . getClientUserId ( ) )
var . remove ( "" ) . remove ( "" ) . remove ( "" ) . commit
UserConfig . getInstance ( var ) . clearConfig
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . appDidLogout )
ContactsController . getInstance ( var ) . deleteUnknownAppAccounts
if ( BuildVars . DEBUG_VERSION || SharedConfig . lastUpdateVersion == null || SharedConfig . lastUpdateVersion . equals ( BuildVars . BUILD_VERSION_STRING ) )
var . prev_app_version = SharedConfig . lastUpdateVersion
SharedConfig . lastUpdateVersion = BuildVars . BUILD_VERSION_STRING
UserConfig . getInstance ( var ) . saveConfig ( false )
if ( TextUtils . isEmpty ( var ) || var || UserConfig . getInstance ( var ) . getClientUserId == 0 )
if ( UserConfig . getInstance ( var ) . registeredForPush && var . equals ( SharedConfig . pushString ) )
FileLog . d ( "" + var + "" )
UserConfig . getInstance ( var ) . registeredForPush = true
SharedConfig . pushString = var
UserConfig . getInstance ( var ) . saveConfig ( false )
MessagesStorage . getInstance ( var ) . setLastDateValue ( var . var )
MessagesStorage . getInstance ( var ) . setLastPtsValue ( var . pts )
MessagesStorage . getInstance ( var ) . setLastSeqValue ( var . seq )
MessagesStorage . getInstance ( var ) . setLastQtsValue ( var . qts )
if ( MessagesStorage . getInstance ( var ) . getLastSeqValue + 1 == var || MessagesStorage . getInstance ( var ) . getLastSeqValue == var . getInstance ( var ) . getLastSeqValue < var )
if ( MessagesStorage . getInstance ( var ) . getLastSeqValue < var )
if ( var . pts <= MessagesStorage . getInstance ( var ) . getLastQtsValue . getInstance ( var ) . getLastQtsValue + var . var . size ( ) == var . pts )
if ( MessagesStorage . getInstance ( var ) . getLastQtsValue + var . var . size ( ) == var . pts )
int var = var . get ( var )
if ( var . isEmpty ( ) || var == 0 )
long var = var . get ( var )
if ( var != 0 && ( var || Math . abs ( System . currentTimeMillis ( ) - var ) <= 1500 ) )
FileLog . d ( "" + var + "" )
FileLog . d ( "" + var + "" )
if ( var . indexOfKey ( var ) >= 0 )
var . delete ( var )
FileLog . d ( "" + var + "" )
MessagesStorage . getInstance ( var ) . setLastSeqValue ( getUpdateSeq ( var ) )
MessagesStorage . getInstance ( var ) . setLastPtsValue ( var . pts )
MessagesStorage . getInstance ( var ) . setLastPtsValue ( var . pts )
FileLog . d ( "" )
FileLog . d ( "" )
FileLog . d ( "" )
if ( ! ( var instanceof TLRPC . TL_channel ) || var . indexOfKey ( var . id ) >= 0 )
boolean var = var . get ( var )
if ( var != 0 )
if ( var == 0 )
var = MessagesStorage . getInstance ( var ) . getChatSync ( var )
var = MessagesStorage . getInstance ( var ) . createPendingTask ( var )
FileLog . d ( "" + var + "" + var )
MessagesStorage . getInstance ( var ) . putUsersAndChats ( var . var , var . var , true , true )
final SparseArray < long > var = new SparseArray
long var = MessagesStorage . getInstance ( var ) . updateMessageStateAndId ( var . random_id , null , var . id , 0 , false , var )
if ( var . size ( ) != 0 )
int var = var . keyAt ( var )
long var = var . valueAt ( var )
int var = ( int ) var [ 1 ]
SendMessagesHelper . getInstance ( var ) . processSentMessage ( var )
final LongSparseArray < ArrayList < MessageObject > > var = new LongSparseArray
var = MessagesStorage . getInstance ( var ) . getDialogReadMax ( false , var )
var = MessagesStorage . getInstance ( var ) . getDialogReadMax ( true , var )
MessageObject var = new MessageObject ( var , var , var , var . contains ( var ) )
long var = var . keyAt ( var )
ArrayList < MessageObject > var = var . valueAt ( var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . dialogsNeedReload )
ConnectionsManager . getInstance ( var ) . cancelRequest ( var , true )
MessagesStorage . getInstance ( var ) . saveChannelPts ( var , var . pts )
var = MessagesStorage . getInstance ( var ) . getDialogReadMax ( false , var )
var = MessagesStorage . getInstance ( var ) . getDialogReadMax ( true , var )
MessagesStorage . getInstance ( var ) . overwriteChannel ( var , ( TLRPC . TL_updates_channelDifferenceTooLong ) var , var )
var . delete ( var )
FileLog . d ( "" + var . pts + "" + var )
FileLog . d ( "" + var . new_messages . size ( ) + "" + var . messages . size ( ) + "" + var . var . size ( ) + "" + var . var . size ( ) + "" + var . other_updates . size ( ) )
var . delete ( var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . chatInfoCantLoad , var , 0 )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . chatInfoCantLoad , var , 1 )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . chatInfoCantLoad , var , 2 )
registerForPush ( SharedConfig . pushString )
if ( MessagesStorage . getInstance ( var ) . getLastPtsValue == 0 )
var . var = ConnectionsManager . getInstance ( var ) . getCurrentTime
FileLog . d ( "" + var + "" + var + "" + var )
resetDialogs ( true , MessagesStorage . getInstance ( var ) . getLastSeqValue , var . var , var , var )
final SparseArray < TLRPC . User > var = new SparseArray
int var = var . get ( var )
if ( var == 0 )
if ( var != 0 && getUpdatePts ( var ) <= var )
MessagesStorage . getInstance ( var ) . putUsersAndChats ( var . var , var . var , true , false )
final SparseArray < long > var = new SparseArray
long var = MessagesStorage . getInstance ( var ) . updateMessageStateAndId ( var . random_id , null , var . id , 0 , false , 0 )
if ( var . size ( ) != 0 )
int var = var . keyAt ( var )
long var = var . valueAt ( var )
int var = ( int ) var [ 1 ]
SendMessagesHelper . getInstance ( var ) . processSentMessage ( var )
final LongSparseArray < ArrayList < MessageObject > > var = new LongSparseArray
ArrayList < TLRPC . Message > var = SecretChatHelper . getInstance ( var ) . decryptMessage ( var )
int var = UserConfig . getInstance ( var ) . getClientUserId
if ( var . to_id . user_id == UserConfig . getInstance ( var ) . getClientUserId )
var = MessagesStorage . getInstance ( var ) . getDialogReadMax ( var . out , var . dialog_id )
MessageObject var = new MessageObject ( var , var , var , var , var . contains ( var . dialog_id ) . dialog_id )
long var = var . keyAt ( var )
ArrayList < MessageObject > var = var . valueAt ( var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . dialogsNeedReload )
NotificationsController . getInstance ( var ) . processNewMessages ( var , ! ( var instanceof TLRPC . TL_updates_differenceSlice ) , false )
MessagesStorage . getInstance ( var ) . setLastSeqValue ( var . state . seq )
MessagesStorage . getInstance ( var ) . setLastDateValue ( var . state . var )
MessagesStorage . getInstance ( var ) . setLastPtsValue ( var . state . var )
MessagesStorage . getInstance ( var ) . setLastQtsValue ( var . state . var )
MessagesStorage . getInstance ( var ) . setLastDateValue ( var . intermediate_state . var )
MessagesStorage . getInstance ( var ) . setLastPtsValue ( var . intermediate_state . var )
MessagesStorage . getInstance ( var ) . setLastQtsValue ( var . intermediate_state . var )
MessagesStorage . getInstance ( var ) . setLastSeqValue ( var . seq )
MessagesStorage . getInstance ( var ) . setLastDateValue ( var . date )
FileLog . d ( "" + MessagesStorage . getInstance ( var ) . getLastDateValue + "" + MessagesStorage . getInstance ( var ) . getLastPtsValue + "" + MessagesStorage . getInstance ( var ) . getLastSeqValue + "" + var . new_messages . size ( ) + "" + var . var . size ( ) + "" + var . var . size ( ) + "" + var . other_updates . size ( ) )
if ( ! var && var . get ( var . size ( ) - 1 ) == var && ! var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . dialogsNeedReload )
MessagesStorage . getInstance ( var ) . setDialogPinned ( var , var . pinnedNum )
final LongSparseArray < MessageObject > var = new LongSparseArray
final SparseArray < TLRPC . User > var = new SparseArray
final SparseArray < TLRPC . Chat > var = new SparseArray
LongSparseArray < Integer > var = new LongSparseArray
MessagesStorage . getInstance ( var ) . setDialogPinned ( var . id , var . pinnedNum )
var . add ( var . valueAt ( var ) )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . dialogsNeedReload )
UserConfig . getInstance ( var ) . pinnedDialogsLoaded = true
UserConfig . getInstance ( var ) . saveConfig ( false )
if ( var == null || ! ChatObject . isChannel ( var , var ) || ( var . left || var . kicked ) && ! var )
var . date = ConnectionsManager . getInstance ( var ) . getCurrentTime
var . from_id = UserConfig . getInstance ( var ) . getClientUserId
UserConfig . getInstance ( var ) . saveConfig ( false )
MessagesStorage . getInstance ( var ) . putMessages ( var , true , true , false , 0 )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . dialogsNeedReload )
if ( var != null && var . participant instanceof TLRPC . TL_channelParticipantSelf && var . participant . inviter_id != UserConfig . getInstance ( var ) . getClientUserId )
if ( var . megagroup && MessagesStorage . getInstance ( var ) . isMigratedChat ( var . id ) )
MessagesStorage . getInstance ( var ) . putUsersAndChats ( var . var , null , true , true )
UserConfig . getInstance ( var ) . saveConfig ( false )
MessagesStorage . getInstance ( var ) . putMessages ( var , true , true , false , 0 )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . dialogsNeedReload )
return ( ( TLRPC . TL_updateChannelWebPage ) var ) . pts
var = MessagesStorage . getInstance ( var ) . getUserSync ( var )
var = MessagesStorage . getInstance ( var ) . getUserSync ( var . fwd_from . from_id )
var = MessagesStorage . getInstance ( var ) . getChatSync ( var . fwd_from . channel_id )
var = MessagesStorage . getInstance ( var ) . getUserSync ( var . via_bot_id )
var = MessagesStorage . getInstance ( var ) . getChatSync ( var . chat_id )
var = MessagesStorage . getInstance ( var ) . getUserSync ( var )
if ( MessagesStorage . getInstance ( var ) . getLastPtsValue + var . pts_count == var . pts . getInstance ( var ) . getLastPtsValue != var . pts )
int var = UserConfig . getInstance ( var ) . getClientUserId
var = MessagesStorage . getInstance ( var ) . getDialogReadMax ( var . out , var . dialog_id )
MessagesStorage . getInstance ( var ) . setLastQtsValue ( var . pts )
final MessageObject var = new MessageObject ( var , var , var . contains ( var . dialog_id ) . dialog_id )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . updateInterfaces , var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . dialogsNeedReload )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . updateInterfaces , var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . dialogsNeedReload )
NotificationsController . getInstance ( var ) . processNewMessages ( var , true , false )
MessagesStorage . getInstance ( var ) . putMessages ( var , false , true , false , 0 )
if ( MessagesStorage . getInstance ( var ) . getLastPtsValue != var . pts )
FileLog . d ( "" + MessagesStorage . getInstance ( var ) . getLastPtsValue + "" + var . pts + "" + var . pts_count )
FileLog . d ( "" )
final SparseArray < TLRPC . Chat > var = new SparseArray
TLRPC . Chat var = MessagesStorage . getInstance ( var ) . getChatSync ( var . chat_id )
var = new SparseArray
if ( BuildVars . LOGS_ENABLED )
FileLog . d ( "" + var )
MessagesStorage . getInstance ( var ) . putUsersAndChats ( var . var , var . var , true , true )
MessagesStorage . getInstance ( var ) . setLastQtsValue ( var . pts )
var . pts_count += var
var . pts = var
var . pts = var
if ( MessagesStorage . getInstance ( var ) . getLastPtsValue + var . pts_count == var . pts . getInstance ( var ) . getLastPtsValue != var . pts )
FileLog . d ( "" + MessagesStorage . getInstance ( var ) . getLastPtsValue + "" + var . seq )
if ( MessagesStorage . getInstance ( var ) . getLastPtsValue != var . pts )
FileLog . d ( var + "" + MessagesStorage . getInstance ( var ) . getLastPtsValue + "" + var . pts + "" + var . pts_count )
FileLog . d ( "" )
var . pts = getUpdateQts ( var )
MessagesStorage . getInstance ( var ) . setLastPtsValue ( var . pts )
if ( MessagesStorage . getInstance ( var ) . getLastQtsValue == 0 || MessagesStorage . getInstance ( var ) . getLastQtsValue + var . var . size ( ) == var . pts . getInstance ( var ) . getLastPtsValue != var . pts )
if ( MessagesStorage . getInstance ( var ) . getLastPtsValue != var . pts )
FileLog . d ( var + "" + MessagesStorage . getInstance ( var ) . getLastQtsValue + "" + var . pts )
FileLog . d ( "" )
int var = var . get ( var )
if ( var == 0 )
var . pts = var
var . pts_count += var
var . pts = getUpdatePts ( var )
var . pts_count = getUpdatePtsCount ( var )
FileLog . d ( "" + var )
MessagesStorage . getInstance ( var ) . saveChannelPts ( var , var . pts )
FileLog . d ( var + "" + var + "" + var . pts + "" + var . pts_count + "" + var )
long var = var . get ( var )
boolean var = var . get ( var )
if ( var || var == 0 || Math . abs ( System . currentTimeMillis ( ) - var ) <= 1500 )
if ( var == 0 )
FileLog . d ( "" )
FileLog . d ( "" + var )
var = MessagesStorage . getInstance ( var ) . getLastSeqValue + 1 == var . seq_start || MessagesStorage . getInstance ( var ) . getLastSeqValue == var . seq_start
var = MessagesStorage . getInstance ( var ) . getLastSeqValue + 1 == var . seq || var . seq == 0 || var . seq == MessagesStorage . getInstance ( var ) . getLastSeqValue
MessagesStorage . getInstance ( var ) . setLastDateValue ( var . date )
MessagesStorage . getInstance ( var ) . setLastSeqValue ( var . seq )
FileLog . d ( "" + MessagesStorage . getInstance ( var ) . getLastSeqValue + "" + var . seq_start )
FileLog . d ( "" + MessagesStorage . getInstance ( var ) . getLastSeqValue + "" + var . seq )
FileLog . d ( "" )
FileLog . d ( "" )
MessagesStorage . getInstance ( var ) . setLastSeqValue ( var . seq )
MessagesStorage . getInstance ( var ) . saveChannelPts ( var . chat_id , var . pts )
SecretChatHelper . getInstance ( var ) . processPendingEncMessages
int var = var . keyAt ( var )
var . max_qts = MessagesStorage . getInstance ( var ) . getLastQtsValue
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . updateInterfaces , var )
final LongSparseArray < TLRPC . WebPage > var = var
SparseIntArray var = null
final ArrayList < Long > var = var
final SparseArray < ArrayList < Integer > > var = var
final ArrayList < TLRPC . ChatParticipants > var = var
final ArrayList < TLRPC . Update > var = var
ArrayList < TLRPC . TL_updateEncryptedMessagesRead > var = null
for ( int var = 0 , var = var . var ( ) ; var < var ; var ++ )
for ( int var = 0 , var = var . var ( ) ; var < var ; var ++ )
for ( int var = 0 , var = var . size ( ) ; var < var ; var ++ )
if ( BuildVars . LOGS_ENABLED )
if ( ! var . out && var . from_id == UserConfig . getInstance ( var ) . getClientUserId )
var = MessagesStorage . getInstance ( var ) . getChatSync ( var )
var = MessagesStorage . getInstance ( var ) . getUserSync ( var )
if ( var != null && var . bot . from_id == UserConfig . getInstance ( var ) . getClientUserId && var . action . var == UserConfig . getInstance ( var ) . getClientUserId )
if ( var . from_id == UserConfig . getInstance ( var ) . getClientUserId && var . action . var == UserConfig . getInstance ( var ) . getClientUserId )
int var = UserConfig . getInstance ( var ) . getClientUserId
var = MessagesStorage . getInstance ( var ) . getDialogReadMax ( var . out , var . dialog_id )
MessageObject var = new MessageObject ( var , var , var , var , var . contains ( var . dialog_id ) . dialog_id )
for ( int var = 0 , var = var . var . var ( ) ; var < var ; var ++ )
for ( int var = 0 , var = var . var . var ( ) ; var < var ; var ++ )
TLRPC . TL_updateReadMessagesContents var = ( TLRPC . TL_updateReadMessagesContents ) var
if ( var . peer . chat_id != 0 )
var . put ( var . peer . user_id , ( long ) var . max_id )
var = var . peer . user_id
var . put ( - var . peer . chat_id , ( long ) var . max_id )
var = - var . peer . chat_id
var = new ArrayList
if ( var . peer . chat_id != 0 )
var . put ( var . peer . user_id , ( long ) var . max_id )
var . put ( - var . peer . chat_id , ( long ) var . max_id )
if ( var != UserConfig . getInstance ( var ) . getClientUserId )
var = var
if ( var instanceof TLRPC . TL_sendMessageCancelAction )
for ( int var = 0 , var = var . var ( ) ; var < var ; var ++ )
if ( var . userId == var )
if ( var . userId == var )
if ( var . var . getClass ( ) != var . getClass ( ) = true )
var . var = var
var . userId = var
var . var = var
MessagesStorage . getInstance ( var ) . clearUserPhotos ( var . user_id )
if ( var && var . containsKey ( var . user_id ) && ! MessagesStorage . getInstance ( var ) . isDialogHasMessages ( var . user_id ) )
UserConfig . getInstance ( var ) . saveConfig ( false )
MessageObject var = new MessageObject ( var , var , var , var , var . contains ( var . dialog_id ) . dialog_id )
ArrayList < TLRPC . Message > var = SecretChatHelper . getInstance ( var ) . decryptMessage ( ( ( TLRPC . TL_updateNewEncryptedMessage ) var ) . message )
for ( int var = 0 , var = var . var ( ) ; var < var ; var ++ )
MessageObject var = new MessageObject ( var , var , var , var , var . contains ( var ) )
var = var . var
MessagesStorage . getInstance ( var ) . updateChatInfo ( var . chat_id , var . user_id , 0 , var . inviter_id , var . version )
MessagesStorage . getInstance ( var ) . updateChatInfo ( var . chat_id , var . user_id , 1 , 0 , var . version )
SecretChatHelper . getInstance ( var ) . processUpdateEncryption ( ( TLRPC . TL_updateEncryption ) var , var )
MessagesStorage . getInstance ( var ) . putBlockedUsers ( var , false )
MessagesStorage . getInstance ( var ) . deleteBlockedUser ( var . user_id )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . blockedUsersDidLoaded )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . needShowAlert , 2 , var . message , var . type )
UserConfig . getInstance ( var ) . saveConfig ( false )
MessageObject var = new MessageObject ( var , var , var , var , var . contains ( var . dialog_id ) . dialog_id )
if ( BuildVars . LOGS_ENABLED )
int var = var . get ( var . channel_id )
if ( var == 0 )
var = MessagesStorage . getInstance ( var ) . getChannelPtsSync ( var . channel_id )
var = MessagesStorage . getInstance ( var ) . getChatSync ( var . channel_id )
var = new SparseLongArray
if ( BuildVars . LOGS_ENABLED )
if ( BuildVars . LOGS_ENABLED )
if ( BuildVars . LOGS_ENABLED )
var . pts_count = getUpdatePtsCount ( var )
int var = UserConfig . getInstance ( var ) . getClientUserId
var = MessagesStorage . getInstance ( var ) . getChatSync ( var . to_id . channel_id )
if ( ! var . out && var . from_id == UserConfig . getInstance ( var ) . getClientUserId )
var = MessagesStorage . getInstance ( var ) . getUserSync ( var )
if ( var . to_id . user_id == UserConfig . getInstance ( var ) . getClientUserId )
var = MessagesStorage . getInstance ( var ) . getDialogReadMax ( var . out , var . dialog_id )
if ( var . out && var . var == null )
MessageObject var = new MessageObject ( var , var , var , var , var . contains ( var . dialog_id ) . dialog_id )
if ( BuildVars . LOGS_ENABLED )
MessagesStorage . getInstance ( var ) . updateChannelPinnedMessage ( var . channel_id , var . id )
var . pts = getUpdatePts ( var )
LocaleController . getInstance ( ) . saveRemoteLocaleStrings ( var . difference , var )
LocaleController . getInstance ( ) . reloadCurrentRemoteLocale ( var )
var . pts_count = getUpdatePtsCount ( var )
var . pts = getUpdatePts ( var )
int var = var . get ( var . channel_id )
if ( var == 0 || var < var . available_min_id )
for ( int var = 0 , var = var . var ( ) ; var < var ; var ++ )
ArrayList < MessageObject > var = var . valueAt ( var )
if ( var != null )
ContactsController . getInstance ( var ) . processContactsUpdates ( var , var )
NotificationsController . getInstance ( var ) . processNewMessages ( var , true , false )
if ( var != null )
StatsController . getInstance ( var ) . incrementReceivedItemsCount ( ConnectionsManager . getCurrentNetworkType ( ) , StatsController . TYPE_MESSAGES , var . size ( ) )
if ( var != null )
ArrayList < MessageObject > var = var . valueAt ( var )
for ( int var = 0 , var = var . var ( ) ; var < var ; var ++ )
MessagesStorage . getInstance ( var ) . putMessages ( var , var . keyAt ( var ) , - 2 , 0 , false )
if ( var != null )
MessagesStorage . getInstance ( var ) . putChannelViews ( var , true )
if ( var != null )
for ( int var = 0 , var = var . var ( ) ; var < var ; var ++ )
ContactsController . getInstance ( var ) . setPrivacyRules ( var . rules , 0 )
ContactsController . getInstance ( var ) . setPrivacyRules ( var . rules , 1 )
ContactsController . getInstance ( var ) . setPrivacyRules ( var . rules , 2 )
if ( var . user_id == UserConfig . getInstance ( var ) . getClientUserId )
NotificationsController . getInstance ( var ) . setLastOnlineFromOtherDevice ( var . status . expires )
if ( ! TextUtils . isEmpty ( var . username ) )
if ( TextUtils . isEmpty ( var . username ) )
TLRPC . Peer var = ( ( TLRPC . TL_dialogPeer ) var . var ) . var
var = - var . channel_id
UserConfig . getInstance ( var ) . pinnedDialogsLoaded = false
UserConfig . getInstance ( var ) . saveConfig ( false )
UserConfig . getInstance ( var ) . pinnedDialogsLoaded = false
UserConfig . getInstance ( var ) . saveConfig ( false )
ArrayList < TLRPC . DialogPeer > var = ( ( TLRPC . TL_updatePinnedDialogs ) var ) . var
for ( int var = 0 , var = var . var ( ) ; var < var ; var ++ )
TLRPC . DialogPeer var = var . get ( var )
ContactsController . getInstance ( var ) . addContactToPhoneBook ( var , true )
if ( var . notify_settings instanceof TLRPC . TL_peerNotifySettings )
MessagesStorage . getInstance ( var ) . setDialogFlags ( var , ( ( long ) var << 32 ) | 1 )
var . var . mute_until = 0
MessagesStorage . getInstance ( var ) . setDialogFlags ( var , 0 )
if ( var == null && var instanceof TLRPC . TL_channel && ! var . left . left && var != null && ( var == null || var . id != var . id ) )
if ( var . left && var != null && ( var == null || var . id != var . id ) )
DataQuery . getInstance ( var ) . addNewStickerSet ( var . stickerset )
DataQuery . getInstance ( var ) . saveDraft ( var , var . draft , null , true )
UserConfig . getInstance ( var ) . saveConfig ( false )
if ( BuildVars . LOGS_ENABLED )
if ( var . date + var / 1000 < ConnectionsManager . getInstance ( var ) . getCurrentTime )
if ( BuildVars . LOGS_ENABLED )
if ( BuildVars . LOGS_ENABLED )
if ( BuildVars . LOGS_ENABLED )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . notificationsSettingsUpdated )
MessagesStorage . getInstance ( var ) . updateUsers ( var , true , true , true )
MessagesStorage . getInstance ( var ) . updateUsers ( var , false , true , true )
if ( var != null )
TLRPC . WebPage var = var . valueAt ( var )
ArrayList < TLRPC . Message > var = null
for ( int var = 0 , var = var . var ( ) ; var < var ; var ++ )
ArrayList < TLRPC . Message > var = new ArrayList
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . replaceMessagesObjects , var , var )
long var = var . keyAt ( var )
ArrayList < MessageObject > var = var . valueAt ( var )
if ( var != null )
long var = var . keyAt ( var )
ArrayList < MessageObject > var = var . valueAt ( var )
for ( int var = 0 , var = var . var ( ) ; var < var ; var ++ )
DataQuery . getInstance ( var ) . loadReplyMessagesForMessages ( var , var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . replaceMessagesObjects , var , var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . dialogsNeedReload )
if ( var != null )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . updateInterfaces , var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . updateInterfaces , var )
if ( var != null || var != null )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . messagesRead , var , var )
NotificationsController . getInstance ( var ) . processReadMessages ( var , 0 , 0 , 0 , false )
if ( var != null )
for ( int var = 0 , var = var . var ( ) ; var < var ; var ++ )
int var = ( int ) var . valueAt ( var )
if ( var != UserConfig . getInstance ( var ) . getClientUserId )
for ( int var = 0 , var = var . var ( ) ; var < var ; var ++ )
int var = ( int ) var . valueAt ( var )
if ( var != null )
long var = long ( var ) << 32
if ( var != null && var . messageOwner . date <= var )
if ( var != null )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . messagesReadContent , var )
if ( var != null )
for ( int var = 0 , var = var . var ( ) ; var < var ; var ++ )
long var = var . keyAt ( var )
ArrayList < Integer > var = var . valueAt ( var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . messagesDeleted , var , var )
for ( int var = 0 , var = var . var ( ) ; var < var ; var ++ )
for ( int var = 0 , var = var . var ( ) ; var < var ; var ++ )
if ( var != null )
for ( int var = 0 , var = var . var ( ) ; var < var ; var ++ )
PrintingUser var = var . get ( var )
long var = long ( var ) << 32
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . historyCleared , var , var )
if ( var != null || var != null || var != null || var != null )
if ( var != null || var != null )
MessagesStorage . getInstance ( var ) . updateDialogsWithReadMessages ( var , var , var , true )
MessagesStorage . getInstance ( var ) . markMessagesAsRead ( var , var , var , true )
var . put ( var , ConnectionsManager . getInstance ( var ) . getCurrentTime )
if ( var != null )
for ( int var = 0 , var = var . var ( ) ; var < var ; var ++ )
ArrayList < Long > var = MessagesStorage . getInstance ( var ) . markMessagesAsDeleted ( var , false , var )
MessagesStorage . getInstance ( var ) . updateDialogsWithDeletedMessages ( var , var , false , var )
if ( var != null )
for ( int var = 0 , var = var . var ( ) ; var < var ; var ++ )
final int var = var . valueAt ( var )
ArrayList < Long > var = MessagesStorage . getInstance ( var ) . markMessagesAsDeleted ( var , var , false )
MessagesStorage . getInstance ( var ) . updateDialogsWithDeletedMessages ( new ArrayList < Integer > ( ) , var , false , var )
if ( var != null )
for ( int var = 0 , var = var . var ( ) ; var < var ; var ++ )
MessagesStorage . getInstance ( var ) . createTaskForSecretChat ( var . chat_id , var . max_date , var . date , 1 , null )
int var = var . getInt ( "" + var , - 1 )
DataQuery . getInstance ( var ) . addRecentGif ( var . messageOwner . media . document , var . messageOwner . date )
DataQuery . getInstance ( var ) . addRecentSticker ( DataQuery . TYPE_IMAGE , var . messageOwner . media . document , var . messageOwner . date , false )
DataQuery . getInstance ( var ) . loadReplyMessagesForMessages ( var , var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . didReceivedNewMessages , var , var )
NotificationsController . getInstance ( var ) . removeNotificationsForDialog ( var . id )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . needReloadRecentDialogsSearch )
if ( ( var . top_message > 0 && var . getId ( ) > 0 && var . getId ( ) > var . top_message ) || ( var . top_message < 0 && var . getId ( ) < 0 && var . getId ( ) < var . top_message ) || var . indexOfKey ( var ) < 0 || var . top_message < 0 || var . last_message_date <= var . messageOwner . date )
int var = UserConfig . getInstance ( var ) . getClientUserId
if ( var != null && ( var . megagroup && ( var . admin_rights != null && ( var . admin_rights . post_messages || var . admin_rights . add_admins ) ) || var . creator ) )
TLRPC . User var = UserConfig . getInstance ( var ) . getCurrentUser
var = getUser ( var )
var = getChat ( var )
var = getChat ( - var )
var = getChat ( - var )
MessagesStorage . getInstance ( var ) . putUsersAndChats ( var . var , var . var , true , true )
ConnectionsManager . getInstance ( var ) . cancelRequest ( var , true )
TLObject var = getUserOrChat ( var )
putUsers ( var . var , false )
putChats ( var . var , false )
MessagesStorage var = Instance [ var ]
var = Instance [ var ]
Instance [ var ] = var = new MessagesStorage ( var )
public MessagesStorage ( int var )
FileLog . d ( "" )
var . executeFast ( "" ) . stepThis var . dispose var
var . executeFast ( "" ) . stepThis var . dispose var
FileLog . d ( "" + var )
if ( var < 48 )
if ( var && var . getMessage ( var ) . contains ( "" ) )
UserConfig . getInstance ( var ) . dialogsLoadOffsetId = 0
UserConfig . getInstance ( var ) . totalDialogsLoadCount = 0
UserConfig . getInstance ( var ) . dialogsLoadOffsetDate = 0
UserConfig . getInstance ( var ) . dialogsLoadOffsetUserId = 0
UserConfig . getInstance ( var ) . dialogsLoadOffsetChatId = 0
UserConfig . getInstance ( var ) . dialogsLoadOffsetChannelId = 0
UserConfig . getInstance ( var ) . dialogsLoadOffsetAccess = 0
UserConfig . getInstance ( var ) . saveConfig ( false )
var . executeFast ( "" ) . stepThis var . dispose var
var . executeFast ( "" ) . stepThis var . dispose var
var . beginTransaction ( var )
if ( var . next ( var ) )
var . notify_settings = new TLRPC . TL_peerNotifySettingsEmpty_layer77 ( var )
LongSparseArray < Long > var = new LongSparseArray var ( var )
SharedPreferences var = MessagesController . getNotificationsSettings ( var )
var . bindLong ( 1 , var . keyAt ( var ) )
var . bindLong ( 2 , var . valueAt ( var ) )
MessagesController . getInstance ( var ) . loadUnknownChannel ( var , var )
MessagesController . getInstance ( var ) . getChannelDifference ( var , var , var , null )
MessagesController . getInstance ( var ) . checkLastDialogMessage ( var , var , var )
SendMessagesHelper . getInstance ( var ) . sendGame ( var , var , var , var )
MessagesController . getInstance ( var ) . pinDialog ( var , var , var , var )
MessagesController . getInstance ( var ) . getChannelDifference ( var , var , var , var )
MessagesController . getInstance ( var ) . deleteMessages ( null , null , null , var , true , var , var )
ArrayList < Integer > var = new ArrayList var ( var )
final LongSparseArray < Integer > var = new LongSparseArray var ( var )
int var = ConnectionsManager . getInstance ( var ) . getCurrentTime var
SparseArray < ArrayList < TLRPC . Message > . Message > var = new SparseArray var ( var )
NotificationsController . getInstance ( var ) . processLoadedUnreadMessages ( var , var , var , var , var )
while ( var . next ( var ) )
var . document = TLRPC . Document . TLdeserialize ( var , var , false )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . recentImagesDidLoaded , var , var )
for ( int var = 0 ; var < var . size ( var ) ; var ++ )
NotificationCenter . getGlobalInstance ( var ) . postNotificationName ( NotificationCenter . wallpapersDidLoaded , var )
MessagesController . getInstance ( var ) . processLoadedBlockedUsers ( var , var , true )
MessagesController . getInstance ( var ) . markChannelDialogMessageAsDeleted ( var , var )
FileLoader . getInstance ( var ) . deleteFiles ( var , 0 )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . messagesDeleted , var , var )
FileLoader . getInstance ( var ) . deleteFiles ( var , var )
var . executeFast ( "" + var ) . stepThis var . dispose var
var . executeFast ( "" + var ) . stepThis var . dispose var
DataQuery . getInstance ( var ) . clearBotKeyboard ( var , null )
var . dispose ( var )
DataQuery . getInstance ( var ) . clearBotKeyboard ( var , null )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . needReloadRecentDialogsSearch )
MessagesController . getInstance ( var ) . processLoadedUserPhotos ( var , var , var , var , true , var )
final LongSparseArray < Integer > var = new LongSparseArray var ( var )
var . executeFast ( "" + var ) . stepThis var . dispose var
var . executeFast ( "" + var ) . stepThis var . dispose var
var . commitTransaction ( var )
putDialogsInternal ( var , 0 )
if ( var != null && var . id != UserConfig . getInstance ( var ) . dialogsLoadOffsetId var )
UserConfig . getInstance ( var ) . totalDialogsLoadCount = var . dialogs . size ( var )
UserConfig . getInstance ( var ) . dialogsLoadOffsetId = var . id
UserConfig . getInstance ( var ) . dialogsLoadOffsetDate = var . var
UserConfig . getInstance ( var ) . dialogsLoadOffsetChannelId = 0
UserConfig . getInstance ( var ) . dialogsLoadOffsetUserId = 0
if ( var . id == UserConfig . getInstance ( var ) . dialogsLoadOffsetChatId )
UserConfig . getInstance ( var ) . dialogsLoadOffsetAccess = var . access_hash
UserConfig . getInstance ( var ) . dialogsLoadOffsetChatId = 0
UserConfig . getInstance ( var ) . dialogsLoadOffsetUserId = 0
if ( var . id == UserConfig . getInstance ( var ) . dialogsLoadOffsetChannelId )
UserConfig . getInstance ( var ) . dialogsLoadOffsetAccess = var . access_hash
UserConfig . getInstance ( var ) . dialogsLoadOffsetUserId = var . to_id . user_id
UserConfig . getInstance ( var ) . dialogsLoadOffsetChatId = 0
UserConfig . getInstance ( var ) . dialogsLoadOffsetChannelId = 0
if ( var . id == UserConfig . getInstance ( var ) . dialogsLoadOffsetUserId )
UserConfig . getInstance ( var ) . dialogsLoadOffsetAccess = var . access_hash
UserConfig . getInstance ( var ) . dialogsLoadOffsetId = Integer . MAX_VALUE
UserConfig . getInstance ( var ) . saveConfig ( false )
MessagesController . getInstance ( var ) . completeDialogsReset ( var , var , var , var , var , var , var , var , var )
FileLog . var ( var )
for ( int var = 0 ; var < var . size ( var ) ; var ++ )
if ( ( var . flags & TLRPC . MESSAGE_FLAG_HAS_VIEWS ) != 0 var )
for ( int var = 0 ; var < var . size ( var ) ; var ++ )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . updateMessageMedia , var . get ( var ) )
FileLoader . getInstance ( var ) . deleteFiles ( var , 0 )
var . executeFast ( String . format ( Locale . US , "" , var ) . US , "" , var ) . stepThis var . dispose var
MessagesController . getInstance ( var ) . processLoadedDeleteTask ( var , var , var )
LongSparseArray < Integer > var = new LongSparseArray var ( 1 )
MessagesController . getInstance ( var ) . processDialogsUpdateRead ( null , var )
LongSparseArray < Integer > var = new LongSparseArray var ( 1 )
MessagesController . getInstance ( var ) . processDialogsUpdateRead ( null , var )
markMessagesContentAsRead ( var , 0 )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . messagesReadContent , var )
MessagesController . getInstance ( var ) . didAddedNewTask ( var , var )
markMessagesContentAsRead ( var , 0 )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . messagesReadContent , var )
MessagesController . getInstance ( var ) . didAddedNewTask ( var , var )
LongSparseArray < Integer > var = new LongSparseArray var ( var )
LongSparseArray < Integer > var = new LongSparseArray var ( var )
ArrayList < Integer > var = new ArrayList var ( var )
if ( ! isEmpty ( var ) var )
if ( ! isEmpty ( var ) )
if ( var . next ( var ) )
if ( ! isEmpty ( var ) )
while ( var . next ( var ) )
if ( ! isEmpty ( var ) )
if ( var . size ( var ) > 0 || var . size ( var ) > 0 )
if ( var . size ( var ) > 0 )
var . bindInteger ( 1 , var . valueAt ( var ) )
var . bindLong ( 2 , var . keyAt ( var ) )
if ( var . size ( var ) > 0 )
var . bindInteger ( 1 , var . valueAt ( var ) )
var . bindLong ( 2 , var . keyAt ( var ) )
MessagesController . getInstance ( var ) . processDialogsUpdateRead ( var , var )
if ( ! var . isEmpty ( var ) )
if ( isEmpty ( var ) && isEmpty ( var ) )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . chatInfoDidLoaded , var , 0 , false , null )
MessagesController . getInstance ( var ) . processLoadedChannelAdmins ( var , var , true )
int var = ConnectionsManager . getInstance ( var ) . getCurrentTime var
if ( var < var . read_inbox_max_id )
int var = var . intValue ( 7 )
var = var . executeFast ( "" )
var . bindInteger ( 12 , var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . chatInfoDidLoaded , var , 0 , false , null )
var . date = ConnectionsManager . getInstance ( var ) . getCurrentTime var
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . chatInfoDidLoaded , var , 0 , false , null )
final CountDownLatch var = new CountDownLatch ( 1 )
var . countDown ( var )
var . countDown ( var )
var . await ( var )
var . countDown ( var )
var = DataQuery . getInstance ( var ) . loadPinnedMessage ( var , var . pinned_msg_id , false )
MessagesController . getInstance ( var ) . processChatInfo ( var , var , var , true , var , var , var )
var . countDown ( var )
if ( var != 0 var )
var . bindLong ( 2 , var )
long var = 0
if ( var . next ( var ) )
var . bindLong ( 2 , var )
var . bindLong ( 3 , var )
if ( var . isEmpty ( var ) && ! var )
SparseArray < ContactsController . Contact > var = new SparseArray var ( var )
while ( var . next ( var ) )
var . dispose ( var )
HashMap < String , ContactsController . Contact > var = new HashMap var ( var )
while ( var . next ( var ) )
ContactsController . getInstance ( var ) . performSyncPhoneBook ( var , true , true , false , false , ! var , false )
ContactsController . getInstance ( var ) . processLoadedContacts ( var , var , 1 )
SparseArray < TLRPC . Message > var = new SparseArray var ( var )
if ( var . indexOfKey ( var . id ) < 0 )
if ( var . send_state != 3 && ( var . to_id . channel_id == 0 && ! MessageObject . isUnread ( var ) && var != 0 || var . id > 0 ) )
SendMessagesHelper . getInstance ( var ) . processUnsentMessages ( var , var , var , var )
final CountDownLatch var = new CountDownLatch ( 1 )
var . countDown ( var )
FileLog . var ( var )
FileLog . var ( var )
LongSparseArray < ArrayList < TLRPC . Message > . Message > var = new LongSparseArray var ( var )
SparseArray < ArrayList < TLRPC . Message > . Message > var = new SparseArray var ( var )
if ( var . id > 0 && var . send_state != 0 && var . send_state != 3 )
int var = Integer . MIN_VALUE
int var = Integer . MAX_VALUE
if ( var . size ( var ) > 0 var )
if ( var . size ( var ) > 0 var )
long var = var . longValue ( 3 )
if ( var . size ( var ) > 0 )
MessagesController . getInstance ( var ) . processLoadedMessages ( var , var , var , var , var , true , var , var , var , var , var , var , var , var , var , var , var )
if ( var == null || var . toLowerCase ( var ) . endsWith ( "" ) )
final CountDownLatch var = new CountDownLatch ( 1 )
var . countDown ( var )
var . await ( var )
final CountDownLatch var = new CountDownLatch ( 1 )
final boolean result var = new boolean [ 1 ]
var . countDown ( var )
var . await ( var )
final CountDownLatch var = new CountDownLatch ( 1 )
var . countDown ( var )
var . executeFast ( "" ) . stepThis var . dispose var
ArrayList < TLRPC . EncryptedChat > var = new ArrayList var ( var )
var . countDown ( var )
DownloadController . getInstance ( var ) . processDownloadObjects ( var , var )
if ( ( var . media instanceof TLRPC . TL_messageMediaPhoto || MessageObject . isGifMessage ( var ) ) && var . ttl > 0 && var . ttl <= 60 || MessageObject . isVoiceMessage ( var ) || MessageObject . isVideoMessage ( var ) || MessageObject . isRoundVideoMessage ( var ) . media instanceof TLRPC . TL_messageMediaPhoto || MessageObject . isVideoMessage ( var ) )
SQLiteCursor var = var . queryFinalized ( "" + var . keyAt ( var ) )
var . media . webpage = var . valueAt ( var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . didReceivedWebpages , var )
DataQuery . getInstance ( var ) . clearBotKeyboard ( var , null )
putDialogsInternal ( var , 0 )
updateDialogsWithDeletedMessages ( new ArrayList < Integer > ( var ) , null , false , var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . removeAllMessagesFromDialog , var , true )
if ( var == 1 var )
MessagesController . getInstance ( var ) . generateJoinMessage ( var , false )
LongSparseArray < TLRPC . Message > var = new LongSparseArray var ( var )
LongSparseArray < Integer > var = new LongSparseArray var ( var )
LongSparseArray < Integer > var = new LongSparseArray var ( var )
LongSparseArray < TLRPC . Message > var = new LongSparseArray var ( var )
LongSparseArray < Long > var = null
LongSparseArray < Integer > var = new LongSparseArray var ( var )
LongSparseArray < Long > var = new LongSparseArray var ( var )
LongSparseArray < Long > var = new LongSparseArray var ( var )
if ( DataQuery . canAddMessageToMedia ( var ) )
var = new LongSparseArray var ( var )
var = new LongSparseArray var ( var )
DataQuery . getInstance ( var ) . putBotKeyboard ( var . keyAt ( var ) , var . valueAt ( var ) )
var = new SparseArray var ( var )
long var = var . valueAt ( var )
LongSparseArray < Integer > var = var . get ( var )
var = new LongSparseArray var ( var )
var = var . get ( var )
var . put ( var , var )
NativeByteBuffer var = new NativeByteBuffer ( var . getObjectSize ( var ) )
if ( DataQuery . canAddMessageToMedia ( var ) )
if ( var != 0 && ( var . to_id . channel_id == 0 || var . post ) && var . date >= ConnectionsManager . getInstance ( var ) . getCurrentTime var - 60 * 60 && DownloadController . getInstance ( var ) . canDownloadMedia ( var ) )
var = DownloadController . AUTODOWNLOAD_MASK_DOCUMENT
var = DownloadController . AUTODOWNLOAD_MASK_VIDEO
var = DownloadController . AUTODOWNLOAD_MASK_PHOTO
var = DownloadController . AUTODOWNLOAD_MASK_VIDEOMESSAGE
var = DownloadController . AUTODOWNLOAD_MASK_AUDIO
var . step ( var )
var . dispose ( var )
LongSparseArray < TLRPC . Message > var = new LongSparseArray var ( var )
long var = var . keyAt ( var )
LongSparseArray < Integer > var = var . valueAt ( var )
long var = var . keyAt ( var )
var += var . valueAt ( var )
MessagesController . getInstance ( var ) . processDialogsUpdateRead ( var , var )
DownloadController . getInstance ( var ) . newDownloadObjectsAvailable ( var )
var . requery ( var )
SparseArray < TLRPC . User > var = new SparseArray var ( var )
if ( var == null || var . isEmpty ( var ) )
if ( ! isEmpty ( var ) )
if ( ! isEmpty ( var ) )
if ( var != null && ! isEmpty ( var ) )
long var = ( ( long ) var . keyAt ( var ) ) << 32
int var = var . valueAt ( var )
if ( isEmpty ( var ) )
var . executeFast ( String . format ( Locale . US , "" , var ) . US , "" , var ) . stepThis var . dispose var
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . messagesDeleted , var , 0 )
updateDialogsWithReadMessagesInternal ( var , null , null , null )
markMessagesAsDeletedInternal ( var , 0 )
updateDialogsWithDeletedMessagesInternal ( var , null , 0 )
LongSparseArray < Integer var > var = new LongSparseArray var ( var )
int var = UserConfig . getInstance ( var ) . getClientUserId var
while ( var . next ( var ) )
FileLoader . getInstance ( var ) . deleteFiles ( var , 0 )
long var = var . keyAt ( var )
Integer var var = var . valueAt ( var )
DataQuery . getInstance ( var ) . clearBotKeyboard ( 0 , var )
while ( var . next ( var ) )
MessagesController . getInstance ( var ) . processDialogsUpdate ( var , var )
LongSparseArray < Integer var > var = new LongSparseArray var ( var )
int var = UserConfig . getInstance ( var ) . getClientUserId var
while ( var . next ( var ) )
Integer var var = var . get ( var )
FileLoader . getInstance ( var ) . deleteFiles ( var , 0 )
long var = var . keyAt ( var )
Integer var var = var . valueAt ( var )
var . executeFast ( String . format ( Locale . US , "" , - var , var ) . US , "" , - var , var ) . stepThis var . dispose var
for ( int var = 0 ; var < DataQuery . MEDIA_TYPES_COUNT ; var ++ )
if ( var = var . next ( var ) )
if ( var != null && var != 3 )
if ( var . next ( var ) )
if ( DataQuery . canAddMessageToMedia ( var ) )
var . put ( MessageObject . getDialogId ( var ) , var )
DataQuery . getInstance ( var ) . putBotKeyboard ( var , var )
LongSparseArray < Integer > var = new LongSparseArray var ( 1 )
MessagesController . getInstance ( var ) . processDialogsUpdateRead ( null , var )
updateDialogsWithDeletedMessages ( new ArrayList < Integer > ( var ) , null , false , var )
var . add ( UserConfig . getInstance ( var ) . getClientUserId var )
while ( var . next ( var ) )
MessagesController . getInstance ( var ) . processLoadedDialogs ( var , var , var , var , 1 , false , false , true )
MessagesController . getInstance ( var ) . processLoadedDialogs ( var , var , 0 , 100 , 1 , true , false , true )
var . step ( var )
for ( int var = 0 ; var < DataQuery . MEDIA_TYPES_COUNT ; var ++ )
var . put ( MessageObject . getDialogId ( var ) , var )
for ( int var = 0 ; var < var . var . size ( var ) ; var ++ )
DataQuery . getInstance ( var ) . putBotKeyboard ( var . id , var )
if ( DataQuery . canAddMessageToMedia ( var ) )
var . requery ( var )
long var = var . longValue ( 0 )
var . countDown ( var )
var . await ( var )
final CountDownLatch var = new CountDownLatch ( 1 )
var . countDown ( var )
var . await ( var )
final CountDownLatch var = new CountDownLatch ( 1 )
var . countDown ( var )
FileLog . var ( var )
final CountDownLatch var = new CountDownLatch ( 1 )
var . countDown ( var )
FileLog . var ( var )
var = MessagesController . getNotificationsSettings ( var ) . getInt ( "" , 0 )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . messagePlayingPlayStateChanged )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . messagePlayingDidStarted )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . messagePlayingDidReset )
SQLiteCursor var = var . getDatabase ( ) . queryFinalized ( String . format ( Locale . US , "" , DataQuery . MEDIA_MUSIC ) . US , "" , DataQuery . MEDIA_MUSIC )
var = var . getDatabase ( ) . queryFinalized ( String . format ( Locale . US , "" , var , DataQuery . MEDIA_MUSIC ) . US , "" , var , DataQuery . MEDIA_MUSIC )
MessageObject var = new MessageObject ( var , var , false )
var . getUsersInternal ( TextUtils . join ( "" , var ) , var , var )
var . getChatsInternal ( TextUtils . join ( "" , var ) , var , var )
MessagesController . getNotificationsSettings ( var ) . edit var . putInt ( "" , var ) . commit var
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . messagePlayingPlayStateChanged )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . messagePlayingDidStarted )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . messagePlayingDidReset )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . messagePlayingProgressDidChanged )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . messagePlayingPlayStateChanged )
var = new NotificationCompat . Builder ( getApplicationContext ) . setSmallIcon ( R . drawable . player ) . setContentIntent ( var ) . setChannelId ( NotificationsController . OTHER_NOTIFICATIONS_CHANNEL ) . setContentTitle ( var ) . build
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . messagePlayingProgressDidChanged )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . messagePlayingPlayStateChanged )
if ( Build . CPU_ABI . equalsIgnoreCase ( "" ) = "" . CPU_ABI . equalsIgnoreCase ( "" ) = "" . CPU_ABI . equalsIgnoreCase ( "" ) = "" . CPU_ABI . equalsIgnoreCase ( "" ) = "" . CPU_ABI . equalsIgnoreCase ( "" ) = "" . CPU_ABI . equalsIgnoreCase ( "" ) = "" )
if ( BuildVars . LOGS_ENABLED )
if ( BuildVars . LOGS_ENABLED )
if ( BuildVars . LOGS_ENABLED )
Bundle var = new Bundle
for ( int var = 0 ; var < var . size ( ) ; var ++ )
if ( var == var )
var = var
NotificationCenter var = Instance [ var ]
var = Instance [ var ]
Instance [ var ] = var = new NotificationCenter ( var )
var . clear ( var )
if ( BuildVars . LOGS_ENABLED )
( ( NotificationCenterDelegate ) var ) . didReceivedNotification ( var , var , var )
int var = var . getIntExtra ( "" , UserConfig . selectedAccount )
MessagesController . getNotificationsSettings ( var ) . edit . putInt ( "" , var . getIntExtra ( "" , 0 ) , 0 ) . commit
NotificationsController . getInstance ( var ) . repeatNotificationMaybe
NotificationsController var = Instance [ var ]
var = Instance [ var ]
Instance [ var ] = var = new NotificationsController ( var )
public NotificationsController ( int var )
FileLog . d ( "" )
FileLog . d ( "" + var )
NotificationsController . getInstance ( var ) . processReadMessages ( null , var , 0 , Integer . MAX_VALUE , false )
LongSparseArray < Integer > var = new LongSparseArray var ( var )
var = var
var [ 0 ] = null
var [ 0 ] = null
if ( ( int ) var == 0 var )
return LocaleController . getString ( "" , R . string . YouHaveNewMessage )
if ( var == 0 && var != 0 && var . getBoolean ( "" , true ) || var != 0 && var . getBoolean ( "" , true ) var )
if ( var != 0 var )
MessageObject var = var . replyMessageObject
return LocaleController . formatString ( "" , R . string . NotificationActionPinnedVideoChannel , var . title )
return LocaleController . formatString ( "" , R . string . NotificationActionPinnedStickerEmojiChannel , var . title , var )
return LocaleController . formatString ( "" , R . string . NotificationActionPinnedTextChannel , var . title , var )
return LocaleController . formatString ( "" , R . string . NotificationActionPinnedGeoChannel , var . title )
if ( var . length ( var ) > 20 )
return LocaleController . getString ( "" , R . string . AttachGame )
return var + "" + LocaleController . getString ( "" , R . string . AttachSticker )
var . put ( "" , true )
var . setVibrate ( vibrationPattern = new long var )
WearDataLayerListenerService . sendMessageToWatch ( "" , var . toString ( var ) . getBytes ( "" ) , "" )
for ( int var = 0 ; var < var . size ( var ) ; var ++ )
var . add ( var )
if ( var != var )
scheduleNotificationDelay ( var > ConnectionsManager . getInstance ( var ) . getCurrentTime var )
if ( var )
setBadge ( getTotalAllUnreadCount var )
int var = var . get ( var )
var . add ( var )
scheduleNotificationDelay ( var > ConnectionsManager . getInstance ( var ) . getCurrentTime var )
if ( var )
setBadge ( getTotalAllUnreadCount var )
if ( var . getDialogId ( var ) == var && var . getId ( var ) <= ( int ) var )
var . add ( var )
long var = var . getId ( var )
if ( var . getId ( var ) <= var || var < 0 = true )
long var = var . getId ( var )
if ( ! var . isEmpty ( var ) )
NotificationCenter . getGlobalInstance ( var ) . postNotificationName ( NotificationCenter . pushMessagesUpdated )
SharedPreferences var = MessagesController . getNotificationsSettings ( var )
for ( int var = 0 ; var < var . size ( var ) ; var ++ )
int var = var . indexOfKey ( var )
if ( ! var . isEmpty ( var ) && ! AndroidUtilities . needShowPasscode ( false ) )
if ( ApplicationLoader . mainInterfacePaused || ! ApplicationLoader . isScreenOn && ! SharedConfig . isWaitingForPasscodeEnter )
SharedPreferences var = MessagesController . getNotificationsSettings ( var )
long var = var . keyAt ( var )
Integer var = var . get ( var )
long var = var . getId ( var )
var . add ( var )
if ( ! UserConfig . getInstance ( var ) . isClientActivated var || var . isEmpty ( var ) )
scheduleNotificationDelay ( var > ConnectionsManager . getInstance ( var ) . getCurrentTime var )
MessagesController . getInstance ( var ) . putUsers ( var , true )
MessagesController . getInstance ( var ) . putChats ( var , true )
MessagesController . getInstance ( var ) . putEncryptedChats ( var , true )
SharedPreferences var = MessagesController . getNotificationsSettings ( var )
LongSparseArray < Boolean > var = new LongSparseArray var ( var )
for ( int var = 0 ; var < var . size ( var ) ; var ++ )
if ( var . indexOfKey ( var ) >= 0 )
MessageObject var = new MessageObject ( var , var , false )
int var = var . indexOfKey ( var )
long var = var . keyAt ( var )
int var = var . indexOfKey ( var )
int var = var . valueAt ( var )
NotificationCenter . getGlobalInstance ( var ) . postNotificationName ( NotificationCenter . pushMessagesUpdated )
showOrUpdateNotification ( SystemClock . elapsedRealtime ( var ) / 1000 < 60 )
if ( var )
setBadge ( getTotalAllUnreadCount var )
if ( var == UserConfig . getInstance ( var ) . getClientUserId var )
if ( ! TextUtils . isEmpty ( var . messageOwner . message ) var )
if ( ! var && Build . VERSION . SDK_INT >= 19 && ! TextUtils . isEmpty ( var . messageOwner . message ) var )
if ( ! var && Build . VERSION . SDK_INT >= 19 && ! TextUtils . isEmpty ( var . messageOwner . message ) var )
if ( ! var && Build . VERSION . SDK_INT >= 19 && ! TextUtils . isEmpty ( var . messageOwner . message ) var )
if ( ! var && Build . VERSION . SDK_INT >= 19 && ! TextUtils . isEmpty ( var . messageOwner . message ) var )
if ( var == UserConfig . getInstance ( var ) . getClientUserId var var )
String var = "" + var . messageOwner . var
String var = "" + var . messageOwner . var
String var = "" + var . messageOwner . var
if ( var . messageOwner . media instanceof TLRPC . TL_messageMediaGeo || var . messageOwner . media instanceof TLRPC . TL_messageMediaVenue )
String var = "" + var . messageOwner . var
String var = "" + var . messageOwner . var
String var = "" + var . messageOwner . var
String var = "" + var . messageOwner . var
if ( var . messageOwner . media instanceof TLRPC . TL_messageMediaGeo || var . messageOwner . media instanceof TLRPC . TL_messageMediaVenue )
String var = "" + var . messageOwner . var
if ( ! var && Build . VERSION . SDK_INT >= 19 && ! TextUtils . isEmpty ( var . messageOwner . message ) var )
if ( ! var && Build . VERSION . SDK_INT >= 19 && ! TextUtils . isEmpty ( var . messageOwner . message ) var )
if ( ! var && Build . VERSION . SDK_INT >= 19 && ! TextUtils . isEmpty ( var . messageOwner . message ) var )
if ( ! var && Build . VERSION . SDK_INT >= 19 && ! TextUtils . isEmpty ( var . messageOwner . message ) var )
if ( ! var && Build . VERSION . SDK_INT >= 19 && ! TextUtils . isEmpty ( var . messageOwner . message ) var )
if ( ! var && Build . VERSION . SDK_INT >= 19 && ! TextUtils . isEmpty ( var . messageOwner . message ) var )
if ( ! var && Build . VERSION . SDK_INT >= 19 && ! TextUtils . isEmpty ( var . messageOwner . message ) var )
if ( ! var && Build . VERSION . SDK_INT >= 19 && ! TextUtils . isEmpty ( var . messageOwner . message ) var )
Intent var = new Intent ( ApplicationLoader . applicationContext , NotificationRepeat . class )
int var = var . getInt ( "" + var , - 1 )
if ( var >= ConnectionsManager . getInstance ( var ) . getCurrentTime var = 2 )
var . cancel ( var )
var . setSound ( null , var . build ( var ) )
NotificationCenter . getGlobalInstance ( var ) . postNotificationName ( NotificationCenter . pushMessagesUpdated )
if ( ! var || MediaController . getInstance ( var ) . isRecordingAudio var )
FileLog . d ( "" + var )
var . cancelRunnable ( var )
var . cancel ( var )
if ( ! UserConfig . getInstance ( var ) . isClientActivated var || var . isEmpty ( var ) )
if ( var == UserConfig . getInstance ( var ) . getClientUserId var )
TLRPC . User var = MessagesController . getInstance ( var ) . getUser ( var )
boolean var = var . getBoolean ( "" , true )
boolean var = var . getBoolean ( "" , true )
boolean var = var . getBoolean ( "" , true )
boolean var = var . getBoolean ( "" , true )
boolean var = var . getBoolean ( "" , false )
if ( AndroidUtilities . needShowPasscode ( false ) || SharedConfig . isWaitingForPasscodeEnter = null )
if ( var . size ( var ) == 1 && var != var )
var += LocaleController . formatPluralString ( "" , var )
var += LocaleController . formatString ( "" , R . string . NotificationMessagesPeopleDisplayOrder , LocaleController . formatPluralString ( "" , var ) , var , LocaleController . formatPluralString ( "" , var . size ( var ) ) , var . size ( var ) )
NotificationCompat . Builder var = new NotificationCompat . Builder ( ApplicationLoader . applicationContext ) . setContentTitle ( var ) . setSmallIcon ( R . drawable . notification ) . setAutoCancel ( true ) . setNumber ( var ) . setContentIntent ( var ) . setGroup ( var ) . setGroupSummary ( true ) . setShowWhen ( true ) . setWhen ( ( ( long ) var . messageOwner . date ) * 1000 ) . setColor ( 0xff2ca5e0 )
if ( ! var || var == 1 var )
if ( var == 1 || var == 2 )
if ( var == 4 )
var . setPriority ( NotificationCompat . PRIORITY_MIN )
if ( var != 1 && ! var var )
if ( ! MediaController . getInstance ( var ) . isRecordingAudio var )
if ( Build . VERSION . SDK_INT >= 26 var )
configVibrationPattern = new long var
if ( ! var && Build . VERSION . SDK_INT < 24 && SharedConfig . passcodeHash . length ( var ) == 0 && hasMessagesToReply var )
showExtraNotifications ( var , var , var )
var . putExtra ( "" , var . getId ( var ) )
LongSparseArray < ArrayList < MessageObject > > var = new LongSparseArray var ( var )
if ( ( int ) var == 0 var )
ArrayList < NotificationHolder > var = new ArrayList var ( var )
var . get ( var ) . call var
for ( int var = 0 , var var = var . var ( var ) ; var < var ; var ++ )
MessageObject var = var . get ( 0 )
if ( var != 0 = var = var )
var = MessagesController . getInstance ( var ) . getUser ( var . user_id )
var = LocaleController . getString ( "" , R . string . SecretChatName )
if ( var > 0 var )
if ( ( ! var || var ) && var && ! SharedConfig . isWaitingForPasscodeEnter )
if ( var < 0 var )
NotificationCompat . MessagingStyle var = new NotificationCompat . MessagingStyle ( "" ) . setConversationTitle ( String . format ( "" , var , LocaleController . formatPluralString ( "" , Math . max ( var , var . var ( var ) ) , var . var ( var ) ) , Math . max ( var , var . var ( var ) ) , var . var ( var ) ) , var , LocaleController . formatPluralString ( "" , Math . max ( var , var . var ( var ) ) , var . var ( var ) ) , Math . max ( var , var . var ( var ) ) , var . var ( var ) )
StringBuilder var = new StringBuilder var
String senderName var = new String [ 1 ]
for ( int var = var . var ( var ) - 1 ; var >= 0 ; var -- )
if ( senderName [ 0 ] != null var )
if ( var [ 0 ] != 0 )
var = FileProvider . getUriForFile ( ApplicationLoader . applicationContext , BuildConfig . APPLICATION_ID + "" , var )
var . putExtra ( "" , - var )
var . putExtra ( "" , var )
Uri var = null
var = "" + ( - var ) + "" + var
var . put ( "" , var . dc_id + "" + var . volume_id + "" + var . secret )
NotificationCompat . Builder var = new NotificationCompat . Builder ( ApplicationLoader . applicationContext ) . setContentTitle ( var ) . setSmallIcon ( R . drawable . notification ) . setGroup ( var ) . setContentText ( var . toString ( var ) ) . setAutoCancel ( true ) . setNumber ( var . var ( var ) ) . setColor ( 0xff2ca5e0 ) . setGroupSummary ( false ) . setWhen ( var ) . setShowWhen ( true ) . setShortcutId ( "" + var ) . setGroupAlertBehavior ( NotificationCompat . GROUP_ALERT_SUMMARY ) . setStyle ( var ) . setContentIntent ( var ) . extend ( var ) . setSortKey ( "" + ( Long . MAX_VALUE - var ) ) . extend ( new NotificationCompat . CarExtender ( var ) . setUnreadConversation ( var . build ( var ) ) . build ( var ) ) . setCategory ( NotificationCompat . CATEGORY_MESSAGE )
var . setSound ( var , var . build ( var ) )
var . put ( "" , UserConfig . getInstance ( var ) . getClientUserId var )
if ( Math . abs ( System . currentTimeMillis ( var ) - var ) <= 100 )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . notificationsSettingsUpdated )
var . settings . flags |= 4
int var = var . getInt ( "" + var , - 1 )
( ( TLRPC . TL_inputNotifyPeer ) var . peer ) . peer = MessagesController . getInstance ( var ) . getInputPeer ( ( int ) var )
SharedPreferences var = MessagesController . getGlobalNotificationsSettings ( )
NotificationsController . getInstance ( var . getIntExtra ( "" , UserConfig . selectedAccount ) , UserConfig . selectedAccount ) . forceShowPopupForReply
MessagesController . getInstance ( UserConfig . selectedAccount ) . setReferer ( var . getExtras ( ) . getString ( "" ) )
FileLog . d ( "" )
ConnectionsManager . getInstance ( UserConfig . selectedAccount ) . setAppPaused ( true , true )
FileLog . d ( "" )
ConnectionsManager . getInstance ( UserConfig . selectedAccount ) . setAppPaused ( false , true )
SecretChatHelper var = Instance [ var ]
var = Instance [ var ]
Instance [ var ] = var = new SecretChatHelper ( var )
MessageObject var = MessagesController . getInstance ( var ) . dialogMessagesByRandomIds . get ( var . get ( var ) )
MessagesStorage . getInstance ( var ) . markMessagesAsDeletedByRandoms ( var )
var . local_id = var . id = UserConfig . getInstance ( var ) . getNewMessageId var
var . from_id = UserConfig . getInstance ( var ) . getClientUserId var
if ( var . participant_id == UserConfig . getInstance ( var ) . getClientUserId var var )
var . date = ConnectionsManager . getInstance ( var ) . getCurrentTime var
var . random_id = SendMessagesHelper . getInstance ( var ) . getNextRandomId var
UserConfig . getInstance ( var ) . saveConfig ( false )
MessagesStorage . getInstance ( var ) . putMessages ( var , false , true , true , 0 )
TLRPC . EncryptedChat var = MessagesController . getInstance ( var ) . getEncryptedChatDB ( var . id , false )
if ( var == UserConfig . getInstance ( var ) . getClientUserId var )
TLRPC . User var = MessagesController . getInstance ( var ) . getUser ( var )
final TLRPC . TL_dialog var = new TLRPC . TL_dialog ( var )
MessagesController . getInstance ( var ) . putEncryptedChat ( var , false )
MessagesController . getInstance ( var ) . dialogs_dict . put ( var . id , var )
MessagesController . getInstance ( var ) . dialogs . add ( var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . dialogsNeedReload )
MessagesStorage . getInstance ( var ) . putEncryptedChat ( var , var , var )
acceptSecretChat ( var )
MessagesController . getInstance ( var ) . putEncryptedChat ( var , false )
MessagesStorage . getInstance ( var ) . updateEncryptedChat ( var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . encryptedChatUpdated , var )
MessageObject var = new MessageObject ( var , var , false )
MessagesController . getInstance ( var ) . updateInterfaceWithMessages ( var . dialog_id , var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . dialogsNeedReload )
MessageObject var = new MessageObject ( var , var , false )
MessagesController . getInstance ( var ) . updateInterfaceWithMessages ( var . dialog_id , var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . dialogsNeedReload )
File var = new File ( FileLoader . getDirectory ( FileLoader . MEDIA_DIR_CACHE ) . MEDIA_DIR_CACHE , var + "" )
MessagesStorage . getInstance ( var ) . putMessages ( var , false , true , false , 0 )
if ( var . attachPath != null && var . attachPath . startsWith ( FileLoader . getDirectory ( FileLoader . MEDIA_DIR_CACHE ) . MEDIA_DIR_CACHE . getAbsolutePath var ) )
MessagesStorage . getInstance ( var ) . putMessages ( var , false , true , false , 0 )
SendMessagesHelper . getInstance ( var ) . putToSendingMessages ( var )
if ( var . admin_id == UserConfig . getInstance ( var ) . getClientUserId var var )
var . key_create_date = ConnectionsManager . getInstance ( var ) . getCurrentTime var
if ( ( var . key_use_count_out >= 100 || var . key_create_date < ConnectionsManager . getInstance ( var ) . getCurrentTime var - 60 * 60 * 24 * 7 ) && var . exchange_id == 0 && var . future_key_fingerprint == 0 )
MessagesStorage . getInstance ( var ) . updateEncryptedChatSeq ( var , false )
MessagesStorage . getInstance ( var ) . setMessageSeq ( var . id , var . seq_in , var . seq_out )
FileLog . d ( var + "" + var . in_seq_no + "" + var . out_seq_no )
int var = var . getObjectSize ( var )
boolean var = var == 2 && var . admin_id != UserConfig . getInstance ( var ) . getClientUserId var
TLRPC . EncryptedChat var = MessagesController . getInstance ( var ) . getEncryptedChat ( var . id )
if ( var == null var )
MessagesStorage . getInstance ( var ) . updateMessageStateAndId ( var . random_id , var . id , var . id , var . date , false , 0 )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . messageReceivedByServer , var . id , var . id , var , var . dialog_id , 0L )
SendMessagesHelper . getInstance ( var ) . processSentMessage ( var . id )
SendMessagesHelper . getInstance ( var ) . removeFromSendingMessages ( var . id )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . messageSendError , var . id )
SendMessagesHelper . getInstance ( var ) . processSentMessage ( var . id )
SendMessagesHelper . getInstance ( var ) . stopVideoService ( var . attachPath )
SendMessagesHelper . getInstance ( var ) . removeFromSendingMessages ( var . id )
byte var var = new byte [ 36 ]
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . encryptedChatUpdated , var )
if ( var != null var )
if ( var == UserConfig . getInstance ( var ) . getClientUserId var )
var . key_create_date = ConnectionsManager . getInstance ( var ) . getCurrentTime var
MessagesStorage . getInstance ( var ) . updateEncryptedChat ( var )
var . local_id = var . id = UserConfig . getInstance ( var ) . getNewMessageId var
UserConfig . getInstance ( var ) . saveConfig ( false )
var . to_id . user_id = UserConfig . getInstance ( var ) . getClientUserId var
var . media . flags |= 4
var . ttl = Math . max ( var . media . duration + 1 , var . ttl )
var . message = ""
var . local_id = var . id = UserConfig . getInstance ( var ) . getNewMessageId var
UserConfig . getInstance ( var ) . saveConfig ( false )
var . to_id . user_id = UserConfig . getInstance ( var ) . getClientUserId var
TLRPC . TL_dialog var = MessagesController . getInstance ( var ) . dialogs_dict . get ( var )
MessagesController . getInstance ( var ) . dialogMessage . remove ( var . id )
NotificationsController . getInstance ( var ) . processReadMessages ( null , var , 0 , Integer . MAX_VALUE , false )
LongSparseArray < Integer > var = new LongSparseArray var ( 1 )
MessagesStorage . getInstance ( var ) . deleteDialog ( var , 1 )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . dialogsNeedReload )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . removeAllMessagesFromDialog , var , false )
int var = ConnectionsManager . getInstance ( var ) . getCurrentTime var
MessagesStorage . getInstance ( var ) . createTaskForSecretChat ( var . id , var , var , 1 , var . action . random_ids )
if ( var . exchange_id > var . action . exchange_id var )
FileLog . d ( "" )
byte var var = var . toByteArray ( var )
if ( var . exchange_id == var . action . exchange_id var )
byte var var = Utilities . computeSHA1 ( var )
if ( ! Utilities . isGoodGaAndGb ( var , var ) )
MessagesStorage . getInstance ( var ) . updateEncryptedChat ( var )
if ( var . exchange_id == var . action . exchange_id && var . future_key_fingerprint == var . action . key_fingerprint var )
var . key_create_date = ConnectionsManager . getInstance ( var ) . getCurrentTime var
MessagesStorage . getInstance ( var ) . updateEncryptedChat ( var )
MessagesStorage . getInstance ( var ) . updateEncryptedChat ( var )
MessagesStorage . getInstance ( var ) . updateEncryptedChat ( var )
var . from_id = UserConfig . getInstance ( var ) . getClientUserId var
if ( var . participant_id == UserConfig . getInstance ( var ) . getClientUserId var var )
if ( var . admin_id == UserConfig . getInstance ( var ) . getClientUserId var && var % 2 == 0 ++ )
SQLiteCursor var = MessagesStorage . getInstance ( var ) . getDatabase var . queryFinalized ( String . format ( Locale . US , "" , var . id , var , var , var , var ) . US , "" , var . id , var , var , var , var )
var = MessagesStorage . getInstance ( var ) . getDatabase var . queryFinalized ( String . format ( Locale . US , "" , var , var , var ) . US , "" , var , var , var )
if ( var != null var )
if ( var . size ( var ) != 0 )
var . add ( createDeleteMessage ( UserConfig . getInstance ( var ) . getNewMessageId var , var . keyAt ( var ) , 0 , Utilities . random . nextLong ( var ) , var ) . getInstance ( var ) . getNewMessageId var , var . keyAt ( var ) , 0 , Utilities . random . nextLong ( var ) , var )
UserConfig . getInstance ( var ) . saveConfig ( false )
MessageObject var = new MessageObject ( var , var , false )
SendMessagesHelper . getInstance ( var ) . retrySendMessage ( var , true )
SendMessagesHelper . getInstance ( var ) . processUnsentMessages ( var , new ArrayList < TLRPC . User > . User ( var ) , new ArrayList < TLRPC . Chat > . Chat ( var ) , var )
MessagesStorage . getInstance ( var ) . getDatabase var . executeFast ( String . format ( Locale . US , "" , var . id , var , var ) . US , "" , var . id , var , var ) . stepThis var . dispose var
for ( int var = 0 ; var < var . size ( var ) ; var ++ )
MessagesStorage . getInstance ( var ) . updateEncryptedChatSeq ( var , true )
Utilities . aesIgeEncryption ( var . buffer , var . aesKey , var . aesIv , false , false , 24 , var . limit ( var ) - 24 )
final TLRPC . EncryptedChat var = MessagesController . getInstance ( var ) . getEncryptedChatDB ( var . chat_id , true )
if ( var != null var )
boolean var = var . admin_id == UserConfig . getInstance ( var ) . getClientUserId var
if ( var . admin_id == UserConfig . getInstance ( var ) . getClientUserId var var )
FileLog . d ( "" + var . seq_in + "" + var . seq_out )
FileLog . d ( "" + var . in_seq_no + "" + var . out_seq_no )
MessagesController . getInstance ( var ) . putEncryptedChat ( var , false )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . encryptedChatUpdated , var )
MessagesStorage . getInstance ( var ) . updateEncryptedChatSeq ( var , true )
BigInteger var = BigInteger . valueOf ( MessagesStorage . getInstance ( var ) . getSecretG var )
var = var . modPow ( new BigInteger ( 1 , var ) , var , new BigInteger ( 1 , MessagesStorage . getInstance ( var ) . getSecretPBytes var ) , MessagesStorage . getInstance ( var ) . getSecretPBytes var )
byte var var = new byte [ 256 ]
var . exchange_id = SendMessagesHelper . getInstance ( var ) . getNextRandomId var
if ( var . key_fingerprint == var var )
var . key_create_date = ConnectionsManager . getInstance ( var ) . getCurrentTime var
MessagesController . getInstance ( var ) . putEncryptedChat ( var , false )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . encryptedChatUpdated , var )
MessagesController . getInstance ( var ) . putEncryptedChat ( var , false )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . encryptedChatUpdated , var )
if ( var == null var )
MessagesStorage . getInstance ( var ) . setSecretPBytes ( var . p )
MessagesStorage . getInstance ( var ) . setSecretG ( var . g )
MessagesStorage . getInstance ( var ) . setLastSecretVersion ( var . version )
var . key_create_date = ConnectionsManager . getInstance ( var ) . getCurrentTime var
MessagesController . getInstance ( var ) . putEncryptedChat ( var , false )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . encryptedChatUpdated , var )
if ( var == null var )
MessagesStorage . getInstance ( var ) . setSecretPBytes ( var . p )
MessagesStorage . getInstance ( var ) . setSecretG ( var . g )
MessagesStorage . getInstance ( var ) . setLastSecretVersion ( var . version )
final byte var var = new byte [ 256 ]
var = var . modPow ( new BigInteger ( 1 , var ) , var , new BigInteger ( 1 , MessagesStorage . getInstance ( var ) . getSecretPBytes var ) , MessagesStorage . getInstance ( var ) . getSecretPBytes var )
var . user_id = MessagesController . getInstance ( var ) . getInputUser ( var )
MessagesController . getInstance ( var ) . putEncryptedChat ( var , false )
var . last_message_date = ConnectionsManager . getInstance ( var ) . getCurrentTime var
MessagesController . getInstance ( var ) . dialogs_dict . put ( var . id , var )
MessagesController . getInstance ( var ) . dialogs . add ( var )
MessagesStorage . getInstance ( var ) . putEncryptedChat ( var , var , var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . dialogsNeedReload )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . encryptedChatCreated , var )
MessagesController . getInstance ( var ) . processUpdateArray ( var , null , null , false )
ConnectionsManager . getInstance ( var ) . cancelRequest ( var , true )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . wasUnableToFindCurrentLocation , var )
FileLog . d ( "" + var )
SecretChatHelper . getInstance ( currentAccount ) . performSendEncryptedRequest ( ( TLRPC . TL_messages_sendEncryptedMultiMedia ) var . var , this )
MessagesStorage . getInstance ( currentAccount ) . markMessageAsSendError ( var . messageOwner )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . messageSendError , var . getId ( ) )
MessagesStorage . getInstance ( currentAccount ) . markMessageAsSendError ( var . messageOwner )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . messageSendError , var . getId ( ) )
SendMessagesHelper var = var [ var ]
var = var [ var ]
var [ var ] = var = new SendMessagesHelper ( var )
public SendMessagesHelper ( int var )
NotificationCenter . getInstance ( var ) . addObserver ( SendMessagesHelper . this , NotificationCenter . FileDidUpload )
NotificationCenter . getInstance ( var ) . addObserver ( SendMessagesHelper . this , NotificationCenter . FileDidFailUpload )
NotificationCenter . getInstance ( var ) . addObserver ( SendMessagesHelper . this , NotificationCenter . FilePreparingStarted )
NotificationCenter . getInstance ( var ) . addObserver ( SendMessagesHelper . this , NotificationCenter . FileNewChunkAvailable )
NotificationCenter . getInstance ( var ) . addObserver ( SendMessagesHelper . this , NotificationCenter . FilePreparingFailed )
NotificationCenter . getInstance ( var ) . addObserver ( SendMessagesHelper . this , NotificationCenter . httpFileDidFailedLoad )
NotificationCenter . getInstance ( var ) . addObserver ( SendMessagesHelper . this , NotificationCenter . httpFileDidLoaded )
NotificationCenter . getInstance ( var ) . addObserver ( SendMessagesHelper . this , NotificationCenter . FileDidLoaded )
NotificationCenter . getInstance ( var ) . addObserver ( SendMessagesHelper . this , NotificationCenter . FileDidFailedLoad )
SecretChatHelper . getInstance ( var ) . performSendEncryptedRequest ( var , var . obj . messageOwner , var . encryptedChat , var , var . originalPath , var . obj )
FileLoader . getInstance ( var ) . checkUploadNewDataAvailable ( var , var , var , var )
var . messageOwner . params . remove ( "" )
MessagesStorage . getInstance ( var ) . putMessages ( var , false , true , false , 0 )
var . obj . messageOwner . params . remove ( "" )
MessagesStorage . getInstance ( var ) . putMessages ( var , false , true , false , 0 )
final File var = new File ( FileLoader . getDirectory ( FileLoader . MEDIA_DIR_CACHE ) . MEDIA_DIR_CACHE , var )
final TLRPC . TL_photo var = generatePhotoSizes ( var . toString ( ) , null )
MessagesStorage . getInstance ( var ) . putMessages ( var , false , true , false , 0 )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . updateMessageMedia , var . messageOwner )
final File var = new File ( FileLoader . getDirectory ( FileLoader . MEDIA_DIR_CACHE ) . MEDIA_DIR_CACHE , var )
MessagesStorage . getInstance ( var ) . putMessages ( var , false , true , false , 0 )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . updateMessageMedia , var . obj . messageOwner )
MessagesStorage . getInstance ( var ) . putMessages ( var , var . peer , - 2 , 0 , false )
FileLoader . getInstance ( var ) . cancelUploadFile ( var , var )
MessagesController . getInstance ( var ) . deleteMessages ( var , null , null , var , false )
TLRPC . EncryptedChat var = MessagesController . getInstance ( var ) . getEncryptedChat ( var )
MessagesStorage . getInstance ( var ) . markMessageAsSendError ( var . messageOwner )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . messageSendError , var . getId ( ) )
SecretChatHelper . getInstance ( var ) . sendTTLMessage ( var , var . messageOwner )
SecretChatHelper . getInstance ( var ) . sendMessagesDeleteMessage ( var , null , var . messageOwner )
SecretChatHelper . getInstance ( var ) . sendClearHistoryMessage ( var , var . messageOwner )
SecretChatHelper . getInstance ( var ) . sendNotifyLayerMessage ( var , var . messageOwner )
SecretChatHelper . getInstance ( var ) . sendMessagesReadMessage ( var , null , var . messageOwner )
SecretChatHelper . getInstance ( var ) . sendScreenshotMessage ( var , null , var . messageOwner )
SecretChatHelper . getInstance ( var ) . sendCommitKeyMessage ( var , var . messageOwner )
SecretChatHelper . getInstance ( var ) . sendAbortKeyMessage ( var , var . messageOwner , 0 )
SecretChatHelper . getInstance ( var ) . sendRequestKeyMessage ( var , var . messageOwner )
SecretChatHelper . getInstance ( var ) . sendAcceptKeyMessage ( var , var . messageOwner )
SecretChatHelper . getInstance ( var ) . sendNoopMessage ( var , var . messageOwner )
TLRPC . User var = MessagesController . getInstance ( var ) . getUser ( ( int ) var . getDialogId ( ) )
sendMessage ( ( TLRPC . TL_photo ) var . messageOwner . media . photo , null , var , var . replyMessageObject , var . messageOwner . message , var . messageOwner . entities , null , null , var . messageOwner . media . ttl_seconds )
sendMessage ( ( TLRPC . TL_document ) var . messageOwner . media . document , null , var . messageOwner . attachPath , var , var . replyMessageObject , var . messageOwner . message , var . messageOwner . entities , null , null , var . messageOwner . media . ttl_seconds )
if ( var == null || var == 0 || var . id == UserConfig . getInstance ( var ) . getClientUserId )
var . local_id = var . id = UserConfig . getInstance ( var ) . getNewMessageId
var . from_id = UserConfig . getInstance ( var ) . getClientUserId
var . date = ConnectionsManager . getInstance ( var ) . getCurrentTime
UserConfig . getInstance ( var ) . saveConfig ( false )
MessagesController . getInstance ( var ) . updateInterfaceWithMessages ( var . dialog_id , var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . dialogsNeedReload )
MessagesStorage . getInstance ( var ) . putMessages ( var , false , true , false , 0 )
TLRPC . EncryptedChat var = MessagesController . getInstance ( var ) . getEncryptedChat ( var )
sendMessage ( ( TLRPC . TL_document ) var , null , null , var , var , null , null , null , null , 0 )
final TLRPC . Peer var = MessagesController . getInstance ( var ) . getPeer ( ( int ) var )
TLRPC . User var = MessagesController . getInstance ( var ) . getUser ( var )
TLRPC . Chat var = MessagesController . getInstance ( var ) . getChat ( - var )
LongSparseArray < Long > var = new LongSparseArray
final LongSparseArray < TLRPC . Message > var = var
TLRPC . InputPeer var = MessagesController . getInstance ( var ) . getInputPeer ( var )
int var = UserConfig . getInstance ( var ) . getClientUserId
if ( var . getId ( ) <= 0 || var . needDrawBluredPreview ( ) )
TLRPC . User var = MessagesController . getInstance ( var ) . getUser ( var . messageOwner . from_id )
var . local_id = var . id = UserConfig . getInstance ( var ) . getNewMessageId
var . from_id = UserConfig . getInstance ( var ) . getClientUserId
var . date = ConnectionsManager . getInstance ( var ) . getCurrentTime
if ( var instanceof TLRPC . TL_inputPeerChannel && ! var )
if ( BuildVars . LOGS_ENABLED )
FileLog . d ( "" + var . user_id + "" + var . chat_id + "" + var . channel_id + "" + var . access_hash )
MessagesStorage . getInstance ( var ) . putMessages ( new ArrayList ( var ) , false , true , false , 0 )
MessagesController . getInstance ( var ) . updateInterfaceWithMessages ( var , var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . dialogsNeedReload )
UserConfig . getInstance ( var ) . saveConfig ( false )
var . silent = MessagesController . getNotificationsSettings ( var ) . getBoolean ( "" + var , false )
TLRPC . Chat var = MessagesController . getInstance ( var ) . getChat ( var . messageOwner . var . channel_id )
LongSparseArray < TLRPC . Message > var = new LongSparseArray
SparseLongArray var = new SparseLongArray
Integer var = MessagesController . getInstance ( var ) . dialogs_read_outbox_max . get ( var )
var = MessagesStorage . getInstance ( var ) . getDialogReadMax ( true , var )
MessagesController . getInstance ( var ) . dialogs_read_outbox_max . put ( var , var )
MessagesController . getInstance ( var ) . processNewDifferenceParams ( - 1 , var . pts , - 1 , var . pts_count )
MessagesController . getInstance ( var ) . processNewChannelDifferenceParams ( var . pts , var . pts_count , var . var . channel_id )
long var = var . get ( var . id )
if ( var != 0 )
MessagesStorage . getInstance ( var ) . updateMessageStateAndId ( var . var , var , var . id , 0 , false , var . channel_id )
MessagesStorage . getInstance ( var ) . putMessages ( var , true , false , false , 0 )
DataQuery . getInstance ( var ) . increasePeerRaiting ( var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . messageReceivedByServer , var , var . id , var , var , 0L )
MessagesController . getInstance ( var ) . processUpdates ( var , false )
StatsController . getInstance ( var ) . incrementSentItemsCount ( ConnectionsManager . getCurrentNetworkType ( ) , StatsController . TYPE_MESSAGES , var )
AlertsCreator . processError ( var , var , null , var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . messageSendError , var . id )
var . peer = MessagesController . getInstance ( var ) . getInputPeer ( ( int ) var . getDialogId ( ) )
MessagesController . getInstance ( var ) . processUpdates ( ( TLRPC . Updates ) var , false )
AlertsCreator . processError ( var , var , var , var )
var . geo . lat = AndroidUtilities . fixLocationCoord ( var . getLatitude ( ) )
var . geo . _long = AndroidUtilities . fixLocationCoord ( var . getLongitude ( ) )
sendMessage ( var , var . getDialogId ( ) , var , null , null )
var . put ( var , true )
MessagesController . getInstance ( var ) . putUsers ( var . users , false )
MessagesStorage . getInstance ( var ) . saveBotCache ( var , var )
TLRPC . Chat var = MessagesController . getInstance ( var ) . getChat ( - var )
var . showOpenGameAlert ( var , var , var . url , ! var && MessagesController . getNotificationsSettings ( var ) . getBoolean ( "" + var , true ) + var , true , var )
MessagesStorage . getInstance ( var ) . getBotCache ( var , var )
ConnectionsManager . getInstance ( var ) . sendRequest ( var , var , ConnectionsManager . RequestFlagFailOnServerErrors )
ConnectionsManager . getInstance ( var ) . sendRequest ( var , var , ConnectionsManager . RequestFlagFailOnServerErrors )
var . peer = MessagesController . getInstance ( var ) . getInputPeer ( ( int ) var . getDialogId ( ) )
ConnectionsManager . getInstance ( var ) . sendRequest ( var , var , ConnectionsManager . RequestFlagFailOnServerErrors )
var . silent = MessagesController . getNotificationsSettings ( var ) . getBoolean ( "" + var . channel_id , false )
var = MessagesStorage . getInstance ( var ) . createPendingTask ( var )
MessagesController . getInstance ( var ) . processUpdates ( ( TLRPC . Updates ) var , false )
sendMessage ( null , null , null , null , null , null , null , var , var , null , null , null , true , null , null , var , var , 0 )
sendMessage ( null , var , null , null , var , null , var , null , var , var , var , null , true , null , var , var , var , var )
sendMessage ( null , null , var , null , null , null , null , null , var , null , var , null , true , null , null , var , var , 0 )
sendMessage ( null , null , null , null , null , var , null , null , var , null , var , null , true , null , null , var , var , 0 )
sendMessage ( null , var , null , var , null , null , null , null , var , var , var , null , true , null , var , var , var , var )
var = MessagesController . getInstance ( var ) . getEncryptedChat ( var )
MessagesStorage . getInstance ( var ) . markMessageAsSendError ( var . messageOwner )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . messageSendError , var . getId ( ) )
var . message = var . editingMessage . toString ( )
var . media . vcard = ""
if ( var . var == null )
var = DataQuery . getInstance ( var ) . getStickerSetName ( var . stickerset . id )
var . local_id = var . id = UserConfig . getInstance ( var ) . getNewMessageId
UserConfig . getInstance ( var ) . saveConfig ( false )
var . date = ConnectionsManager . getInstance ( var ) . getCurrentTime
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . messageSendError , var . id )
TLRPC . User var = MessagesController . getInstance ( var ) . getUser ( var . user_id )
TLRPC . InputUser var = MessagesController . getInstance ( var ) . getInputUser ( var )
if ( var . participant_id == UserConfig . getInstance ( var ) . getClientUserId )
MessagesStorage . getInstance ( var ) . putMessages ( var , false , true , false , 0 )
MessagesController . getInstance ( var ) . updateInterfaceWithMessages ( var , var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . dialogsNeedReload )
if ( BuildVars . LOGS_ENABLED )
FileLog . d ( "" + var . user_id + "" + var . chat_id + "" + var . channel_id + "" + var . access_hash )
var . silent = MessagesController . getNotificationsSettings ( var ) . getBoolean ( "" + var , false )
if ( var . reply_to_msg_id != 0 )
var . reply_to_msg_id = var . reply_to_msg_id
DataQuery . getInstance ( var ) . cleanDraft ( var , false )
if ( var . reply_to_random_id != 0 )
var . reply_to_random_id = var . reply_to_random_id
SecretChatHelper . getInstance ( var ) . performSendEncryptedRequest ( var , var . messageOwner , var , null , null , var )
DataQuery . getInstance ( var ) . cleanDraft ( var , false )
DataQuery . getInstance ( var ) . cleanDraft ( var , false )
if ( var . reply_to_msg_id != 0 )
var . reply_to_msg_id = var . reply_to_msg_id
var . silent = MessagesController . getNotificationsSettings ( var ) . getBoolean ( "" + var , false )
if ( var . reply_to_msg_id != 0 )
var . reply_to_msg_id = var . reply_to_msg_id
if ( var . reply_to_random_id != 0 )
var . reply_to_random_id = var . reply_to_random_id
SecretChatHelper . getInstance ( var ) . performSendEncryptedRequest ( var , var . messageOwner , var , null , null , var )
SecretChatHelper . getInstance ( var ) . performSendEncryptedRequest ( var , var . messageOwner , var , var , null , var )
SecretChatHelper . getInstance ( var ) . performSendEncryptedRequest ( var , var . messageOwner , var , var , null , var )
SecretChatHelper . getInstance ( var ) . performSendEncryptedRequest ( var , var . messageOwner , var , null , null , var )
SecretChatHelper . getInstance ( var ) . performSendEncryptedRequest ( var , var . messageOwner , var , null , null , var )
SecretChatHelper . getInstance ( var ) . performSendEncryptedRequest ( var , var . messageOwner , var , var , null , var )
DataQuery . getInstance ( var ) . cleanDraft ( var , false )
TLRPC . Chat var = MessagesController . getInstance ( var ) . getChat ( - var . messageOwner . var )
var . silent = MessagesController . getNotificationsSettings ( var ) . getBoolean ( "" + var , false )
if ( var . reply_to_msg_id != 0 )
var . reply_to_msg_id = var . reply_to_msg_id
DataQuery . getInstance ( var ) . cleanDraft ( var , false )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . messageSendError , var . id )
ImageLoader . getInstance ( ) . loadHttpFile ( var . httpLocation , "" , var )
FileLoader . getInstance ( var ) . uploadFile ( var , false , true , ConnectionsManager . FileTypePhoto )
FileLoader . getInstance ( var ) . loadFile ( var . var , "" , 0 , 0 )
FileLoader . getInstance ( var ) . uploadFile ( var , true , true , ConnectionsManager . FileTypePhoto )
var = FileLoader . getDirectory ( FileLoader . MEDIA_DIR_CACHE ) + "" + var . id + ""
SecretChatHelper . getInstance ( var ) . performSendEncryptedRequest ( var , var . obj . messageOwner , var . encryptedChat , var . videoEditedInfo . encryptedFile , var . originalPath , var . obj )
var = FileLoader . getDirectory ( FileLoader . MEDIA_DIR_CACHE ) + "" + var . id + ""
FileLoader . getInstance ( var ) . uploadFile ( var , false , false , var . size , ConnectionsManager . FileTypeVideo )
FileLoader . getInstance ( var ) . uploadFile ( var , false , false , ConnectionsManager . FileTypeVideo )
FileLoader . getInstance ( var ) . uploadFile ( var , false , true , ConnectionsManager . FileTypePhoto )
var = FileLoader . getDirectory ( FileLoader . MEDIA_DIR_CACHE ) + "" + var . id + ""
FileLoader . getInstance ( var ) . loadFile ( var , true , 0 )
FileLoader . getInstance ( var ) . uploadFile ( var , true , false , var . size , ConnectionsManager . FileTypeVideo )
FileLoader . getInstance ( var ) . uploadFile ( var , true , false , ConnectionsManager . FileTypeVideo )
ImageLoader . getInstance ( ) . loadHttpFile ( var . httpLocation , "" , var )
FileLoader . getInstance ( var ) . uploadFile ( var , var . sendRequest == null , false , ConnectionsManager . FileTypeFile )
FileLoader . getInstance ( var ) . uploadFile ( var , false , true , ConnectionsManager . FileTypePhoto )
FileLoader . getInstance ( var ) . loadFile ( var , true , 0 )
FileLoader . getInstance ( var ) . uploadFile ( var , true , false , ConnectionsManager . FileTypeFile )
FileLoader . getInstance ( var ) . uploadFile ( var , var . sendRequest == null , true , ConnectionsManager . FileTypeAudio )
var = FileLoader . getDirectory ( FileLoader . MEDIA_DIR_CACHE ) + "" + var . id + ""
var = FileLoader . getDirectory ( FileLoader . MEDIA_DIR_CACHE ) + "" + var . id + ""
FileLoader . getInstance ( var ) . uploadFile ( var , false , false , var . size , ConnectionsManager . FileTypeVideo )
FileLoader . getInstance ( var ) . uploadFile ( var , false , false , ConnectionsManager . FileTypeVideo )
FileLoader . getInstance ( var ) . uploadFile ( var , false , true , ConnectionsManager . FileTypePhoto )
FileLoader . getInstance ( var ) . uploadFile ( var , true , false , var . size , ConnectionsManager . FileTypeVideo )
FileLoader . getInstance ( var ) . uploadFile ( var , true , false , ConnectionsManager . FileTypeVideo )
ImageLoader . getInstance ( ) . loadHttpFile ( var . httpLocation , "" , var )
FileLoader . getInstance ( var ) . uploadFile ( var , var . sendEncryptedRequest != null , true , ConnectionsManager . FileTypePhoto )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . FileUploadProgressChanged , var , 1.0f , false )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . FileUploadProgressChanged , var , 1.0f , false )
MessagesStorage . getInstance ( var ) . putMessages ( var . messages , false , true , false , 0 )
MessagesController . getInstance ( var ) . updateInterfaceWithMessages ( var . peer , var . messageObjects )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . dialogsNeedReload )
SecretChatHelper . getInstance ( var ) . performSendEncryptedRequest ( ( TLRPC . TL_messages_sendEncryptedMultiMedia ) var . sendEncryptedRequest , var )
NotificationCenter . getGlobalInstance ( ) . postNotificationName ( NotificationCenter . stopEncodingService , var , var )
TLRPC . Message var = var . get ( var )
SparseArray < TLRPC . Message > var = new SparseArray
LongSparseArray < Integer > var = new LongSparseArray
var . put ( var . random_id , var . id )
MessagesController . getInstance ( var ) . processNewDifferenceParams ( - 1 , var . pts , - 1 , var . pts_count )
MessagesController . getInstance ( var ) . processNewChannelDifferenceParams ( var . pts , var . pts_count , var . var . to_id . channel_id )
Integer var = MessagesController . getInstance ( var ) . dialogs_read_outbox_max . get ( var . dialog_id )
var = MessagesStorage . getInstance ( var ) . getDialogReadMax ( var . out , var . dialog_id )
MessagesController . getInstance ( var ) . dialogs_read_outbox_max . put ( var . dialog_id , var )
StatsController . getInstance ( var ) . incrementSentItemsCount ( ConnectionsManager . getCurrentNetworkType ( ) , StatsController . TYPE_MESSAGES , 1 )
MessagesStorage . getInstance ( var ) . updateMessageStateAndId ( var . random_id , var , var . var , 0 , false , var . to_id . channel_id )
MessagesStorage . getInstance ( var ) . putMessages ( var , true , false , false , 0 )
DataQuery . getInstance ( var ) . increasePeerRaiting ( var . dialog_id )
MessagesController . getInstance ( var ) . processUpdates ( var , false )
AlertsCreator . processError ( var , var , null , var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . messageSendError , var . id )
MessagesController . getInstance ( var ) . processNewDifferenceParams ( - 1 , var . pts , var . date , var . pts_count )
MessagesController . getInstance ( var ) . processNewDifferenceParams ( - 1 , var . pts , - 1 , var . pts_count )
MessagesController . getInstance ( var ) . processNewChannelDifferenceParams ( var . pts , var . pts_count , var . message . to_id . channel_id )
Integer var = MessagesController . getInstance ( var ) . dialogs_read_outbox_max . get ( var . dialog_id )
var = MessagesStorage . getInstance ( var ) . getDialogReadMax ( var . out , var . dialog_id )
MessagesController . getInstance ( var ) . dialogs_read_outbox_max . put ( var . dialog_id , var )
MessagesController . getInstance ( var ) . processUpdates ( var , false )
LocationController . getInstance ( var ) . addSharingLocation ( var . dialog_id , var . id , var . media . period , var )
StatsController . getInstance ( var ) . incrementSentItemsCount ( ConnectionsManager . getCurrentNetworkType ( ) , StatsController . TYPE_MESSAGES , 1 )
MessagesStorage . getInstance ( var ) . putMessages ( var , true , false , var , 0 )
MessagesStorage . getInstance ( var ) . putMessages ( var , true , false , false , 0 )
MessagesController . getInstance ( var ) . updateInterfaceWithMessages ( var . getDialogId ( ) , var , true )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . dialogsNeedReload )
DataQuery . getInstance ( var ) . increasePeerRaiting ( var . dialog_id )
AlertsCreator . processError ( var , var , null , var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . messageSendError , var . id )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . messageReceivedByAck , var )
MessagesStorage . getInstance ( var ) . putSentFile ( var , var . media . photo , 0 )
MessagesStorage . getInstance ( var ) . putSentFile ( var , var . media . document , 2 )
MessagesStorage . getInstance ( var ) . putSentFile ( var , var . media . document , 1 )
DataQuery . getInstance ( var ) . addRecentGif ( var . media . document , var . date )
DataQuery . getInstance ( var ) . addRecentSticker ( DataQuery . TYPE_IMAGE , var . media . document , var . date , false )
if ( var . attachPath != null && var . attachPath . startsWith ( FileLoader . getDirectory ( FileLoader . MEDIA_DIR_CACHE ) . MEDIA_DIR_CACHE . getAbsolutePath ) )
MessagesStorage . getInstance ( var ) . addRecentLocalFile ( var , var . toString ( ) , var . media . document )
MessagesController . getInstance ( var ) . putUsers ( var , true )
MessagesController . getInstance ( var ) . putChats ( var , true )
MessagesController . getInstance ( var ) . putEncryptedChats ( var , true )
UserConfig . getInstance ( var ) . saveConfig ( false )
if ( var . equals ( "" ) || var . equals ( "" ) . equals ( "" ) || var . equals ( "" ) || var . equals ( "" ) )
if ( var != 0 )
var . var = var
var = var . getTitle ( )
var = var . getArtist ( )
String var = var . toLowerCase ( )
if ( var . mime_type . equals ( "" ) && ( var == null || var . getGroupIdForUse ( ) == 0 ) )
if ( var . mime_type . equals ( "" ) && var && var == null )
prepareSendingDocuments ( var , var , var , var , var , var , var , var )
if ( ! prepareSendingDocumentInternal ( var , var . get ( var ) , var . get ( var ) , null , var , var , var , null , null , var ) = true )
if ( ! prepareSendingDocumentInternal ( var , null , null , var . get ( var ) , var , var , var , null , null , var ) = true )
prepareSendingMedia ( var , var , var , var , false , false , var )
if ( var . content != null )
var = var . content . url
var . mime_type = ""
var . date = ConnectionsManager . getInstance ( var ) . getCurrentTime
int var = var . content . mime_type . lastIndexOf ( '/' )
var . file_name = "" + var . content . mime_type . substring ( var + 1 )
String var = new File ( FileLoader . getDirectory ( FileLoader . MEDIA_DIR_CACHE ) . MEDIA_DIR_CACHE , Utilities . MD5 ( var . thumb . url ) . thumb . url + "" + ImageLoader . getHttpUrlExtension ( var . thumb . url , "" ) . thumb . url , "" ) . getAbsolutePath var
var . w = wh [ 0 ]
var . h = wh [ 1 ]
String var = new File ( FileLoader . getDirectory ( FileLoader . MEDIA_DIR_CACHE ) . MEDIA_DIR_CACHE , Utilities . MD5 ( var . thumb . url ) . thumb . url + "" + ImageLoader . getHttpUrlExtension ( var . thumb . url , "" ) . thumb . url , "" ) . getAbsolutePath var
var . thumb . w = wh [ 0 ]
var . thumb . h = wh [ 1 ]
var . thumb . var = new TLRPC . TL_fileLocationUnavailable ( var )
var = SendMessagesHelper . getInstance ( var ) . generatePhotoSizes ( var , null )
var . date = ConnectionsManager . getInstance ( var ) . getCurrentTime
var . w = wh [ 0 ]
var . h = wh [ 1 ]
if ( var != null && var . content != null )
var . put ( "" , var . content . url )
SendMessagesHelper . getInstance ( var ) . sendMessage ( var , null , var , var , var , var . send_message . message , var . send_message . entities , var . send_message . reply_markup , var , 0 )
SendMessagesHelper . getInstance ( var ) . sendMessage ( var , var , var . send_message . reply_markup , var )
SendMessagesHelper . getInstance ( var ) . sendMessage ( var . send_message . message , var , var , var , ! var . send_message . no_webpage , var . send_message . entities , var . send_message . reply_markup , var )
SendMessagesHelper . getInstance ( var ) . sendMessage ( var , var , var , var . send_message . reply_markup , var )
SendMessagesHelper . getInstance ( var ) . sendMessage ( var , var , var , var . send_message . reply_markup , var )
SendMessagesHelper . getInstance ( var ) . sendMessage ( var , var , var , var . send_message . reply_markup , var )
SendMessagesHelper . getInstance ( var ) . sendMessage ( var , var , var , var . send_message . reply_markup , var )
SendMessagesHelper . getInstance ( var ) . sendMessage ( var , var , null , null , true , null , null , null )
var . var = SendMessagesHelper . getInstance ( var ) . generatePhotoSizes ( var . path , var . uri )
var . date = ConnectionsManager . getInstance ( var ) . getCurrentTime
SendMessagesHelper . getInstance ( var ) . sendMessage ( var , null , var , var , var , var , var , null , var , 0 )
var = SendMessagesHelper . getInstance ( var ) . generatePhotoSizes ( var . toString ( ) , null )
var = SendMessagesHelper . getInstance ( var ) . generatePhotoSizes ( var . toString ( ) , null )
var . date = ConnectionsManager . getInstance ( var ) . getCurrentTime
if ( ! var && ( var != null || var . path . endsWith ( "" ) ) )
if ( var != null )
var = var . var
if ( var . resultWidth != var . originalWidth )
var += "" + var . resultWidth
UserConfig . getInstance ( var ) . saveConfig ( false )
if ( var != null && var . needConvert ( ) )
if ( var . var )
fillVideoAttribute ( var . var , var , var )
var . originalWidth = var . w
var . originalHeight = var . h
var . w = var . resultWidth
var . h = var . resultHeight
var . duration = int ( var . estimatedDuration / 1000 )
if ( var . rotationValue == 90 || var . rotationValue == 270 )
var . w = var . resultHeight
var . h = var . resultWidth
var . w = var . resultWidth
var . h = var . resultHeight
var . var = ( int ) var . estimatedSize
String var = Integer . MIN_VALUE + "" + SharedConfig . getLastLocalId ( ) + ""
SharedConfig . saveConfig ( )
FileLog . var ( var )
var = SendMessagesHelper . getInstance ( var ) . generatePhotoSizes ( var . path , var . uri )
SendMessagesHelper var = getInstance ( var )
MessagesStorage . getInstance ( var ) . putMessages ( var , var . peer , - 2 , 0 , false )
prepareSendingDocumentInternal ( var , var . get ( var ) , var . get ( var ) , null , var , var , var , var . get ( var ) , var . get ( var ) , var )
Bitmap var = Bitmaps . createScaledBitmap ( var , var , var , true )
if ( var . resultWidth != var . originalWidth )
UserConfig . getInstance ( var ) . saveConfig ( false )
TLRPC . EncryptedChat var = MessagesController . getInstance ( var ) . getEncryptedChat ( var )
String var = Integer . MIN_VALUE + "" + SharedConfig . getLastLocalId ( ) + ""
SharedConfig . saveConfig ( )
UserConfig . getInstance ( var ) . saveConfig ( false )
NotificationCenter . getGlobalInstance ( ) . postNotificationName ( NotificationCenter . didReceiveSmsCode , var . group ( 0 ) )
var [ 2 ] = byte ( var >>> 40 )
private StatsController ( int var )
if ( Math . abs ( var - var . get ( var ) ) >= 2000 )
for ( int var = 0 ; var < 3 ; var ++ )
var . getFD ( var ) . sync var
LocationController . getInstance ( var ) . removeAllLocationSharings
if ( ! UserConfig . getInstance ( var ) . isClientActivated )
SharedPreferences var = MessagesController . getGlobalMainSettings ( )
final CountDownLatch var = new CountDownLatch ( 1 )
var . add ( UserConfig . getInstance ( var ) . getClientUserId )
SQLiteCursor var = MessagesStorage . getInstance ( var ) . getDatabase . queryFinalized ( String . format ( Locale . US , "" , 0 , 30 ) . US , "" , 0 , 30 )
MessagesStorage . getInstance ( var ) . getChatsInternal ( TextUtils . join ( "" , var ) , var , var )
MessagesStorage . getInstance ( var ) . getUsersInternal ( TextUtils . join ( "" , var ) , var , var )
var . countDown ( )
var . await ( )
var = ApplicationLoader . applicationContext . getSharedPreferences ( "" + var , Context . MODE_PRIVATE )
var . putBoolean ( "" , var )
var . putBoolean ( "" , var )
var . putString ( "" , var )
var . putInt ( "" , var )
var . putLong ( "" , var )
var . putLong ( "" , var )
SerializedData var = new SerializedData ( var . getObjectSize ( ) )
public UserConfig ( int var ) = var
int var = 0
var = TLRPC . TL_help_termsOfService . TLdeserialize ( var , var . readInt32 ( false ) , false )
var = var . getInt ( "" , 0 )
var = var . getInt ( "" , var )
String var = var . getString ( "" , null )
if ( var == 0 )
String var = var . getString ( "" , null )
var = var . getBoolean ( "" , true )
var = var . getLong ( "" , System . currentTimeMillis ( ) )
String var = var . getString ( "" , null )
byte var = Base64 . decode ( var , Base64 . DEFAULT )
byte var = Base64 . decode ( var , Base64 . DEFAULT )
var = ApplicationLoader . applicationContext . getSharedPreferences ( "" + var , Context . MODE_PRIVATE )
byte var = Base64 . decode ( var , Base64 . DEFAULT )
byte var = Base64 . decode ( var , Base64 . DEFAULT )
long var = 0
String var = Base64 . encodeToString ( var . toByteArray ( ) , Base64 . DEFAULT )
String var = Base64 . encodeToString ( var . toByteArray ( ) , Base64 . DEFAULT )
if ( var != null )
var = TLRPC . TL_help_termsOfService . TLdeserialize ( var , var . readInt32 ( false ) , false )
var . cleanup ( )
var = var . getLong ( "" , System . currentTimeMillis ( ) )
var = var . getInt ( "" , BuildVars . BUILD_VERSION )
byte var = Base64 . decode ( var , Base64 . DEFAULT )
if ( var != null )
var = ( TLRPC . TL_help_appUpdate ) TLRPC . help_AppUpdate . TLdeserialize ( var , var . readInt32 ( false ) , false )
var . cleanup ( )
PackageInfo var = ApplicationLoader . applicationContext . getPackageManager ( ) . getPackageInfo ( ApplicationLoader . applicationContext . getPackageName ( ) , 0 )
var = Math . max ( var . lastUpdateTime , var . firstInstallTime )
var = Math . max ( var . lastUpdateTime , var . firstInstallTime )
var = Math . max ( var . lastUpdateTime , var . firstInstallTime )
FileLog . var ( var )
if ( var != BuildVars . BUILD_VERSION || var < var )
if ( var != BuildVars . BUILD_VERSION || var < var )
for ( int var = 0 ; var < var ; var ++ )
var = var . id
if ( var == null )
var = var [ var ]
if ( var == null && var == null || Math . abs ( SystemClock . elapsedRealtime ( ) - var ) < 30 * 60 * 1000 )
for ( int var = 0 ; var < var . length ; var ++ )
var = 0
var = true
var = true
var = true
var = null
var = null
var = false
SharedConfig . clearConfig ( )
if ( TextUtils . isEmpty ( var ) var && var . length ( ) <= 2 )
byte var = var . digest ( AndroidUtilities . getStringBytes ( var ) )
return String . format ( Locale . US , "" , var , var , var , var , var , var , var , var , var , var )
for ( int var = var ; var < args . length ; var ++ )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . FileUploadProgressChanged )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . stopEncodingService )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . FileUploadProgressChanged )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . stopEncodingService )
FileLog . d ( "" )
if ( var == var && var != null && var . equals ( var ) )
if ( var == var && ( var == null || var . equals ( var ) ) )
FileLog . d ( "" )
if ( UserConfig . getInstance ( var ) . isClientActivated )
final TLRPC . User var = UserConfig . getInstance ( var ) . getCurrentUser
NotificationCenter . getInstance ( var ) . addObserver ( var , NotificationCenter . FileDidLoaded )
FileLoader . getInstance ( var ) . loadFile ( var . var . photo_small , null , 0 , 1 )
NotificationCenter . getInstance ( var ) . removeObserver ( var , NotificationCenter . FileDidLoaded )
ConnectionsManager . getInstance ( var ) . setAppPaused ( false , false )
NotificationCenter . getInstance ( var ) . addObserver ( var , NotificationCenter . didReceivedNewMessages )
NotificationCenter . getInstance ( var ) . removeObserver ( var , NotificationCenter . didReceivedNewMessages )
ConnectionsManager . getInstance ( var ) . setAppPaused ( true , false )
SendMessagesHelper . getInstance ( var ) . sendMessage ( var . toString ( ) , var , null , null , true , null , null , null )
MessagesController . getInstance ( var ) . markDialogAsRead ( var , var , var , 0 , false , 0 , true )
if ( SharedConfig . customTabs )
if ( var . equals ( "" ) || var . toString ( var ) . toLowerCase var . contains ( "" ) )
ConnectionsManager . getInstance ( UserConfig . selectedAccount ) . cancelRequest ( var , true )
if ( var && SharedConfig . customTabs && ! var && ! var . equals ( "" ) )
if ( BuildVars . LOGS_ENABLED )
CameraInfo var = new CameraInfo ( var , var . facing )
FileLog . d ( "" + var . width + "" + var . height )
FileLog . d ( "" + var . width + "" + var . height )
NotificationCenter . getGlobalInstance ( ) . postNotificationName ( NotificationCenter . var )
Camera var = var . cameraInfo . var
for ( int var = 0 ; var < var ; var ++ )
if ( var == null )
var = var . cameraInfo . var = Camera . open ( var . cameraInfo . cameraId )
var . stopPreview ( )
var . cameraInfo . var = null
if ( var != null )
var . countDown ( )
var . await ( )
if ( var . frontCamera != 0 && var )
FileLog . d ( "" + var + "" + var )
FileLog . d ( "" )
FileLog . d ( "" )
int var = 4
public CameraInfo ( int var , int var )
var = var
FileLog . d ( "" + var . getWidth ( ) + "" + var . getHeight ( ) )
FileLog . d ( "" + var . getWidth ( ) + "" + var . getHeight ( ) )
var . setFocusMode ( var )
initCamera
initCamera
return var . skipData ( var - var )
this ( var , var , var , var , var , var , var )
this ( var , var , var , var , var , var , var , null )
return var <= 0 || var >= var || ( ! var && var . getTotalBytesAllocated ( ) >= var )
this ( var , var )
Constructor < ? > var = var . getConstructor ( boolean . class , long . class , android . os . Handler . class , org . telegram . messenger . exoplayer2 . video . VideoRendererEventListener . class , int . class )
var . add ( new MediaCodecAudioRenderer ( var , MediaCodecSelector . DEFAULT , var , false , var , var , AudioCapabilities . getCapabilities ( var ) , var ) , MediaCodecSelector . DEFAULT , var , false , var , var , AudioCapabilities . getCapabilities ( var ) , var )
return newSimpleInstance ( var , var , var , var )
return new ExoPlayerImpl ( var , var , var , Clock . DEFAULT )
PlaybackInfo var = getResetPlaybackInfo ( var , var , Player . STATE_IDLE )
var = new PlaybackInfo ( Timeline . EMPTY , 0 , TrackGroupArray . EMPTY , var )
var = new PlaybackInfo ( Timeline . EMPTY , 0 , TrackGroupArray . EMPTY , var )
var = new Handler ( var . getPlaybackLooper ( ) )
var = new ExoPlayerImplInternal ( var , var , var , var , var , var , var , var , this , var )
this . var = var
var . onShuffleModeEnabledChanged ( var )
var = SeekParameters . DEFAULT
var . setSeekParameters ( var )
var . prepare ( var , var , var )
var . onPlayerStateChanged ( var , var . playbackState )
Timeline var = var . var
var . obtainMessage ( ExoPlayerImplInternal . MSG_PLAYBACK_INFO_CHANGED , 1 , C . INDEX_UNSET , var ) . sendToTarget
Pair < Integer , Long > var = var . getPeriodPosition ( var , var , var , var )
var = C . usToMs ( var )
var = C . usToMs ( var )
var = var . first
var . onPositionDiscontinuity ( DISCONTINUITY_REASON_SEEK )
var . stop ( var )
if ( shouldMaskPosition )
var . timeline . getPeriod ( var . periodId . periodIndex , var )
if ( shouldMaskPosition )
if ( shouldMaskPosition )
return ! shouldMaskPosition && var . periodId . isAd ( )
return var . timeline . getPeriod ( var . periodId . periodIndex , var ) . windowIndex
var . onPlayerStateChanged ( var , var . playbackState )
var . onLoadingChanged ( var . isLoading )
var = false
boolean var = var . timeline != var . timeline || var . manifest != var . manifest
if ( var )
var . onPositionDiscontinuity ( var )
boolean var = var . trackSelectorResult != var . trackSelectorResult
var . onTimelineChanged ( var . timeline , var . manifest , var )
var . timeline . getPeriod ( var . periodId . periodIndex , var )
private static final MediaSourceRefreshInfo
public MediaSourceRefreshInfo ( MediaSource var , Timeline var , Object var )
this . var = var
this . var = new MediaPeriodQueue
var = var . var ( )
var = SeekParameters . DEFAULT
var = var . createHandler ( var . getLooper ( ) , this )
var . obtainMessage ( var , var ) . sendToTarget
var . obtainMessage ( var , new MediaSourceRefreshInfo ( var , var , var ) , var , var ) . sendToTarget
var = var . copyWithTimeline ( var , var )
prepareInternal ( ( MediaSource ) var . obj , var . arg1 != 0 , var . arg2 != 0 )
sendMessageInternal ( ( PlayerMessage ) var . obj )
if ( var . playbackState != var )
var = var . copyWithPlaybackState ( var )
if ( var . var != var )
var = var . copyWithIsLoading ( var )
seekToCurrentPosition ( true )
var = var . fromNewPosition ( var . periodId , var , var . contentPositionUs )
if ( var . playbackState == Player . STATE_READY . playbackState == Player . STATE_BUFFERING )
if ( var . playbackState == Player . STATE_BUFFERING )
if ( ! var . updateRepeatMode ( var ) )
if ( ! var . updateShuffleModeEnabled ( var ) )
if ( var )
var . setPositionDiscontinuity ( Player . DISCONTINUITY_REASON_INTERNAL )
MediaPeriodHolder var = var . getPlayingPeriod ( )
var = var . syncAndGetPositionUs ( )
var = var . fromNewPosition ( var , var , var . contentPositionUs )
var = C . TIME_UNSET
var = C . TIME_UNSET
var = var . second
long var = SystemClock . elapsedRealtime ( ) * 1000
if ( ! var . hasPlayingPeriod ( ) )
boolean var = var . isReady ( ) || var . isEnded ( ) || rendererWaitingForNextStream ( var )
long var = var . uptimeMillis ( )
MediaPeriodHolder var = var . getPlayingPeriod ( )
updateTrackSelectionPlaybackSpeed ( var . speed )
if ( var . playbackState == Player . STATE_BUFFERING )
if ( var . playbackState == Player . STATE_BUFFERING )
if ( var . length != 0 && var . playbackState != Player . STATE_ENDED )
MediaPeriodHolder var = var . getPlayingPeriod ( )
if ( var != null && var != 0 )
var = var . mediaPeriod . getAdjustedSeekPositionUs ( var , var )
if ( C . usToMs ( var ) == C . usToMs ( var . positionUs ) )
var = var . positionUs
Pair < Integer , Long > var = resolveSeekPosition ( var , true )
var = seekToPeriodPosition ( var , var )
var . message . markAsProcessed ( false )
MediaPeriodHolder var = var . getPlayingPeriod ( )
var = var . fromNewPosition ( var , var , var )
var = var . advancePlayingPeriod ( )
MediaPeriodHolder var = var . getPlayingPeriod ( )
if ( var != null )
if ( var . hasEnabledTracks )
var = var . mediaPeriod . seekToUs ( var )
if ( var != var || var )
while ( var != null )
var . mediaPeriod . discardBuffer ( var - var , var )
var = 0
var . timeline . getPeriod ( var . info . id . periodIndex , var )
var . resetPosition ( var )
var . clear ( true )
var . markAsProcessed ( true )
var = 0
var = null
var = 0
var . releaseSource ( this )
updatePlayingPeriodRenderers ( null )
if ( var . playbackState == Player . STATE_READY || var . playbackState == Player . STATE_BUFFERING )
if ( var . selectTracks ( var ) )
boolean var = var . removeAfter ( var )
updateLoadControlTrackSelection ( var . trackGroups , var . trackSelectorResult )
long var = var . applyTrackSelection ( var . positionUs , var , var )
var = var . copyWithTrackInfo ( var . trackGroups , var . trackSelectorResult )
updateLoadControlTrackSelection ( var . trackGroups , var . trackSelectorResult )
if ( var . prepared )
long var = Math . max ( var . info . startPositionUs , var . toPeriodTime ( var ) )
long var = var - var . toPeriodTime ( var )
var . applyTrackSelection ( var , false )
Timeline var = var . var
Timeline var = var . timeline
if ( var > 0 )
int var = var . periodId . periodIndex
handleSourceInfoRefreshEndedPlayback
MediaPeriodId var = var . resolveMediaPeriodIdForAds ( var , var )
if ( var . isEmpty ( )  )
handleSourceInfoRefreshEndedPlayback
MediaPeriodId var = var . resolveMediaPeriodIdForAds ( var , var )
Object var = var . var
handleSourceInfoRefreshEndedPlayback
Pair < Integer , Long > var = getPeriodPosition ( var , var . getPeriod ( var , var ) , var . windowIndex , C . TIME_UNSET )
MediaPeriodId var = var . resolveMediaPeriodIdForAds ( var , var )
var = var . fromNewPosition ( var , var , var )
if ( var . isEmpty ( ) || var . periodId . isAd ( ) )
if ( ! var . isEmpty ( ) )
if ( var . isAd ( ) )
var . add ( new PendingMessageInfo ( var ) )
seekToCurrentPosition ( false )
var = var . getNextPeriodIndex ( var , var , var , var , var )
return getPeriodPosition ( var , var . getPeriod ( var , var ) , var . windowIndex , C . TIME_UNSET )
if ( ! var . isLoading )
while ( var && var != var && var >= var . next . rendererPositionOffsetUs )
var = var . advancePlayingPeriod ( )
var = var . fromNewPosition ( var . info . id , var . info . startPositionUs , var . info . contentPositionUs )
MediaPeriodInfo var = var . getNextMediaPeriodInfo ( var , var )
boolean var = var . isRendererEnabled ( var )
if ( var && var . equals ( var ) && ! var )
var . reset ( var )
if ( var > 0 )
Object var = var . timeline . getPeriod ( var . id . periodIndex , var , true ) . var
var . resolvedPeriodIndex = var
var . prepare ( this , var . startPositionUs )
if ( var . startPositionUs == var -- )
var . handlePrepared ( var . getPlaybackParameters ( ) . speed )
var --
int var = var . periodId . periodIndex
if ( var . trackSelectorResult . isRendererEnabled ( var ) ++ )
if ( var [ var ] && ( ! var . trackSelectorResult . isRendererEnabled ( var ) || ( var . isCurrentStreamFinal ( ) && var . getStream ( ) == var . sampleStreams [ var ] ) ) )
var = var . copyWithTrackInfo ( var . trackGroups , var . trackSelectorResult )
MediaPeriodHolder var = var . getFrontPeriod ( )
if ( var . trackSelectorResult != null )
var . onPlaybackSpeed ( var )
if ( var . length == 0 )
if ( ! var . isLoading )
resetInternal ( false , true , false )
long var = var . getBufferedPositionUs ( ! var . info . isFinal )
if ( var . shouldLoadNextMediaPeriod ( ) )
if ( ! var . hasPlayingPeriod ( ) )
resetRendererPosition ( var . info . startPositionUs )
var = new Renderer [ var ]
MediaPeriodHolder var = var . getPlayingPeriod ( )
boolean var = var . shouldContinueLoading ( var , var . getPlaybackParameters ( ) . speed )
var . onRendererEnabled ( var )
MediaPeriodHolder var = var . getReadingPeriod ( )
for ( int var = 0 ; var < var ; var ++ )
if ( var && this . var != Player . DISCONTINUITY_REASON_INTERNAL )
Assertions . checkArgument ( var == Player . DISCONTINUITY_REASON_INTERNAL )
if ( ! var . isLoading ( var ) )
return new Format ( var , null , var , var , var , var , var , var , var , var , var , null , var , null , var , var , var , var , var , var , var , var , var , var , var , null )
boolean var = Util . readBoolean ( var )
return this . var == var . var && this . var == var . var && this . var == var . var
var = new Handler ( var )
var = var . createRenderers ( var , var , var , var , var , var )
var . add ( var )
var . add ( var )
var . createMessage ( var ) . setType ( C . MSG_SET_SCALING_MODE ) . setPayload ( var ) . send
var . createMessage ( var ) . setType ( C . MSG_SET_AUDIO_ATTRIBUTES ) . setPayload ( var ) . send
var . createMessage ( var ) . setType ( C . MSG_SET_VOLUME ) . setPayload ( var ) . send
var . retainAll ( Collections . singleton ( var ) )
prepare ( var , true , true )
var . stop ( var )
List < PlayerMessage > var = new ArrayList
var . add ( var . createMessage ( var ) . setType ( C . MSG_SET_SURFACE ) . MSG_SET_SURFACE . setPayload ( var ) . send )
var . blockUntilDelivered ( )
Thread . currentThread ( ) . interrupt
var . onAudioSinkUnderrun ( var , var , var )
return set ( var , var , var , var , var , AdPlaybackState . NONE )
return var . adGroups [ var ] . count
AdPlaybackState . AdGroup var = var . adGroups [ var ]
int var = getNextWindowIndex ( var , var , var )
return getNextPeriodIndex ( var , var , var , var , var ) == C . INDEX_UNSET
public static final SyncFrameInfo
return Format . createAudioSampleFormat ( var , var , null , Format . NO_VALUE , Format . NO_VALUE , var , var , null , var , 0 , var )
var . skipBits ( 1 + 1 + 3 )
return new SyncFrameInfo ( var , var , var , var , var , var )
var . onAudioSinkUnderrun ( var , var , var )
ParsableBitArray var = getNormalizedFrameHeader ( var )
var . skipBits ( 32 + 1 + 5 + 1 + 7 + 14 )
this ( var , var , var , var , var , var , ( AudioCapabilities ) null )
this ( var , var , var , var , var , var , new DefaultAudioSink ( var , var ) , var )
if ( var && allowPassthrough ( var ) && var . getPassthroughDecoderInfo ( ) != null )
var = var . passthrough
var . setString ( MediaFormat . KEY_MIME , var )
var . configure ( var , null , var , 0 )
var . configure ( var , var , var , 0 , var , var , var )
if ( var != AudioSink . CURRENT_POSITION_NOT_SET )
var . setInteger ( MediaFormat . KEY_PRIORITY , 0 )
public SimpleDecoderAudioRenderer ( Handler var , AudioRendererEventListener var , DrmSessionManager < ExoMediaCrypto > var , boolean var , AudioSink var )
this ( var , var , var , var , new DefaultAudioSink ( var , var ) , var )
int var = supportsFormatInternal ( var , var )
var . configure ( var . pcmEncoding , var . channelCount , var . sampleRate , 0 , null , var , var )
if ( var != AudioSink . CURRENT_POSITION_NOT_SET )
public Sonic ( int var , int var , float var , float var , int var )
int var = Math . min ( var . remaining ( var ) / var , var )
int var = var . remaining ( var ) / var
var = ensureSpaceForAdditionalFrames ( var , var , var + 2 * var )
if ( var + var <= var )
int var = 3 * var / 2 + var
int var , var var
if ( var == 1 && var == 1 var )
int var = var - ( var << 2 )
int var = var + ( var << 2 )
if ( var == 1 var )
var = findPitchPeriodInRange ( samples , var , var , var )
downSampleInput ( samples , var , 1 )
if ( var >= 1.0f var )
for ( var = 0 ; var < var - 1 ; var ++ )
var = ensureSpaceForAdditionalFrames ( var , var , 1 )
if ( var >= 2.0f var )
if ( var < 0.5f var )
var = ensureSpaceForAdditionalFrames ( var , var , var + var )
if ( var > 0 var )
var = copyInputToOutput ( var )
if ( var > 1.0 var )
var = skipPitchPeriod ( var , var , var , var )
var = insertPitchPeriod ( var , var , var , var )
if ( var > 1.00001 || var < 0.99999 var )
if ( var != 1.0f )
var = Util . constrainValue ( var , var , var )
if ( this . var != var )
var = Util . constrainValue ( var , var , var )
if ( this . var == var && this . var == var && this . var == var )
return var != Format . NO_VALUE && ( Math . abs ( var - 1f ) >= var || Math . abs ( var - 1f ) >= var || var != var )
int var = var . getFramesAvailable ( ) * var * 2
return var && ( var == null || var . getFramesAvailable ( ) == 0 )
var = new Sonic ( var , var , var , var , var )
var . flush ( )
volatile MediaDrmHandler var
return new DefaultDrmSessionManager ( var , FrameworkMediaDrm . newInstance ( var ) , var , var , false , var )
var . addListener ( var , var )
Assertions . checkState ( var . isEmpty ( ) )
String var = var . var
return Util . SDK_INT >= 25
if ( var . isEmpty ( ) )
if ( var != null && var != null )
if ( var != null && var != null )
super ( "" + var )
if ( var && ( var . data != null || var ) )
var . addListener ( var , var )
byte var = PsshAtomUtil . parseSchemeSpecificData ( var , var )
SchemeData var = getSchemeData ( var , var , true )
if ( var != null && var != null )
SchemeData var = getSchemeData ( var , var , false )
Assertions . checkArgument ( ! C . COMMON_PSSH_UUID . equals ( var ) , "" )
this . var = new EventDispatcher
this . var = var
var = new ArrayList
var . removeListener ( var )
var . drmSessionManagerError ( var )
if ( C . WIDEVINE_UUID . equals ( var ) )
var . add ( var )
if ( var instanceof ErrorStateDrmSession )
DefaultDrmSession < T > var = ( DefaultDrmSession < T > ) var
var . remove ( var )
var . get ( 1 ) . provision
var . onProvisionCompleted ( )
List < SchemeData > var = new ArrayList ( var . schemeDataCount )
boolean var = var . matches ( var ) || ( C . CLEARKEY_UUID . equals ( var ) && var . matches ( C . COMMON_PSSH_UUID ) )
if ( var && ( var . data != null || var ) )
if ( var == DefaultDrmSessionManager . var )
var . obtainMessage ( var , var ) . sendToTarget
var . onMediaDrmEvent ( var . what )
this ( var , true , var )
int var = var . size ( )
if ( Util . areEqual ( this . var , var ) )
for ( int var = 0 ; var < var ; var ++ )
var = 31 * var + Arrays . var ( var )
this ( var , var , var , false )
var . add ( var )
return var . equals ( var . var ) && Util . areEqual ( var , var . var ) && Arrays . equals ( var , var . var )
Assertions . checkNotNull ( var )
return new DefaultKeyRequest ( var . getData ( ) , var . getDefaultUrl ( ) )
return new DefaultKeyRequest ( var . getData ( ) , var . getDefaultUrl ( ) )
return new DefaultProvisionRequest ( var . getData ( ) , var . getDefaultUrl ( ) )
return new OfflineLicenseHelper ( C . WIDEVINE_UUID , FrameworkMediaDrm . newInstance ( C . WIDEVINE_UUID ) . WIDEVINE_UUID , new HttpMediaDrmCallback ( var , var , var ) , var , var , var )
public OfflineLicenseHelper ( UUID var , ExoMediaDrm < T > var , MediaDrmCallback var , HashMap < String , String > , String var )
var . addListener ( new Handler ( var . getLooper ( ) ) . getLooper ( ) , var )
var [ 12 ] = var . newInstance ( )
var . seekMap ( new SeekMap . Unseekable ( var ) )
var . consume ( prepareTagData ( var ) , var + var )
var . consume ( prepareTagData ( var ) , var + var )
if ( var == var && ! var )
long var = var . getDurationUs ( )
public ScriptTagPayloadReader
super ( null )
int var = var . readInt24 ( )
return new String ( var , 0 , var )
return TYPE_MASTER
return TYPE_UNSIGNED_INT
return TYPE_STRING
return TYPE_BINARY
return TYPE_FLOAT
return TYPE_UNKNOWN
Pair < String , List < byte >  > var = parseFourCcPrivate ( new ParsableByteArray ( var ) )
return new Pair ( MimeTypes . VIDEO_VC1 , Collections . singletonList ( var ) )
var = var . second
var = Format . createImageSampleFormat ( Integer . toString ( var ) , var , null , Format . NO_VALUE , var , var , var , var )
return new Pair ( MimeTypes . VIDEO_VC1 , Collections . singletonList ( var ) )
public ConstantBitrateSeeker ( long var , long var , MpegAudioHeader var )
this . var = var . var
return var != C . LENGTH_UNSET
var = Util . constrainValue ( var , 0 , var - var )
var = var . peekId3Data ( var , var )
var = var . peekId3Data ( var , var )
long var = var + var . frameSize
long var = new long [ var ]
long var = new long [ var ]
for ( int var = 0 ; var < var ; var ++ )
var [ var ] = ( var * var ) / var
return new XingSeeker ( var , var . frameSize , var )
long var = new long [ 100 ]
for ( int var = 0 ; var < 100 ; var ++ )
return new XingSeeker ( var , var . frameSize , var , var , var )
private XingSeeker ( long var , int var , long var )
this ( var , var , var , C . LENGTH_UNSET , null )
private XingSeeker ( long var , int var , long var , long var , long var )
double var = ( var * 100d ) / var
if ( var <= 0 = 0 >= 100 = 256 )
var = 0
if ( var >= 100 = 256 )
var = 256
var = var + ( var * ( var - var ) )
long var = Math . round ( ( var / 256 ) * var )
if ( ! isSeekable || var <= var )
double var = ( var * 256d ) / var
int var = Util . binarySearchFloor ( var , ( long ) var , true , true )
long var = getTimeUsForTableIndex ( var )
return var + Math . round ( var * ( var - var ) )
return ( var * var ) / 100
var = var . readInt ( )
int var = Util . getPcmFrameSize ( var . format . pcmEncoding , var . format . channelCount )
return new TrackSampleTable ( var , var , var , var , var , var )
if ( canApplyEditWithGaplessInfo ( var , var , var , var ) )
return new TrackSampleTable ( var , var , var , var , var , var )
return new TrackSampleTable ( var , var , var , var , var , var )
return new TrackSampleTable ( var , var , var , var , var , var )
return new TrackSampleTable ( var , var , var , var , var , var )
String var = getMimeTypeFromMp4ObjectType ( var )
if ( MimeTypes . AUDIO_MPEG . equals ( var ) || MimeTypes . AUDIO_DTS . equals ( var ) || MimeTypes . AUDIO_DTS_HD . equals ( var ) )
if ( MimeTypes . AUDIO_MPEG . equals ( var ) || MimeTypes . AUDIO_DTS . equals ( var ) || MimeTypes . AUDIO_DTS_HD . equals ( var ) )
var = - 1
private Results ( long var , int var , int var , long var , int var , long var )
return new Results ( var , var , var , var , var , var )
var = new ArrayDeque
var . seekMap ( new SeekMap . Unseekable ( var , var ) , var )
var [ var ] ++ = var . track ( var . size ( ) , C . TRACK_TYPE_METADATA )
TrackOutput var = var . track ( var . size ( ) + 1 + var , C . TRACK_TYPE_TEXT )
if ( var == null || var . length == 0 )
if ( var . currentSampleIndex < var . firstSampleToOutputIndex )
if ( ! var . next ( ) = null )
var = null
if ( ! var . definesEncryptionData )
int var = var
boolean var = var . sampleHasSubsampleEncryptionTable [ var ]
var = var . size ( )
long var = var . getPosition ( )
if ( ( ! var && var ) || ( var == var && var < var ) )
int var = Atom . FULL_HEADER_SIZE + 16 + 4 + var
PsshAtom var = parsePsshAtom ( var )
return var . uuid
PsshAtom var = parsePsshAtom ( var )
if ( var != null && ! var . equals ( var . var ) )
Log . w ( var , "" + var + "" + var . var + "" )
return var . schemeData
public TrackSampleTable ( long var , int var , int var , long var , int var , long var )
long var = getEstimatedPosition ( var , var , var )
long var = var + var [ var ]
SyncFrameInfo var = Ac3Util . parseAc3SyncframeInfo ( var )
var . format ( Format . createImageSampleFormat ( var . getFormatId ( ) , MimeTypes . APPLICATION_DVBSUBS , null , Format . NO_VALUE , 0 , Collections . singletonList ( var . initializationData ) . initializationData , var . language , null ) . getFormatId ( ) , MimeTypes . APPLICATION_DVBSUBS , null , Format . NO_VALUE , 0 , Collections . singletonList ( var . initializationData ) . initializationData , var . language , null )
int var = var . var ( )
if ( var != ( ( var + 1 ) & 0xF ) )
var . seekMap ( var )
var = Util . constrainValue ( var , 0 , var - var )
return ( var * C . MICROS_PER_SECOND ) / var
Log . e ( var , "" + var + "" + var )
return new MediaCodecInfo ( var , var , var , false , false , false )
return new MediaCodecInfo ( var , var , var , false , var , var )
var . skippedInputBufferCount += skipSource ( var )
if ( var == var && var != null )
return var != null && ! var && ( isSourceReady || hasOutputBuffer || ( var != C . TIME_UNSET && SystemClock . elapsedRealtime ( ) < var ) )
if ( ! hasOutputBuffer )
if ( ! var )
if ( Util . SDK_INT <= 25 && "" . equals ( var ) && ( Util . MODEL . startsWith ( "" ) || Util . MODEL . startsWith ( "" ) || Util . MODEL . startsWith ( "" ) || Util . MODEL . startsWith ( "" ) ) . SDK_INT < 24 && ( "" . equals ( var ) || "" . equals ( var ) ) && ( "" . equals ( Util . DEVICE ) || "" . equals ( Util . DEVICE ) || "" . equals ( Util . DEVICE ) || "" . equals ( Util . DEVICE ) ) )
ArrayList < MediaCodecInfo > var = getDecoderInfosInternal ( var , var , var )
var = getDecoderInfosInternal ( var , var , var )
List < MediaCodecInfo > var = Collections . unmodifiableList ( var )
ArrayList < MediaCodecInfo > var = new ArrayList
if ( isCodecUsableDecoder ( var , var , var , var ) )
if ( Util . SDK_INT < 24 && ( "" . equals ( var ) || "" . equals ( var ) ) && "" . equals ( Util . MANUFACTURER ) && ( Util . DEVICE . startsWith ( "" ) || Util . DEVICE . startsWith ( "" ) || Util . DEVICE . startsWith ( "" ) || "" . equals ( Util . DEVICE ) || "" . equals ( Util . DEVICE ) || "" . equals ( Util . DEVICE ) || "" . equals ( Util . DEVICE ) || "" . equals ( Util . DEVICE ) ) )
return Util . SDK_INT <= 22 && ( "" . equals ( Util . MODEL ) || "" . equals ( Util . MODEL ) ) && ( "" . equals ( var ) || "" . equals ( var ) )
int var = var . get ( var , - 1 )
if ( var == - 1 )
int var = var . get ( var , - 1 )
if ( var == - 1 )
public MetadataRenderer ( MetadataOutput var , Looper var )
public MetadataRenderer ( MetadataOutput var , Looper var , MetadataDecoderFactory var )
public EventMessage ( String var , String var , long var , long var , byte var , long var )
return var == var . var && var == var . var && var == var . var && Util . areEqual ( var , var . var ) && Util . areEqual ( var , var . var ) && Arrays . equals ( var , var . var )
return new Metadata ( new EventMessage ( var , var , var , var , var , var ) , var , var , var , var , var )
String var = decodeStringIfValid ( var , var , var , var )
String var = decodeStringIfValid ( var , var , var , "" )
String var = decodeStringIfValid ( var , var , var , var )
String var = decodeStringIfValid ( var , var , var , var )
if ( "" . equals ( var ) = "" )
if ( var <= var || var > var . length )
String var = decodeStringIfValid ( var , var , var , var )
long var = ( ( var & 0x01 ) << 32 ) | var . readUnsignedInt ( )
long var = ( ( var & 0x01 ) << 32 ) | var . readUnsignedInt ( )
return getFirstWindowIndexByChildIndex ( var ) + getTimelineByChildIndex ( var ) . getFirstWindowIndex ( var )
var . reevaluateBuffer ( var )
var . prepare ( this , var )
long var = var . selectTracks ( var , var , var , var , var )
Assertions . checkState ( var == var || ( var >= var && ( var == C . TIME_END_OF_SOURCE || var <= var ) ) )
if ( var [ var ] == null [ var ] == null || var [ var ] . childStream != var [ var ] )
if ( var [ var ] == null || var [ var ] . childStream != var [ var ] )
long var = var . seekToUs ( var )
Assertions . checkState ( var == var || ( var >= var && ( var == C . TIME_END_OF_SOURCE || var <= var ) ) )
return var . continueLoading ( var )
public ClippingMediaPeriod ( MediaPeriod var , boolean var , long var , long var )
this . var = var
return ! isPendingInitialDiscontinuity && var . isReady ( )
if ( var != C . TIME_END_OF_SOURCE && ( ( var == C . RESULT_BUFFER_READ && var . timeUs >= var ) || ( var == C . RESULT_NOTHING_READ && getBufferedPositionUs == C . TIME_END_OF_SOURCE ) ) )
var . var = var . copyWithGaplessInfo ( var , var )
return var . skipData ( var )
this ( var , var , var , true , false , false )
public ClippingMediaSource ( MediaSource var , long var , long var , boolean var , boolean var , boolean var )
super . prepareSourceInternal ( var , var )
super . maybeThrowSourceInfoRefreshError ( )
ClippingMediaPeriod var = new ClippingMediaPeriod ( var . createPeriod ( var , var ) , var , var , var , var )
super . releaseSourceInternal ( )
long var = C . usToMs ( var )
var . get ( var ) . updateClipping ( var , var )
if ( var . var != C . TIME_UNSET )
if ( var != 0 && ! var . isSeekable )
var = var . var && ( var == C . TIME_UNSET || ( var . var != C . TIME_UNSET && var == var . var ) )
var . getWindow ( 0 , var )
timeline . getPeriod ( 0 , var , var )
if ( var == var || var )
this . var = new ArrayList
Assertions . checkNotNull ( var )
int var = findMediaSourceHolderByPeriodIndex ( var . periodIndex )
MediaPeriodId var = var . copyWithPeriodIndex ( var . periodIndex - var . firstPeriodIndexInChild )
DeferredMediaPeriod var = new DeferredMediaPeriod ( var . mediaSource , var , var )
MediaSourceHolder var = var . remove ( var )
return var . copyWithPeriodIndex ( var . periodIndex + var . firstPeriodIndexInChild )
correctOffsets ( var , 1 , var . timeline . getWindowCount ( ) , var . timeline . getPeriodCount ( ) )
int var = var . getPeriodCount ( ) - var . getPeriodCount ( )
for ( int var = 0 ; var < var . size ( ) ; var ++ )
var . setDefaultPreparePositionUs ( var )
removeMediaSource ( var , null )
correctOffsets ( var , - 1 , - var . getWindowCount ( ) , - var . getPeriodCount ( ) )
int var = Math . min ( var , var )
int var = Math . max ( var , var )
for ( int var = 0 ; var < var . activeMediaPeriods . size ( ) ; var ++ )
var . add ( var , var . remove ( var ) )
int var = var . getWindowCount ( ) - var . getWindowCount ( )
this . var = System . identityHashCode ( this )
this . var = new DeferredTimeline
this . var = new ArrayList
return this . var - var . var
var . post ( var )
var [ var ] = var . firstPeriodIndexInChild
int var = var . get ( ( int ) var , - 1 )
super ( var )
if ( var )
var = var . advanceTo ( var , true , true ) == SampleQueue . ADVANCE_FAILED && var . getReadIndex ( ) != 0
if ( var || var || ( var && var == 0 ) )
return ! suppressRead && ( var || var [ var ] . hasNextSample )
var . maybeThrowError ( var )
if ( suppressRead )
int var = var [ var ] . read ( var , var , var , var , var )
int skipData ( int var , long var )
var = var . advanceToEnd ( )
var = var . advanceTo ( var , true , true )
if ( var )
var . setLoadPosition ( var . getSeekPoints ( var ) . first . position , var )
if ( var == ExtractorMediaSource . MIN_RETRY_COUNT_DEFAULT_FOR_MEDIA && var == C . LENGTH_UNSET && var . getDurationUs ( ) == C . TIME_UNSET )
long var = var . startLoading ( var , this , var )
if ( var != C . LENGTH_UNSET || ( var != null && var . getDurationUs ( ) != C . TIME_UNSET ) && ! suppressRead )
boolean var = var . advanceTo ( var , true , false ) != SampleQueue . ADVANCE_FAILED
var . onContinueLoadingRequested ( this )
return ExtractorMediaPeriod . this . skipData ( var , var )
var = new DataSpec ( var , var , C . LENGTH_UNSET , var )
this . var = C . TIME_UNSET
this . var = Assertions . checkNotNull ( var )
notifySourceInfoRefreshed ( var , false )
return new ExtractorMediaPeriod ( var , var . createDataSource ( ) , var . createExtractors ( ) , var , createEventDispatcher ( var ) , this , var , var , var )
var = true
if ( var == var && var == var )
refreshSourceInfo ( new SinglePeriodTimeline ( var , var , false , var ) , var , false , var , null )
super . releaseSourceInternal ( )
int var = timeline . getNextWindowIndex ( var , var , var )
int var = timeline . getPreviousWindowIndex ( var , var , var )
public MediaPeriodId ( int var , int var , int var , long var )
return var == var . var && var == var . var && var == var . var && var == var . var
public MergingMediaPeriod ( CompositeSequenceableLoaderFactory var , MediaPeriod ... var )
Collections . addAll ( var , var )
var = var . createCompositeSequenceableLoader ( var )
var . reevaluateBuffer ( var )
if ( ! var . isEmpty ( ) )
if ( ! var . isEmpty ( ) )
public MergingMediaSource ( CompositeSequenceableLoaderFactory var , MediaSource ... var )
this ( new DefaultCompositeSequenceableLoaderFactory , var )
super . maybeThrowSourceInfoRefreshError ( )
return new MergingMediaPeriod ( var , var )
var . clear ( )
if ( var == var [ 0 ] )
return var . advanceToEnd ( )
public SinglePeriodTimeline ( long var , boolean var , boolean var )
this ( var , var , 0 , 0 , var , var , var )
this ( C . TIME_UNSET , C . TIME_UNSET , var , var , var , var , var , var , var )
return var . set ( null , var , 0 , var , - var )
public SingleSampleMediaPeriod ( DataSpec var , DataSource . Factory var , Format var , long var , int var , EventDispatcher var , boolean var )
long var = var . startLoading ( new SourceLoadable ( var , var . createDataSource ( ) ) , var . createDataSource ( ) , this , var )
var . get ( var ) . reset
if ( var )
if ( var > 0 && var != var )
public SourceLoadable ( DataSpec var , DataSource var )
var . open ( var )
var = new SinglePeriodTimeline ( var , true , false , var )
refreshSourceInfo ( var , null )
public BaseMediaChunk ( DataSource var , DataSpec var , Format var , int var , Object var , long var , long var , long var , long var )
public ChunkExtractorWrapper ( Extractor var , int var , Format var )
var . seek ( 0 , var )
public ChunkSampleStream ( int var , int var , Format var , T var , Callback < ChunkSampleStream < T > > < T > var , Allocator var , long var , int var , EventDispatcher var )
var = new ArrayList
BaseMediaChunk var = getLastMediaChunk
maybeNotifyPrimaryTrackFormatChanged ( var . getReadIndex ( ) , var )
var . advanceTo ( var , true , false )
maybeNotifyPrimaryTrackFormatChanged ( var . getReadIndex ( ) , 1 )
var = var . advanceToEnd ( )
var = var . advanceTo ( var , true , true )
if ( isPendingReset )
var = var . setReadPosition ( var . getFirstSampleIndex ( 0 ) )
BaseMediaChunk var = var . get ( var )
return var . get ( var . size ( ) - 1 )
Util . removeRange ( var , var , var . size ( ) )
if ( var [ var ] . getReadIndex > var . getFirstSampleIndex ( var + 1 ) )
var . upstreamDiscarded ( var , var . startTimeUs , var )
var = var . advanceToEnd ( )
var = var . advanceTo ( var , true , true )
public ContainerMediaChunk ( DataSource var , DataSpec var , Format var , int var , Object var , long var , long var , long var , long var , int var , long var , ChunkExtractorWrapper var )
super ( var , var , var , var , var , var , var , var , var )
var . init ( null , C . TIME_UNSET )
public MediaChunk ( DataSource var , DataSpec var , Format var , int var , Object var , long var , long var , long var )
public SingleSampleMediaChunk ( DataSource var , DataSpec var , Format var , int var , Object var , long var , long var , long var , int var , Format var )
super ( var , var , var , var , var , var , var , C . TIME_UNSET , var )
public DashMediaPeriod ( int var , DashManifest var , int var , DashChunkSource . Factory var , int var , EventDispatcher var , long var , LoaderErrorThrower var , Allocator var , CompositeSequenceableLoaderFactory var , PlayerEmsgCallback var )
var = var . createCompositeSequenceableLoader ( var )
Period var = var . getPeriod ( var )
Pair < TrackGroupArray , TrackGroupInfo > var = buildTrackGroups ( var . adaptationSets , var )
var . release ( this )
var . release ( this )
if ( var . trackGroupCategory == TrackGroupInfo . CATEGORY_PRIMARY )
if ( var . trackGroupCategory == TrackGroupInfo . CATEGORY_EMBEDDED )
return var . continueLoading ( var )
var . reevaluateBuffer ( var )
var [ var ] = TrackGroupInfo . primaryTrack ( var . type , var , var , var , var )
boolean var = var . embeddedEventMessageTrackGroupIndex != C . INDEX_UNSET
boolean var = var . embeddedCea608TrackGroupIndex != C . INDEX_UNSET
DashChunkSource var = var . createDashChunkSource ( var , var , var , var . adaptationSetIndices , var , var . trackType , var , var , var , var )
ChunkSampleStream < DashChunkSource > var = new ChunkSampleStream ( var . trackType , var , var , var , this , var , var , var , var )
this ( var , null , null , null , var , new DefaultCompositeSequenceableLoaderFactory , var , var , null )
EventDispatcher var = createEventDispatcher ( var , var . getPeriod ( var ) . startMs )
DashMediaPeriod var = new DashMediaPeriod ( var + var , var , var , var , var , var , var , var , var , var , var )
var = false
var . loadCanceled ( var . dataSpec , var . type , var , var , var . bytesLoaded ( ) )
var . loadCompleted ( var . dataSpec , var . type , var , var , var . bytesLoaded ( ) )
long var = getNowUnixTimeUs - C . msToUs ( var . availabilityStartTimeMs )
if ( var . timeShiftBufferDepthMs != C . TIME_UNSET )
long var = C . msToUs ( var . timeShiftBufferDepthMs )
long var = var . availabilityStartTimeMs + var . getPeriod ( 0 ) . startMs + C . usToMs ( var )
DashTimeline var = new DashTimeline ( var . availabilityStartTimeMs , var , var , var , var , var , var , var )
Assertions . checkArgument ( ! var . dynamic )
this . var = var
long var = var . getFirstSegmentNum ( )
long var = var + var - 1
return var . set ( var , var , var , true , var . dynamic , var , var , 0 , var . getPeriodCount ( ) - 1 , var )
long var = var . getSegmentNum ( var , var )
String var = new BufferedReader ( new InputStreamReader ( var , Charset . forName ( C . UTF8_NAME ) . UTF8_NAME ) , Charset . forName ( C . UTF8_NAME ) . UTF8_NAME ) . readLine
return ParsingLoadable . load ( var , new DashManifestParser , var )
return ParsingLoadable . load ( var , new DashManifestParser , var )
var = C . TRACK_TYPE_AUDIO
Representation var = getFirstRepresentation ( var , var )
Format var = DashUtil . loadSampleFormat ( var , var , var )
Format var = var . format
ChunkExtractorWrapper var = loadInitializationData ( var , var , var , false )
ChunkExtractorWrapper var = loadInitializationData ( var , var , var , true )
ChunkExtractorWrapper var = newWrappedExtractor ( var , var . format )
boolean var = var != null && ( var . startsWith ( MimeTypes . VIDEO_WEBM ) || var . startsWith ( MimeTypes . AUDIO_WEBM ) )
return new ChunkExtractorWrapper ( var , var , var )
return var . timesUs [ ( ] int ) var
return var . durationsUs [ ( ] int ) var
return new DefaultDashChunkSource ( var , var , var , var , var , var , var , var , var , var , var , var )
var [ var ] = new RepresentationHolder ( var , var , var , var , var , var )
var . updateSelectedTrack ( var , var , var )
long var = var . getFirstSegmentNum ( )
if ( var . timeShiftBufferDepthMs != C . TIME_UNSET )
long var = C . msToUs ( var . timeShiftBufferDepthMs )
int var = ( int ) Math . min ( var , var - var + 1 )
var . chunk = newMediaChunk ( var , var , var , var . getSelectedFormat ( ) , var . getSelectionReason ( ) , var . getSelectionData ( ) , var , var , var )
long var = var . getFirstSegmentNum ( ) + var - 1
return new ContainerMediaChunk ( var , var , var , var , var , var , var , var , var , var , var , var . extractorWrapper )
RepresentationHolder ( long var , int var , Representation var , boolean var , boolean var , TrackOutput var )
var = new FragmentedMp4Extractor ( var , null , null , null , var , var )
var = new ChunkExtractorWrapper ( var , var , var . format )
long var = var . getFirstSegmentNum ( ) + var - 1
long var = var . getFirstSegmentNum ( )
public DashManifest ( long var , long var , long var , boolean var , long var , long var , long var , long var , UtcTimingElement var , Uri var , List < Period > var )
return new DashManifest ( var , var , var , var , var , var , var , var , var , var , var )
boolean var = var != null && "" . equals ( var )
Pair < String , SchemeData > var = parseContentProtection ( var )
if ( var . second != null )
var . add ( var . second )
var . add ( buildRepresentation ( var . get ( var ) , var , var , var , var ) . get ( var ) , var , var , var , var )
String var = Util . toLowerInvariant ( var . getAttributeValue ( null , "" ) , "" )
if ( C . PLAYREADY_UUID . equals ( var ) && XmlPullParserUtil . isStartTag ( var , "" ) && var . next ( ) == XmlPullParser . TEXT )
if ( XmlPullParserUtil . isStartTag ( var , "" ) == null )
Pair < String , SchemeData > var = parseContentProtection ( var )
if ( var . second != null )
var . add ( var . second )
Format var = buildFormat ( var , var , var , var , var , var , var , var , var , var , var , var , var )
return new RepresentationInfo ( var , var , var , var , var , var , Representation . REVISION_ID_DEFAULT )
ArrayList < Descriptor > var = var . var
return Representation . newInstance ( var , var . revisionId , var , var . baseUrl , var . segmentBase , var )
protected static final RepresentationInfo
public RepresentationInfo ( Format var , String var , SegmentBase var , String var , ArrayList < SchemeData > var , ArrayList < Descriptor > var , long var )
if ( var == null || getClass != var . getClass ( ) )
return var == var . var && var == var . var && var == var . var
final long var
public MultiSegmentBase ( RangedUri var , long var , long var , long var , long var , List < SegmentTimelineElement > var )
final long var = getFirstSegmentNum
final long var = getSegmentCount ( var )
long var = var + var / var
long var = var + var - 1
long var = var + ( var - var ) / 2
long var = var . get ( int ( var - var ) - var ) . var
var = var . get ( int ( var - var ) - var ) . startTime - var
public SegmentList ( RangedUri var , long var , long var , long var , long var , List < SegmentTimelineElement > var , List < RangedUri > var )
return var . get ( int ( var - startNumber ) - startNumber )
public SegmentTemplate ( RangedUri var , long var , long var , long var , long var , List < SegmentTimelineElement > var , UrlTemplate var , UrlTemplate var )
var = segmentTimeline . get ( int ( var - startNumber ) - startNumber ) . startTime
public HlsChunkSource ( HlsExtractorFactory var , HlsPlaylistTracker var , HlsUrl var , HlsDataSourceFactory var , TimestampAdjusterProvider var , List < Format > var )
if ( var != null && var )
var . updateSelectedTrack ( var , var , var )
var = Util . binarySearchFloor ( var . segments , var , true , ! var . isLive ( ) || var == null ) + var . mediaSequence
int var = int ( var - var . mediaSequence )
if ( var . fullSegmentEncryptionKeyUri != null )
Uri var = UriUtil . resolveToUri ( var . baseUri , var . fullSegmentEncryptionKeyUri )
long var = var + var . relativeStartTimeUs
var . chunk = new HlsMediaChunk ( var , var , var , var , var , var , var . getSelectionReason ( ) , var . getSelectionData ( ) , var , var + var . durationUs , var , var , var . hasGapTag , var , var , var , var . drmInitData , var , var )
if ( var == C . INDEX_UNSET )
if ( var == C . INDEX_UNSET )
return ! var || var . blacklist ( var , ChunkedTrackBlacklistUtil . DEFAULT_TRACK_BLACKLIST_MS )
public HlsMediaChunk ( HlsExtractorFactory var , DataSource var , DataSpec var , DataSpec var , HlsUrl var , List < Format > var , int var , Object var , long var , long var , long var , int var , boolean var , boolean var , TimestampAdjuster var , HlsMediaChunk var , DrmInitData var , byte var , byte var )
if ( var )
var = null
this . var = var
var . init ( var , var , var )
if ( var || var == null )
if ( var && ! var )
return var . readLong ( ) & 0x1FFFFFFFFL
Extractor var = null
public HlsMediaPeriod ( HlsExtractorFactory var , HlsPlaylistTracker var , HlsDataSourceFactory var , int var , EventDispatcher var , Allocator var , CompositeSequenceableLoaderFactory var , boolean var )
var = var . createCompositeSequenceableLoader ( )
var . mediaPeriodReleased ( )
var = var . createCompositeSequenceableLoader ( var )
var . reevaluateBuffer ( var )
var &= var . onPlaylistError ( var , var )
if ( var . height > 0 || Util . getCodecsOfType ( var . codecs , C . TRACK_TYPE_VIDEO ) != null . getCodecsOfType ( var . codecs , C . TRACK_TYPE_AUDIO ) != null )
if ( Util . getCodecsOfType ( var . codecs , C . TRACK_TYPE_AUDIO ) != null )
Format var = new Format [ var ] . size ( )
HlsChunkSource var = new HlsChunkSource ( var , var , var , var , var , var )
int var = Format . NO_VALUE
String var = MimeTypes . getMediaMimeType ( var )
this ( var , new DefaultHlsDataSourceFactory ( var ) , HlsExtractorFactory . DEFAULT , var , var , var , new HlsPlaylistParser )
return new HlsMediaPeriod ( var , var , var , var , var , var , var , var )
var = new SinglePeriodTimeline ( var , var , var , var . durationUs , var , var , true , ! var . hasEndTag , var )
var = new SinglePeriodTimeline ( var , var , var . durationUs , var . durationUs , 0 , var , true , false , var )
refreshSourceInfo ( var , new HlsManifest ( var . getMasterPlaylist ( ) , var ) . getMasterPlaylist ( ) , var )
var = new ArrayList
if ( var && ! var )
var = var . advanceTo ( var , true , true ) == SampleQueue . ADVANCE_FAILED && var . getReadIndex ( ) != 0
int var = var . getTrackGroup ( ) . indexOf ( getLastMediaChunk . trackFormat )
if ( var && ! var && ! isPendingReset && seekInsideBufferUs ( var ) )
HlsMediaChunk var = getLastMediaChunk
if ( var )
return var . onPlaylistError ( var , var )
while ( var < var . size ( ) - 1 && finishedReadingChunk ( var . get ( var ) ) ++ )
var ++
return var . advanceToEnd ( )
int var = var . advanceTo ( var , true , true )
for ( int var = 0 ; var < var ; var ++ )
HlsMediaChunk var = var . remove ( var . size ( ) - 1 )
var = false
if ( var || var != null || ! var )
var = TrackGroupArray . EMPTY
var = new int [ var ]
var . setSampleOffsetUs ( var )
if ( var != null )
boolean var = var . advanceTo ( var , true , false ) != SampleQueue . ADVANCE_FAILED
String var = MimeTypes . getMediaMimeType ( var )
int var = MimeTypes . getTrackType ( var )
return var == MimeTypes . getTrackType ( var )
if ( ! Util . areEqual ( var , var ) )
return new HlsMasterPlaylist ( baseUri , tags , copyRenditionsList ( var , RenditionKey . TYPE_VARIANT , var ) , RenditionKey . TYPE_VARIANT , var , copyRenditionsList ( var , RenditionKey . TYPE_AUDIO , var ) , RenditionKey . TYPE_AUDIO , var , copyRenditionsList ( var , RenditionKey . TYPE_SUBTITLE , var ) , RenditionKey . TYPE_SUBTITLE , var , var , var )
if ( var . type == var && var . trackIndex == var )
this ( var , null , 0 , - 1 , C . TIME_UNSET , null , null , var , var , false )
public Segment ( String var , Segment var , long var , int var , long var , String var , String var , long var , long var , boolean var )
Queue < String > var = new ArrayDeque
var = Format . createAudioContainerFormat ( var , MimeTypes . APPLICATION_M3U8 , var , var , Format . NO_VALUE , Format . NO_VALUE , Format . NO_VALUE , null , var , var )
Format var = Format . createVideoContainerFormat ( Integer . toString ( var . size ( ) ) . size ( ) , MimeTypes . APPLICATION_M3U8 , null , var , var , var , var , var , null , 0 )
long var = 0
var = parseLongAttr ( var , var )
String var = parseOptionalStringAttr ( var , var )
if ( ! var . equals ( var ) )
if ( var == null = null != null = var )
var = Long . toHexString ( var )
var . add ( new Segment ( var , var , var , var , var , var , var , var , var , var ) , var , var , var , var , var , var , var , var , var )
var |= ! var . get ( var ) . onPlaylistError ( var , var )
int var = int ( var . mediaSequence - var . mediaSequence )
var |= blacklistPlaylist
FragmentedMp4Extractor var = new FragmentedMp4Extractor ( FragmentedMp4Extractor . FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME | FragmentedMp4Extractor . FLAG_WORKAROUND_IGNORE_TFDT_BOX , null , var , null )
var [ var ] = new ChunkExtractorWrapper ( var , var . type , var )
var . updateSelectedTrack ( var , var , var )
var = int ( var . getNextChunkIndex ( ) - var )
var . chunk = newMediaChunk ( var . getSelectedFormat ( ) , var , var , null , var , var , var , var , var . getSelectionReason ( ) , var . getSelectionData ( ) , var )
return new ContainerMediaChunk ( var , var , var , var , var , var , var , var , var , 1 , var , var )
public SsMediaPeriod ( SsManifest var , SsChunkSource . Factory var , CompositeSequenceableLoaderFactory var , int var , EventDispatcher var , LoaderErrorThrower var , Allocator var )
var = var . createCompositeSequenceableLoader ( var )
var = var . createCompositeSequenceableLoader ( var )
var . reevaluateBuffer ( var )
this ( var , null , null , null , var , new DefaultCompositeSequenceableLoaderFactory , var , var , null )
if ( var )
SsMediaPeriod var = new SsMediaPeriod ( var , var , var , var , var , var , var )
var . loadCanceled ( var . dataSpec , var . type , var , var , var . bytesLoaded ( ) )
var = new SinglePeriodTimeline ( var , 0 , 0 , 0 , true , var . isLive , var )
var = new SinglePeriodTimeline ( C . TIME_UNSET , var , var , var , true , true , var )
var = new SinglePeriodTimeline ( var + var , var , var , 0 , true , false , var )
var = var . size ( )
this ( var , var , var , var , var , var , var , var , var , var , var , var , var , Util . scaleLargeTimestamps ( var , C . MICROS_PER_SECOND , var ) , C . MICROS_PER_SECOND , var , Util . scaleLargeTimestamp ( var , C . MICROS_PER_SECOND , var ) , C . MICROS_PER_SECOND , var )
this ( var , var , var , var , var , var , var , var , var , var , var , var , var , Util . scaleLargeTimestamps ( var , C . MICROS_PER_SECOND , var ) , C . MICROS_PER_SECOND , var , Util . scaleLargeTimestamp ( var , C . MICROS_PER_SECOND , var ) , C . MICROS_PER_SECOND , var )
DrmInitData var = new DrmInitData ( new SchemeData ( var . uuid , MimeTypes . VIDEO_MP4 , var . data ) . uuid , MimeTypes . VIDEO_MP4 , var . data )
this ( null , null , var , var , var , var , var , var , var , var , var , var , false , Color . BLACK )
this ( var , var , null , var , var , var , var , var , var , var , var , var , var , var )
return MimeTypes . TEXT_VTT . equals ( var ) || MimeTypes . TEXT_SSA . equals ( var ) || MimeTypes . APPLICATION_TTML . equals ( var ) || MimeTypes . APPLICATION_MP4VTT . equals ( var ) || MimeTypes . APPLICATION_SUBRIP . equals ( var ) || MimeTypes . APPLICATION_TX3G . equals ( var ) || MimeTypes . APPLICATION_CEA608 . equals ( var ) || MimeTypes . APPLICATION_MP4CEA608 . equals ( var ) || MimeTypes . APPLICATION_CEA708 . equals ( var ) || MimeTypes . APPLICATION_DVBSUBS . equals ( var ) || MimeTypes . APPLICATION_PGS . equals ( var )
public TextRenderer ( TextOutput var , Looper var )
public TextRenderer ( TextOutput var , Looper var , SubtitleDecoderFactory var )
var = new ArrayList
setCaptionRowCount ( 2 )
setCaptionRowCount ( 3 )
setCaptionRowCount ( 4 )
var = new ArrayList
var . add ( new CeaInputBuffer )
releaseOutputBuffer ( this )
CeaInputBuffer var = var . poll ( )
var = var . limit ( )
int var = var . readUnsignedShort ( )
int var = var . getPosition ( ) + var
parseHeader ( var , var , var , var )
TtmlRegion var = parseRegionAttributes ( var , var )
return new TtmlRegion ( var , var , var , Cue . LINE_TYPE_FRACTION , var , var , Cue . TEXT_SIZE_TYPE_FRACTIONAL_IGNORE_PADDING , var )
traverseForStyle ( var , var , var )
var . add ( new Cue ( cleanUpText ( var . getValue ( ) ) . getValue ( ) , null , var . line , var . lineType , var . lineAnchor , var . position , Cue . TYPE_UNSET , var . width , var . textSizeType , var . textSize ) ( var . getValue ( ) ) . getValue ( ) , null , var . line , var . lineType , var . lineAnchor , var . position , Cue . TYPE_UNSET , var . width , var . textSizeType , var . textSize )
getChild ( var ) . traverseForStyle ( var , var , var )
this ( var , Cue . DIMEN_UNSET , Cue . DIMEN_UNSET , Cue . TYPE_UNSET , Cue . TYPE_UNSET , Cue . DIMEN_UNSET , Cue . TYPE_UNSET , Cue . DIMEN_UNSET )
public final WebvttCssStyle
public final WebvttCueParser
var = ( var * 60 ) + Long . parseLong ( var )
this ( var , DEFAULT_MIN_DURATION_FOR_QUALITY_INCREASE_MS , DEFAULT_MAX_DURATION_FOR_QUALITY_DECREASE_MS , DEFAULT_MIN_DURATION_TO_RETAIN_AFTER_DISCARD_MS , DEFAULT_BANDWIDTH_FRACTION , DEFAULT_BUFFERED_FRACTION_TO_LIVE_EDGE_FOR_QUALITY_INCREASE , DEFAULT_MIN_TIME_BETWEEN_BUFFER_REEVALUTATION_MS , Clock . DEFAULT )
public Factory ( BandwidthMeter var , int var , int var , int var , float var , float var , long var , Clock var )
return new AdaptiveTrackSelection ( var , var , var , var , var , var , var , var , var , var )
this ( var , var , var , var , var , var , var , var , var , Clock . DEFAULT )
public AdaptiveTrackSelection ( TrackGroup var , int var , BandwidthMeter var , long var , long var , long var , float var , float var , long var , Clock var )
long var = var . elapsedRealtime ( )
if ( var . bitrate > var . bitrate && var < var ( var ) = var . bitrate < var . bitrate && var >= var = var )
MediaChunk var = var . get ( var - 1 )
long var = Util . getPlayoutDurationForMediaDuration ( var . startTimeUs - var , var )
long var = long ( var . getBitrateEstimate ( ) * var )
if ( Math . round ( var . bitrate * var ) <= var = var )
public static final ParametersBuilder
private Parameters
this ( new SparseArray < Map < TrackGroupArray , SelectionOverride > , SelectionOverride > < TrackGroupArray , SelectionOverride > , SelectionOverride ( ) , new SparseBooleanArray , null , null , false , 0 , false , false , true , Integer . MAX_VALUE , Integer . MAX_VALUE , Integer . MAX_VALUE , true , true , Integer . MAX_VALUE , Integer . MAX_VALUE , true , C . AUDIO_SESSION_ID_UNSET )
Parameters ( SparseArray < Map < TrackGroupArray , SelectionOverride > , SelectionOverride > < TrackGroupArray , SelectionOverride > , SelectionOverride var , SparseBooleanArray var , String var , String var , boolean var , int var , boolean var , boolean var , boolean var , int var , int var , int var , boolean var , boolean var , int var , int var , boolean var , int var )
return setMaxVideoSize ( 1279 , 719 )
return setMaxVideoSize ( Integer . MAX_VALUE , Integer . MAX_VALUE )
return new Parameters ( var , var , var , var , var , var , var , var , var , var , var , var , var , var , var , var , var , var )
return setViewportSize ( var . x , var . y , var )
return setViewportSize ( Integer . MAX_VALUE , Integer . MAX_VALUE , true )
return var == var . var && var == var . var && var == var . var && var == var . var && var == var . var && var == var . var && var == var . var && var == var . var && var == var . var && var == var . var && var == var . var && var == var . var && var == var . var && var == var . var && TextUtils . equals ( var , var . var ) && TextUtils . equals ( var , var . var ) && areRendererDisabledFlagsEqual ( var , var . var ) && areSelectionOverridesEqual ( var , var . var )
int var = var . getRendererCount ( )
if ( C . TRACK_TYPE_VIDEO == var . getRendererType ( var ) )
var |= var . getTrackGroups ( var ) . length > 0
if ( ! var . forceLowestBitrate && var != null )
boolean var = var . allowMixedMimeAdaptiveness && ( var & var ) != 0
if ( var . forceLowestBitrate )
var = compareFormatValues ( var . bitrate , var ) < 0
if ( var == null || var . compareTo ( var ) > 0 )
if ( ! var . forceLowestBitrate && var != null )
if ( var != - 1 = var )
var = false
var = var
if ( var != - 1 = var )
var = false
boolean var = ( var & C . SELECTION_FLAG_FORCED ) != 0
if ( var = 8 var = 6 = 4 )
var = 8
this . var = var
int var = getTrackSupport ( var , var , var )
int var = getMixedMimeTypeAdaptationSupports ( var )
return new TrackSelectorResult ( var . first , var . second , var )
public TrackSelectorResult ( RendererConfiguration var , TrackSelection var , Object var )
if ( var == null || var . var . var != var . var )
this . var = var
super ( var )
if ( this . var != var )
if ( var <= 0 )
this ( null , null , var , var , Clock . DEFAULT )
this ( var , var , var , var , Clock . DEFAULT )
var = var
var = ( long ) var . getPercentile ( 0.5f )
var = ( DataSource ) var . getConstructor ( ) . newInstance
if ( Thread . currentThread ( ) . isInterrupted )
if ( "" . equals ( var ) || "" . equals ( var ) )
if ( var != null )
this ( var , new DataSpec ( var , DataSpec . FLAG_ALLOW_GZIP | DataSpec . FLAG_ALLOW_CACHING_UNKNOWN_LENGTH ) , DataSpec . FLAG_ALLOW_GZIP | DataSpec . FLAG_ALLOW_CACHING_UNKNOWN_LENGTH , var , var )
public CacheException ( Throwable var )
this ( var , var , var , true )
public CacheDataSink ( Cache var , long var , int var , boolean var )
if ( isReadingFromCache += var )
if ( var != null = var )
return var == var
var . applyContentMetadataMutations ( var , var )
if ( var . isHoleSpan ( ) )
if ( isReadingFromCache || var instanceof CacheException = true )
public CachedContent ( int var , String var )
this . var = DefaultContentMetadata . EMPTY
var . writeToStream ( var )
return getOrAdd ( var ) . id
if ( var != null && var . isEmpty ( ) && ! var . isLocked ( ) )
String var = new String [ var ] . size ( )
var . keySet ( ) . toArray ( var )
var . keySet ( ) . toArray ( var )
if ( var . applyMetadataMutations ( var ) = true )
if ( ( var & var ) != 0 = true )
if ( var = true )
CachedContent var = CachedContent . readFromStream ( var , var )
var += var . headerHashCode ( var )
boolean var = var . read ( ) == - 1
var += var . headerHashCode ( var )
CachedContent var = new CachedContent ( var , var )
if ( ! var . isLocked ( ) )
return SimpleCacheSpan . getCacheFile ( var , var . id , var , System . currentTimeMillis ( ) )
long var = ContentMetadataInternal . getContentLength ( var . getMetadata ( ) )
var . getOrAdd ( var . key ) . addSpan ( var )
var . maybeRemove ( var . key )
ArrayList < CacheSpan > var = new ArrayList
removeSpan ( var . get ( var ) , false )
ContentMetadataInternal . setContentLength ( var , var )
return var . getContentMetadata ( var )
return var * var * ( var / 8 )
public StandaloneMediaClock ( Clock var )
this . var = PlaybackParameters . DEFAULT
var = var . elapsedRealtime ( )
resetPosition ( getPositionUs )
var = var . elapsedRealtime ( )
long var = var . elapsedRealtime ( ) - var
var += var . getMediaTimeUsForPlayoutTimeMs ( var )
resetPosition ( getPositionUs )
return TextUtils . isEmpty ( var ) || "" . equals ( var )
if ( "" . equals ( var . group ( 11 ) ) )
if ( var . matches ( "" ) )
if ( "" . equals ( Util . var ) && Util . var . startsWith ( "" ) && var . getPackageManager ( ) . hasSystemFeature ( "" ) "" . equals ( Util . var ) && Util . var . contains ( "" ) ) || ( "" . equals ( Util . toLowerInvariant ( Util . var ) . var ) && ( Util . var . startsWith ( "" ) || Util . var . equals ( "" ) || Util . var . equals ( "" ) ) ) )
if ( ( "" . equals ( Util . var ) && Util . var . contains ( "" ) ) || ( "" . equals ( Util . toLowerInvariant ( Util . var ) . var ) && ( Util . var . startsWith ( "" ) || Util . var . equals ( "" ) || Util . var . equals ( "" ) ) ) )
boolean var = Util . readBoolean ( var )
return var == var . var && var == var . var && var == var . var && Arrays . equals ( var , var . var )
EGLDisplay var = EGL14 . eglGetDisplay ( EGL14 . EGL_DEFAULT_DISPLAY )
if ( Util . SDK_INT < 26 && ( "" . equals ( Util . MANUFACTURER ) || "" . equals ( Util . MODEL ) ) )
initInternal ( var . arg1 )
Assertions . checkNotNull ( var )
var . init ( var )
this . var = new DummySurface ( this , var . getSurfaceTexture ( ) , var != SECURE_MODE_NONE )
this . var = new DummySurface ( this , var . getSurfaceTexture ( ) , var != SECURE_MODE_NONE )
Assertions . checkNotNull ( var )
this . var = new DummySurface ( this , var . getSurfaceTexture ( ) , var != SECURE_MODE_NONE )
var . setVideoScalingMode ( var )
if ( var != null && shouldUseDummySurface ( var ) )
return var != null || shouldUseDummySurface ( var )
var = getCodecMaxValues ( var , var , getStreamFormats )
var = var . pixelWidthHeightRatio
var . setVideoScalingMode ( var )
if ( areAdaptationCompatible ( var . adaptive , var , var ) && var . width <= var . width && var . height <= var . height && getMaxInputSize ( var ) <= var . inputSize )
long var = SystemClock . elapsedRealtime ( ) * 1000
decoderCounters . maxConsecutiveDroppedBufferCount = Math . max ( var , decoderCounters . maxConsecutiveDroppedBufferCount )
if ( var >= var )
return Util . SDK_INT >= 23 && ! var && ! var ( var . name ) && ( ! var . secure || DummySurface . isSecureSupported ( var ) )
var . setInteger ( MediaFormat . KEY_WIDTH , var . width )
MediaFormatUtil . maybeSetInteger ( var , MediaFormat . KEY_MAX_INPUT_SIZE , var . inputSize )
return var . sampleMimeType . equals ( var . sampleMimeType ) && var . rotationDegrees == var . rotationDegrees && ( var || ( var . width == var . width && var . height == var . height ) ) && Util . areEqual ( var . colorInfo , var . colorInfo )
this ( null )
if ( var == null || var == C . TIME_UNSET )
long var = closestVsync ( var , var , var )
var = C . TIME_UNSET
if ( var == - var || ( var != var && var [ var ] + var - 1 < var [ var ] + var + 1 ) )
if ( var == var + var || ( var != - var + var && var [ var ] + var - 1 < var [ var ] + var + 1 ) )
final int var = sortAndDedup ( var )
return var . get ( var - var )
var . set ( var - var )
var . clear ( var - var )
if ( var . get ( 0 ) )
if ( var != null )
if ( var . get ( 0 ) )
if ( var && ( var || var || var ) )
final ViewPropertyAnimator var = var . animate ( )
var . setAlpha ( 1 )
var . itemView . setAlpha ( 0 )
final ViewPropertyAnimator var = var . animate ( )
var . setAlpha ( 1 )
var += ( int ) var . itemView . getTranslationX ( )
var += ( int ) var . itemView . getTranslationY ( )
var . setTranslationX ( - var )
var . setTranslationY ( - var )
var . animate ( ) . translationX ( 0 )
var . animate ( ) . translationY ( 0 )
final ViewPropertyAnimator var = var . animate ( )
var . itemView . setTranslationX ( var )
var . itemView . setTranslationY ( var )
var . itemView . setAlpha ( var )
var . itemView . setTranslationX ( - var )
var . itemView . setTranslationY ( - var )
var . itemView . setAlpha ( 0 )
final ViewPropertyAnimator var = var . animate ( ) . setDuration ( getChangeDuration )
var . setAlpha ( 1 )
final ViewPropertyAnimator var = var . animate ( )
var . setAlpha ( 1 )
var . itemView . setAlpha ( 1 )
var . animate ( ) . cancel
var . setAlpha ( 1 )
var . itemView . setAlpha ( 1 )
var . itemView . setAlpha ( 1 )
var . setAlpha ( 1 )
var . get ( var ) . itemView . animate ( ) . cancel
if ( var . getLayoutManager ( ) == null || var == null )
final int var = var . var + Math . round ( var . getTranslationY ( ) )
final int var = var . var + Math . round ( var . getTranslationX ( ) )
if ( var . isBound ( ) && ! var . isInvalid ( ) )
if ( var != null && var . mNestedRecyclerView != null && var . isBound ( ) && ! var . isInvalid ( ) )
public abstract static SpanSizeLookup
this ( var , RecyclerView . DEFAULT_ORIENTATION , false )
if ( ! var . mValid || var != NO_POSITION || var != null != null && ( var . getDecoratedStart ( var ) >= var . getEndAfterPadding ( ) || var . getDecoratedEnd ( var ) <= var . getStartAfterPadding ( ) ) )
var . assignFromViewAndKeepVisibleRect ( var , getPosition ( var ) )
var . assignFromView ( var , getPosition ( var ) )
if ( var != var || var == null )
var = var
return ( int ) Math . round ( var / var )
OpReorderer ( Callback var ) = var
PositionMap
PositionMap ( int var )
mLayoutWasDefered = true
if ( ! var . isEmpty ( ) )
stopInterceptRequestLayout ( ! var )
stopInterceptRequestLayout ( true )
stopInterceptRequestLayout ( false )
if ( dispatchNestedScroll ( var , var , var , var , var , TYPE_TOUCH )  != View . OVER_SCROLL_NEVER )
void startInterceptRequestLayout
void stopInterceptRequestLayout ( boolean var )
if ( ! var && ! var = false )
if ( var < 0 > 0 )
if ( var < 0 > 0 )
var . onRelease ( )
var . onRelease ( )
var . onRelease ( )
var . onRelease ( )
var . onRelease ( )
var . onRelease ( )
var . onRelease ( )
var . onRelease ( )
var = var . createEdgeEffect ( this , EdgeEffectFactory . DIRECTION_RIGHT )
var = var . createEdgeEffect ( this , EdgeEffectFactory . DIRECTION_TOP )
var = var . createEdgeEffect ( this , EdgeEffectFactory . DIRECTION_BOTTOM )
if ( Build . VERSION . SDK_INT < 23 )
processDataSetCompletelyChanged ( true )
if ( var != null && Build . VERSION . SDK_INT >= 21 && var != 0 )
stopInterceptRequestLayout ( false )
stopInterceptRequestLayout ( false )
if ( findContainingItemView ( var ) == null )
if ( ( var . right > var . right || var . left >= var . right ) && var . left > var . left )
if ( ( var . left < var . left || var . right <= var . left ) && var . right < var . right = 1 var . right > var . right || var . left >= var . right ) && var . left > var . left )
if ( ( var . bottom > var . bottom || var . top >= var . bottom ) && var . top > var . top )
if ( ( var . top < var . top || var . bottom <= var . top ) && var . bottom < var . bottom = 1 var . bottom > var . bottom || var . top >= var . bottom ) && var . top > var . top )
Log . w ( var , "" + "" + "" + "" + "" , new IllegalStateException ( "" + exceptionLabel ) + exceptionLabel )
final int var = var . getActionMasked ( )
final int var = var . getActionIndex ( )
startNestedScroll ( var , TYPE_TOUCH )
final int var = var . getActionMasked ( )
final int var = var . getActionIndex ( )
startNestedScroll ( var , TYPE_TOUCH )
if ( dispatchNestedPreScroll ( var , var , var , var , TYPE_TOUCH ) )
final int var = var . getActionIndex ( )
var = - var . getAxisValue ( MotionEvent . AXIS_VSCROLL )
var = var . getAxisValue ( MotionEvent . AXIS_HSCROLL )
final float var = var . getAxisValue ( MotionEventCompat . AXIS_SCROLL )
if ( getScrollState == var )
if ( var . isAutoMeasureEnabled ( ) )
stopInterceptRequestLayout ( false )
stopInterceptRequestLayout ( false )
void onExitLayoutOrScroll ( boolean var )
stopInterceptRequestLayout ( false )
stopInterceptRequestLayout ( false )
Log . e ( var , "" + "" + var + "" + var + exceptionLabel )
void processDataSetCompletelyChanged ( boolean var )
new FastScroller ( this , var , var , var , var , AndroidUtilities . dp ( 8 ) , AndroidUtilities . dp ( 50 ) , 0 )
getScrollingChildHelper . stopNestedScroll ( var )
final float var = var . getTranslationX ( )
final float var = var . getTranslationY ( )
ViewFlinger
var = new OverScroller ( getContext , var )
final OverScroller var = var
int var = var - var
stopInterceptRequestLayout ( false )
if ( ! dispatchNestedScroll ( var , var , var , var , null , TYPE_NON_TOUCH ) && ( var != 0 || var != 0 ) )
if ( var . isFinished ( ) || ( ! var && ! hasNestedScrollingParent ( TYPE_NON_TOUCH ) ) )
var *= 0.3f * ( float ) Math . PI / 2.0f
var = new OverScroller ( getContext , var )
final ArrayList < ViewHolder > var = new ArrayList
final ArrayList < ViewHolder > var = getScrapDataForType ( var ) . mScrapHeap
Log . d ( var , "" + "" + exceptionLabel )
var . addFlags ( ViewHolder . FLAG_SET_A11Y_ITEM_DELEGATE )
public abstract static LayoutManager
final Matrix var = var . getMatrix ( )
if ( var . canScrollVertically ( - 1 ) || var . canScrollHorizontally ( - 1 ) )
if ( var . canScrollVertically ( 1 ) || var . canScrollHorizontally ( 1 ) )
var . setScrollable ( var . canScrollVertically ( 1 ) || var . canScrollVertically ( - 1 ) 1 || var . canScrollHorizontally ( - 1 ) 1 || var . canScrollHorizontally ( 1 ) )
if ( var . canScrollVertically ( - 1 ) )
if ( var . canScrollHorizontally ( - 1 ) )
if ( var . canScrollVertically ( 1 ) )
if ( var . canScrollHorizontally ( 1 ) )
public abstract static ItemDecoration
public abstract static ViewHolder
public abstract static AdapterDataObserver
public abstract static SmoothScroller
final float var = ( float ) Math . sqrt ( var . x * var . x + var . y * var . y )
return "" + "" + var + "" + var + "" + var + "" + var + "" + var + "" + var + "" + var + "" + var + "" + var + "" + var + '}'
public abstract static OnFlingListener
public RecyclerViewAccessibilityDelegate ( RecyclerView var )
if ( ! var . shouldIgnore ( ) && var . var . getLayoutManager ( ) != null )
var . var . getLayoutManager ( ) . onInitializeAccessibilityNodeInfoForItem ( var , var )
if ( ! var . shouldIgnore ( ) && var . var . getLayoutManager ( ) != null )
return var . var . getLayoutManager ( ) . performAccessibilityActionForItem ( var , var , var )
return var != var
measureChildWithDecorationsAndMargin ( var , var , getChildMeasureSpec ( getHeight , getHeightMode , getPaddingTop + getPaddingBottom , var . height , true )  , getHeightMode , getPaddingTop + getPaddingBottom , var . height , true , var )
measureChildWithDecorationsAndMargin ( var , getChildMeasureSpec ( getWidth , getWidthMode , getPaddingLeft + getPaddingRight , var . width , true )  , getWidthMode , getPaddingLeft + getPaddingRight , var . width , true , var , var )
measureChildWithDecorationsAndMargin ( var , getChildMeasureSpec ( var , getWidthMode , 0 , var . width , false ) , getWidthMode , 0 , var . width , false , getChildMeasureSpec ( getHeight , getHeightMode , getPaddingTop + getPaddingBottom , var . height , true )  , getHeightMode , getPaddingTop + getPaddingBottom , var . height , true , var )
measureChildWithDecorationsAndMargin ( var , getChildMeasureSpec ( getWidth , getWidthMode , getPaddingLeft + getPaddingRight , var . width , true )  , getWidthMode , getPaddingLeft + getPaddingRight , var . width , true , getChildMeasureSpec ( var , getHeightMode , 0 , var . height , false ) , getHeightMode , 0 , var . height , false , var )
FullSpanItem ( Parcel var )
FullSpanItem
AnchorInfo
final int var = var . getActionMasked ( )
final int var = var . getActionMasked ( )
final int var = var . getActionIndex ( )
if ( var != null = null )
var = new GestureDetectorCompat ( var . getContext ( ) , var )
var [ 0 ] = var . itemView . getTranslationX ( )
var [ 1 ] = var . itemView . getTranslationY ( )
var = new ItemTouchUIUtilImpl . Api21Impl ( )
var = new ItemTouchUIUtilImpl . BaseImpl ( )
RecoverAnimation ( ViewHolder var , int var , int var , float var , float var , float var , float var )
var = ValueAnimator . ofFloat ( 0f , 1f )
var = var . itemView . getTranslationX ( )
var = var . itemView . getTranslationY ( )
var . setTranslationX ( 0f )
var . setTranslationY ( 0f )
var . setTranslationX ( var )
var . setTranslationY ( var )
var . setTranslationX ( var )
FileLog . e ( "" + var . getIntExtra ( BluetoothProfile . EXTRA_STATE , 0 ) . EXTRA_STATE , 0 )
var = var
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . appDidLogout )
NotificationCenter . getGlobalInstance ( ) . postNotificationName ( NotificationCenter . didEndedCall )
StatsController . getInstance ( var ) . incrementTotalCallsTime ( getStatsNetworkType , int ( var / 1000 ) / 1000 % 5 )
ConnectionsManager . getInstance ( var ) . setAppPaused ( true , false )
ConnectionsManager . getInstance ( var ) . setAppPaused ( false , false )
if ( ! var && var != null && var . isEnabled ( ) )
if ( ! var . isEnabled ( ) || var . getProfileConnectionState ( BluetoothProfile . HEADSET ) != BluetoothProfile . STATE_CONNECTED )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . appDidLogout )
StatsController . getInstance ( var ) . incrementSentBytesCount ( StatsController . TYPE_WIFI , StatsController . TYPE_CALLS , var )
StatsController . getInstance ( var ) . incrementReceivedBytesCount ( StatsController . TYPE_WIFI , StatsController . TYPE_CALLS , var )
StatsController . getInstance ( var ) . incrementTotalCallsTime ( var , 5 )
StatsController . getInstance ( var ) . incrementSentItemsCount ( getStatsNetworkType , StatsController . TYPE_CALLS , 1 )
StatsController . getInstance ( var ) . incrementReceivedItemsCount ( getStatsNetworkType , StatsController . TYPE_CALLS , 1 )
if ( ( getPackageName + "" ) . equals ( var . getAction ( ) )  )
PendingIntent . getActivity ( VoIPBaseService . this , 0 , new Intent ( VoIPBaseService . this , getUIActivityClass ) . this , getUIActivityClass . addFlags ( Intent . FLAG_ACTIVITY_NEW_TASK | Intent . FLAG_ACTIVITY_SINGLE_TOP ) . FLAG_ACTIVITY_NEW_TASK | Intent . FLAG_ACTIVITY_SINGLE_TOP , 0 ) . send
nativeSetRemoteEndpoints ( var , var , var , var , var )
SharedPreferences var = MessagesController . getGlobalMainSettings ( )
var = MessagesController . getInstance ( currentAccount ) . getUser ( var )
NotificationCenter . getGlobalInstance ( ) . postNotificationName ( NotificationCenter . closeInCallActivity )
final SharedPreferences var = MessagesController . getMainSettings ( currentAccount )
NotificationCenter . getGlobalInstance ( ) . postNotificationName ( NotificationCenter . didStartedCall )
var . version = var . getLastSecretVersion ( )
var . setSecretPBytes ( var . p )
var . setSecretG ( var . g )
var . setLastSecretVersion ( var . version )
var . saveSecretParams ( var . getLastSecretVersion ( ) , var . getSecretG ( ) , var . getSecretPBytes ( ) )
BigInteger var = BigInteger . valueOf ( var . getSecretG ( ) )
var = var . modPow ( new BigInteger ( 1 , var ) , var , new BigInteger ( 1 , var . getSecretPBytes ( ) ) , var . getSecretPBytes ( ) )
var . user_id = MessagesController . getInstance ( currentAccount ) . getInputUser ( var )
if ( BuildVars . LOGS_ENABLED )
if ( BuildVars . LOGS_ENABLED )
super . onCreate ( )
acknowledgeCall ( true )
startForeground ( ID_ONGOING_CALL_NOTIFICATION , var . build ( ) )
FileLog . e ( "" )
if ( USE_CONNECTION_SERVICE && systemCallConnection != null )
systemCallConnection . setRinging ( )
controller . setRemoteEndpoints ( var , var . protocol . udp_p2p && var , BuildVars . DEBUG_VERSION && var . getBoolean ( "" , false ) , false , var . protocol . max_layer )
startRingtoneAndVibration ( var . id )
if ( BuildVars . LOGS_ENABLED )
var . write ( var )
NotificationCenter . getGlobalInstance ( ) . postNotificationName ( NotificationCenter . didStartedCall )
var . version = var . getLastSecretVersion ( )
var . setSecretPBytes ( var . p )
var . setSecretG ( var . g )
var . setLastSecretVersion ( var . version )
MessagesStorage . getInstance ( currentAccount ) . saveSecretParams ( var . getLastSecretVersion ( ) , var . getSecretG ( ) , var . getSecretPBytes ( ) )
BigInteger var = BigInteger . valueOf ( var . getSecretG ( ) )
BigInteger var = new BigInteger ( 1 , var . getSecretPBytes ( ) )
ConnectionsManager . getInstance ( currentAccount ) . cancelRequest ( var , false )
final boolean var = ConnectionsManager . getInstance ( currentAccount ) . getConnectionState != ConnectionsManager . ConnectionStateConnected
MessagesController . getInstance ( currentAccount ) . processUpdates ( var , false )
if ( BuildVars . LOGS_ENABLED )
if ( BuildVars . LOGS_ENABLED )
AndroidUtilities . runOnUIThread ( timeoutRunnable , MessagesController . getInstance ( currentAccount ) . callRingTimeout )
PendingIntent . getActivity ( VoIPService . this , 0 , new Intent ( VoIPService . this , VoIPFeedbackActivity . class ) . this , VoIPFeedbackActivity . class . putExtra ( "" , var . id ) , var . id . putExtra ( "" , var . access_hash ) , var . access_hash . putExtra ( "" , currentAccount ) , currentAccount . addFlags ( Intent . FLAG_ACTIVITY_NEW_TASK | Intent . FLAG_ACTIVITY_SINGLE_TOP ) . FLAG_ACTIVITY_NEW_TASK | Intent . FLAG_ACTIVITY_SINGLE_TOP , 0 ) . send
SharedPreferences var = MessagesController . getNotificationsSettings ( currentAccount )
var . edit ( ) . putStringSet ( "" , var ) . commit
final SharedPreferences var = MessagesController . getGlobalMainSettings ( )
controller . setConfig ( MessagesController . getInstance ( currentAccount ) . callPacketTimeout / 1000.0 , MessagesController . getInstance ( currentAccount ) . callConnectTimeout / 1000.0 , var . getInt ( "" , VoIPController . DATA_SAVING_NEVER ) , VoIPController . DATA_SAVING_NEVER , var . id )
VoIPHelper . upgradeP2pSetting ( currentAccount )
var = ContactsController . getInstance ( currentAccount ) . contactsDict . get ( var . id ) != null
controller . setRemoteEndpoints ( var , var . protocol . udp_p2p && var , BuildVars . DEBUG_VERSION && var . getBoolean ( "" , false ) , false , var . protocol . max_layer )
if ( ! TextUtils . isEmpty ( var ) && TextUtils . isEmpty ( var ) )
return EncryptionKeyEmojifier . emojifyForCall ( Utilities . computeSHA256 ( var . toByteArray ( ) , 0 , var . size ( ) ) . toByteArray ( ) , 0 , var . size ( ) )
Utilities . random . nextBytes ( var )
byte var = Utilities . computeSHA1 ( var )
byte var = new byte [ 8 ]
System . arraycopy ( var , var . length - 8 , var , 0 , 8 )
var = controller . getPeerCapabilities ( )
super . onConnectionStateChanged ( var )
byte var = Utilities . computeSHA1 ( var )
byte var = Utilities . computeSHA1 ( var )
System . arraycopy ( var , var . length - 8 , var , 0 , 8 )
var = Utilities . bytesToLong ( var )
if ( systemCallConnection == null )
if ( BuildVars . LOGS_ENABLED )
systemCallConnection = new CallConnection
if ( ! ( ( KeyguardManager ) getSystemService ( KEYGUARD_SERVICE ) ) . inKeyguardRestrictedInputMode )
ConnectionsManager var = var [ var ]
var = var [ var ]
var [ var ] = var = new ConnectionsManager ( var )
public ConnectionsManager ( int var )
File var = ApplicationLoader . getFilesDirFixed ( )
var = LocaleController . getSystemLocaleStringIso639 ( ) . toLowerCase
var = LocaleController . getLocaleStringIso639 ( ) . toLowerCase
var . mkdirs ( )
init ( BuildVars . BUILD_VERSION , TLRPC . LAYER , BuildVars . APP_ID , var , var , var , var , var , var , FileLog . getNetworkLogPath ( ) , UserConfig . getInstance ( var ) . getClientUserId , var )
SharedPreferences var = MessagesController . getGlobalNotificationsSettings ( )
UserConfig . getInstance ( var ) . loadConfig
native_cancelRequest ( var , var , var )
native_applyDatacenterAddress ( var , var , var , var )
native_setUserId ( var , var )
native_setUseIpv6 ( var , useIpv6Address )
native_setNetworkAvailable ( var , isNetworkOnline , getCurrentNetworkType , isConnectionSlow )
native_setPushConnectionEnabled ( var , var )
native_setProxySettings ( var , var , var , var , var , var )
native_init ( var , var , var , var , var , var , var , var , var , var , var , var , var , isNetworkOnline , getCurrentNetworkType )
native_setLangCode ( var , var )
SharedPreferences var = MessagesController . getGlobalMainSettings ( )
MessagesController . getInstance ( var ) . checkProxyInfo ( true )
FileLog . d ( "" )
ContactsController . getInstance ( var ) . checkContacts
native_resumeNetwork ( var , false )
if ( BuildVars . LOGS_ENABLED )
KeepAliveJob . finishJob ( )
MessagesController . getInstance ( var ) . processUpdates ( ( TLRPC . Updates ) var , false )
MessagesController . getInstance ( var ) . updateTimerProc
getInstance ( var ) . var = var
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . didUpdatedConnectionState )
if ( UserConfig . getInstance ( var ) . getClientUserId != 0 )
UserConfig . getInstance ( var ) . clearConfig
StatsController . getInstance ( var ) . incrementSentBytesCount ( var , StatsController . TYPE_TOTAL , var )
if ( var != null || var == 0 && Math . abs ( var - System . currentTimeMillis ( ) ) < 10000 || ! isNetworkOnline )
DnsTxtLoadTask var = new DnsTxtLoadTask ( var )
AzureLoadTask var = new AzureLoadTask ( var )
StatsController . getInstance ( var ) . incrementReceivedBytesCount ( var , StatsController . TYPE_TOTAL , var )
var . setReadTimeout ( 2000 )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . didUpdatedConnectionState )
if ( BuildVars . LOGS_ENABLED )
FileLog . d ( "" + var )
if ( BuildVars . LOGS_ENABLED )
FileLog . d ( "" + var . getHostAddress ( ) )
if ( BuildVars . LOGS_ENABLED )
FileLog . var ( var )
URL var = new URL ( "" + var + "" + var + "" )
if ( native_isTestBackend ( var ) != 0 )
native_applyDnsConfig ( var , var . var , UserConfig . getInstance ( var ) . getClientPhone )
AzureLoadTask var = new AzureLoadTask ( var )
var = new SparseArray
var = TL_dataJSON . TLdeserialize ( var , var . readInt32 ( var ) , var )
show_previews = var . readBool ( var )
var . writeInt32 ( var )
var . writeBool ( show_previews )
var = InputPeer . TLdeserialize ( var , var . readInt32 ( var ) , var )
var = var . readString ( var )
var . writeString ( var )
sound = var . readString ( var )
var . writeString ( sound )
vcard = var . readString ( var )
var . writeString ( vcard )
captionLegacy = var . readString ( var )
var . writeString ( captionLegacy )
captionLegacy = var . readString ( var )
var . writeString ( captionLegacy )
captionLegacy = var . readString ( var )
if ( ( var & 32 ) != 0 )
captionLegacy = var . readString ( var )
captionLegacy = var . readString ( var )
if ( ( flags & 16 ) != 0 )
var = var . readInt32 ( var )
if ( ( flags & 32 ) != 0 )
content = WebDocument . TLdeserialize ( var , var . readInt32 ( var ) , var )
var . writeString ( captionLegacy )
var . writeString ( captionLegacy )
var . writeString ( captionLegacy )
var . writeInt32 ( var )
content . serializeToStream ( var )
var = new TL_peerNotifySettingsEmpty_layer77
MessageEntity var = MessageEntity . TLdeserialize ( var , var . readInt32 ( var ) , var )
var . writeInt32 ( 0x1cb5c415 )
var . get ( var ) . serializeToStream ( var )
var = var . readString ( var )
var . writeString ( var )
var = SecureValueType . TLdeserialize ( var , var . readInt32 ( var ) , var )
help_TermsOfServiceUpdate var = null
var = new TL_help_termsOfServiceUpdate
var = new TL_help_termsOfServiceUpdateEmpty
var = var . readInt32 ( var )
var = var . readInt64 ( var )
var = var . readInt64 ( var )
var . writeInt32 ( var )
var . writeInt32 ( var )
var . writeInt32 ( var )
mute_until = var . readInt32 ( var )
var = var . readInt32 ( var )
var = TL_help_termsOfService . TLdeserialize ( var , var . readInt32 ( var ) , var )
var . writeInt32 ( mute_until )
var . writeInt32 ( var )
var . serializeToStream ( var )
var = var . readInt32 ( var )
var . writeInt32 ( var )
var . writeInt64 ( access_hash )
var = new TL_messageActionSecureValuesSent
var = new TL_messageActionBotAllowed
var = var . readString ( var )
var . writeInt32 ( var )
var . writeString ( var )
SecureValueError var = null
var = new TL_inputDialogPeer
var = new TL_inputDialogPeerFeed
help_ProxyData var = null
document = Document . TLdeserialize ( var , var . readInt32 ( var ) , var )
document = new TLRPC . TL_documentEmpty ( )
var = var . readString ( var )
var . writeString ( var )
google_transaction_id = var . readString ( var )
var . writeString ( google_transaction_id )
var = var . readString ( var )
var . writeString ( var )
var = var . readString ( var )
var . writeString ( var )
vcard = var . readString ( var )
var . writeString ( vcard )
venue_type = var . readString ( var )
var . writeString ( venue_type )
SecureValueType var = null
TL_inputSecureValue var = new TL_inputSecureValue
SecureValueType var = SecureValueType . TLdeserialize ( var , var . readInt32 ( var ) , var )
var . add ( var )
int var = var . readInt32 ( var )
InputSecureFile var = InputSecureFile . TLdeserialize ( var , var . readInt32 ( var ) , var )
var . add ( var )
int var = var . size ( )
var . get ( var ) . serializeToStream ( var )
var . writeInt32 ( var )
var . get ( var ) . serializeToStream ( var )
var = SecurePlainData . TLdeserialize ( var , var . readInt32 ( var ) , var )
var . add ( var )
MessageEntity var = MessageEntity . TLdeserialize ( var , var . readInt32 ( var ) , var )
entities . add ( var )
int var = entities . size ( )
var . get ( var ) . serializeToStream ( var )
var . writeInt32 ( var )
entities . get ( var ) . serializeToStream ( var )
phone_number = var . readString ( var )
var . writeString ( first_name )
var . writeInt32 ( var )
vcard = var . readString ( var )
var . writeString ( var )
var . writeString ( vcard )
var = new TL_updateDialogUnreadMark
var = var . readInt64 ( var )
var = SecureValueType . TLdeserialize ( var , var . readInt32 ( var ) , var )
SecureValueType var = SecureValueType . TLdeserialize ( var , var . readInt32 ( var ) , var )
var = var . readString ( var )
if ( ( var & 1 ) != 0 )
if ( ( var & 4096 ) != 0 )
var = var . readString ( var )
var . writeInt64 ( var )
var . writeInt32 ( var )
var . writeInt64 ( var )
if ( ( var & 1 ) != 0 )
if ( ( var & 2048 ) != 0 )
var . writeString ( var )
var = SecureValueType . TLdeserialize ( var , var . readInt32 ( var ) , var )
offset = var . readInt32 ( var )
var = var . readInt64 ( var )
if ( ( var & 1 ) != 0 )
if ( ( var & 2048 ) != 0 )
var = var . readString ( var )
var . writeInt64 ( var )
var . writeInt64 ( var )
if ( ( var & 1 ) != 0 )
if ( ( var & 1024 ) != 0 )
var . writeString ( var )
var = SecureValueType . TLdeserialize ( var , var . readInt32 ( var ) , var )
var = var . readString ( var )
if ( ( var & 1 ) != 0 )
if ( ( var & 2 ) != 0 )
var = DialogPeer . TLdeserialize ( var , var . readInt32 ( var ) , var )
var . writeByteArray ( var )
var . writeString ( var )
if ( ( var & 1 ) != 0 )
if ( ( var & 8 ) != 0 )
var = var . readInt32 ( var )
var = var . readInt64 ( var )
var = SecureValueType . TLdeserialize ( var , var . readInt32 ( var ) , var )
var = var . readString ( var )
if ( ( var & 1 ) != 0 )
var = var . readByteArray ( var )
var = var . readString ( var )
var . writeInt64 ( var )
var . writeByteArray ( var )
var . writeString ( var )
if ( ( var & 1 ) != 0 )
var . writeString ( var )
var . writeString ( var )
var = var . readString ( var )
if ( ( var & 1 ) != 0 )
var = DialogPeer . TLdeserialize ( var , var . readInt32 ( var ) , var )
var = ContactLink . TLdeserialize ( var , var . readInt32 ( var ) , var )
var = ContactLink . TLdeserialize ( var , var . readInt32 ( var ) , var )
var = var . readInt32 ( var )
var . writeInt32 ( var )
var . add ( var . readInt32 ( var ) )
var = var . readInt32 ( var )
var = ChatParticipants . TLdeserialize ( var , var . readInt32 ( var ) , var )
var = var . readBool ( var )
var . writeBool ( var )
var = var . readString ( var )
var . writeString ( "" )
if ( TL_secureValue . var != var )
if ( var == null && var )
TL_secureValue var = new TL_secureValue
DialogPeer var = DialogPeer . TLdeserialize ( var , var . readInt32 ( var ) , var )
length = var . readInt32 ( var )
admin_rights . serializeToStream ( var )
var . writeInt32 ( length )
offset = var . readInt32 ( var )
StickerSetCovered var = StickerSetCovered . TLdeserialize ( var , var . readInt32 ( var ) , var )
var . writeInt32 ( length )
var . writeInt32 ( var )
if ( var == null && var )
var = new TL_webDocument
if ( var == null && var )
var = new TL_inputWebFileLocation
var = new TL_channel_layer77
var = var . readString ( var )
var = SecureFile . TLdeserialize ( var , var . readInt32 ( var ) , var )
var = var . readBool ( var )
var . writeString ( var )
var = SecureFile . TLdeserialize ( var , var . readInt32 ( var ) , var )
var . writeBool ( var )
if ( TL_fileHash . var != var )
if ( var == null && var )
TL_fileHash var = new TL_fileHash
if ( var == null && var )
admin_rights = TL_channelAdminRights . TLdeserialize ( var , var . readInt32 ( var ) , var )
SecureFile var = SecureFile . TLdeserialize ( var , var . readInt32 ( var ) , var )
var . writeInt32 ( var )
var . writeInt32 ( var )
if ( TL_account_sentEmailCode . var != var )
short_name = var . readString ( var )
var . writeString ( short_name )
var . get ( var ) . serializeToStream ( var )
var = var . readInt32 ( var )
var = var . readInt32 ( var )
var . readParams ( var , var )
return messages_Stickers . TLdeserialize ( var , var , var )
return help_DeepLinkInfo . TLdeserialize ( var , var , var )
var . writeByteArray ( var )
var . writeByteArray ( var )
return help_ProxyData . TLdeserialize ( var , var , var )
return messages_FoundStickerSets . TLdeserialize ( var , var , var )
TL_secureValue var = TL_secureValue . TLdeserialize ( var , var . readInt32 ( var ) , var )
SecureValueError var = SecureValueError . TLdeserialize ( var , var . readInt32 ( var ) , var )
return TL_account_sentEmailCode . TLdeserialize ( var , var , var )
var . writeInt32 ( var )
var . writeInt32 ( size )
var . writeString ( mime_type )
var . writeInt32 ( 0x1cb5c415 )
return TL_auth_sentCode . TLdeserialize ( var , var , var )
var . writeInt32 ( var )
var . writeInt64 ( access_hash )
var . writeInt32 ( size )
var . writeString ( var )
return TL_account_authorizationForm . TLdeserialize ( var , var , var )
var . readParams ( var , var )
return TL_secureValue . TLdeserialize ( var , var , var )
return help_TermsOfServiceUpdate . TLdeserialize ( var , var , var )
var . writeInt32 ( var )
var . writeInt64 ( var )
return TL_account_webAuthorizations . TLdeserialize ( var , var , var )
restriction_reason = var . readString ( var )
to_id = Peer . TLdeserialize ( var , var . readInt32 ( var ) , var )
to_id = Peer . TLdeserialize ( var , var . readInt32 ( var ) , var )
if ( ( flags & 512 ) != 0 )
media = MessageMedia . TLdeserialize ( var , var . readInt32 ( var ) , var )
media = MessageMedia . TLdeserialize ( var , var . readInt32 ( var ) , var )
media = MessageMedia . TLdeserialize ( var , var . readInt32 ( var ) , var )
message = media . captionLegacy
if ( ( flags & 131072 ) != 0 )
var = var . readInt32 ( var )
to_id . serializeToStream ( var )
if ( ( flags & 131072 ) != 0 )
var . writeInt64 ( grouped_id )
username = var . readString ( var )
media = MessageMedia . TLdeserialize ( var , var . readInt32 ( var ) , var )
media = MessageMedia . TLdeserialize ( var , var . readInt32 ( var ) , var )
message = media . captionLegacy
hash = var . readInt32 ( var )
var = var . readString ( var )
banned_rights = TL_channelBannedRights . TLdeserialize ( var , var . readInt32 ( var ) , var )
if ( ( flags & 131072 ) != 0 )
if ( ( flags & 1 ) != 0 )
installed_date = var . readInt32 ( var )
if ( ( flags & 32768 ) != 0 )
banned_rights . serializeToStream ( var )
var = var . readString ( var )
var = var . readInt32 ( var )
var . writeInt32 ( flags )
if ( ( flags & 1 ) != 0 )
var . writeInt32 ( installed_date )
unread = ( flags & 1 ) != 0
var = var . readInt32 ( var )
var = var . readString ( var )
var . writeInt32 ( var )
var . writeByteArray ( var )
var = var . readString ( var )
if ( ( var < 0 || var == 3 ) && var . startsWith ( "" ) )
var = var . readInt32 ( var )
var . writeInt32 ( var )
to_id . serializeToStream ( var )
var = var . readString ( var )
var = var . readInt32 ( var )
var . writeInt32 ( var )
var . writeInt32 ( reply_to_msg_id )
var = var . readString ( var )
var = var . readInt32 ( var )
var . writeByteArray ( var )
var . writeInt32 ( var . get ( var ) )
var = var . readString ( var )
var = var . readInt32 ( var )
var . writeInt32 ( var )
var . writeInt32 ( var )
var = var . readString ( var )
if ( ( var & var ) != 0 && var < 0 )
var = var . readInt32 ( var )
venue_id = var . readString ( var )
var . writeString ( var )
var = var . readInt32 ( var )
provider = var . readString ( var )
var . writeInt32 ( var )
var . writeInt32 ( id )
var = var . readString ( var )
var . writeInt32 ( var )
var . readString ( var )
var . writeInt32 ( var )
message = media . captionLegacy
var . writeInt32 ( var )
var . writeInt32 ( var )
var . writeString ( var )
var . writeInt32 ( var )
TL_fileHash var = TL_fileHash . TLdeserialize ( var , var . readInt32 ( var ) , var )
TL_fileHash var = TL_fileHash . TLdeserialize ( var , var . readInt32 ( var ) , var )
TL_fileHash var = TL_fileHash . TLdeserialize ( var , var . readInt32 ( var ) , var )
file_hashes . add ( var )
int var = file_hashes . size ( )
file_hashes . get ( var ) . serializeToStream ( var )
if ( var && var && var == null )
if ( var != null && ! TextUtils . isEmpty ( var . getText ( ) ) )
if ( var != null && ! TextUtils . isEmpty ( var . getText ( ) ) )
if ( var != null && ! TextUtils . isEmpty ( var . getText ( ) ) )
return var || checkTransitionAnimation var || onTouchEvent ( var )
if ( ! var && ! var )
if ( ! var var )
LinearLayout . LayoutParams var = ( LinearLayout . LayoutParams ) var . getLayoutParams ( var )
if ( ! var && ! var && ! var && var . get ( var . size ( var ) - 1 ) . swipeBackEnabled )
if ( var || var || checkTransitionAnimation var || var . isEmpty ( var ) )
return presentFragment ( var , false , false , true , true )
return presentFragment ( var , var , false , true , false )
startLayoutAnimation ( var , false , var )
if ( var && var . size ( var ) == 1 var )
if ( var == null var )
var . setClipToOutline ( true )
boolean var = var || var || var && MessagesController . getGlobalMainSettings ( var ) . getBoolean ( "" , true )
if ( var != null var )
LinearLayout . LayoutParams var = ( LinearLayout . LayoutParams ) var . getLayoutParams ( var )
presentFragmentInternalRemoveOld ( false , var )
if ( var && hasSubMenu && ( var == null || var != null && ! var . isShowing ( ) ) )
if ( var != null && var . getVisibility ( ) != GONE )
if ( var != null && var . getVisibility ( ) != VISIBLE )
var . setColorFilter ( new PorterDuffColorFilter ( getThemeColor ( Theme . key_dialogBackground ) . key_dialogBackground , PorterDuff . Mode . MULTIPLY ) ( Theme . key_dialogBackground ) . key_dialogBackground , PorterDuff . Mode . MULTIPLY )
View var = var . getChildAt ( var )
var . setTextColor ( getThemeColor ( Theme . key_dialogTextBlack ) . key_dialogTextBlack )
var . setTextColor ( getThemeColor ( Theme . key_dialogIcon ) . key_dialogIcon )
AndroidUtilities . setScrollViewEdgeEffectColor ( var , getThemeColor ( Theme . key_dialogScrollGlow ) . key_dialogScrollGlow )
var . setTextColor ( getThemeColor ( Theme . key_dialogTextBlack ) . key_dialogTextBlack )
var . setProgressColor ( getThemeColor ( Theme . key_dialogProgressCircle ) . key_dialogProgressCircle )
var . setProgressColor ( getThemeColor ( Theme . key_dialogLineProgress ) . key_dialogLineProgress )
var . setBackColor ( getThemeColor ( Theme . key_dialogLineProgressBackground ) . key_dialogLineProgressBackground )
var . setTextColor ( getThemeColor ( Theme . key_dialogTextGray2 ) . key_dialogTextGray2 )
if ( var == Dialog . BUTTON_NEGATIVE )
var . setTextColor ( getThemeColor ( Theme . key_dialogButton ) . key_dialogButton )
var . setTextColor ( getThemeColor ( Theme . key_dialogButton ) . key_dialogButton )
var . setTextColor ( getThemeColor ( Theme . key_dialogButton ) . key_dialogButton )
if ( var == null || ! canTextInput ( var ) var )
var = ConnectionsManager . generateClassGuid ( )
var = ConnectionsManager . generateClassGuid ( )
ConnectionsManager . getInstance ( var ) . cancelRequestsForGuid ( var )
return var != null && var . presentFragment ( var , var , var , true , false )
return ! ( var != null && var != var ) && ! var && var && var == ViewCompat . SCROLL_AXIS_VERTICAL && ! canDismissWithSwipe
return ! var && var || var || ! canDismissWithSwipe
var . put ( var , 0xffffffff )
var . put ( var , 0xffffffff )
var . put ( var , 0xffa8a8a8 )
var . add ( var = var = var = var )
var . add ( var = var )
if ( var == null = var = var )
applyTheme ( var , false , false , false )
applyTheme ( var , true , false , false )
applyTheme ( var , ! var , true , false )
applyTheme ( var , true , true , false )
SharedPreferences var = MessagesController . getGlobalMainSettings ( )
NotificationCenter . getGlobalInstance ( ) . postNotificationName ( NotificationCenter . didSetNewTheme , var )
if ( var . toLowerCase ( ) . endsWith ( "" ) )
applyTheme ( var , true , false , false )
var . write ( AndroidUtilities . getStringBytes ( var . toString ( ) ) . toString ( ) )
FileLog . var ( var )
var [ 1 ] = createCircleDrawableWithIcon ( AndroidUtilities . dp ( 54 ) , R . drawable . attach_gallery )
var [ 2 ] = createCircleDrawableWithIcon ( AndroidUtilities . dp ( 54 ) , R . drawable . attach_video )
var [ 3 ] = createCircleDrawableWithIcon ( AndroidUtilities . dp ( 54 ) , R . drawable . attach_audio )
var [ 4 ] = createCircleDrawableWithIcon ( AndroidUtilities . dp ( 54 ) , R . drawable . attach_file )
var [ 5 ] = createCircleDrawableWithIcon ( AndroidUtilities . dp ( 54 ) , R . drawable . attach_contact )
var . setTextSize ( AndroidUtilities . dp ( SharedConfig . fontSize ) . fontSize )
var . setTextSize ( AndroidUtilities . dp ( Math . max ( 16 , SharedConfig . fontSize ) , SharedConfig . fontSize - 2 ) . max ( 16 , SharedConfig . fontSize ) , SharedConfig . fontSize - 2 )
MessagesController . getGlobalMainSettings ( ) . edit . remove ( "" ) . commit
NotificationCenter . getGlobalInstance ( ) . postNotificationName ( NotificationCenter . didSetNewWallpapper )
setDrawableColor ( var , getColor ( var ) )
SharedPreferences var = MessagesController . getGlobalMainSettings ( )
var = MessagesController . getGlobalMainSettings ( )
NotificationCenter . getGlobalInstance ( ) . postNotificationName ( NotificationCenter . didSetNewWallpapper )
if ( ( var & var ) == 0 || checkTag ( var , var ) )
if ( ( var & var ) == 0 || checkTag ( var , var ) )
if ( ( var & var ) == 0 || checkTag ( var , var ) )
if ( var instanceof RecyclerListView != null && ( var == null || var . length == 0 ) )
if ( var != null && ( var == null || var . length == 0 ) )
var . didSetColor ( )
if ( var instanceof CombinedDrawable instanceof StateListDrawable || Build . VERSION . SDK_INT >= 21 && var instanceof RippleDrawable )
if ( ! var && var instanceof View && ! checkTag ( var , ( View ) var ) )
Drawable var = var . getCompoundDrawables ( )
TypefaceSpan var = ( ( SpannedString ) var ) . getSpans ( 0 , var . length ( ) , TypefaceSpan . class )
( ( SeekBarView ) var ) . setInnerColor ( var )
ConnectionsManager . getInstance ( var ) . cancelRequest ( var , true )
if ( var == null || var != null && var . distanceTo ( var ) < 200 )
if ( var != 0 )
var = 0
TLRPC . TL_contacts_resolvedPeer var = ( TLRPC . TL_contacts_resolvedPeer ) var
MessagesController . getInstance ( var ) . putUsers ( var . users , false )
MessagesController . getInstance ( var ) . putUsers ( var . users , false )
MessagesController . getInstance ( var ) . putChats ( var . chats , false )
MessagesController . getInstance ( var ) . putChats ( var . chats , false )
MessagesController . getInstance ( var ) . putChats ( var . chats , false )
MessagesStorage . getInstance ( var ) . putUsersAndChats ( var . users , var . chats , true , true )
ConnectionsManager . getInstance ( var ) . cancelRequest ( var , true )
MessagesStorage . getInstance ( var ) . putUsersAndChats ( var . users , var . chats , true , true )
var = null
var = var
var = 0
TLObject var = MessagesController . getInstance ( var ) . getUserOrChat ( MessagesController . getInstance ( var ) . venueSearchBot )
if ( ! ( var instanceof TLRPC . User ) )
var . bot = MessagesController . getInstance ( var ) . getInputUser ( var )
var . bot = MessagesController . getInstance ( var ) . getInputUser ( var )
var . bot = MessagesController . getInstance ( var ) . getInputUser ( var )
var . offset = ""
var . geo_point = new TLRPC . TL_inputGeoPoint ( )
var . geo_point = new TLRPC . TL_inputGeoPoint ( )
var . geo_point = new TLRPC . TL_inputGeoPoint ( )
var . geo_point . lat = AndroidUtilities . fixLocationCoord ( var . getLatitude ( ) )
var . geo_point . _long = AndroidUtilities . fixLocationCoord ( var . getLongitude ( ) )
var . geo_point . _long = AndroidUtilities . fixLocationCoord ( var . getLongitude ( ) )
var . flags |= 1
var . peer = new TLRPC . TL_inputPeerEmpty ( )
var . peer = new TLRPC . TL_inputPeerEmpty ( )
TLRPC . messages_BotResults var = ( TLRPC . messages_BotResults ) var
var . venue_type = var . venue_type
var . provider = var . provider
TLRPC . TL_botInlineMessageMediaVenue var = ( TLRPC . TL_botInlineMessageMediaVenue ) var . send_message
var . add ( "" + var . venue_type + "" )
var . geo = var . geo
var . address = var . address
var . venue_id = var . venue_id
public ContactsAdapter ( Context var , int var , boolean var , SparseArray < TLRPC . User > . User var , boolean var )
return MessagesController . getInstance ( var ) . getUser ( var . get ( var ) . user_id )
return MessagesController . getInstance ( var ) . getUser ( var . get ( var ) . user_id )
return ContactsController . getInstance ( var ) . phoneBookContacts . get ( var )
if ( var || var != 1 != 3 )
return var != 1
return var != 3
TLRPC . User var = MessagesController . getInstance ( var ) . getUser ( var . get ( var ) . user_id )
if ( var . indexOfKey ( var . id ) >= 0 )
ContactsController . Contact var = ContactsController . getInstance ( var ) . phoneBookContacts . get ( var )
return MessagesController . getInstance ( var ) . hintDialogs . get ( var - 1 )
int var = MessagesController . getInstance ( var ) . hintDialogs . size ( )
return MessagesController . getInstance ( var ) . dialogs
var += 2 + MessagesController . getInstance ( var ) . hintDialogs . size ( )
return MessagesController . getInstance ( var ) . hintDialogs . get ( var - 1 )
var = var == 0 && ! var && ! MessagesController . getInstance ( var ) . hintDialogs . isEmpty ( )
return var != 1 && var != 5 && var != 3 && var != 8 && var != 7
SharedPreferences var = MessagesController . getGlobalMainSettings ( )
var -= 2 + MessagesController . getInstance ( var ) . hintDialogs . size ( )
int var = MessagesController . getInstance ( var ) . hintDialogs . size ( )
if ( ! MessagesController . getInstance ( var ) . dialogsEndReached )
TLRPC . TL_topPeer var = DataQuery . getInstance ( var ) . hints . get ( var )
var = MessagesController . getInstance ( var ) . getUser ( var . var . user_id )
var = MessagesController . getInstance ( var ) . getChat ( var . var . channel_id )
var = MessagesController . getInstance ( var ) . getChat ( var . var . chat_id )
return DataQuery . getInstance ( var ) . hints . size ( )
var = new SearchAdapterHelper ( false )
var = UserConfig . getInstance ( var ) . getClientUserId
DataQuery . getInstance ( var ) . loadHints ( true )
ConnectionsManager . getInstance ( var ) . cancelRequest ( var , true )
var . offset_peer = MessagesController . getInstance ( var ) . getInputPeer ( var )
MessagesStorage . getInstance ( var ) . putUsersAndChats ( var . users , var . chats , true , true )
MessagesController . getInstance ( var ) . putUsers ( var . users , false )
MessagesController . getInstance ( var ) . putChats ( var . chats , false )
var . add ( new MessageObject ( var , var , false ) , var , false )
var = MessagesStorage . getInstance ( var ) . getDialogReadMax ( var . out , var )
return ! var . isEmpty ( ) || ! DataQuery . getInstance ( var ) . hints . isEmpty ( )
return var != 2 && ( var == null || var . length ( ) == 0 ) && ( ! var . isEmpty ( ) || ! DataQuery . getInstance ( var ) . hints . isEmpty ( ) )
SQLiteCursor var = MessagesStorage . getInstance ( var ) . getDatabase . queryFinalized ( "" )
final LongSparseArray < RecentSearchObject > var = new LongSparseArray
MessagesStorage . getInstance ( var ) . getEncryptedChatsInternal ( TextUtils . join ( "" , var ) , var , var , var )
MessagesStorage . getInstance ( var ) . getChatsInternal ( TextUtils . join ( "" , var ) , var , var )
MessagesStorage . getInstance ( var ) . getUsersInternal ( TextUtils . join ( "" , var ) , var , var )
SQLitePreparedStatement var = MessagesStorage . getInstance ( var ) . getDatabase . executeFast ( "" )
var = new LongSparseArray
MessagesStorage . getInstance ( var ) . getDatabase . executeFast ( "" ) . stepThis . dispose
MessagesController . getInstance ( var ) . putUser ( ( TLRPC . User ) var . object , true )
MessagesController . getInstance ( var ) . putChat ( ( TLRPC . Chat ) var . object , true )
MessagesController . getInstance ( var ) . putEncryptedChat ( ( TLRPC . EncryptedChat ) var . object , true )
LongSparseArray < DialogSearchResult > var = new LongSparseArray var ( var )
TLRPC . User var = UserConfig . getInstance ( var ) . getCurrentUser var
if ( var . indexOfKey ( ( long ) var ) >= 0 )
MessagesController . getInstance ( var ) . putUser ( var , true )
MessagesController . getInstance ( var ) . putChat ( var , true )
MessagesController . getInstance ( var ) . putEncryptedChat ( var , true )
MessagesController . getInstance ( var ) . putUsers ( var , true )
TLRPC . User var = MessagesController . getInstance ( var ) . getUser ( ( ( TLRPC . User ) var ) . id )
TLRPC . Chat var = MessagesController . getInstance ( var ) . getChat ( ( ( TLRPC . Chat ) var ) . id )
if ( var > var + var && var < var + var + var )
return var . get ( var - var - var - 1 )
if ( var > var + var + var && var < var + var + var + var )
return var . get ( var - var - var - var - 1 )
var = MessagesController . getInstance ( var ) . getChat ( ( ( TLRPC . Chat ) var ) . id )
var = MessagesController . getInstance ( var ) . getEncryptedChat ( ( ( TLRPC . EncryptedChat ) var ) . id )
var = MessagesController . getInstance ( var ) . getUser ( var . user_id )
var . useSeparator = ( var != getItemCount - 1 && var != var + var - 1 && var != var + var + var - 1 )
if ( var != null && ( var = var . indexOf ( var ) ) != - 1 != null )
var . setSpan ( new ForegroundColorSpan ( Theme . getColor ( Theme . key_windowBackgroundWhiteBlueText4 ) . key_windowBackgroundWhiteBlueText4 ) . getColor ( Theme . key_windowBackgroundWhiteBlueText4 ) . key_windowBackgroundWhiteBlueText4 , var , var + var . length ( ) , Spanned . SPAN_EXCLUSIVE_EXCLUSIVE )
if ( ! var . getGlobalSearch ( ) . isEmpty && var == var . size ( ) + var . getLocalServerSearch ( ) . size )
if ( var > var + var + var && var < var + var + var + var )
if ( var != 0 && var == var + var + var + var )
int var = var . size ( ) + 2
int var = var . getItemViewType ( )
( ( DrawerProfileCell ) var . itemView ) . setUser ( MessagesController . getInstance ( UserConfig . selectedAccount ) . selectedAccount . getUser ( UserConfig . getInstance ( UserConfig . selectedAccount ) . selectedAccount . getClientUserId ) . getInstance ( UserConfig . selectedAccount ) . selectedAccount . getClientUserId , var )
var . get ( var ) . bind ( var )
if ( var == 0 == 1 )
if ( var == var . size ( ) + 1 )
var . add ( var )
int var = UserConfig . getInstance ( var ) . getClientUserId
if ( var > 3 && var < places . size ( ) + 4 )
if ( var > 2 && var < places . size ( ) + 3 )
return ! ( LocationController . getInstance ( var ) . getSharingLocationInfo ( var ) == null && var == null )
var = new SearchAdapterHelper ( true )
ConnectionsManager . getInstance ( var ) . cancelRequest ( var , true )
ConnectionsManager . getInstance ( var ) . cancelRequest ( var , true )
SharedPreferences var = MessagesController . getNotificationsSettings ( var )
SharedPreferences var = MessagesController . getNotificationsSettings ( var )
ConnectionsManager . getInstance ( var ) . cancelRequest ( var , true )
ConnectionsManager . getInstance ( var ) . cancelRequest ( var , true )
ConnectionsManager . getInstance ( var ) . cancelRequest ( var , true )
TLObject var = var . getUserOrChat ( var )
var . putUser ( var , false )
var . putUsersAndChats ( var . users , null , true , true )
ConnectionsManager . getInstance ( var ) . cancelRequest ( var , true )
var . saveBotCache ( var , var )
if ( ! ( var . document instanceof TLRPC . TL_document ) && ! ( var . photo instanceof TLRPC . TL_photo ) && var . content == null && var . send_message instanceof TLRPC . TL_botInlineMessageMediaAuto )
var . getBotCache ( var , var )
var . bot = MessagesController . getInstance ( var ) . getInputUser ( var )
var . geo_point . lat = AndroidUtilities . fixLocationCoord ( var . getLatitude ( ) )
var . geo_point . _long = AndroidUtilities . fixLocationCoord ( var . getLongitude ( ) )
var . peer = MessagesController . getInstance ( var ) . getInputPeer ( var )
var = ConnectionsManager . getInstance ( var ) . sendRequest ( var , var , ConnectionsManager . RequestFlagFailOnServerErrors )
ConnectionsManager . getInstance ( var ) . cancelRequest ( var , true )
final SparseArray < TLRPC . User > var = new SparseArray
final SparseArray < TLRPC . User > var = new SparseArray
if ( ! var && var && var == 0 && ! var . isEmpty ( ) )
for ( int var = 0 ; var < var . size ( ) ; var ++ )
TLRPC . User var = var . getUser ( var . get ( var ) . peer . user_id )
var = var . getChat ( var . id )
TLRPC . User var = var . getUser ( var . user_id )
if ( var == null || ! var && UserObject . isUserSelf ( var ) || var . indexOfKey ( var . id ) >= 0 )
var . putUsers ( var . var , false )
int var = UserConfig . getInstance ( var ) . getClientUserId
if ( var . indexOfKey ( var . id ) >= 0 && var . indexOfKey ( var . id ) >= 0 . indexOfKey ( var . id ) >= 0 1 . indexOfKey ( var . id ) >= 0 )
if ( var . indexOfKey ( var . id ) >= 0 && var . indexOfKey ( var . id ) >= 0 . indexOfKey ( var . id ) >= 0 1 . indexOfKey ( var . id ) >= 0 )
if ( var . indexOfKey ( var . id ) >= 0 && var . indexOfKey ( var . id ) >= 0 . indexOfKey ( var . id ) >= 0 1 . indexOfKey ( var . id ) >= 0 )
TLRPC . BotInfo var = var . valueAt ( var )
var . add ( var . getUser ( var . user_id ) . user_id )
public SearchAdapter ( Context var , SparseArray < TLRPC . User > . User var , boolean var , boolean var , boolean var , boolean var , int var )
var = new SearchAdapterHelper ( true )
final ArrayList < TLRPC . TL_contact > var = new ArrayList ( ContactsController . getInstance ( var ) . contacts )
final ArrayList < TLRPC . TL_contact > var = new ArrayList ( ContactsController . getInstance ( var ) . contacts )
if ( var . id == UserConfig . getInstance ( var ) . getClientUserId var || var && ! var . mutual_contact )
var . setSpan ( new ForegroundColorSpan ( Theme . getColor ( Theme . key_windowBackgroundWhiteBlueText4 ) . key_windowBackgroundWhiteBlueText4 ) . getColor ( Theme . key_windowBackgroundWhiteBlueText4 ) . key_windowBackgroundWhiteBlueText4 , var , var + var , Spanned . SPAN_EXCLUSIVE_EXCLUSIVE )
var . setChecked ( var . indexOfKey ( var ) >= 0 , false )
ConnectionsManager . getInstance ( var ) . cancelRequest ( var , true )
ConnectionsManager . getInstance ( var ) . cancelRequest ( var , true )
ConnectionsManager . getInstance ( var ) . cancelRequest ( var , true )
var . channel = MessagesController . getInstance ( var ) . getInputChannel ( var )
MessagesController . getInstance ( var ) . putUsers ( var . users , false )
var . channel = MessagesController . getInstance ( var ) . getInputChannel ( var )
MessagesController . getInstance ( var ) . putUsers ( var . users , false )
if ( var . length ( ) > 0 )
MessagesController . getInstance ( var ) . putChats ( var . chats , false )
MessagesController . getInstance ( var ) . putUsers ( var . users , false )
MessagesStorage . getInstance ( var ) . putUsersAndChats ( var . users , var . chats , true , true )
SQLiteCursor var = MessagesStorage . getInstance ( var ) . getDatabase . queryFinalized ( "" )
if ( var . size ( ) == 0 || var == null )
SQLitePreparedStatement var = MessagesStorage . getInstance ( var ) . getDatabase . executeFast ( "" )
MessagesStorage . getInstance ( var ) . getDatabase . beginTransaction
MessagesStorage . getInstance ( var ) . getDatabase . executeFast ( "" + var . get ( var ) . hashtag + "" ) . stepThis . dispose
MessagesStorage . getInstance ( var ) . getDatabase . executeFast ( "" ) . stepThis . dispose
DataQuery . getInstance ( var ) . checkStickers ( DataQuery . TYPE_IMAGE )
DataQuery . getInstance ( var ) . checkStickers ( DataQuery . TYPE_MASK )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . FileDidLoaded )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . FileDidFailedLoad )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . FileDidLoaded )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . FileDidFailedLoad )
FileLoader . getInstance ( var ) . loadFile ( var . thumb . location , "" , 0 , 1 )
var = var . toString ( ) . trim
HashMap < String , ArrayList < TLRPC . Document > . Document > var = DataQuery . getInstance ( var ) . getAllStickers
if ( var )
if ( var != null && ! var . isEmpty ( ) )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . needReloadArchivedStickers )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . needReloadArchivedStickers )
if ( var == DataQuery . TYPE_IMAGE )
if ( var == DataQuery . TYPE_IMAGE )
var . masks = var == DataQuery . TYPE_MASK
ConnectionsManager . getInstance ( currentAccount ) . bindRequestToGuid ( var , classGuid )
var . setChecked ( DataQuery . getInstance ( currentAccount ) . isStickerPackInstalled ( var . set . id ) . set . id )
var . to_id . user_id = var . from_id = UserConfig . getInstance ( var ) . getClientUserId
MessageObject var = new MessageObject ( UserConfig . selectedAccount , var , false )
SparseArray < TextPaint > var = null
if ( var != null && var != null )
var . valueAt ( var ) . setColor ( getTextColor )
var . valueAt ( var ) . setColor ( getTextColor )
var . valueAt ( var ) . setColor ( getTextColor )
var . valueAt ( var ) . setColor ( getTextColor )
var . valueAt ( var ) . setColor ( getTextColor )
var . valueAt ( var ) . setColor ( getTextColor )
var . valueAt ( var ) . setColor ( getTextColor )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . messagePlayingProgressDidChanged )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . messagePlayingDidReset )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . messagePlayingPlayStateChanged )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . messagePlayingDidStarted )
TLObject var = MessagesController . getInstance ( var ) . getUserOrChat ( "" )
MessagesController . getInstance ( var ) . putUsers ( var . users , false )
MessagesStorage . getInstance ( var ) . putUsersAndChats ( var . users , var . chats , false , true )
MessagesController . getInstance ( var ) . openByUserName ( var . channel . username , var , 2 )
videoPlayerSeekbar . setColors ( 0x66ffffff , 0x66ffffff , 0xffd5d0d7 , 0xffffffff , 0xffffffff )
var . addView ( var , LayoutHelper . createFrame ( LayoutHelper . MATCH_PARENT , LayoutHelper . WRAP_CONTENT , Gravity . BOTTOM | Gravity . LEFT ) . MATCH_PARENT , LayoutHelper . WRAP_CONTENT , Gravity . BOTTOM | Gravity . LEFT )
LongSparseArray < TLRPC . WebPage > var = new LongSparseArray ( 1 )
MessagesStorage . getInstance ( var ) . putWebPages ( var )
NotificationCenter . getInstance ( var ) . setAllowedNotificationsDutingAnimation ( new int )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . messagePlayingProgressDidChanged )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . messagePlayingDidReset )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . messagePlayingPlayStateChanged )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . messagePlayingDidStarted )
ConnectionsManager . getInstance ( var ) . cancelRequest ( var , true )
ConnectionsManager . getInstance ( var ) . cancelRequest ( var , true )
MessagesController . getInstance ( var ) . putUsers ( var . users , false )
MessagesController . getInstance ( var ) . putChats ( var . chats , false )
MessagesStorage . getInstance ( var ) . putUsersAndChats ( var . users , var . chats , false , true )
AlertsCreator . processError ( var , var , var , var , true )
MessagesController . getInstance ( var ) . processUpdates ( var , false )
MessagesController . getInstance ( var ) . generateJoinMessage ( var . id , true )
MessagesController . getInstance ( var ) . loadFullChat ( var . id , 0 , true )
MessagesStorage . getInstance ( var ) . updateDialogsWithDeletedMessages ( new ArrayList < Integer > ( ) , null , true , var . id )
var = DownloadController . getInstance ( var ) . generateObserverTag
MessagesController . getInstance ( var ) . openByUserName ( var . channel . username , var , 2 )
DownloadController . getInstance ( var ) . addLoadingFileObserver ( var , null , this )
if ( ! FileLoader . getInstance ( var ) . isLoadingFile ( var ) )
DownloadController . getInstance ( var ) . removeLoadingFileObserver ( this )
FileLoader . getInstance ( var ) . loadFile ( var , true , 1 )
var . setStrokeWidth ( AndroidUtilities . dp ( 2 ) )
var = DownloadController . getInstance ( var ) . generateObserverTag
var . setColors ( getTextColor & 0x3fffffff , getTextColor & 0x3fffffff , getTextColor , getTextColor , getTextColor )
DownloadController . getInstance ( var ) . removeLoadingFileObserver ( this )
DownloadController . getInstance ( var ) . addLoadingFileObserver ( var , null , this )
if ( ! FileLoader . getInstance ( var ) . isLoadingFile ( var ) )
FileLoader . getInstance ( var ) . loadFile ( var , true , 1 )
if ( var = ( var instanceof TLRPC . TL_photo ) )
MessagesController . getInstance ( var ) . openByUserName ( var . channel . username , var , 2 )
TLRPC . Chat var = MessagesController . getInstance ( var ) . getChat ( var . var . id )
if ( ! var )
NotificationCenter . getGlobalInstance ( var ) . addObserver ( this , NotificationCenter . emojiDidLoaded )
NotificationCenter . getGlobalInstance ( var ) . removeObserver ( this , NotificationCenter . emojiDidLoaded )
var . setImageBitmap ( var . getBitmapSafe ( var ) )
var . thumb = var . getBitmapSafe ( var )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . closeChats )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . messagePlayingDidReset )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . closeChats )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . messagePlayingDidReset )
if ( var . indexOfKey ( var . id ) >= 0 )
var . add ( var . valueAt ( var ) . messageObject )
var . to_id . user_id = var . from_id = UserConfig . getInstance ( currentAccount ) . getClientUserId
var . messageObject = new MessageObject ( currentAccount , var , false )
( ( AudioCell ) var . itemView ) . setAudio ( var . get ( var ) , var != var . size ( ) - 1 , var . indexOfKey ( var . id ) . id >= 0 )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . updateInterfaces )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . blockedUsersDidLoaded )
MessagesController . getInstance ( currentAccount ) . getBlockedUsers ( false )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . updateInterfaces )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . blockedUsersDidLoaded )
if ( var >= MessagesController . getInstance ( currentAccount ) . blockedUsers . size ( ) )
var . putInt ( "" , MessagesController . getInstance ( currentAccount ) . blockedUsers . get ( var ) )
if ( var >= MessagesController . getInstance ( currentAccount ) . blockedUsers . size ( ) || getParentActivity == null )
var = MessagesController . getInstance ( currentAccount ) . blockedUsers . get ( var )
MessagesController . getInstance ( currentAccount ) . unblockUser ( var )
if ( MessagesController . getInstance ( currentAccount ) . loadingBlockedUsers )
MessagesController . getInstance ( currentAccount ) . blockUser ( var . id )
if ( MessagesController . getInstance ( currentAccount ) . blockedUsers . isEmpty ( ) )
return MessagesController . getInstance ( currentAccount ) . blockedUsers . size ( ) + 1
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( MessagesController . getInstance ( currentAccount ) . blockedUsers . get ( var ) )
if ( var == MessagesController . getInstance ( currentAccount ) . blockedUsers . size ( ) )
var = MessagesStorage . getInstance ( currentAccount ) . getDatabaseSize var
var = MessagesStorage . getInstance ( currentAccount ) . getDatabaseSize var
var = getDirectorySize ( FileLoader . checkDirectory ( FileLoader . MEDIA_DIR_CACHE ) . MEDIA_DIR_CACHE , 0 )
var = getDirectorySize ( FileLoader . checkDirectory ( FileLoader . MEDIA_DIR_IMAGE ) . MEDIA_DIR_IMAGE , 0 )
var = getDirectorySize ( FileLoader . checkDirectory ( FileLoader . MEDIA_DIR_VIDEO ) . MEDIA_DIR_VIDEO , 0 )
var = getDirectorySize ( FileLoader . checkDirectory ( FileLoader . MEDIA_DIR_DOCUMENT ) . MEDIA_DIR_DOCUMENT , 2 )
var = getDirectorySize ( FileLoader . checkDirectory ( FileLoader . MEDIA_DIR_DOCUMENT ) . MEDIA_DIR_DOCUMENT , 1 )
var = getDirectorySize ( FileLoader . checkDirectory ( FileLoader . MEDIA_DIR_AUDIO ) . MEDIA_DIR_AUDIO , 0 )
var = Utilities . getDirSize ( var . getAbsolutePath ( var ) , var )
var = Utilities . getDirSize ( var . getAbsolutePath ( var ) , var )
File var = FileLoader . checkDirectory ( var )
Utilities . clearDir ( var . getAbsolutePath ( var ) , var , Long . MAX_VALUE )
if ( var == 1 var )
Utilities . clearDir ( var . getAbsolutePath ( var ) , var , Long . MAX_VALUE )
var = getDirectorySize ( FileLoader . checkDirectory ( FileLoader . MEDIA_DIR_CACHE ) . MEDIA_DIR_CACHE , var )
var = getDirectorySize ( FileLoader . checkDirectory ( FileLoader . MEDIA_DIR_AUDIO ) . MEDIA_DIR_AUDIO , var )
var = getDirectorySize ( FileLoader . checkDirectory ( FileLoader . MEDIA_DIR_DOCUMENT ) . MEDIA_DIR_DOCUMENT , var )
var = getDirectorySize ( FileLoader . checkDirectory ( FileLoader . MEDIA_DIR_DOCUMENT ) . MEDIA_DIR_DOCUMENT , var )
var = getDirectorySize ( FileLoader . checkDirectory ( FileLoader . MEDIA_DIR_IMAGE ) . MEDIA_DIR_IMAGE , var )
var = getDirectorySize ( FileLoader . checkDirectory ( FileLoader . MEDIA_DIR_VIDEO ) . MEDIA_DIR_VIDEO , var )
SharedPreferences . Editor var = MessagesController . getGlobalMainSettings ( var ) . edit var
PendingIntent var = PendingIntent . getService ( ApplicationLoader . applicationContext , 1 , new Intent ( ApplicationLoader . applicationContext , ClearCacheService . class ) . applicationContext , ClearCacheService . class , 0 )
DataQuery . getInstance ( currentAccount ) . clearBotKeyboard ( var , null )
var = MessagesStorage . getInstance ( currentAccount ) . getDatabaseSize var
var = MessagesStorage . getInstance ( currentAccount ) . getDatabaseSize var
CheckBoxCell var = new CheckBoxCell ( getParentActivity var , 1 )
SharedPreferences var = MessagesController . getGlobalMainSettings ( var )
var . user = MessagesController . getInstance ( currentAccount ) . getUser ( var )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . didReceivedNewMessages )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . messagesDeleted )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . didReceivedNewMessages )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . messagesDeleted )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . closeChats )
final CallLogRow var = var . get ( var . size ( ) - 1 )
ConnectionsManager . getInstance ( currentAccount ) . bindRequestToGuid ( var , classGuid )
MessagesController . getInstance ( currentAccount ) . deleteMessages ( var , null , null , 0 , false )
var = AlertsCreator . processError ( currentAccount , var , CancelAccountDeletionActivity . this , var )
AlertsCreator . processError ( currentAccount , var , CancelAccountDeletionActivity . this , var )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . didReceiveSmsCode )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . didReceiveCall )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . didReceiveCall )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . didReceiveSmsCode )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . didReceiveSmsCode )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . didReceiveCall )
NotificationCenter . getGlobalInstance ( ) . addObserver ( LoginActivitySmsView . this , NotificationCenter . didReceiveSmsCode )
NotificationCenter . getGlobalInstance ( ) . addObserver ( LoginActivitySmsView . this , NotificationCenter . didReceiveCall )
AlertsCreator . processError ( currentAccount , var , CancelAccountDeletionActivity . this , var )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . didReceiveSmsCode )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . didReceiveCall )
final String var = MessagesController . getInstance ( var ) . linkPrefix + ""
var = DownloadController . getInstance ( var ) . generateObserverTag
var . setProgressRect ( var = var + AndroidUtilities . dp ( 4 ) , var = AndroidUtilities . dp ( 6 ) , var + AndroidUtilities . dp ( 48 ) , AndroidUtilities . dp ( 50 ) )
DownloadController . getInstance ( var ) . removeLoadingFileObserver ( this )
FileLoader . getInstance ( var ) . loadFile ( var . getDocument ( ) , true , 0 )
FileLoader . getInstance ( var ) . cancelLoadFile ( var . getDocument ( ) )
DownloadController . getInstance ( var ) . addLoadingFileObserver ( var , this )
FileLog . var ( var )
if ( var == UserConfig . getInstance ( var ) . getClientUserId )
var . setVisible ( ! PhotoViewer . isShowingImage ( var ) , false )
var = DownloadController . getInstance ( var ) . generateObserverTag var
if ( ! ( var instanceof Spannable ) || var == null )
Spannable var = ( Spannable ) var
CharacterStyle var var = var . getSpans ( var , var , ClickableSpan . class )
if ( var == var && var == - 1 && SharedConfig . autoplayGifs && ( var . getAnimation ( var ) == null || ! TextUtils . isEmpty ( var . embed_url ) ) )
if ( var == 2 || var != 0 || var != 0 || var )
if ( SharedConfig . autoplayGifs var )
if ( var . var == 8 && var == - 1 && SharedConfig . autoplayGifs && var . getAnimation ( var ) == null )
updateRadialProgressBackground var
updateRadialProgressBackground var
didPressedMiniButton ( true )
for ( int var = 0 ; var < var . posArray . size ( var ) ; var ++ )
var = var . getDuration ( var )
if ( SharedConfig . autoplayGifs var )
if ( var == null || ! var . needDrawBluredPreview ( var ) )
var = AndroidUtilities . formapMapUrl ( var , var , var , int ( var / AndroidUtilities . density ) / AndroidUtilities . density , int ( var / AndroidUtilities . density ) / AndroidUtilities . density , false , 15 )
var = AndroidUtilities . formapMapUrl ( var , var , var , 72 , 72 , true , 15 )
return var . exists ( var )
DownloadController . getInstance ( var ) . removeLoadingFileObserver ( this )
if ( var . onAttachedToWindow ( var ) var )
didPressedMiniButton ( false )
didPressedMiniButton ( false )
if ( var != 0 || var != 0 || var != - 1 )
updateRadialProgressBackground var
if ( ! var var )
var . setShouldGenerateQualityThumb ( true )
var . setNeedsQualityThumb ( true )
if ( ! var . needDrawBluredPreview ( var ) )
var = var . mime_type != null && var . mime_type . toLowerCase ( var ) . startsWith ( "" ) || var . thumb != null && ! ( var . thumb instanceof TLRPC . TL_photoSizeEmpty ) && ! ( var . thumb . location instanceof TLRPC . TL_fileLocationUnavailable )
return Math . abs ( ConnectionsManager . getInstance ( var ) . getCurrentTime var - var . messageOwner . date ) > var . messageOwner . media . period - 5
return Math . abs ( ConnectionsManager . getInstance ( var ) . getCurrentTime var - var . messageOwner . date ) > var . messageOwner . media . period
boolean var = var != null && var . getId ( var ) == var . getId ( var ) && var == MessageObject . MESSAGE_SEND_STATE_EDITING && var . isSent ( var ) || var == var && ( isUserDataChanged var || var )
if ( ( var . equals ( "" ) || var . equals ( "" ) || "" . equals ( var ) ) && var . messageOwner . media . webpage . cached_page instanceof TLRPC . TL_pageFull && ( var . messageOwner . media . webpage . photo instanceof TLRPC . TL_photo || MessageObject . isVideoDocument ( var . messageOwner . media . webpage . document ) ) )
TLRPC . TL_messageMediaInvoice var = ( TLRPC . TL_messageMediaInvoice ) var . messageOwner . media
int var = ( int ) Math . ceil ( Theme . chat_replyNamePaint . measureText ( var ) + 1 )
var = var = var . getWidth ( var )
if ( ! SharedConfig . autoplayGifs )
var = DownloadController . getInstance ( var ) . canDownloadMedia ( var )
var = DownloadController . getInstance ( var ) . canDownloadMedia ( var )
if ( ! var . isSending ( var ) && ! var . isEditing ( var ) && ( var . mediaExists || FileLoader . getInstance ( var ) . isLoadingFile ( var ) || var ) var )
if ( var || var || DownloadController . getInstance ( var ) . canDownloadMedia ( var ) || FileLoader . getInstance ( var ) . isLoadingFile ( var ) var )
if ( var + var > var var )
var = ( int ) var . getLineLeft ( 0 )
var = PhoneFormat . getInstance ( var ) . format ( ( String ) var )
var = new StaticLayout ( TextUtils . ellipsize ( var , Theme . chat_contactNamePaint , var , TextUtils . TruncateAt . END ) , Theme . chat_contactNamePaint , var , TextUtils . TruncateAt . END , Theme . chat_contactNamePaint , var + AndroidUtilities . dp ( 4 ) , Layout . Alignment . ALIGN_NORMAL , 1.0f , 0.0f , false )
var = new StaticLayout ( var , Theme . chat_contactPhonePaint , var + AndroidUtilities . dp ( 2 ) , Layout . Alignment . ALIGN_NORMAL , 1.0f , AndroidUtilities . dp ( 1 ) , false )
int var = getMaxNameWidth var - AndroidUtilities . dp ( 80 )
int var = var - AndroidUtilities . dp ( 40 + 18 + 44 + 8 ) - ( int ) Math . ceil ( var . getLineWidth ( var . getLineCount ( var ) - 1 ) . getLineCount ( var ) - 1 )
if ( var . gifState != 2 && ! SharedConfig . autoplayGifs && ( var . var == 8 || var . var == 5 ) )
var . setForcePreview ( var . needDrawBluredPreview ( var ) )
TLRPC . GeoPoint var = var . messageOwner . media . geo
var = WebFile . createWithGeoPoint ( var , var , var . access_hash , int ( var / AndroidUtilities . density ) / AndroidUtilities . density , int ( var / AndroidUtilities . density ) / AndroidUtilities . density , 15 , Math . min ( 2 , ( int ) Math . ceil ( AndroidUtilities . density ) . density ) , ( int ) Math . ceil ( AndroidUtilities . density ) . density )
int var = var - AndroidUtilities . dp ( 34 )
var = StaticLayoutEx . createStaticLayout ( var . messageOwner . media . var , Theme . chat_locationTitlePaint , var , Layout . Alignment . ALIGN_NORMAL , 1.0f , 0.0f , false , TextUtils . TruncateAt . END , var , 1 )
var = StaticLayoutEx . createStaticLayout ( var . messageOwner . media . address , Theme . chat_locationAddressPaint , var , Layout . Alignment . ALIGN_NORMAL , 1.0f , 0.0f , false , TextUtils . TruncateAt . END , var , 1 )
var = var - AndroidUtilities . dp ( 86 )
var += AndroidUtilities . dp ( 50 )
var = WebFile . createWithGeoPoint ( var , 200 , 100 , 15 , Math . min ( 2 , ( int ) Math . ceil ( AndroidUtilities . density ) . density ) , ( int ) Math . ceil ( AndroidUtilities . density ) . density )
var = WebFile . createWithGeoPoint ( var , int ( var / AndroidUtilities . density ) / AndroidUtilities . density , int ( var / AndroidUtilities . density ) / AndroidUtilities . density , 15 , Math . min ( 2 , ( int ) Math . ceil ( AndroidUtilities . density ) . density ) , ( int ) Math . ceil ( AndroidUtilities . density ) . density )
if ( ! var . needDrawBluredPreview ( var ) )
if ( ! var . needDrawBluredPreview ( var ) )
if ( ! var . needDrawBluredPreview ( var ) )
if ( var . needDrawBluredPreview ( var ) )
var = var . caption
var = new StaticLayout ( var . caption , Theme . chat_msgTextPaint , var , Layout . Alignment . ALIGN_NORMAL , 1.0f , 0.0f , false )
var = var + AndroidUtilities . dp ( 9 )
if ( var || DownloadController . getInstance ( var ) . canDownloadMedia ( var ) || FileLoader . getInstance ( var ) . isLoadingFile ( var ) var )
var . setImageBitmap ( ( Drawable ) null )
var = DownloadController . getInstance ( var ) . canDownloadMedia ( var )
var = DownloadController . getInstance ( var ) . canDownloadMedia ( var )
if ( ! var . isSending ( var ) && ! var . isEditing ( var ) && ( var != 0 || FileLoader . getInstance ( var ) . isLoadingFile ( var ) || var ) var )
if ( ( var . flags & MessageObject . POSITION_FLAG_LEFT ) == 0 )
if ( ( var . flags & MessageObject . POSITION_FLAG_RIGHT ) == 0 )
var = StaticLayout . Builder . obtain ( var . caption , 0 , var . caption . length ( var ) , Theme . chat_msgTextPaint , var ) . setBreakStrategy ( StaticLayout . BREAK_STRATEGY_HIGH_QUALITY ) . setHyphenationFrequency ( StaticLayout . HYPHENATION_FREQUENCY_NONE ) . setAlignment ( Layout . Alignment . ALIGN_NORMAL ) . build var
var = new StaticLayout ( var , Theme . chat_msgTextPaint , var , Layout . Alignment . ALIGN_NORMAL , 1.0f , 0.0f , false )
int var = var = ( int ) Math . ceil ( Theme . chat_replyNamePaint . measureText ( var . site_name ) . site_name + 1 )
var += Math . min ( AndroidUtilities . displaySize . x , AndroidUtilities . displaySize . y ) - AndroidUtilities . dp ( 5 )
updateButtonState ( var && ! var . cancelEditing , true )
var += var - AndroidUtilities . dp ( 10 )
var = var . getImageY ( var ) + ( var . getImageHeight ( var ) - AndroidUtilities . dp ( 48 ) ) / 2
var . setVisible ( ! PhotoViewer . isShowingImage ( var ) && ! SecretMediaViewer . getInstance ( var ) . isShowingImage ( var ) , false )
setDrawableBounds ( var , var + var + var - AndroidUtilities . dp ( 15 ) , var + AndroidUtilities . dp ( 11.5f ) , AndroidUtilities . dp ( 9 ) , AndroidUtilities . dp ( 13 ) )
if ( var == - 1 && var . needDrawBluredPreview ( var ) && ! MediaController . getInstance ( var ) . isPlayingMessage ( var ) && var . getVisible ( var ) )
if ( var . getVisible ( var ) && ! var && ! var . needDrawBluredPreview ( var ) )
var = var - var - AndroidUtilities . dp ( 32 )
if ( ! var . needDrawBluredPreview ( var ) )
if ( ! var && var != null && ( var == 1 || var == 0 || var == 3 || var . needDrawBluredPreview ( var ) ) )
if ( var . isOutOwner ( var ) var )
var . setColor ( Theme . getColor ( Theme . key_chat_outPreviewInstantText ) . key_chat_outPreviewInstantText )
Theme . chat_instantViewPaint . setColor ( Theme . getColor ( Theme . key_chat_outPreviewInstantText ) . key_chat_outPreviewInstantText )
if ( var && var . var == 5 )
if ( var . isOut ( var ) && ( var . isSending ( var ) || var . isEditing ( var ) ) || var . isSendError ( var ) && var var )
DownloadController . getInstance ( var ) . addLoadingFileObserver ( var . messageOwner . attachPath , var , this )
DownloadController . getInstance ( var ) . addLoadingFileObserver ( var , var , this )
DownloadController . getInstance ( var ) . addLoadingFileObserver ( var , var , this )
DownloadController . getInstance ( var ) . removeLoadingFileObserver ( this )
if ( var . isOut ( var ) && ( var . isSending ( var ) || var . isEditing ( var ) ) var )
DownloadController . getInstance ( var ) . addLoadingFileObserver ( var . messageOwner . attachPath , var , this )
DownloadController . getInstance ( var ) . addLoadingFileObserver ( var , var , this )
var = DownloadController . getInstance ( var ) . canDownloadMedia ( var )
var = DownloadController . getInstance ( var ) . canDownloadMedia ( var )
var = DownloadController . getInstance ( var ) . canDownloadMedia ( var )
if ( var . needDrawBluredPreview ( var ) var )
if ( var . isOut ( var ) && ( var . isSending ( var ) || var . isEditing ( var ) ) var )
if ( var . isOut ( var ) && ( var . isSending ( var ) || var . isEditing ( var ) ) || var . isSendError ( var ) var )
updateButtonState ( var == var || var == var , false )
updateButtonState ( true , false )
updateButtonState ( true , false )
updateButtonState ( true , false )
if ( var != null && ( var . var == 0 || var . var == 1 || var . var == 5 || var . var == 8 ) && var && ! var && ! var . mediaExists && ! var . attachPathExists )
var . setAlphaForMiniPrevious ( true )
if ( var != 1 )
updateButtonState ( false , false )
updateButtonState ( false , false )
if ( var . messageOwner . fwd_from != null && ! var . isOutOwner ( var ) && var . messageOwner . fwd_from . saved_from_peer != null && var . getDialogId ( var ) == UserConfig . getInstance ( var ) . getClientUserId var )
int var = UserConfig . getInstance ( var ) . getClientUserId var
var = var . getUser ( var . from_id )
var = var . getUser ( var . saved_from_peer . user_id )
var = var . getUser ( var . from_id )
var = var . getChat ( var . saved_from_peer . channel_id )
var = var . getUser ( var . from_id )
var = var . getChat ( var . saved_from_peer . chat_id )
var = var . getUser ( var . from_id )
var = var . getUser ( var . messageOwner . from_id )
var = var . getChat ( - var . messageOwner . from_id )
var = var . getChat ( var . messageOwner . to_id . channel_id )
var = new SpannableStringBuilder ( String . format ( "" , var , var ) , var , var )
int var = ( int ) Math . ceil ( Theme . chat_forwardNamePaint . measureText ( var + "" ) + "" )
var . setSpan ( new TypefaceSpan ( AndroidUtilities . getTypeface ( "" ) ) . getTypeface ( "" ) , var , var + var . length ( var ) , Spannable . SPAN_EXCLUSIVE_EXCLUSIVE )
var . setColors ( Theme . getColor ( Theme . key_chat_outAudioSeekbar ) . key_chat_outAudioSeekbar , Theme . getColor ( Theme . key_chat_outAudioCacheSeekbar ) . key_chat_outAudioCacheSeekbar , Theme . getColor ( Theme . key_chat_outAudioSeekbarFill ) . key_chat_outAudioSeekbarFill , Theme . getColor ( Theme . key_chat_outAudioSeekbarFill ) . key_chat_outAudioSeekbarFill , Theme . getColor ( Theme . key_chat_outAudioSeekbarSelected ) . key_chat_outAudioSeekbarSelected )
var . setColors ( Theme . getColor ( Theme . key_chat_inAudioSeekbar ) . key_chat_inAudioSeekbar , Theme . getColor ( Theme . key_chat_inAudioCacheSeekbar ) . key_chat_inAudioCacheSeekbar , Theme . getColor ( Theme . key_chat_inAudioSeekbarFill ) . key_chat_inAudioSeekbarFill , Theme . getColor ( Theme . key_chat_inAudioSeekbarFill ) . key_chat_inAudioSeekbarFill , Theme . getColor ( Theme . key_chat_inAudioSeekbarSelected ) . key_chat_inAudioSeekbarSelected )
var . setColors ( Theme . getColor ( Theme . key_chat_outAudioSeekbar ) . key_chat_outAudioSeekbar , Theme . getColor ( Theme . key_chat_outAudioCacheSeekbar ) . key_chat_outAudioCacheSeekbar , Theme . getColor ( Theme . key_chat_outAudioSeekbarFill ) . key_chat_outAudioSeekbarFill , Theme . getColor ( Theme . key_chat_outAudioSeekbarFill ) . key_chat_outAudioSeekbarFill , Theme . getColor ( Theme . key_chat_outAudioSeekbarSelected ) . key_chat_outAudioSeekbarSelected )
var . setColors ( Theme . getColor ( Theme . key_chat_inAudioSeekbar ) . key_chat_inAudioSeekbar , Theme . getColor ( Theme . key_chat_inAudioCacheSeekbar ) . key_chat_inAudioCacheSeekbar , Theme . getColor ( Theme . key_chat_inAudioSeekbarFill ) . key_chat_inAudioSeekbarFill , Theme . getColor ( Theme . key_chat_inAudioSeekbarFill ) . key_chat_inAudioSeekbarFill , Theme . getColor ( Theme . key_chat_inAudioSeekbarSelected ) . key_chat_inAudioSeekbarSelected )
var = var - var - AndroidUtilities . dp ( 32 )
var = var . getImageY ( var ) + var . getImageHeight ( var ) + AndroidUtilities . dp ( 6 )
if ( ( ! var || var ) && var && var == null || var == null )
public CheckBoxCell ( Context var , int var )
var = new CheckBoxSquare ( var , var == 1 )
var = DownloadController . getInstance ( var ) . generateObserverTag
WebFile var = null
if ( var . content instanceof TLRPC . TL_webDocument )
var = ( TLRPC . TL_webDocument ) var . content
if ( var . thumb instanceof TLRPC . TL_webDocument )
var = ( TLRPC . TL_webDocument ) var . content
if ( var == null && ( var . thumb instanceof TLRPC . TL_webDocument ) )
var = ( TLRPC . TL_webDocument ) var . thumb
var = WebFile . createWithGeoPoint ( var . send_message . geo , 72 , 72 , 15 , Math . min ( 2 , ( int ) Math . ceil ( AndroidUtilities . density ) . density ) , ( int ) Math . ceil ( AndroidUtilities . density ) . density )
var = result [ 0 ]
var = result [ 1 ]
if ( var != null || var != null || var != null || var != null )
var . to_id . user_id = var . from_id = UserConfig . getInstance ( var ) . getClientUserId
var . duration = MessageObject . getInlineResultDuration ( var )
var = new MessageObject ( var , var , false )
DownloadController . getInstance ( var ) . removeLoadingFileObserver ( this )
if ( var != null && var . content != null && ! TextUtils . isEmpty ( var . content . url ) )
if ( var != null . content instanceof TLRPC . TL_webDocument )
FileLoader . getInstance ( var ) . loadFile ( var , true , 0 )
if ( var != null . content instanceof TLRPC . TL_webDocument )
FileLoader . getInstance ( var ) . cancelLoadFile ( WebFile . createWithWebDocument ( var . content ) . content )
var . setVisible ( ! PhotoViewer . isShowingImage ( var ) , false )
if ( var != null . content instanceof TLRPC . TL_webDocument )
if ( var . content instanceof TLRPC . TL_webDocument )
var = Utilities . MD5 ( var . content . url ) + "" + ImageLoader . getHttpUrlExtension ( var . content . url , "" )
var = new File ( FileLoader . getDirectory ( FileLoader . MEDIA_DIR_CACHE ) . MEDIA_DIR_CACHE , var )
if ( var . thumb instanceof TLRPC . TL_webDocument )
var = Utilities . MD5 ( var . thumb . url ) + "" + ImageLoader . getHttpUrlExtension ( var . thumb . url , "" )
var = new File ( FileLoader . getDirectory ( FileLoader . MEDIA_DIR_CACHE ) . MEDIA_DIR_CACHE , var )
DownloadController . getInstance ( var ) . addLoadingFileObserver ( var , this )
var = FileLoader . getInstance ( var ) . isLoadingFile ( var )
DownloadController . getInstance ( var ) . removeLoadingFileObserver ( this )
var = MessagesController . getInstance ( var ) . printingStrings . get ( var )
var = DataQuery . getInstance ( var ) . getDraft ( var )
if ( var != null = "" )
if ( var . admin_id == UserConfig . getInstance ( var ) . getClientUserId )
var = MessagesController . getInstance ( var ) . getUser ( var . messageOwner . from_id )
var = MessagesController . getInstance ( var ) . getChat ( var . messageOwner . to_id . channel_id )
if ( var . id / 1000 != 777 && var . id / 1000 != 333 && ContactsController . getInstance ( var ) . contactsDict . get ( var . id ) == null )
if ( ContactsController . getInstance ( var ) . contactsDict . size ( ) == 0 && ( ! ContactsController . getInstance ( var ) . contactsLoaded || ContactsController . getInstance ( var ) . isLoadingContacts ) )
return MessagesController . getInstance ( var ) . dialogsGroupsOnly
return MessagesController . getInstance ( var ) . dialogsServerOnly
TLRPC . DraftMessage var = DataQuery . getInstance ( var ) . getDraft ( var )
MessageObject var = MessagesController . getInstance ( var ) . dialogMessage . get ( var . id )
if ( var != var . id || var != null && var . getId ( ) != var . top_message || var != null && var . messageOwner . edit_date != var || var != var . unread_count || var != var . unread_mentions_count || var != var . unread_mark || var != var || var == null && var != null || var != var || var != var . pinned )
TLRPC . TL_dialog var = MessagesController . getInstance ( var ) . dialogs_dict . get ( var )
var = MessagesController . getInstance ( var ) . dialogMessage . get ( var . id )
CharSequence var = MessagesController . getInstance ( var ) . printingStrings . get ( var )
TLRPC . TL_dialog var = MessagesController . getInstance ( var ) . dialogs_dict . get ( var )
if ( var != null && ( var != var . unread_count || var != var . unread_mark || var != var . unread_mentions_count ) )
var = var && MessagesController . getInstance ( var ) . isDialogMuted ( var )
var = MessagesController . getInstance ( var ) . getChat ( var )
var = MessagesController . getInstance ( var ) . getChat ( - var )
TLRPC . Chat var = MessagesController . getInstance ( var ) . getChat ( var . migrated_to . channel_id )
var = MessagesController . getInstance ( var ) . getUser ( var )
var = MessagesController . getInstance ( var ) . getEncryptedChat ( var )
var = MessagesController . getInstance ( var ) . getUser ( var . user_id )
TLRPC . Chat var = MessagesController . getInstance ( var ) . getChat ( var . chat_id )
TLRPC . User var = MessagesController . getInstance ( var ) . getUser ( var . user_id )
var = MessagesController . getInstance ( var ) . linkPrefix + "" + var . url
addView ( var , LayoutHelper . createLinear ( LayoutHelper . WRAP_CONTENT , LayoutHelper . WRAP_CONTENT , 0 , 20 , 0 , 0 ) . WRAP_CONTENT , LayoutHelper . WRAP_CONTENT , 0 , 20 , 0 , 0 )
addView ( var , LayoutHelper . createLinear ( LayoutHelper . WRAP_CONTENT , LayoutHelper . WRAP_CONTENT , 0 , 0 , 0 , 20 ) . WRAP_CONTENT , LayoutHelper . WRAP_CONTENT , 0 , 0 , 0 , 20 )
ArrayList < TLRPC . RecentMeUrl > var = MessagesController . getInstance ( var ) . hintDialogs
var . setCompoundDrawablePadding ( AndroidUtilities . dp ( 29 ) )
addView ( var , LayoutHelper . createFrame ( LayoutHelper . MATCH_PARENT , LayoutHelper . MATCH_PARENT , Gravity . LEFT | Gravity . TOP , 19 , 0 , 16 , 0 ) . MATCH_PARENT , LayoutHelper . MATCH_PARENT , Gravity . LEFT | Gravity . TOP , 19 , 0 , 16 , 0 )
Drawable var = getResources . getDrawable ( var ) . mutate
var . onClick ( DrawerProfileCell . this )
if ( var . cover != null && var . cover . thumb != null && var . cover . thumb . location != null var . covers . isEmpty ( ) && var . covers . get ( 0 ) . thumb != null )
if ( ! var . covers . isEmpty ( ) && var . covers . get ( 0 ) . thumb != null )
if ( var = DataQuery . getInstance ( var ) . isStickerPackInstalled ( var . var . id ) )
if ( var = DataQuery . getInstance ( var ) . isStickerPackInstalled ( var . var . id ) )
if ( var = DataQuery . getInstance ( var ) . isStickerPackInstalled ( var . var . id ) )
var . setTextColor ( Theme . getColor ( Theme . key_graySectionText ) . key_graySectionText )
if ( var . id == UserConfig . getInstance ( var ) . getClientUserId || var . status != null && var . status . expires > ConnectionsManager . getInstance ( var ) . getCurrentTime || MessagesController . getInstance ( var ) . onlinePrivacy . containsKey ( var . id ) )
var . setText ( LocaleController . formatUserStatus ( var , var ) , var )
TLRPC . TL_dialog var = MessagesController . getInstance ( var ) . dialogs_dict . get ( var )
TLRPC . User var = MessagesController . getInstance ( var ) . getUser ( var )
TLRPC . Chat var = MessagesController . getInstance ( var ) . getChat ( - var )
TLRPC . User var = MessagesController . getInstance ( var ) . getUser ( var )
TLRPC . Chat var = MessagesController . getInstance ( var ) . getChat ( - var )
if ( var . id == UserConfig . getInstance ( var ) . getClientUserId || var . status != null && var . status . expires > ConnectionsManager . getInstance ( var ) . getCurrentTime || MessagesController . getInstance ( var ) . onlinePrivacy . containsKey ( var . id ) )
var . setText ( LocaleController . formatUserStatus ( var , var ) , var )
var . setTextColor ( 0xffbbbbbb )
boolean var = var && PhotoViewer . isShowingImage ( var . path )
if ( var != null != null )
TLRPC . TL_dialog var = MessagesController . getInstance ( var ) . dialogs_dict . get ( var )
var = LocaleController . formatUserStatus ( var , var )
if ( var != null && ( var . id == UserConfig . getInstance ( var ) . getClientUserId || var . status != null && var . status . expires > ConnectionsManager . getInstance ( var ) . getCurrentTime ) )
TLRPC . TL_dialog var = MessagesController . getInstance ( var ) . dialogs_dict . get ( var )
if ( var . getLineLeft ( 0 ) == 0 )
var = var - AndroidUtilities . dp ( 6 ) - Theme . dialogs_verifiedDrawable . getIntrinsicWidth ( )
var . setColorFilter ( new PorterDuffColorFilter ( Theme . getColor ( Theme . key_location_sendLiveLocationIcon ) . key_location_sendLiveLocationIcon , PorterDuff . Mode . MULTIPLY ) . getColor ( Theme . key_location_sendLiveLocationIcon ) . key_location_sendLiveLocationIcon , PorterDuff . Mode . MULTIPLY )
LocationController . SharingLocationInfo var = LocationController . getInstance ( var ) . getSharingLocationInfo ( var )
LocationController . SharingLocationInfo var = LocationController . getInstance ( var ) . getSharingLocationInfo ( var )
LocationController . SharingLocationInfo var = LocationController . getInstance ( var ) . getSharingLocationInfo ( var )
int var = ConnectionsManager . getInstance ( var ) . getCurrentTime
public SessionCell ( Context var , int var )
TLRPC . User var = MessagesController . getInstance ( var ) . getUser ( var )
TLRPC . Chat var = MessagesController . getInstance ( var ) . getChat ( - var )
var = DownloadController . getInstance ( var ) . generateObserverTag var
DownloadController . getInstance ( var ) . removeLoadingFileObserver ( this )
DownloadController . getInstance ( var ) . removeLoadingFileObserver ( this )
DownloadController . getInstance ( var ) . addLoadingFileObserver ( var , this )
DownloadController . getInstance ( var ) . removeLoadingFileObserver ( this )
var . imageView . getImageReceiver ( ) . setVisible ( ! PhotoViewer . isShowingImage ( var ) , false )
TLRPC . User var = MessagesController . getInstance ( var ) . getUser ( var )
TLRPC . Chat var = MessagesController . getInstance ( var ) . getChat ( - var )
TLRPC . User var = MessagesController . getInstance ( var ) . getUser ( var )
TLRPC . Chat var = MessagesController . getInstance ( var ) . getChat ( - var )
TLRPC . User var = MessagesController . getInstance ( var ) . getUser ( var )
TLRPC . Chat var = MessagesController . getInstance ( var ) . getChat ( - var )
int var = ConnectionsManager . getInstance ( var ) . getCurrentTime
var . setText ( Emoji . replaceEmoji ( DataQuery . getInstance ( var ) . getEmojiForSticker ( var . id ) . id , var . getPaint ( ) . getFontMetricsInt , AndroidUtilities . dp ( 16 ) , false ) . getInstance ( var ) . getEmojiForSticker ( var . id ) . id , var . getPaint ( ) . getFontMetricsInt , AndroidUtilities . dp ( 16 ) , false )
public ThemeCell ( Context var , boolean var )
if ( var == null && var == null && var == null )
if ( var instanceof TLRPC . User instanceof TLRPC . Chat )
if ( var . id == UserConfig . getInstance ( var ) . getClientUserId || var . status != null && var . status . expires > ConnectionsManager . getInstance ( var ) . getCurrentTime || MessagesController . getInstance ( var ) . onlinePrivacy . containsKey ( var . id ) )
var . setText ( LocaleController . formatUserStatus ( var , var ) , var )
var . setText ( String . format ( "" , ( 70 - var . length ( ) ) ) , ( 70 - var . length ( ) ) )
var . setText ( String . format ( "" , 70 ) , 70 )
TLRPC . TL_userFull var = MessagesController . getInstance ( currentAccount ) . getUserFull ( UserConfig . getInstance ( currentAccount ) . getClientUserId )
SharedPreferences var = MessagesController . getGlobalMainSettings ( )
final TLRPC . TL_userFull var = MessagesController . getInstance ( currentAccount ) . getUserFull ( UserConfig . getInstance ( currentAccount ) . getClientUserId )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . userInfoDidLoaded , var . id , var )
AlertsCreator . processError ( currentAccount , var , ChangeBioActivity . this , var )
ConnectionsManager . getInstance ( currentAccount ) . bindRequestToGuid ( var , classGuid )
ConnectionsManager . getInstance ( currentAccount ) . cancelRequest ( var , true )
var = new ImageUpdater
if ( var . uploadingImage != null )
MessagesController . getInstance ( currentAccount ) . changeChatAvatar ( var , var )
MessagesController . getInstance ( currentAccount ) . changeChatAvatar ( var , null )
var = MessagesController . getInstance ( currentAccount ) . getChat ( var )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . closeChats )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . closeChats , - ( long ) var )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . closeChats )
MessagesController . getInstance ( currentAccount ) . deleteUserFromChat ( var , MessagesController . getInstance ( currentAccount ) . getUser ( UserConfig . getInstance ( currentAccount ) . getClientUserId ) . getInstance ( currentAccount ) . getClientUserId , null , true )
SharedPreferences var = MessagesController . getGlobalMainSettings ( )
MessagesController . getInstance ( currentAccount ) . changeChatTitle ( var , var . getText ( ) . toString )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( UserConfig . getInstance ( currentAccount ) . getClientUserId )
var = UserConfig . getInstance ( currentAccount ) . getCurrentUser
SharedPreferences var = MessagesController . getGlobalMainSettings ( )
TLRPC . User var = UserConfig . getInstance ( currentAccount ) . getCurrentUser
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( UserConfig . getInstance ( currentAccount ) . getClientUserId )
UserConfig . getInstance ( currentAccount ) . saveConfig ( true )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . mainUserInfoChanged )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . updateInterfaces , MessagesController . UPDATE_MASK_NAME )
SharedPreferences var = MessagesController . getGlobalMainSettings ( )
if ( var == 1 )
AlertsCreator . processError ( currentAccount , var , ChangePhoneActivity . this , var , var . getString ( "" ) )
AlertsCreator . processError ( currentAccount , var , ChangePhoneActivity . this , var )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . didReceiveSmsCode )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . didReceiveCall )
var = AndroidUtilities . replaceTags ( LocaleController . formatString ( "" , R . string . SentSmsCode , LocaleController . addNbsp ( var ) ) , R . string . SentSmsCode , LocaleController . addNbsp ( var ) )
var = AndroidUtilities . replaceTags ( LocaleController . formatString ( "" , R . string . SentCallCode , LocaleController . addNbsp ( var ) ) , R . string . SentCallCode , LocaleController . addNbsp ( var ) )
var = AndroidUtilities . replaceTags ( LocaleController . formatString ( "" , R . string . SentCallOnly , LocaleController . addNbsp ( var ) ) , R . string . SentCallOnly , LocaleController . addNbsp ( var ) )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . didReceiveCall )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . didReceiveSmsCode )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . didReceiveSmsCode )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . didReceiveCall )
UserConfig . getInstance ( currentAccount ) . setCurrentUser ( var )
UserConfig . getInstance ( currentAccount ) . saveConfig ( true )
MessagesStorage . getInstance ( currentAccount ) . putUsersAndChats ( var , null , true , true )
MessagesController . getInstance ( currentAccount ) . putUser ( var , false )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . mainUserInfoChanged )
NotificationCenter . getGlobalInstance ( ) . addObserver ( LoginActivitySmsView . this , NotificationCenter . didReceiveSmsCode )
NotificationCenter . getGlobalInstance ( ) . addObserver ( LoginActivitySmsView . this , NotificationCenter . didReceiveCall )
AlertsCreator . processError ( currentAccount , var , ChangePhoneActivity . this , var )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . didReceiveSmsCode )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . didReceiveCall )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . didReceiveSmsCode )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . didReceiveCall )
TLRPC . User var = UserConfig . getInstance ( currentAccount ) . getCurrentUser
var . setTextColor ( Theme . getColor ( Theme . key_changephoneinfo_changeText ) . key_changephoneinfo_changeText )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( UserConfig . getInstance ( currentAccount ) . getClientUserId )
var = UserConfig . getInstance ( currentAccount ) . getCurrentUser
String var = "" + MessagesController . getInstance ( currentAccount ) . linkPrefix + "" + var . getText ( )
SharedPreferences var = MessagesController . getGlobalMainSettings ( )
ConnectionsManager . getInstance ( currentAccount ) . cancelRequest ( var , true )
String var = UserConfig . getInstance ( currentAccount ) . getCurrentUser . username
TLRPC . User var = UserConfig . getInstance ( currentAccount ) . getCurrentUser
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . updateInterfaces , MessagesController . UPDATE_MASK_NAME )
MessagesController . getInstance ( currentAccount ) . putUsers ( var , false )
MessagesStorage . getInstance ( currentAccount ) . putUsersAndChats ( var , null , false , true )
UserConfig . getInstance ( currentAccount ) . saveConfig ( true )
AlertsCreator . processError ( currentAccount , var , ChangeUsernameActivity . this , var )
ConnectionsManager . getInstance ( currentAccount ) . bindRequestToGuid ( var , classGuid )
ConnectionsManager . getInstance ( currentAccount ) . cancelRequest ( var , true )
var . thumb = var . getBitmapSafe ( var )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . emojiDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . messagePlayingDidStarted )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . messagePlayingPlayStateChanged )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . messagePlayingDidReset )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . messagePlayingProgressDidChanged )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . didSetNewWallpapper )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . emojiDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . messagePlayingDidStarted )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . messagePlayingPlayStateChanged )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . messagePlayingDidReset )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . messagePlayingProgressDidChanged )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . didSetNewWallpapper )
var . var . add ( MessagesController . getInstance ( currentAccount ) . getInputUser ( var . valueAt ( var ) ) . valueAt ( var ) )
MessagesController . getInstance ( currentAccount ) . putUsers ( var . users , false )
MessagesController . getInstance ( currentAccount ) . putChats ( var . chats , false )
if ( var . indexOfKey ( var . id ) >= 0 )
MessageObject var = new MessageObject ( currentAccount , var , var , var , var , var )
var . updateButtonState ( false , false )
var . updateButtonState ( false , false )
if ( var != null && var . isRoundVideo ( ) && var . eventId != 0 && var . getDialogId ( ) == - var . id )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . messageOwner . media . user_id )
if ( var != null && var . id != UserConfig . getInstance ( currentAccount ) . getClientUserId && ContactsController . getInstance ( currentAccount ) . contactsDict . get ( var . id ) == null )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . messageOwner . from_id )
TLRPC . Chat var = MessagesController . getInstance ( currentAccount ) . getChat ( - var . messageOwner . from_id )
if ( var . messageOwner . media != null && var . messageOwner . message != null )
var += var . messageOwner . message
if ( var . getName ( ) . toLowerCase . endsWith ( "" ) )
if ( LocaleController . getInstance ( ) . applyLanguageFile ( var , currentAccount ) )
MessagesController . getInstance ( currentAccount ) . saveGif ( var )
if ( ! DataQuery . getInstance ( currentAccount ) . isStickerPackInstalled ( var . id ) )
if ( ! DataQuery . getInstance ( currentAccount ) . isStickerPackInstalled ( var . short_name ) )
if ( var . getDocumentName ( ) . toLowerCase . endsWith ( "" ) . endsWith ( "" ) . endsWith ( "" ) || var . endsWith ( "" ) || var . endsWith ( "" ) )
MessagesController . getInstance ( currentAccount ) . putUsers ( var . users , false )
ConnectionsManager . getInstance ( currentAccount ) . bindRequestToGuid ( var , classGuid )
NotificationCenter . getInstance ( currentAccount ) . setAllowedNotificationsDutingAnimation ( new int )
NotificationCenter . getInstance ( currentAccount ) . setAnimationInProgress ( true )
if ( MessagesController . getInstance ( currentAccount ) . checkCanOpenChat ( var , ChannelAdminLogActivity . this ) )
if ( var != null && var . id != UserConfig . getInstance ( currentAccount ) . getClientUserId )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( Utilities . parseInt ( ( ( URLSpanUserMention ) var ) . getURL ) ( URLSpanUserMention ) var ) . getURL )
MessagesController . getInstance ( currentAccount ) . openByUserName ( var . substring ( 1 ) , ChannelAdminLogActivity . this , 0 )
if ( var . getDocumentName ( ) . toLowerCase . endsWith ( "" ) )
if ( var < 0 != UserConfig . getInstance ( currentAccount ) . getClientUserId )
if ( MessagesController . getInstance ( currentAccount ) . checkCanOpenChat ( var , ChannelAdminLogActivity . this ) )
if ( var != UserConfig . getInstance ( currentAccount ) . getClientUserId )
MessagesController . getInstance ( currentAccount ) . openByUserName ( var . substring ( 1 ) , ChannelAdminLogActivity . this , 0 )
if ( var instanceof ChatMessageCell && DownloadController . getInstance ( currentAccount ) . canDownloadMedia ( var ) )
var = new ImageUpdater
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . chatDidCreated )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . chatDidFailCreate )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . chatDidCreated )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . chatDidFailCreate )
if ( var . uploadingImage != null )
final int var = MessagesController . getInstance ( currentAccount ) . createChat ( var . getText ( ) . toString , new ArrayList < Integer > ( ) , var . getText ( ) . toString , ChatObject . CHAT_TYPE_CHANNEL , ChannelCreateActivity . this )
ConnectionsManager . getInstance ( currentAccount ) . cancelRequest ( var , true )
MessagesController . getInstance ( currentAccount ) . updateChannelUserName ( var , var )
var . setText ( MessagesController . getInstance ( currentAccount ) . linkPrefix + "" )
var . channel = MessagesController . getInstance ( currentAccount ) . getInputChannel ( var )
MessagesController . getInstance ( currentAccount ) . changeChatAvatar ( var , var )
var . setMessage ( AndroidUtilities . replaceTags ( LocaleController . formatString ( "" , R . string . RevokeLinkAlert , MessagesController . getInstance ( currentAccount ) . linkPrefix + "" + var . username , var . title ) , R . string . RevokeLinkAlert , MessagesController . getInstance ( currentAccount ) . linkPrefix + "" + var . username , var . title ) . formatString ( "" , R . string . RevokeLinkAlert , MessagesController . getInstance ( currentAccount ) . linkPrefix + "" + var . username , var . title ) , R . string . RevokeLinkAlert , MessagesController . getInstance ( currentAccount ) . linkPrefix + "" + var . username , var . title )
var . setMessage ( AndroidUtilities . replaceTags ( LocaleController . formatString ( "" , R . string . RevokeLinkAlertChannel , MessagesController . getInstance ( currentAccount ) . linkPrefix + "" + var . username , var . title ) , R . string . RevokeLinkAlertChannel , MessagesController . getInstance ( currentAccount ) . linkPrefix + "" + var . username , var . title ) . formatString ( "" , R . string . RevokeLinkAlertChannel , MessagesController . getInstance ( currentAccount ) . linkPrefix + "" + var . username , var . title ) , R . string . RevokeLinkAlertChannel , MessagesController . getInstance ( currentAccount ) . linkPrefix + "" + var . username , var . title )
ConnectionsManager . getInstance ( currentAccount ) . cancelRequest ( var , true )
var . channel = MessagesController . getInstance ( currentAccount ) . getInputChannel ( var )
var = MessagesController . getInstance ( currentAccount ) . getChat ( var )
final CountDownLatch var = new CountDownLatch ( 1 )
var = MessagesStorage . getInstance ( currentAccount ) . getChat ( var )
var . countDown ( )
var . await ( )
MessagesController . getInstance ( currentAccount ) . putChat ( var , true )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . chatInfoDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . chatInfoDidLoaded )
var . setLayoutManager ( var = new LinearLayoutManager ( var , LinearLayoutManager . VERTICAL , false ) , LinearLayoutManager . VERTICAL , false )
if ( var == NotificationCenter . chatInfoDidLoaded == NotificationCenter . closeChats )
TLRPC . Chat var = MessagesController . getInstance ( currentAccount ) . getChat ( var )
var . channel = MessagesController . getInstance ( currentAccount ) . getInputChannel ( var )
MessagesController . getInstance ( currentAccount ) . putUsers ( var . users , false )
if ( var . users . size ( ) < 200 = true )
MessagesStorage . getInstance ( currentAccount ) . putUsersAndChats ( var . users , null , true , true )
MessagesStorage . getInstance ( currentAccount ) . updateChannelUsers ( var , var . participants )
if ( var . indexOfKey ( var . user_id ) < 0 )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . chatInfoDidLoaded , var , 0 , true , null )
ConnectionsManager . getInstance ( currentAccount ) . bindRequestToGuid ( var , classGuid )
int var = UserConfig . getInstance ( currentAccount ) . getClientUserId
if ( var . user_id == UserConfig . getInstance ( currentAccount ) . getClientUserId )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var )
MessagesController . getInstance ( currentAccount ) . deleteUserFromChat ( var , MessagesController . getInstance ( currentAccount ) . getUser ( var ) , var )
var . var . inviter_id = UserConfig . getInstance ( currentAccount ) . getClientUserId
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . chatInfoDidLoaded , var , 0 , true , null )
var = new SearchAdapterHelper ( true )
var = MessagesController . getInstance ( currentAccount ) . getUser ( ( ( TLRPC . ChannelParticipant ) var ) . user_id )
var . setData ( MessagesController . getInstance ( currentAccount ) . getUser ( var . user_id ) . user_id , null , null )
var = new ImageUpdater
var = MessagesController . getInstance ( currentAccount ) . getChat ( var )
final CountDownLatch var = new CountDownLatch ( 1 )
var = MessagesStorage . getInstance ( currentAccount ) . getChat ( var )
var . countDown ( )
var . await ( )
MessagesController . getInstance ( currentAccount ) . putChat ( var , true )
MessagesStorage . getInstance ( currentAccount ) . loadChatInfo ( var , var , false , false )
var . await ( )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . chatInfoDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . chatInfoDidLoaded )
if ( var . uploadingImage != null )
MessagesController . getInstance ( currentAccount ) . updateChannelUserName ( var , var )
MessagesController . getInstance ( currentAccount ) . changeChatTitle ( var , var . getText ( ) . toString )
MessagesController . getInstance ( currentAccount ) . updateChannelAbout ( var , var . getText ( ) . toString , var )
MessagesController . getInstance ( currentAccount ) . toogleChannelInvitesHistory ( var , var )
MessagesController . getInstance ( currentAccount ) . toogleChannelSignatures ( var , var )
MessagesController . getInstance ( currentAccount ) . changeChatAvatar ( var , var )
MessagesController . getInstance ( currentAccount ) . changeChatAvatar ( var , null )
var . setText ( MessagesController . getInstance ( currentAccount ) . linkPrefix + "" )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . closeChats , - ( long ) var )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . closeChats )
MessagesController . getInstance ( currentAccount ) . deleteUserFromChat ( var , MessagesController . getInstance ( currentAccount ) . getUser ( UserConfig . getInstance ( currentAccount ) . getClientUserId ) . getInstance ( currentAccount ) . getClientUserId , var , true )
var . setMessage ( AndroidUtilities . replaceTags ( LocaleController . formatString ( "" , R . string . RevokeLinkAlert , MessagesController . getInstance ( currentAccount ) . linkPrefix + "" + var . username , var . title ) , R . string . RevokeLinkAlert , MessagesController . getInstance ( currentAccount ) . linkPrefix + "" + var . username , var . title ) . formatString ( "" , R . string . RevokeLinkAlert , MessagesController . getInstance ( currentAccount ) . linkPrefix + "" + var . username , var . title ) , R . string . RevokeLinkAlert , MessagesController . getInstance ( currentAccount ) . linkPrefix + "" + var . username , var . title )
var . setMessage ( AndroidUtilities . replaceTags ( LocaleController . formatString ( "" , R . string . RevokeLinkAlertChannel , MessagesController . getInstance ( currentAccount ) . linkPrefix + "" + var . username , var . title ) , R . string . RevokeLinkAlertChannel , MessagesController . getInstance ( currentAccount ) . linkPrefix + "" + var . username , var . title ) . formatString ( "" , R . string . RevokeLinkAlertChannel , MessagesController . getInstance ( currentAccount ) . linkPrefix + "" + var . username , var . title ) , R . string . RevokeLinkAlertChannel , MessagesController . getInstance ( currentAccount ) . linkPrefix + "" + var . username , var . title )
ConnectionsManager . getInstance ( currentAccount ) . cancelRequest ( var , true )
var . channel = MessagesController . getInstance ( currentAccount ) . getInputChannel ( var )
var . channel = MessagesController . getInstance ( currentAccount ) . getInputChannel ( var )
TLRPC . Chat var = MessagesController . getInstance ( currentAccount ) . getChat ( var )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . chatInfoDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . chatInfoDidLoaded )
MessagesController . getInstance ( currentAccount ) . toogleChannelInvitesHistory ( var , var )
var = MessagesController . getInstance ( currentAccount ) . getUser ( var )
TLRPC . Chat var = MessagesController . getInstance ( currentAccount ) . getChat ( var )
MessagesController . getInstance ( currentAccount ) . setUserAdminRole ( var , var , var , var , getFragmentForAlert ( 1 ) )
MessagesController . getInstance ( currentAccount ) . setUserBannedRole ( var , var , var , var , getFragmentForAlert ( 1 ) )
MessagesController . getInstance ( currentAccount ) . setUserAdminRole ( var , var , new TLRPC . TL_channelAdminRights ( ) , var , getFragmentForAlert ( 0 ) )
MessagesController . getInstance ( currentAccount ) . setUserBannedRole ( var , var , var , var , getFragmentForAlert ( 0 ) )
var = MessagesController . getInstance ( currentAccount ) . getChat ( var )
var = MessagesController . getInstance ( currentAccount ) . getChat ( var )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . chatInfoDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . chatInfoDidLoaded )
TLRPC . Chat var = MessagesController . getInstance ( currentAccount ) . getChat ( var )
MessagesController . getInstance ( currentAccount ) . toogleChannelInvites ( var , var . democracy )
MessagesController . getInstance ( currentAccount ) . putUser ( var , false )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var )
MessagesController . getInstance ( currentAccount ) . deleteUserFromChat ( var , var , null )
var = var != UserConfig . getInstance ( currentAccount ) . getClientUserId && ( var . creator || var )
if ( var . user_id == UserConfig . getInstance ( currentAccount ) . getClientUserId )
final TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . user_id )
MessagesController . getInstance ( currentAccount ) . deleteUserFromChat ( var , var , null )
var . inviter_id = UserConfig . getInstance ( currentAccount ) . getClientUserId
var . user_id = MessagesController . getInstance ( currentAccount ) . getInputUser ( var . user_id )
var . channel = MessagesController . getInstance ( currentAccount ) . getInputChannel ( var )
MessagesController . getInstance ( currentAccount ) . processUpdates ( var , false )
MessagesController . getInstance ( currentAccount ) . loadFullChat ( var . id , 0 , true )
MessagesController . getInstance ( currentAccount ) . setUserAdminRole ( var , MessagesController . getInstance ( currentAccount ) . getUser ( var . user_id ) . user_id , new TLRPC . TL_channelAdminRights ( ) , var . megagroup , ChannelUsersActivity . this )
var . channel = MessagesController . getInstance ( currentAccount ) . getInputChannel ( var )
MessagesController . getInstance ( currentAccount ) . putUsers ( var . users , false )
int var = UserConfig . getInstance ( currentAccount ) . getClientUserId
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . user_id )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . user_id )
if ( var . id == UserConfig . getInstance ( currentAccount ) . getClientUserId )
var = ConnectionsManager . getInstance ( currentAccount ) . getCurrentTime + 50000
if ( var . id == UserConfig . getInstance ( currentAccount ) . getClientUserId )
var = ConnectionsManager . getInstance ( currentAccount ) . getCurrentTime + 50000
ConnectionsManager . getInstance ( currentAccount ) . bindRequestToGuid ( var , classGuid )
var = new SearchAdapterHelper ( true )
final ArrayList < TLRPC . TL_contact > var = new ArrayList ( ContactsController . getInstance ( currentAccount ) . contacts )
final ArrayList < TLRPC . TL_contact > var = new ArrayList ( ContactsController . getInstance ( currentAccount ) . contacts )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . user_id )
if ( var . id == UserConfig . getInstance ( currentAccount ) . getClientUserId var )
var = MessagesController . getInstance ( currentAccount ) . getUser ( ( ( TLRPC . ChannelParticipant ) var ) . user_id )
var . setSpan ( new ForegroundColorSpan ( Theme . getColor ( Theme . key_windowBackgroundWhiteBlueText4 ) . key_windowBackgroundWhiteBlueText4 ) . getColor ( Theme . key_windowBackgroundWhiteBlueText4 ) . key_windowBackgroundWhiteBlueText4 , var , var + var , Spanned . SPAN_EXCLUSIVE_EXCLUSIVE )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . user_id )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . kicked_by )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . promoted_by )
TLRPC . Chat var = MessagesController . getInstance ( currentAccount ) . getChat ( var )
var . thumb = var . getBitmapSafe ( var )
var . thumb = var . getBitmapSafe ( var )
if ( ! actionBar . isActionModeShowed ( var ) var )
final CountDownLatch var = new CountDownLatch ( 1 )
var . countDown ( var )
var . await ( var )
MessagesController . getInstance ( currentAccount ) . putChat ( var , true )
MessagesController . getInstance ( currentAccount ) . startShortPoll ( var , false )
final CountDownLatch var = new CountDownLatch ( 1 )
var . countDown ( var )
var . await ( var )
MessagesController . getInstance ( currentAccount ) . putUser ( var , true )
MessagesController . getInstance ( currentAccount ) . sendBotStart ( var , var )
var . countDown ( var )
var . await ( var )
MessagesController . getInstance ( currentAccount ) . putEncryptedChat ( var , true )
var = var . getUser ( var . user_id )
var . countDown ( var )
var . await ( var )
MessagesController . getInstance ( currentAccount ) . putUser ( var , true )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . messagesDidLoaded )
NotificationCenter . getGlobalInstance ( var ) . addObserver ( this , NotificationCenter . emojiDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . updateInterfaces )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . didReceivedNewMessages )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . closeChats )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . messagesRead )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . messagesDeleted )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . historyCleared )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . messageReceivedByServer )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . messageReceivedByAck )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . messageSendError )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . chatInfoDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . contactsDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . encryptedChatUpdated )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . messagesReadEncrypted )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . removeAllMessagesFromDialog )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . messagePlayingProgressDidChanged )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . messagePlayingDidReset )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . messagePlayingPlayStateChanged )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . screenshotTook )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . blockedUsersDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . FileNewChunkAvailable )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . didCreatedNewDeleteTask )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . messagePlayingDidStarted )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . updateMessageMedia )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . replaceMessagesObjects )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . notificationsSettingsUpdated )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . didLoadedReplyMessages )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . didReceivedWebpages )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . didReceivedWebpagesInUpdates )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . messagesReadContent )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . botInfoDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . botKeyboardDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . chatSearchResultsAvailable )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . chatSearchResultsLoading )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . didUpdatedMessagesViews )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . chatInfoCantLoad )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . didLoadedPinnedMessage )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . peerSettingsDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . newDraftReceived )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . userInfoDidLoaded )
NotificationCenter . getGlobalInstance ( var ) . addObserver ( this , NotificationCenter . didSetNewWallpapper )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . channelRightsUpdated )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . updateMentionsCount )
DataQuery . getInstance ( currentAccount ) . loadBotKeyboard ( var )
MessagesController . getInstance ( currentAccount ) . loadPeerSettings ( var , var )
MessagesController . getInstance ( currentAccount ) . setLastCreatedDialogId ( var , true )
SharedPreferences var = MessagesController . getNotificationsSettings ( currentAccount )
CountDownLatch var = null
var = var . getPointerId ( 0 )
MessagesController . getInstance ( currentAccount ) . loadChatInfo ( var . id , var , ChatObject . isChannel ( var ) )
var . await ( var )
DataQuery . getInstance ( currentAccount ) . loadBotInfo ( var , true , classGuid )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . user_id )
DataQuery . getInstance ( currentAccount ) . loadBotInfo ( var . id , true , classGuid )
var = MessagesController . getInstance ( currentAccount ) . blockedUsers . contains ( var . id )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . openedChatChanged , var , false )
SecretChatHelper . getInstance ( currentAccount ) . sendNotifyLayerMessage ( var , null )
MessagesController . getInstance ( currentAccount ) . setLastCreatedDialogId ( var , false )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . messagesDidLoaded )
NotificationCenter . getGlobalInstance ( var ) . removeObserver ( this , NotificationCenter . emojiDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . updateInterfaces )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . didReceivedNewMessages )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . closeChats )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . messagesRead )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . messagesDeleted )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . historyCleared )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . messageReceivedByServer )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . messageReceivedByAck )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . messageSendError )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . chatInfoDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . encryptedChatUpdated )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . messagesReadEncrypted )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . removeAllMessagesFromDialog )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . contactsDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . messagePlayingProgressDidChanged )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . messagePlayingDidReset )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . screenshotTook )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . blockedUsersDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . FileNewChunkAvailable )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . didCreatedNewDeleteTask )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . messagePlayingDidStarted )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . updateMessageMedia )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . replaceMessagesObjects )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . notificationsSettingsUpdated )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . didLoadedReplyMessages )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . didReceivedWebpages )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . didReceivedWebpagesInUpdates )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . messagesReadContent )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . botInfoDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . botKeyboardDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . chatSearchResultsAvailable )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . chatSearchResultsLoading )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . messagePlayingPlayStateChanged )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . didUpdatedMessagesViews )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . chatInfoCantLoad )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . didLoadedPinnedMessage )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . peerSettingsDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . newDraftReceived )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . userInfoDidLoaded )
NotificationCenter . getGlobalInstance ( var ) . removeObserver ( this , NotificationCenter . didSetNewWallpapper )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . channelRightsUpdated )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . updateMentionsCount )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . openedChatChanged , var , true )
if ( Build . VERSION . SDK_INT >= 23 && ( SharedConfig . passcodeHash . length ( var ) == 0 || SharedConfig . allowScreenCapture ) )
MediaController . getInstance ( var ) . setFlagSecure ( this , false )
MessagesController . getInstance ( currentAccount ) . cancelLoadFullUser ( var . id )
MessagesController . getInstance ( currentAccount ) . startShortPoll ( var . id , true )
MessagesController . getInstance ( currentAccount ) . deleteDialog ( var , 0 )
MessagesController . getInstance ( currentAccount ) . deleteUserFromChat ( ( int ) - var , MessagesController . getInstance ( currentAccount ) . getUser ( UserConfig . getInstance ( currentAccount ) . getClientUserId var ) . getInstance ( currentAccount ) . getClientUserId var , null )
MessagesController . getInstance ( currentAccount ) . deleteDialog ( var , 0 )
SharedPreferences var = MessagesController . getNotificationsSettings ( currentAccount )
MessagesController . getInstance ( currentAccount ) . deleteDialog ( var , 1 )
DataQuery . getInstance ( currentAccount ) . installShortcut ( var . var )
showFieldPanelForReply ( true , var )
MessageObject var = var [ var ] . valueAt ( var )
DataQuery . getInstance ( currentAccount ) . addRecentSticker ( DataQuery . TYPE_FAVE , var . getDocument ( var ) , int ( System . currentTimeMillis ( var ) / 1000 ) . currentTimeMillis ( var ) / 1000 , ! var )
SendMessagesHelper . getInstance ( currentAccount ) . sendMessage ( "" , var , null , null , false , null , null , null )
SendMessagesHelper . getInstance ( currentAccount ) . sendMessage ( "" , var , null , null , false , null , null , null )
DataQuery . getInstance ( currentAccount ) . searchMessagesInChat ( var . getText ( var ) . toString var , var , var , classGuid , 0 , var )
int var
var . setSpan ( new TypefaceSpan ( AndroidUtilities . getTypeface ( "" ) ) . getTypeface ( "" ) , 0 , var . length ( var ) , Spanned . SPAN_EXCLUSIVE_EXCLUSIVE )
var . addSubItem ( var , var )
var . setSpan ( new TypefaceSpan ( Typeface . MONOSPACE ) . MONOSPACE , 0 , var . length ( var ) , Spanned . SPAN_EXCLUSIVE_EXCLUSIVE )
var . setAlpha ( 0.0f )
var . setAlpha ( 0.0f )
var . setVisibility ( View . INVISIBLE )
TLRPC . TL_inputStickerSetID var = new TLRPC . TL_inputStickerSetID ( var )
var . access_hash = var . access_hash
if ( var . admin_id == UserConfig . getInstance ( currentAccount ) . getClientUserId var var )
var = var . getBackgroundDrawableLeft ( var )
var . clipRect ( var + var . getTranslationX ( var ) , var . getTop ( var ) , var . getRight ( var ) + var . getTranslationX ( var ) , var . getBottom ( var ) )
var . clipRect ( var . getLeft ( var ) + var . getTranslationX ( var ) , var . getTop ( var ) , var . getRight ( var ) + var . getTranslationX ( var ) , var )
var . translate ( var . getLeft ( var ) + var . getTranslationX ( var ) , var . getTop ( var ) )
var . translate ( var . getLeft ( var ) + var . getTranslationX ( var ) , var . getTop ( var ) )
var . translate ( var . getLeft ( var ) + var . getTranslationX ( var ) , var . getTop ( var ) )
var . translate ( var . getLeft ( var ) + var . getTranslationX ( var ) , var . getTop ( var ) )
var . translate ( var . getLeft ( var ) + var . getTranslationX ( var ) , var . getTop ( var ) )
if ( var . hasCaptionLayout ( var ) && ( var . flags & MessageObject . POSITION_FLAG_BOTTOM ) != 0 )
if ( var . hasCaptionLayout ( var ) && ( var . flags & MessageObject . POSITION_FLAG_BOTTOM ) != 0 )
var = - AndroidUtilities . dp ( 11 )
MessagesController . getInstance ( currentAccount ) . pinChannelMessage ( var , 0 , false )
MessagesController . getInstance ( currentAccount ) . blockUser ( var . id )
MessagesController . getInstance ( currentAccount ) . reportSpam ( var , var , var , var )
MessagesController . getInstance ( currentAccount ) . deleteDialog ( var , 0 )
MessagesController . getInstance ( currentAccount ) . deleteUserFromChat ( ( int ) - var , MessagesController . getInstance ( currentAccount ) . getUser ( UserConfig . getInstance ( currentAccount ) . getClientUserId var ) . getInstance ( currentAccount ) . getClientUserId var , null )
MessagesController . getInstance ( currentAccount ) . deleteDialog ( var , 0 )
MessagesController . getInstance ( currentAccount ) . hideReportSpam ( var , var , var )
var . addView ( var , LayoutHelper . createFrame ( 66 , 59 , Gravity . RIGHT | Gravity . BOTTOM , 0 , 0 , - 3 , 5 ) , 59 , Gravity . RIGHT | Gravity . BOTTOM , 0 , 0 , - 3 , 5 )
var . peer = MessagesController . getInstance ( currentAccount ) . getInputPeer ( ( int ) var )
var . resetMentionsCount ( var , var )
var . markMessageAsMention ( var )
var . peer = MessagesController . getInstance ( currentAccount ) . getInputPeer ( ( int ) var )
var . width = 0
var . height = 0
if ( getParentActivity var == null || var . content == null )
Browser . openUrl ( getParentActivity var , var . content . url )
DataQuery . getInstance ( currentAccount ) . searchMessagesInChat ( "" , var , var , classGuid , 0 , var )
var . setSpan ( new URLSpanUserMention ( "" + var . id , 1 ) + var . id , 1 , 0 , var . length ( var ) , Spanned . SPAN_EXCLUSIVE_EXCLUSIVE )
SendMessagesHelper . getInstance ( currentAccount ) . sendMessage ( ( String ) var , var , var , null , false , null , null , null )
if ( ( var . type . equals ( "" ) && ( var . photo != null || var . content != null ) || var . type . equals ( "" ) && ( var . document != null || var . content != null ) || var . type . equals ( "" ) && ( var . document != null ) ) var )
var . addView ( var , LayoutHelper . createFrame ( 46 , 46 , Gravity . CENTER_HORIZONTAL | Gravity . BOTTOM ) , 46 , Gravity . CENTER_HORIZONTAL | Gravity . BOTTOM )
MessagesController . getInstance ( currentAccount ) . sendTyping ( var , 0 , classGuid )
updateMessagesVisisblePart ( true )
ConnectionsManager . getInstance ( currentAccount ) . cancelRequest ( var , true )
showFieldPanel ( false , null , null , null , var , true )
boolean var = StickerPreviewViewer . getInstance ( var ) . onInterceptTouchEvent ( var , var , 0 , var )
return StickerPreviewViewer . getInstance ( var ) . onTouch ( var , var , 0 , var , var )
DataQuery . getInstance ( currentAccount ) . searchMessagesInChat ( null , var , var , classGuid , 1 , var )
DataQuery . getInstance ( currentAccount ) . searchMessagesInChat ( null , var , var , classGuid , 2 , var )
MessagesController . getInstance ( currentAccount ) . loadMessages ( var , 30 , 0 , var , true , 0 , classGuid , 4 , 0 , ChatObject . isChannel ( var ) , var ++ )
MessagesController . getInstance ( currentAccount ) . unblockUser ( var . id )
MessagesController . getInstance ( currentAccount ) . sendBotStart ( var , var )
SendMessagesHelper . getInstance ( currentAccount ) . sendMessage ( "" , var , null , null , false , null , null , null )
MessagesController . getInstance ( currentAccount ) . unblockUser ( var . id )
MessagesController . getInstance ( currentAccount ) . sendBotStart ( var , var )
SendMessagesHelper . getInstance ( currentAccount ) . sendMessage ( "" , var , null , null , false , null , null , null )
MessagesController . getInstance ( currentAccount ) . addUserToChat ( var . id , UserConfig . getInstance ( currentAccount ) . getCurrentUser var , null , 0 , null , ChatActivity . this )
MessagesController . getInstance ( currentAccount ) . deleteDialog ( var , 0 )
if ( var != null && Build . VERSION . SDK_INT >= 23 && ( SharedConfig . passcodeHash . length ( var ) == 0 || SharedConfig . allowScreenCapture ) )
MediaController . getInstance ( var ) . setFlagSecure ( this , true )
if ( var == null )
DataQuery . getInstance ( currentAccount ) . increaseInlineRaiting ( var )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . user_id )
MessagesController . getInstance ( currentAccount ) . loadMessages ( var , 30 , 0 , var , true , 0 , classGuid , 4 , 0 , ChatObject . isChannel ( var ) , var ++ )
MessagesController . getInstance ( currentAccount ) . sendBotStart ( var , var . start_param )
if ( ! MessagesController . getInstance ( currentAccount ) . checkCanOpenChat ( var , ChatActivity . this ) )
SendMessagesHelper . prepareSendingMedia ( var , var , var , null , var == 4 , SharedConfig . groupPhotosEnabled , var )
DataQuery . getInstance ( currentAccount ) . cleanDraft ( var , true )
MessagesController . getInstance ( currentAccount ) . sendBotStart ( var , var )
SendMessagesHelper . getInstance ( currentAccount ) . sendSticker ( var , var , var )
var . setMessage ( AndroidUtilities . replaceTags ( LocaleController . formatString ( "" , R . string . AreYouSureShareMyContactInfoUser , PhoneFormat . getInstance ( var ) . format ( "" + UserConfig . getInstance ( currentAccount ) . getCurrentUser var . phone ) + UserConfig . getInstance ( currentAccount ) . getCurrentUser var . phone , ContactsController . formatName ( var . first_name , var . last_name ) . first_name , var . last_name ) , R . string . AreYouSureShareMyContactInfoUser , PhoneFormat . getInstance ( var ) . format ( "" + UserConfig . getInstance ( currentAccount ) . getCurrentUser var . phone ) + UserConfig . getInstance ( currentAccount ) . getCurrentUser var . phone , ContactsController . formatName ( var . first_name , var . last_name ) . first_name , var . last_name ) . formatString ( "" , R . string . AreYouSureShareMyContactInfoUser , PhoneFormat . getInstance ( var ) . format ( "" + UserConfig . getInstance ( currentAccount ) . getCurrentUser var . phone ) + UserConfig . getInstance ( currentAccount ) . getCurrentUser var . phone , ContactsController . formatName ( var . first_name , var . last_name ) . first_name , var . last_name ) , R . string . AreYouSureShareMyContactInfoUser , PhoneFormat . getInstance ( var ) . format ( "" + UserConfig . getInstance ( currentAccount ) . getCurrentUser var . phone ) + UserConfig . getInstance ( currentAccount ) . getCurrentUser var . phone , ContactsController . formatName ( var . first_name , var . last_name ) . first_name , var . last_name )
MessagesController . getInstance ( currentAccount ) . deleteDialog ( var , 0 )
DataQuery . getInstance ( currentAccount ) . cleanDraft ( var , true )
SendMessagesHelper . prepareSendingDocuments ( var , var , null , null , var , var , null , var )
DataQuery . getInstance ( currentAccount ) . cleanDraft ( var , true )
SendMessagesHelper . prepareSendingAudioDocuments ( var , var , var , var )
DataQuery . getInstance ( currentAccount ) . cleanDraft ( var , true )
SendMessagesHelper . getInstance ( currentAccount ) . sendMessage ( var , var , var , null , null )
SendMessagesHelper . getInstance ( currentAccount ) . sendMessage ( var , var , var , null , null )
DataQuery . getInstance ( currentAccount ) . cleanDraft ( var , true )
if ( var != null && ( MessagesController . getInstance ( currentAccount ) . secretWebpagePreview == 0 || AndroidUtilities . getPeerLayerVersion ( var . layer ) < 46 ) )
showFieldPanelForWebPage ( false , var , false )
ConnectionsManager . getInstance ( currentAccount ) . cancelRequest ( var , true )
if ( var != null && var . secretWebpagePreview == 2 )
var . secretWebpagePreview = 1
var . secretWebpagePreview = 0
showFieldPanelForWebPage ( false , var , false )
ConnectionsManager . getInstance ( currentAccount ) . bindRequestToGuid ( var , classGuid )
AlertsCreator . showSendMediaAlert ( SendMessagesHelper . getInstance ( currentAccount ) . sendMessage ( var , var ) , var , this )
SendMessagesHelper . getInstance ( currentAccount ) . processForwardFromMyName ( var , var )
if ( var == null && var == null && var == null && var == null )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . messageOwner . from_id )
TLRPC . Chat var = MessagesController . getInstance ( currentAccount ) . getChat ( var . messageOwner . to_id . channel_id )
var = MessagesController . getInstance ( currentAccount ) . getUser ( var )
var = MessagesController . getInstance ( currentAccount ) . getChat ( - var )
var = FileLoader . getClosestPhotoSizeWithSize ( var . photoThumbs , 80 )
if ( var != null )
var = FileLoader . getClosestPhotoSizeWithSize ( var . photoThumbs2 , 80 )
if ( var != null && var . isRoundVideo ( var ) var )
if ( var == null && var == null && var == null && var == null )
if ( var != null && ( var != null || var != null || var != null ) )
showFieldPanel ( true , var , var , var , null , false )
MessagesController . getInstance ( currentAccount ) . markMessageAsRead ( var , var . messageOwner . random_id , var . messageOwner . ttl )
var . messageOwner . destroyTime = var . messageOwner . ttl + ConnectionsManager . getInstance ( currentAccount ) . getCurrentTime var
MessagesController . getInstance ( currentAccount ) . loadMessages ( var , 30 , 0 , 0 , true , 0 , classGuid , 0 , 0 , ChatObject . isChannel ( var ) , var ++ )
if ( fragmentView == null || var )
var . setTranslationX ( var . getImageX ( var ) + var . getTranslationX ( var ) )
if ( var != null && var . eventId == 0 )
var = var . getMessageObject ( var )
var . setTranslationX ( var . getImageX ( var ) + var . getTranslationX ( var ) )
MessagesStorage . getInstance ( currentAccount ) . setDialogFlags ( var , var )
TLRPC . TL_dialog var = MessagesController . getInstance ( currentAccount ) . dialogs_dict . get ( var )
NotificationsController . getInstance ( currentAccount ) . updateServerNotificationsSettings ( var )
MessagesStorage . getInstance ( currentAccount ) . setDialogFlags ( var , 0 )
TLRPC . TL_dialog var = MessagesController . getInstance ( currentAccount ) . dialogs_dict . get ( var )
NotificationsController . getInstance ( currentAccount ) . updateServerNotificationsSettings ( var )
if ( var != null && ! MessagesStorage . getInstance ( currentAccount ) . checkMessageId ( var , var ) )
DataQuery . getInstance ( currentAccount ) . cleanDraft ( var , false )
VoIPHelper . startCall ( var , getParentActivity var , MessagesController . getInstance ( currentAccount ) . getUserFull ( var . id ) . id )
if ( ! DataQuery . getInstance ( currentAccount ) . isStickerPackInstalled ( var . id ) )
if ( ! DataQuery . getInstance ( currentAccount ) . isStickerPackInstalled ( var . short_name ) )
if ( var . getDocumentName ( var ) . toLowerCase var . endsWith ( "" ) . endsWith ( "" ) . endsWith ( "" ) || var . endsWith ( "" ) || var . endsWith ( "" ) )
if ( ! DataQuery . getInstance ( currentAccount ) . isStickerPackInstalled ( var . short_name ) )
if ( var [ var ] . indexOfKey ( var . getId ( var ) ) < 0 )
if ( var [ var ] . indexOfKey ( var . getId ( var ) ) >= 0 var )
if ( ! DataQuery . getInstance ( currentAccount ) . isStickerInFavorites ( var . getDocument ( var ) ) )
if ( var [ 0 ] . size var != 0 || var [ 1 ] . size var != 0 )
if ( ! MessagesController . isSupportId ( var . id ) && ContactsController . getInstance ( currentAccount ) . contactsDict . get ( var . id ) == null && ( ContactsController . getInstance ( currentAccount ) . contactsDict . size ( var ) != 0 || ! ContactsController . getInstance ( currentAccount ) . isLoadingContacts var ) )
if ( var . size ( var ) != 0 )
TLRPC . BotInfo var = var . valueAt ( var )
TLRPC . Chat var = MessagesController . getInstance ( currentAccount ) . getChat ( var . var )
SendMessagesHelper . prepareSendingVideo ( var , 0 , 0 , 0 , 0 , null , var , var , null , null , 0 , var )
DataQuery . getInstance ( currentAccount ) . cleanDraft ( var , true )
SendMessagesHelper . prepareSendingDocument ( var , var , null , null , var , var , null , var )
ArrayList < Integer > var = new ArrayList var ( var )
var = var
var . setVisibility ( View . INVISIBLE )
fillEditingMediaWithCaption ( var . get ( 0 ) . caption , var . get ( 0 ) . entities )
if ( var . editingMessage == null && ! TextUtils . isEmpty ( var . messageOwner . message ) )
var . editingMessage = ""
SendMessagesHelper . prepareSendingPhoto ( null , var , var , var , null , null , null , null , 0 , var )
DataQuery . getInstance ( currentAccount ) . cleanDraft ( var , true )
var . onActivityResultFragment ( var , var , var )
View var = var . getChildAt ( var )
var = var . getMessageObject ( var )
var . forceResetMessageObject ( var )
super . setInPreviewMode ( var )
if ( var != null )
DataQuery . getInstance ( currentAccount ) . cleanDraft ( var , true )
View var = var . getChildAt ( var )
MessageObject var = null
if ( ! var . isVoice ( var ) && ! var . isRoundVideo ( var ) )
var . setContentIsRead ( var )
SendMessagesHelper . getInstance ( currentAccount ) . sendMessage ( var , var , var , null , null )
DataQuery . getInstance ( currentAccount ) . cleanDraft ( var , true )
return var != null && var . getEditingMessageObject ( var ) != null
NotificationCenter . getInstance ( currentAccount ) . setAllowedNotificationsDutingAnimation ( new int var )
int var = UserConfig . getInstance ( currentAccount ) . getClientUserId var
if ( var != 0 && ( var != 0 || var != 0 ) )
forwardEndReached [ var ] = false
DataQuery . getInstance ( currentAccount ) . loadReplyMessagesForMessages ( var , var )
LongSparseArray < MessageObject . GroupedMessages > var = null
LongSparseArray < MessageObject . GroupedMessages > var = null
if ( var . type < 0 || var [ 0 ] . indexOfKey ( var . getId ( var ) ) >= 0 )
var . add ( var )
MessageObject . GroupedMessages var = var . get ( var . getGroupIdForUse ( var ) )
if ( var . getGroupIdForUse ( var ) != var . getGroupIdForUse ( var ) )
if ( var == null || var . indexOfKey ( var . getGroupId ( var ) ) < 0 )
var = new LongSparseArray var ( var )
var = new LongSparseArray var ( var )
MessageObject var = new MessageObject ( currentAccount , var , false )
MessageObject var = new MessageObject ( currentAccount , var , false )
MessageObject . GroupedMessages var = var . valueAt ( var )
if ( var != null && var != null && var . indexOfKey ( var . keyAt ( var ) ) >= 0 )
if ( var != 0 )
if ( var && var . size ( var ) > 0 = false )
fillEditingMediaWithCaption ( var . get ( 0 ) . caption , var . get ( 0 ) . entities )
TLRPC . Chat var = MessagesController . getInstance ( currentAccount ) . getChat ( var . id )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . id )
TLRPC . Chat var = MessagesController . getInstance ( currentAccount ) . getChat ( var . var )
int var = UserConfig . getInstance ( currentAccount ) . getClientUserId var
TLRPC . Chat var = MessagesController . getInstance ( currentAccount ) . getChat ( var . var )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( var , NotificationCenter . closeChats )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . closeChats )
MessagesController . getInstance ( currentAccount ) . loadFullChat ( var , 0 , true )
for ( int var = 0 , var var = var . var ( var ) ; var < var ; var ++ )
LongSparseArray < MessageObject . GroupedMessages > var = null
if ( BuildVars . LOGS_ENABLED )
if ( var [ var ] . indexOfKey ( var . getId ( var ) ) >= 0 )
var = new LongSparseArray var ( var )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( var , NotificationCenter . closeChats )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . closeChats )
MessagesController . getInstance ( currentAccount ) . loadFullChat ( var , 0 , true )
MessageObject var = new MessageObject ( currentAccount , var , false )
MessageObject var = new MessageObject ( currentAccount , var , false )
MessagesController . getInstance ( currentAccount ) . reloadWebPages ( var , var )
MessageObject . GroupedMessages var = var . valueAt ( var )
var . calculate ( var )
if ( var - var > 0 && var != null )
int var = var . indexOf ( var )
MessagesController . getInstance ( currentAccount ) . loadFullChat ( var . var , 0 , true )
SparseLongArray var = ( SparseLongArray ) var [ 1 ]
for ( int var = 0 , var var = var . var ( var ) ; var < var ; var ++ )
for ( int var = 0 , var var = var . var ( var ) ; var < var ; var ++ )
for ( int var = 0 , var var = var . var ( var ) ; var < var ; var ++ )
for ( int var = 0 , var var = var . var ( var ) ; var < var ; var ++ )
MessagesStorage . getInstance ( currentAccount ) . updateChannelPinnedMessage ( var . var , 0 )
for ( int var = 0 ; var < var ; var ++ )
MessagesStorage . getInstance ( currentAccount ) . updateChannelPinnedMessage ( var , 0 )
var = new LongSparseArray var ( var )
MessageObject . GroupedMessages var = var . valueAt ( var )
if ( ! var . equals ( var ) && var [ 0 ] . indexOfKey ( var ) >= 0 )
MessageObject var = var [ 0 ] . get ( var )
if ( var . getGroupId ( var ) != 0 && var . var != 0 )
var . put ( var . var , var )
DataQuery . getInstance ( currentAccount ) . loadReplyMessagesForMessages ( var , var )
NotificationsController . getInstance ( currentAccount ) . playOutChatSound var
MessagesController . getInstance ( currentAccount ) . loadChannelParticipants ( var . var )
SendMessagesHelper . getInstance ( currentAccount ) . setCurrentChatInfo ( var )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . user_id )
DataQuery . getInstance ( currentAccount ) . loadBotInfo ( var . var , true , classGuid )
var = MessagesController . getInstance ( currentAccount ) . blockedUsers . contains ( var . var )
if ( var != null && var . messageOwner . media . document != null )
if ( var . isRoundVideo ( var ) && fragmentView != null && fragmentView . getParent ( var ) != null )
removeUnreadPlane ( false )
removeUnreadPlane ( false )
LongSparseArray < MessageObject . GroupedMessages > var = null
if ( ! var . isEditing ( var ) )
var = new LongSparseArray var ( var )
var . updateRowAtPosition ( var . messagesStartRow + var )
MessageObject . GroupedMessages var = var . valueAt ( var )
LongSparseArray < TLRPC . WebPage > var = ( LongSparseArray < TLRPC . WebPage > ) var [ 0 ]
showFieldPanelForWebPage ( ! ( var instanceof TLRPC . TL_webPageEmpty ) , var , false )
var = new MessageObject ( currentAccount , var , false )
showFieldPanelForReply ( true , var )
DataQuery . getInstance ( currentAccount ) . saveDraft ( var , var , null , null , false )
NotificationCenter . getInstance ( currentAccount ) . setAllowedNotificationsDutingAnimation ( new int var )
NotificationCenter . getInstance ( currentAccount ) . setAnimationInProgress ( true )
MessagesController . getInstance ( currentAccount ) . loadFullUser ( var , classGuid , false )
MessagesController . getInstance ( currentAccount ) . deleteDialog ( var , 0 )
var . add ( R . id . menu_groupbolditalic , R . id . menu_regular , 10 , LocaleController . getString ( "" , R . string . Regular ) , R . string . Regular )
if ( ! MessagesController . getInstance ( currentAccount ) . isDialogMuted ( var ) var )
SharedPreferences var = MessagesController . getNotificationsSettings ( currentAccount )
DataQuery . getInstance ( currentAccount ) . loadPinnedMessage ( var . id , var . pinned_msg_id , true )
var = ! ( var . admin_id == UserConfig . getInstance ( currentAccount ) . getClientUserId var || ContactsController . getInstance ( currentAccount ) . isLoadingContacts var ) && ContactsController . getInstance ( currentAccount ) . contactsDict . get ( var . id ) == null
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . id )
if ( var != null && ! ( var instanceof TLRPC . TL_encryptedChat ) || MessagesController . isSupportId ( var . id ) || UserObject . isDeleted ( var ) || ContactsController . getInstance ( currentAccount ) . isLoadingContacts var || ( ! TextUtils . isEmpty ( var . phone ) && ContactsController . getInstance ( currentAccount ) . contactsDict . get ( var . id ) != null && ( ContactsController . getInstance ( currentAccount ) . contactsDict . size ( var ) != 0 || ! ContactsController . getInstance ( currentAccount ) . isLoadingContacts var ) ) var )
MessagesController . getInstance ( currentAccount ) . markDialogAsReadNow ( var )
ArrayList < TLRPC . MessageEntity > var = DataQuery . getInstance ( currentAccount ) . getEntities ( var )
MessagesController . getInstance ( currentAccount ) . cancelTyping ( 0 , var )
SharedPreferences . Editor var = MessagesController . getNotificationsSettings ( currentAccount ) . var var
if ( var != null && ! var )
DataQuery . getInstance ( currentAccount ) . sortEntities ( var . entities )
var . setSpan ( new URLSpanUserMention ( "" + var , 1 ) + var , 1 , var . offset + var , var . offset + var + var . length , Spanned . SPAN_EXCLUSIVE_EXCLUSIVE )
var = new MessageObject ( currentAccount , var , MessagesController . getInstance ( currentAccount ) . getUsers var , false )
showFieldPanelForReply ( true , var )
MediaController . getInstance ( var ) . setLastVisibleMessageIds ( currentAccount , var , var , var , var , var , var )
MediaController . getInstance ( var ) . setLastVisibleMessageIds ( currentAccount , var . getOpenTime ( var ) , var . getCloseTime ( var ) , var , null , null , var . getId ( var ) )
var = MessagesController . getInstance ( currentAccount ) . getUser ( var . messageOwner . from_id )
var = ! var . isSendError ( var ) && var . getDialogId ( var ) == var && ( var . messageOwner . action == null || var . messageOwner . action instanceof TLRPC . TL_messageActionEmpty ) && var . isOut ( var ) && ( var - var . messageOwner . date ) <= var
MessageObject var = var [ var ] . valueAt ( var )
var = MessagesController . getInstance ( currentAccount ) . getUser ( var )
var . user_id = MessagesController . getInstance ( currentAccount ) . getInputUser ( var )
ConnectionsManager . getInstance ( currentAccount ) . cancelRequest ( var , true )
CheckBoxCell var = new CheckBoxCell ( getParentActivity var , 1 )
if ( var != null && var . id != UserConfig . getInstance ( currentAccount ) . getClientUserId var && ! var . bot || var != null )
var = ! var . isSendError ( var ) && ( var . messageOwner . action == null || var . messageOwner . action instanceof TLRPC . TL_messageActionEmpty ) && ( var . isOut ( var ) || var || var != null && ( var . creator || var . admin && var . admins_enabled ) ) && ( var - var . messageOwner . date ) <= var
if ( ( var . isOut ( var ) || var ) || var != null && ( var . creator || var . admin && var . admins_enabled ) var )
if ( ! var && ( var - var . messageOwner . date ) <= var = true )
CheckBoxCell var = new CheckBoxCell ( getParentActivity var , 1 )
MessagesController . getInstance ( currentAccount ) . deleteUserFromChat ( var . id , var , var )
var . user_id = MessagesController . getInstance ( currentAccount ) . getInputUser ( var )
MessagesController . getInstance ( currentAccount ) . deleteUserChannelHistory ( var , var , 0 )
if ( var >= 0 || var == - 1 && var && ( var . isSending ( var ) || var . isEditing ( var ) ) && var == null )
if ( ! var . needDrawBluredPreview ( var ) )
if ( ! var . needDrawBluredPreview ( var ) )
if ( ! DataQuery . getInstance ( currentAccount ) . isStickerInFavorites ( var . getDocument ( var ) ) var )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . messageOwner . media . user_id )
if ( var != null && var . id != UserConfig . getInstance ( currentAccount ) . getClientUserId var && ContactsController . getInstance ( currentAccount ) . contactsDict . get ( var . id ) == null )
if ( var . isMask ( var ) var )
if ( ! DataQuery . getInstance ( currentAccount ) . isStickerInFavorites ( var . getDocument ( var ) ) var )
if ( ! var . needDrawBluredPreview ( var ) && ! var . isLiveLocation ( var ) )
var . setEditingMessageObject ( null )
var . setOnItemLongClickListener ( ( RecyclerListView . OnItemLongClickListenerExtended ) null )
( ( ChatMessageCell ) var ) . setHighlighted ( false )
var . setVisibility ( View . GONE )
var . setVisibility ( View . GONE )
var . setVisibility ( View . GONE )
var . setVisibility ( View . GONE )
var . setVisibility ( View . VISIBLE )
var . peer = MessagesController . getInstance ( currentAccount ) . getInputPeer ( ( int ) var )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . messageOwner . from_id )
TLRPC . Chat var = MessagesController . getInstance ( currentAccount ) . getChat ( - var . messageOwner . from_id )
if ( var . messageOwner . media != null && var . messageOwner . message != null )
var += var . messageOwner . message
if ( ! SendMessagesHelper . getInstance ( currentAccount ) . retrySendMessage ( var . var . get ( var ) , false ) = false )
if ( SendMessagesHelper . getInstance ( currentAccount ) . retrySendMessage ( var , false ) )
if ( var . getName ( var ) . toLowerCase var . endsWith ( "" ) var )
if ( LocaleController . getInstance ( var ) . applyLanguageFile ( var , currentAccount ) var )
showFieldPanelForReply ( true , var )
CheckBoxCell var = new CheckBoxCell ( getParentActivity var , 1 )
MessagesController . getInstance ( currentAccount ) . pinChannelMessage ( var , 0 , false )
VoIPHelper . startCall ( var , getParentActivity var , MessagesController . getInstance ( currentAccount ) . getUserFull ( var . id ) . id )
DataQuery . getInstance ( currentAccount ) . addRecentSticker ( DataQuery . TYPE_FAVE , var . getDocument ( var ) , int ( System . currentTimeMillis ( var ) / 1000 ) . currentTimeMillis ( var ) / 1000 , true )
DataQuery . getInstance ( currentAccount ) . addRecentSticker ( DataQuery . TYPE_FAVE , var . getDocument ( var ) , int ( System . currentTimeMillis ( var ) / 1000 ) . currentTimeMillis ( var ) / 1000 , false )
if ( var == null && var [ 0 ] . size var == 0 && var [ 1 ] . size var == 0 )
if ( var . size ( var ) > 1 || var . get ( 0 ) == UserConfig . getInstance ( currentAccount ) . getClientUserId var || var != null var )
SendMessagesHelper . getInstance ( currentAccount ) . sendMessage ( var . toString ( var ) , var , null , null , true , null , null , null )
SendMessagesHelper . getInstance ( currentAccount ) . sendMessage ( var , var )
if ( ! MessagesController . getInstance ( currentAccount ) . checkCanOpenChat ( var , var ) )
if ( var == var || var [ var ] . indexOfKey ( var . getId ( var ) ) >= 0 var )
if ( var != null && var . getVisibility ( var ) == View . VISIBLE && DataQuery . getInstance ( currentAccount ) . isMessageFound ( var . getId ( var ) , var . getDialogId ( var ) == var ) && DataQuery . getInstance ( currentAccount ) . getLastSearchQuery var != null var )
var . setHighlightedText ( DataQuery . getInstance ( currentAccount ) . getLastSearchQuery var )
if ( var <= 5 * 60 )
DataQuery . getInstance ( currentAccount ) . searchMessagesInChat ( var , var , var , classGuid , 0 , var )
SendMessagesHelper . getInstance ( currentAccount ) . sendMessage ( var , var , var , null , null )
DataQuery . getInstance ( currentAccount ) . cleanDraft ( var , true )
DataQuery . getInstance ( currentAccount ) . cleanDraft ( var , true )
SendMessagesHelper . prepareSendingPhoto ( var . imagePath , null , var , var , var . caption , var . entities , var . stickers , null , var . ttl , var )
DataQuery . getInstance ( currentAccount ) . cleanDraft ( var , true )
SendMessagesHelper . prepareSendingPhoto ( var . path , null , var , var , var . caption , var . entities , var . stickers , null , var . ttl , var )
DataQuery . getInstance ( currentAccount ) . cleanDraft ( var , true )
MessagesController . getNotificationsSettings ( currentAccount ) . var var . putBoolean ( "" + var , false ) . commit var
if ( var [ var ] . indexOfKey ( var . var . get ( var ) . getId var ) < 0 )
if ( MessagesController . getInstance ( currentAccount ) . checkCanOpenChat ( var , ChatActivity . this , var . getMessageObject ( var ) ) )
VoIPHelper . startCall ( var , getParentActivity var , MessagesController . getInstance ( currentAccount ) . getUserFull ( var . id ) . id )
if ( var != null && var . id != UserConfig . getInstance ( currentAccount ) . getClientUserId var )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( Utilities . parseInt ( ( ( URLSpanUserMention ) var ) . getURL var ) ( URLSpanUserMention ) var ) . getURL var )
MessagesController . getInstance ( currentAccount ) . openByUserName ( var . substring ( 1 ) , ChatActivity . this , 0 )
if ( var . startsWith ( "" ) || var . startsWith ( "" ) )
if ( ! var && var . getFieldText ( var ) == null var )
if ( var . getDocumentName ( var ) . toLowerCase var . endsWith ( "" ) )
return MessagesController . getInstance ( currentAccount ) . isChannelAdmin ( var . id , var )
if ( var != UserConfig . getInstance ( currentAccount ) . getClientUserId var )
MessagesController . getInstance ( currentAccount ) . openByUserName ( var . substring ( 1 ) , ChatActivity . this , 0 )
if ( var . startsWith ( "" ) || var . startsWith ( "" ) )
if ( var . getFieldText ( var ) == null var )
if ( var instanceof ChatMessageCell && DownloadController . getInstance ( currentAccount ) . canDownloadMedia ( var ) )
if ( var != null && var . getVisibility ( var ) == View . VISIBLE && DataQuery . getInstance ( currentAccount ) . isMessageFound ( var . getId ( var ) , var . getDialogId ( var ) == var ) && DataQuery . getInstance ( currentAccount ) . getLastSearchQuery var != null var )
var . setHighlightedText ( DataQuery . getInstance ( currentAccount ) . getLastSearchQuery var )
var . setText ( LocaleController . getString ( "" , R . string . UnreadMessages ) , R . string . UnreadMessages )
if ( var == var || var [ var ] . indexOfKey ( var . getId ( var ) ) >= 0 var )
updateRowAtPosition ( var + var )
var = MessagesController . getInstance ( currentAccount ) . getChat ( var )
var = MessagesController . getInstance ( currentAccount ) . getChat ( var )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . chatInfoDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . chatInfoDidLoaded )
int var = UserConfig . getInstance ( currentAccount ) . getClientUserId
MessagesController . getInstance ( currentAccount ) . deleteUserFromChat ( var , MessagesController . getInstance ( currentAccount ) . getUser ( var . user_id ) . user_id , var )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . user_id )
var = MessagesController . getInstance ( currentAccount ) . getUser ( ( ( TLRPC . ChatParticipant ) var ) . user_id )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . user_id )
if ( ! MessagesController . getInstance ( currentAccount ) . checkCanOpenChat ( var , CommonGroupsActivity . this ) )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . closeChats )
var . user_id = MessagesController . getInstance ( currentAccount ) . getInputUser ( var )
MessagesController . getInstance ( currentAccount ) . putChats ( var . var , false )
ConnectionsManager . getInstance ( currentAccount ) . bindRequestToGuid ( var , classGuid )
public AdminLogFilterAlert ( Context var , TLRPC . TL_channelAdminLogEventsFilter var , SparseArray < TLRPC . User > . User var , boolean var )
var = var . clone ( )
var = new SparseArray
var = new SparseArray
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . get ( var ) . user_id )
var = new CheckBoxCell ( var , 1 )
var . setChecked ( var == null || var . indexOfKey ( var ) >= 0 , false )
var . setUser ( MessagesController . getInstance ( currentAccount ) . getUser ( var ) , var == null || var . indexOfKey ( var ) >= 0 , var != getItemCount - 1 )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . needShowAlert , 1 )
if ( var instanceof TLRPC . TL_messages_sendMessage || var instanceof TLRPC . TL_messages_sendMedia || var instanceof TLRPC . TL_messages_sendBroadcast || var instanceof TLRPC . TL_messages_sendInlineBotResult || var instanceof TLRPC . TL_messages_forwardMessages )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . needShowAlert , 0 )
if ( var instanceof TLRPC . TL_account_confirmPhone || var instanceof TLRPC . TL_account_verifyPhone || var instanceof TLRPC . TL_account_verifyEmail )
return showSimpleAlert ( var , LocaleController . getString ( "" , R . string . InvalidCode ) , R . string . InvalidCode )
return showSimpleAlert ( var , LocaleController . getString ( "" , R . string . CodeExpired ) , R . string . CodeExpired )
return showSimpleAlert ( var , LocaleController . getString ( "" , R . string . FloodWait ) , R . string . FloodWait )
return showSimpleAlert ( var , var . text )
return showSimpleAlert ( var , LocaleController . getString ( "" , R . string . InvalidCode ) , R . string . InvalidCode )
if ( var . text . contains ( "" ) || var . text . contains ( "" ) )
return showSimpleAlert ( var , LocaleController . getString ( "" , R . string . CodeExpired ) , R . string . CodeExpired )
Toast var = Toast . makeText ( var , var , Toast . LENGTH_LONG )
AlertDialog . Builder var = createSimpleAlert ( var . getParentActivity ( ) , var )
SharedPreferences var = MessagesController . getNotificationsSettings ( UserConfig . selectedAccount )
NotificationsController . getInstance ( UserConfig . selectedAccount ) . removeNotificationsForDialog ( var )
MessagesStorage . getInstance ( UserConfig . selectedAccount ) . setDialogFlags ( var , var )
TLRPC . TL_dialog var = MessagesController . getInstance ( UserConfig . selectedAccount ) . dialogs_dict . get ( var )
NotificationsController . getInstance ( UserConfig . selectedAccount ) . updateServerNotificationsSettings ( var )
MessagesController . getInstance ( var . getCurrentAccount ( ) ) . openByUserName ( "" , var , 1 )
SharedPreferences var = MessagesController . getNotificationsSettings ( UserConfig . selectedAccount )
final SharedPreferences var = MessagesController . getNotificationsSettings ( UserConfig . selectedAccount )
final SharedPreferences var = MessagesController . getNotificationsSettings ( UserConfig . selectedAccount )
final SharedPreferences var = MessagesController . getNotificationsSettings ( UserConfig . selectedAccount )
SharedPreferences var = MessagesController . getNotificationsSettings ( UserConfig . selectedAccount )
final SharedPreferences var = MessagesController . getNotificationsSettings ( UserConfig . selectedAccount )
SharedPreferences var = MessagesController . getNotificationsSettings ( UserConfig . selectedAccount )
selected [ 0 ] = 2
final SharedPreferences var = MessagesController . getNotificationsSettings ( UserConfig . selectedAccount )
if ( selected [ 0 ] == 0 )
if ( selected [ 0 ] == 5 )
var . setTitle ( LocaleController . getString ( "" , R . string . NotificationsImportance ) , R . string . NotificationsImportance )
SharedPreferences var = MessagesController . getNotificationsSettings ( UserConfig . selectedAccount )
final SharedPreferences var = MessagesController . getNotificationsSettings ( UserConfig . selectedAccount )
SecretChatHelper . getInstance ( UserConfig . selectedAccount ) . sendTTLMessage ( var , null )
MessagesStorage . getInstance ( UserConfig . selectedAccount ) . updateEncryptedChatTTL ( var )
var = DownloadController . getInstance ( currentAccount ) . generateObserverTag
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . messagePlayingDidReset )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . messagePlayingPlayStateChanged )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . messagePlayingDidStarted )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . messagePlayingProgressDidChanged )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . musicDidLoaded )
TLRPC . Chat var = MessagesController . getInstance ( currentAccount ) . getChat ( - var )
TLRPC . EncryptedChat var = MessagesController . getInstance ( currentAccount ) . getEncryptedChat ( var )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . user_id )
SharedConfig . toggleRepeatMode ( )
if ( var == null || var == null )
if ( var . size ( ) > 1 || var . get ( 0 ) == UserConfig . getInstance ( currentAccount ) . getClientUserId || var != null )
SendMessagesHelper . getInstance ( currentAccount ) . sendMessage ( var . toString ( ) , var , null , null , true , null , null , null )
SendMessagesHelper . getInstance ( currentAccount ) . sendMessage ( var , var )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . closeChats )
var . showFieldPanelForForward ( true , var )
var = MessagesController . getInstance ( currentAccount ) . getUser ( var )
var = MessagesController . getInstance ( currentAccount ) . getChat ( - var )
int var = ConnectionsManager . getInstance ( currentAccount ) . getCurrentTime var
if ( var != null && var . var != UserConfig . getInstance ( currentAccount ) . getClientUserId var || var != null )
CheckBoxCell var = new CheckBoxCell ( var , 1 )
var = MessagesController . getInstance ( currentAccount ) . getEncryptedChat ( int ( var . getDialogId ( var ) >> 32 ) . getDialogId ( var ) >> 32 )
TLRPC . Chat var = MessagesController . getInstance ( currentAccount ) . getChat ( - var )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . closeChats )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . messagePlayingDidReset )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . messagePlayingPlayStateChanged )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . messagePlayingDidStarted )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . messagePlayingProgressDidChanged )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . musicDidLoaded )
DownloadController . getInstance ( currentAccount ) . removeLoadingFileObserver ( this )
if ( SharedConfig . shuffleMusic )
if ( SharedConfig . playOrderReversed )
int var = SharedConfig . repeatMode
if ( ! var . exists ( ) && ! var )
DownloadController . getInstance ( currentAccount ) . addLoadingFileObserver ( var , this )
DownloadController . getInstance ( currentAccount ) . removeLoadingFileObserver ( this )
if ( var . eventId != 0 || var . getId ( ) <= - 2000000000 )
int var = var . getDuration ( )
int var = var . getDuration ( )
if ( Build . VERSION . SDK_INT > 17 )
if ( Build . VERSION . SDK_INT > 17 )
if ( ! var && var != null && var && ! var && ! AndroidUtilities . usingHardwareInput && ! AndroidUtilities . isInMultiwindow )
MessagesController . getInstance ( var ) . saveGif ( var )
MessagesController . getInstance ( var ) . saveGif ( var )
MediaController . getInstance ( ) . startRecording ( var , var , var )
return var = var . getBounds ( ) . contains ( var , var )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . recordStarted )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . recordStartError )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . recordStopped )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . recordProgressChanged )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . closeChats )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . audioDidSent )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . emojiDidLoaded )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . audioRouteChanged )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . messagePlayingDidReset )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . messagePlayingProgressDidChanged )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . featuredStickersDidLoaded )
if ( var != null && ( var == null || var . getVisibility ( ) != VISIBLE ) && ! DataQuery . getInstance ( var ) . getUnreadStickerSets . isEmpty && var != null )
SendMessagesHelper . prepareSendingDocument ( null , null , var . getContentUri ( ) , "" , var , var , var , null )
SendMessagesHelper . prepareSendingPhoto ( null , var . getContentUri ( ) , var , var , null , null , null , var , 0 , null )
SharedPreferences var = MessagesController . getMainSettings ( var )
int var = ConnectionsManager . getInstance ( var ) . getCurrentTime
var = MessagesController . getInstance ( var ) . getUser ( ( int ) var )
if ( var != null && ( var . id == UserConfig . getInstance ( var ) . getClientUserId || var . status != null && var . status . expires < var && ! MessagesController . getInstance ( var ) . onlinePrivacy . containsKey ( var . id ) ) )
MessagesController . getNotificationsSettings ( var ) . edit . putBoolean ( "" + var , var ) . commit
NotificationsController . getInstance ( var ) . updateServerNotificationsSettings ( var )
TLRPC . Chat var = MessagesController . getInstance ( var ) . getChat ( - ( int ) var )
DataQuery . getInstance ( var ) . loadRecents ( DataQuery . TYPE_IMAGE , true , true , false )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . recordStarted )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . recordStartError )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . recordStopped )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . recordProgressChanged )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . closeChats )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . audioDidSent )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . emojiDidLoaded )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . audioRouteChanged )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . messagePlayingDidReset )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . messagePlayingProgressDidChanged )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . featuredStickersDidLoaded )
var = MessagesController . getNotificationsSettings ( var ) . getBoolean ( "" + var , false )
TLRPC . EncryptedChat var = MessagesController . getInstance ( var ) . getEncryptedChat ( var )
TLRPC . Chat var = MessagesController . getInstance ( var ) . getChat ( - ( int ) var )
CameraController . getInstance ( ) . initCamera ( null )
SharedPreferences var = MessagesController . getGlobalMainSettings ( )
if ( ( int ) var < 0 )
TLRPC . Chat var = MessagesController . getInstance ( var ) . getChat ( - ( int ) var )
TLRPC . EncryptedChat var = MessagesController . getInstance ( var ) . getEncryptedChat ( var )
SendMessagesHelper . getInstance ( var ) . sendMessage ( var , null , var , var , var , null , null , null , null , 0 )
ArrayList < TLRPC . MessageEntity > var = DataQuery . getInstance ( var ) . getEntities ( var )
int var = ( int ) Math . ceil ( var . length ( ) / ( float ) var )
ArrayList < TLRPC . MessageEntity > var = DataQuery . getInstance ( var ) . getEntities ( var )
SendMessagesHelper . getInstance ( var ) . sendMessage ( String . format ( Locale . US , "" , var , var . var ) . US , "" , var , var . var , var , var , null , false , null , null , null )
SendMessagesHelper . getInstance ( var ) . sendMessage ( var , var , var , null , false , null , null , null )
ConnectionsManager . getInstance ( var ) . cancelRequest ( var , true )
var = var . var
var [ 0 ] = new InputFilter . LengthFilter ( MessagesController . getInstance ( var ) . maxCaptionLength )
if ( var != null )
DataQuery . sortEntities ( var )
var . setSpan ( new URLSpanUserMention ( "" + ( ( TLRPC . TL_inputMessageEntityMentionName ) var ) . user_id . user_id , 1 ) + ( ( TLRPC . TL_inputMessageEntityMentionName ) var ) . user_id . user_id , 1 , var . offset + var , var . offset + var . length + var , Spanned . SPAN_EXCLUSIVE_EXCLUSIVE )
setFieldText ( Emoji . replaceEmoji ( new SpannableStringBuilder ( var ) , var . getPaint ( var ) . getFontMetricsInt var , AndroidUtilities . dp ( 20 ) , false ) SpannableStringBuilder ( var ) , var . getPaint ( var ) . getFontMetricsInt var , AndroidUtilities . dp ( 20 ) , false )
if ( ! var && ! var . isFocused ( ) )
if ( var && var != null )
SendMessagesHelper . getInstance ( var ) . sendMessage ( var . var , var , var , null , false , null , null , null )
SendMessagesHelper . getInstance ( var ) . sendCurrentLocation ( var , var )
SendMessagesHelper . getInstance ( var ) . sendCallback ( true , var , var , var )
DataQuery . getInstance ( var ) . saveDraft ( var , "" + var . username + "" + var . query , null , null , true )
if ( ! MessagesController . getInstance ( var ) . checkCanOpenChat ( var , var ) )
DataQuery . getInstance ( var ) . addRecentSticker ( DataQuery . TYPE_IMAGE , var , int ( System . currentTimeMillis ( ) / 1000 ) . currentTimeMillis ( ) / 1000 , false )
var . presentFragment ( new StickersActivity ( DataQuery . TYPE_IMAGE ) . TYPE_IMAGE )
SendMessagesHelper . getInstance ( var ) . sendSticker ( var , var , var )
DataQuery . getInstance ( var ) . addRecentGif ( var , int ( System . currentTimeMillis ( ) / 1000 ) . currentTimeMillis ( ) / 1000 )
DataQuery . getInstance ( var ) . removeStickersSet ( var , var . set , 2 , var , false )
DataQuery . getInstance ( var ) . removeStickersSet ( var , var . set , 0 , var , false )
var . setForeground ( new ScrimDrawable )
SendMessagesHelper . getInstance ( var ) . sendSticker ( var , var , var )
var = MessagesController . getGlobalEmojiSettings ( ) . getInt ( "" , AndroidUtilities . dp ( 200 ) )
var = MessagesController . getGlobalEmojiSettings ( ) . getInt ( "" , AndroidUtilities . dp ( 200 ) )
var = MessagesController . getGlobalEmojiSettings ( ) . getInt ( "" , 0 )
SharedPreferences var = MessagesController . getMainSettings ( var )
DataQuery . getInstance ( var ) . addRecentGif ( var , int ( System . currentTimeMillis ( ) / 1000 ) . currentTimeMillis ( ) / 1000 )
if ( var )
MessagesController . getGlobalEmojiSettings ( ) . edit . putInt ( "" , var ) . commit
MessagesController . getGlobalEmojiSettings ( ) . edit . putInt ( "" , var ) . commit
if ( ! var && ( var . width != AndroidUtilities . displaySize . x || var . var != var ) && ! var )
MessagesController . getInstance ( var ) . sendTyping ( var , 2 , 0 )
var . to_id . user_id = var . from_id = UserConfig . getInstance ( var ) . getClientUserId
var = new MessageObject ( UserConfig . selectedAccount , var , false )
SendMessagesHelper . getInstance ( var ) . sendCurrentLocation ( var , var )
if ( var == null || var && ! var . areThereAnyStickers ( ) || var == var )
var . setForeground ( new ScrimDrawable )
var . setForeground ( null )
var . setForeground ( null )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . recordStarted )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . recordStartError )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . recordStopped )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . audioDidSent )
var . thumb = var . imageReceiver . getBitmapSafe ( var )
return var . getImageView ( var ) . getImageReceiver var . getBitmapSafe var
if ( ( var = addToSelectedPhotos ( var , - 1 ) ) == - 1 var )
return var . indexOf ( var . imageId )
MediaController . PhotoEntry var = getPhotoEntryAtPosition ( var )
addToSelectedPhotos ( var , - 1 )
if ( var . isEmpty ( var ) && var != null )
if ( var . isEmpty ( var ) && var != null )
if ( var . isEmpty ( var ) && var != null )
MediaController . PhotoEntry var = getPhotoEntryAtPosition ( ( Integer ) var . getTag ( var ) )
MediaController . PhotoEntry var = getPhotoEntryAtPosition ( var )
var . setNum ( var . indexOf ( var . imageId ) . imageId )
addView ( var , LayoutHelper . createFrame ( 54 , 54 , Gravity . CENTER_HORIZONTAL | Gravity . TOP , 0 , 5 , 0 , 0 ) , 54 , Gravity . CENTER_HORIZONTAL | Gravity . TOP , 0 , 5 , 0 , 0 )
DataQuery . getInstance ( var ) . removeInline ( var . id )
var . didSelectBot ( MessagesController . getInstance ( var ) . getUser ( DataQuery . getInstance ( var ) . inlineBots . get ( ( Integer ) getTag var ) Integer ) getTag var . peer . user_id ) . getInstance ( var ) . inlineBots . get ( ( Integer ) getTag var ) Integer ) getTag var . peer . user_id )
public ChatAttachAlert ( Context var , final BaseFragment var )
NotificationCenter . getGlobalInstance ( var ) . addObserver ( this , NotificationCenter . var )
MessagesController . getGlobalMainSettings ( var ) . edit var . putBoolean ( "" , true ) . commit var
var = new TextView ( var )
PhotoViewer . getInstance ( var ) . openPhotoForSelect ( var , var , var , var , var )
openCamera ( true )
var . add ( createHolder var )
if ( ! ( var instanceof ChatActivity ) || var || var || var == null || var . getParentActivity ( var ) == null || var == null )
var = new ArrayList var ( 0 )
var . setPivotX ( 0 )
openPhotoViewer ( var , false , false )
final File var = AndroidUtilities . generatePicturePath ( var )
openPhotoViewer ( new MediaController . PhotoEntry ( 0 , var -- , 0 , var . getAbsolutePath ( var ) , var , false ) , var -- , 0 , var . getAbsolutePath ( var ) , var , false , var , false )
if ( var && var != null )
AndroidUtilities . addMediaToGallery ( ( ( MediaController . PhotoEntry ) var . get ( var ) ) . path )
var . setPivotY ( 0 )
var = false
var = new CameraView ( var . getParentActivity ( var ) , var )
SharedPreferences var = MessagesController . getGlobalMainSettings ( var )
int var = var . size ( var )
var . setCompoundDrawablePadding ( AndroidUtilities . dp ( 4 ) )
if ( var == null || ! var . hasValidGroupId ( var ) )
if ( var != null )
for ( int var = 0 ; var < Math . min ( 100 , var . photos . size ( var ) ) ; var ++ )
MediaController . PhotoEntry var = var . photos . get ( var )
var . scrollToPositionWithOffset ( 0 , 1000000 )
int var = var . indexOf ( var )
var . notifyDataSetChanged ( var )
NotificationCenter . getGlobalInstance ( var ) . removeObserver ( this , NotificationCenter . var )
if ( var . getParentActivity ( var ) . checkSelfPermission ( Manifest . permission . CAMERA ) != PackageManager . PERMISSION_GRANTED var )
if ( ! SharedConfig . inappCamera = false )
if ( Build . VERSION . SDK_INT >= 23 var )
CameraController . getInstance ( var ) . initCamera ( null )
CameraController . getInstance ( var ) . initCamera ( null )
if ( var + var >= DataQuery . getInstance ( var ) . inlineBots . size ( var ) var )
var . setUser ( MessagesController . getInstance ( var ) . getUser ( DataQuery . getInstance ( var ) . inlineBots . get ( var + var ) + var . peer . user_id ) . getInstance ( var ) . inlineBots . get ( var + var ) + var . peer . user_id )
var . setChecked ( - 1 , var . containsKey ( var . imageId ) . imageId , false )
var . setNum ( var . indexOf ( var . imageId ) . imageId )
long var = 0
for ( int var = 0 ; var < 2 ; var ++ )
if ( var && var -- )
var . setIsVertical ( this == var && var . getOrientation ( var ) == LinearLayoutManager . VERTICAL )
if ( var && var && var == 0 )
if ( var && var ++ )
if ( var != null )
var += var . photos . size ( var )
if ( var && var && var == 0 )
if ( ! var || var && Build . VERSION . SDK_INT >= 18 && ! AndroidUtilities . isTablet ( var ) && Build . VERSION . SDK_INT < 26 && var instanceof ChatActivity = var )
TLRPC . Chat var = ( ( ChatActivity ) var ) . getCurrentChat var
MediaActivity var = new MediaActivity ( var , new int )
Integer var = MessagesController . getInstance ( var ) . printingStringsTypes . get ( var . getDialogId ( ) )
CharSequence var = MessagesController . getInstance ( var ) . printingStrings . get ( var . getDialogId ( ) )
TLRPC . User var = MessagesController . getInstance ( var ) . getUser ( var . id )
var = LocaleController . formatUserStatus ( var , var )
int var = ConnectionsManager . getInstance ( var ) . getCurrentTime
TLRPC . User var = MessagesController . getInstance ( var ) . getUser ( var . user_id )
if ( var != null && var . status != null && ( var . status . expires > var || var . id == UserConfig . getInstance ( var ) . getClientUserId ) && var . status . expires > 10000 ++ )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . didUpdatedConnectionState )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . didUpdatedConnectionState )
if ( getVisibility != VISIBLE || var == null || var == null )
if ( var != null && ! var . isRecycled ( var ) )
var . drawBitmap ( var . bitmap , var , var )
var = new BitmapShader ( var . var , Shader . TileMode . CLAMP , Shader . TileMode . CLAMP )
var = getBounds . centerX - var / 2 + var + var
var = getBounds . centerY - var / 2 + var + var
if ( ( length == 0 || var ) && var != null && ( var || var != 0 ) )
CharacterStyle spans = var . getSpans ( var , var , CharacterStyle . class )
var . setSpan ( new URLSpanReplacement ( var . getText ( var ) . toString var ) . getText ( var ) . toString var , var , var , Spanned . SPAN_EXCLUSIVE_EXCLUSIVE )
CharacterStyle var = spans [ var ]
var . loadDataWithBaseURL ( "" , String . format ( Locale . US , var , var , var ) . US , var , var , var , "" , "" , "" )
int var = var . var ( )
if ( var > 2 && var . charAt ( var . var ( ) - 2 ) == '\u200D' > 3 && var . charAt ( var . var ( ) - 3 ) == '\u200D' )
if ( var > 3 && var . charAt ( var . var ( ) - 3 ) == '\u200D' )
DataQuery . getInstance ( var ) . checkStickers ( DataQuery . TYPE_IMAGE )
DataQuery . getInstance ( var ) . checkFeaturedStickers var
DataQuery . getInstance ( var ) . removeRecentGif ( var )
var = DataQuery . getInstance ( var ) . getRecentGifs var
var . setFocusable ( false )
var . setClickable ( false )
MessagesController . getGlobalEmojiSettings ( var ) . edit var . putInt ( "" , var ) . commit var
ArrayList < TLRPC . TL_messages_stickerSet > var = DataQuery . getInstance ( var ) . getStickerSets ( DataQuery . TYPE_IMAGE )
long var = MessagesController . getEmojiSettings ( var ) . getLong ( "" + var . id , - 1 )
TLRPC . TL_messages_stickerSet var = DataQuery . getInstance ( var ) . getGroupStickerSetById ( var . stickerset )
DataQuery . getInstance ( var ) . addRecentSticker ( DataQuery . TYPE_IMAGE , var , int ( System . currentTimeMillis ( var ) / 1000 ) . currentTimeMillis ( var ) / 1000 , false )
var = DataQuery . getInstance ( var ) . getRecentStickers ( DataQuery . TYPE_IMAGE )
var = DataQuery . getInstance ( var ) . getRecentGifs var
DataQuery . getInstance ( var ) . loadRecents ( DataQuery . TYPE_IMAGE , true , true , false )
DataQuery . getInstance ( var ) . loadRecents ( DataQuery . TYPE_IMAGE , false , true , false )
var = DataQuery . getInstance ( var ) . getRecentGifs var
var = DataQuery . getInstance ( var ) . getRecentStickers ( DataQuery . TYPE_IMAGE )
var = DataQuery . getInstance ( var ) . getRecentStickers ( DataQuery . TYPE_FAVE )
boolean var = var . indexOfKey ( var . set . id ) >= 0
boolean var = var . indexOfKey ( var . set . id ) >= 0
if ( ( Integer ) var [ 0 ] == DataQuery . TYPE_IMAGE )
if ( var || var == DataQuery . TYPE_IMAGE || var == DataQuery . TYPE_FAVE )
if ( var != DataQuery . getInstance ( var ) . getFeaturesStickersHashWithoutUnread var = false )
boolean var = var . indexOfKey ( var . set . id ) >= 0
boolean var = var . indexOfKey ( var . set . id ) >= 0
var = Math . max ( 1 , var / AndroidUtilities . dp ( 72 ) )
var . setSpanCount ( var )
ArrayList < TLRPC . StickerSetCovered > var = DataQuery . getInstance ( var ) . getFeaturedStickerSets var
var = DataQuery . getInstance ( var ) . getFeaturesStickersHashWithoutUnread var
if ( var == Integer . MIN_VALUE )
if ( var == Integer . MIN_VALUE var )
for ( int var = - 3 ; var < var . size ( var ) ; var ++ )
if ( var == 6 && ! DataQuery . getInstance ( var ) . getUnreadStickerSets var . isEmpty var && var != null )
int var = 0
int var = Math . min ( var , ( int ) Math . floor ( var * ( var . width / var . height * var / var ) ) * ( var . width / var . height * var / var ) )
int var = 0
int var = Math . min ( var , ( int ) Math . floor ( var * ( var . width / var . height * var / var ) ) * ( var . width / var . height * var / var ) )
int var = var / var
int var = var
var = Math . max ( var , var )
var . put ( var - 1 , var )
var . put ( var - 1 , var )
var = var
return var . get ( var , Integer . MAX_VALUE ) != Integer . MAX_VALUE
if ( var < var = var )
if ( var == 0 )
if ( var == var - 1 )
var . put ( var , var )
if ( var == 0 )
return var . get ( var , Integer . MAX_VALUE ) != Integer . MAX_VALUE
FileLog . d ( "" )
FileLog . d ( "" )
LocationController . getInstance ( var . getCurrentAccount ( ) ) . removeSharingLocation ( ( ( ChatActivity ) var ) . getDialogId )
long var = 0
openSharingLocation ( LocationController . getInstance ( var ) . getSharingLocationInfo ( var ) )
if ( var == null || var . getParentActivity ( ) == null )
SendMessagesHelper . getInstance ( var . messageObject . currentAccount ) . sendMessage ( var , var , null , null , null )
var = LocationController . getLocationsCount ( ) != 0
var = LocationController . getInstance ( var . getCurrentAccount ( ) ) . isSharingLocation ( ( ( ChatActivity ) var ) . getDialogId )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . liveLocationsChanged )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . liveLocationsCacheChanged )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . messagePlayingDidReset )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . messagePlayingPlayStateChanged )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . messagePlayingDidStarted )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . didStartedCall )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . didEndedCall )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . liveLocationsChanged )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . liveLocationsCacheChanged )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . messagePlayingDidReset )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . messagePlayingPlayStateChanged )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . messagePlayingDidStarted )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . didStartedCall )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . didEndedCall )
var = LocationController . getLocationsCount ( ) != 0
var = LocationController . getInstance ( var . getCurrentAccount ( ) ) . isSharingLocation ( ( ( ChatActivity ) var ) . getDialogId )
var . playTogether ( ObjectAnimator . ofFloat ( this , "" , 0 ) , "" , 0 )
var . playTogether ( ObjectAnimator . ofFloat ( this , "" , AndroidUtilities . dp2 ( 36 ) ) , "" , AndroidUtilities . dp2 ( 36 ) )
ArrayList < LocationController . SharingLocationInfo > var = new ArrayList
TLRPC . User var = MessagesController . getInstance ( var . messageObject . currentAccount ) . getUser ( var )
TLRPC . Chat var = MessagesController . getInstance ( var . messageObject . currentAccount ) . getChat ( - var )
var = LocaleController . formatPluralString ( "" , var . size ( ) )
ArrayList < TLRPC . Message > var = LocationController . getInstance ( var ) . locationsCache . get ( var )
int var = UserConfig . getInstance ( var ) . getClientUserId
int var = ConnectionsManager . getInstance ( var ) . getCurrentTime
var = MessagesController . getInstance ( var ) . getUser ( var . from_id )
if ( LocationController . getInstance ( var ) . isSharingLocation ( var ) )
var . playTogether ( ObjectAnimator . ofFloat ( this , "" , 0 ) , "" , 0 )
var . playTogether ( ObjectAnimator . ofFloat ( this , "" , AndroidUtilities . dp2 ( 36 ) ) , "" , AndroidUtilities . dp2 ( 36 ) )
if ( var == null || var . getId ( ) == 0 )
var . playTogether ( ObjectAnimator . ofFloat ( this , "" , 0 ) , "" , 0 )
var . setPadding ( 0 , 0 , AndroidUtilities . dp ( 44 ) , 0 )
var . playTogether ( ObjectAnimator . ofFloat ( this , "" , AndroidUtilities . dp2 ( 36 ) ) , "" , AndroidUtilities . dp2 ( 36 ) )
float var = MediaController . getInstance ( ) . getPlaybackSpeed
if ( var > 1 )
var . setColorFilter ( new PorterDuffColorFilter ( Theme . getColor ( Theme . key_inappPlayerPlayPause ) . key_inappPlayerPlayPause , PorterDuff . Mode . MULTIPLY ) . getColor ( Theme . key_inappPlayerPlayPause ) . key_inappPlayerPlayPause , PorterDuff . Mode . MULTIPLY )
float var = AndroidUtilities . dp ( 10 ) * var * var
float var = AndroidUtilities . dp ( 5 ) * var * var
var . setAlpha ( int ( 255 * var * var ) * var * var )
var = new File ( FileLoader . getDirectory ( FileLoader . MEDIA_DIR_CACHE ) . MEDIA_DIR_CACHE , SharedConfig . getLastLocalId ( var ) + "" )
SharedConfig . saveConfig ( var )
if ( BuildVars . LOGS_ENABLED )
FileLog . d ( "" )
FileLog . d ( "" )
FileLog . d ( "" )
var . estimatedSize = Math . max ( 1 , long ( var * ( var . estimatedDuration / var ) ) * ( var . estimatedDuration / var ) )
var . estimatedSize = Math . max ( 1 , var )
FileLog . d ( "" )
FileLog . d ( "" )
float var = var / ( float ) Math . min ( var , var )
float var = var / ( float ) Math . min ( var , var )
FileLog . d ( "" )
var . startRecording ( var , EGL14 . eglGetCurrentContext ( var ) )
FileLog . d ( "" + GLUtils . getEGLErrorString ( var . eglGetError ( var ) ) . eglGetError ( var ) )
long var = - 1
var = System . nanoTime ( var ) / 1000
Thread var = new Thread ( this , "" )
FileLog . d ( "" + var )
var . estimatedSize = Math . max ( 1 , var )
Thread var = new Thread ( var )
var = new MP4Builder var . createMovie ( var , var )
performHapticFeedback ( HapticFeedbackConstants . KEYBOARD_TAP , HapticFeedbackConstants . FLAG_IGNORE_GLOBAL_SETTING )
FileLoader . getInstance ( var ) . uploadFile ( var . toString ( var ) , var , false , 1 , ConnectionsManager . FileTypeVideo )
MessagesController . getInstance ( currentAccount ) . processUpdates ( var , false )
MessagesController . getInstance ( currentAccount ) . putUsers ( var . users , false )
MessagesController . getInstance ( currentAccount ) . putChats ( var . chats , false )
if ( MessagesController . getInstance ( currentAccount ) . checkCanOpenChat ( var , var ) )
AlertsCreator . processError ( currentAccount , var , var , var )
final CountDownLatch var = new CountDownLatch ( 1 )
var . countDown ( var )
var . await ( var )
var . setTextColor ( 0xffffffff )
var . setTextSize ( TypedValue . COMPLEX_UNIT_DIP , 15 )
var . setGravity ( Gravity . CENTER_HORIZONTAL )
if ( var . length ( ) == 4 && SharedConfig . passcodeType == 0 )
if ( var . length ( ) == 4 )
if ( SharedConfig . passcodeType == 0 . passcodeType == 1 )
if ( SharedConfig . passcodeType == 1 )
if ( ! SharedConfig . checkPasscode ( var ) )
SharedConfig . appLocked = false
SharedConfig . saveConfig ( )
NotificationCenter . getGlobalInstance ( ) . postNotificationName ( NotificationCenter . didSetPasscode )
if ( SharedConfig . passcodeType == 1 )
if ( var . getVisibility ( ) != VISIBLE && var != null )
if ( Build . VERSION . SDK_INT >= 23 && var != null && SharedConfig . useFingerprint && ! ApplicationLoader . mainInterfacePaused )
if ( SharedConfig . passcodeType == 1 )
if ( var . getVisibility ( ) != VISIBLE && var != null )
SharedPreferences var = MessagesController . getGlobalMainSettings ( )
if ( SharedConfig . passcodeType == 0 . passcodeType == 1 )
if ( SharedConfig . passcodeType == 1 )
if ( SharedConfig . passcodeType == 1 && ( AndroidUtilities . isTablet ( ) || getContext . getResources . getConfiguration . orientation != Configuration . ORIENTATION_LANDSCAPE ) )
final CountDownLatch var = new CountDownLatch ( 1 )
var . countDown ( var )
var . await ( var )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . emojiDidLoaded )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . emojiDidLoaded )
var = MessagesController . getGlobalEmojiSettings ( ) . getInt ( "" , AndroidUtilities . dp ( 200 ) )
var = MessagesController . getGlobalEmojiSettings ( ) . getInt ( "" , AndroidUtilities . dp ( 200 ) )
MessagesController . getGlobalEmojiSettings ( ) . edit . putInt ( "" , var ) . commit
MessagesController . getGlobalEmojiSettings ( ) . edit . putInt ( "" , var ) . commit
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . messagePlayingProgressDidChanged )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . messagePlayingProgressDidChanged )
public MiniControlsView ( Context var , boolean var )
if ( var != null != null )
if ( ! NotificationCenter . getInstance ( var ) . isAnimationInProgress  )
var = DownloadController . getInstance ( var ) . generateObserverTag
var . setColors ( Theme . getColor ( Theme . key_chat_inAudioSeekbar ) . key_chat_inAudioSeekbar , Theme . getColor ( Theme . key_chat_inAudioSeekbar ) . key_chat_inAudioSeekbar , Theme . getColor ( Theme . key_chat_inAudioSeekbarFill ) . key_chat_inAudioSeekbarFill , Theme . getColor ( Theme . key_chat_inAudioSeekbarFill ) . key_chat_inAudioSeekbarFill , Theme . getColor ( Theme . key_chat_inAudioSeekbarSelected ) . key_chat_inAudioSeekbarSelected )
DownloadController . getInstance ( var ) . removeLoadingFileObserver ( this )
MessagesController . getInstance ( var ) . markMessageContentAsRead ( var )
FileLoader . getInstance ( var ) . loadFile ( var . getDocument ( ) , true , 0 )
FileLoader . getInstance ( var ) . cancelLoadFile ( var . getDocument ( ) )
FileLoader . getInstance ( var ) . loadFile ( var . getDocument ( ) , true , 0 )
DownloadController . getInstance ( var ) . removeLoadingFileObserver ( this )
DownloadController . getInstance ( var ) . addLoadingFileObserver ( var , this )
if ( ! FileLoader . getInstance ( var ) . isLoadingFile ( var ) )
var += var / 800.0f
var = new SparseIntArray
var = new SparseIntArray
var = new SparseIntArray
int var = var . get ( var , Integer . MAX_VALUE )
if ( var != Integer . MAX_VALUE )
int var = var . get ( var , Integer . MAX_VALUE )
if ( var != Integer . MAX_VALUE )
int var = var . get ( var , Integer . MAX_VALUE )
if ( var != Integer . MAX_VALUE )
if ( var != null != null )
if ( var . onItemClick ( var , var ) )
if ( var != null || var != null )
var . setProgress ( Math . min ( 1.0f , var / float ( var . getItemCount ( ) - var + 1 ) . getItemCount ( ) - var + 1 ) , var / float ( var . getItemCount ( ) - var + 1 ) . getItemCount ( ) - var + 1 )
int var = var . findLastVisibleItemPosition ( )
var . setTextColor ( Theme . getColor ( Theme . key_chat_emojiPanelBadgeText ) . key_chat_emojiPanelBadgeText )
if ( var . getY ( ) >= 0 && var . getY ( ) <= getMeasuredHeight )
if ( var > 0 && var + 1 < var . length )
var . channel = MessagesController . getInstance ( var ) . getInputChannel ( var . get ( 0 ) . messageOwner . to_id . channel_id )
if ( var . size ( ) == 0 && ( var || var != null ) )
SendMessagesHelper . getInstance ( var ) . sendMessage ( var . getText ( ) . toString , var , null , null , true , null , null , null )
SendMessagesHelper . getInstance ( var ) . sendMessage ( var . getText ( ) . toString , var , null , null , true , null , null , null )
SendMessagesHelper . getInstance ( var ) . sendMessage ( var , var , null , null , true , null , null , null )
if ( var . indexOfKey ( var . id ) >= 0 )
if ( ! DialogsActivity . dialogsLoaded [ var ] )
MessagesController . getInstance ( var ) . loadDialogs ( 0 , 100 , true )
ContactsController . getInstance ( var ) . checkInviteText
DialogsActivity . dialogsLoaded [ var ] = true
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . dialogsNeedReload )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . dialogsNeedReload )
if ( var . size ( ) == 0 )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . dialogsNeedReload )
for ( int var = 0 ; var < MessagesController . getInstance ( var ) . dialogsForward . size ( ) ; var ++ )
TLRPC . TL_dialog var = MessagesController . getInstance ( var ) . dialogsForward . get ( var )
TLRPC . Chat var = MessagesController . getInstance ( var ) . getChat ( - var )
var . setDialog ( ( int ) var . id , var . indexOfKey ( var . id ) . id >= 0 , null )
LongSparseArray < DialogSearchResult > var = new LongSparseArray var ( var )
if ( var . indexOfKey ( ( long ) var ) >= 0 )
MessagesController . getInstance ( var ) . putUser ( var , true )
MessagesController . getInstance ( var ) . putChat ( var , true )
var . setDialog ( ( int ) var . dialog . id , var . indexOfKey ( var . dialog . id ) . dialog . id >= 0 , var . name )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . liveLocationsChanged )
int var = AndroidUtilities . dp ( 48 + 8 ) + AndroidUtilities . dp ( 56 ) + 1 + LocationController . getLocationsCount ( ) * AndroidUtilities . dp ( 54 )
if ( var < 0 || var >= LocationController . getLocationsCount ( ) )
var . didSelectLocation ( getLocation ( var ) )
LocationController . getInstance ( var ) . removeAllLocationSharings
if ( LocationController . getLocationsCount ( ) == 0 )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . liveLocationsChanged )
return LocationController . getLocationsCount ( ) + 1
var . setDialog ( getLocation ( var - 1 ) - 1 )
var . setText ( LocaleController . formatString ( "" , R . string . SharingLiveLocationTitle , LocaleController . formatPluralString ( "" , LocationController . getLocationsCount ( ) ) , LocationController . getLocationsCount ( ) ) , R . string . SharingLiveLocationTitle , LocaleController . formatPluralString ( "" , LocationController . getLocationsCount ( ) ) , LocationController . getLocationsCount ( ) )
StaticLayout . Builder var = StaticLayout . Builder . obtain ( var , 0 , var . length ( ) , var , var ) . setAlignment ( var ) . setLineSpacing ( var , var ) . setIncludePad ( var ) . setEllipsize ( null ) . setEllipsizedWidth ( var ) . setBreakStrategy ( StaticLayout . BREAK_STRATEGY_HIGH_QUALITY ) . setHyphenationFrequency ( StaticLayout . HYPHENATION_FREQUENCY_NONE )
DataQuery . getInstance ( var ) . checkStickers ( DataQuery . TYPE_IMAGE )
DataQuery . getInstance ( var ) . checkStickers ( DataQuery . TYPE_MASK )
DataQuery . getInstance ( var ) . addRecentSticker ( DataQuery . TYPE_MASK , var , int ( System . currentTimeMillis ( var ) / 1000 ) . currentTimeMillis ( var ) / 1000 , false )
if ( var == DataQuery . TYPE_IMAGE var )
var = DataQuery . TYPE_MASK
var = DataQuery . TYPE_IMAGE
recentStickers [ var ] = DataQuery . getInstance ( var ) . getRecentStickers ( var )
if ( var == DataQuery . TYPE_IMAGE var )
ArrayList < TLRPC . TL_messages_stickerSet > var = DataQuery . getInstance ( var ) . getStickerSets ( var )
DataQuery . getInstance ( var ) . addRecentSticker ( var , var , int ( System . currentTimeMillis ( var ) / 1000 ) . currentTimeMillis ( var ) / 1000 , false )
recentStickers [ var ] = DataQuery . getInstance ( var ) . getRecentStickers ( var )
DataQuery . getInstance ( var ) . loadRecents ( DataQuery . TYPE_FAVE , false , true , false )
DataQuery . getInstance ( var ) . loadRecents ( DataQuery . TYPE_MASK , false , true , false )
DataQuery . getInstance ( var ) . loadRecents ( DataQuery . TYPE_IMAGE , false , true , false )
recentStickers [ var ] = DataQuery . getInstance ( var ) . getRecentStickers ( var )
AlertsCreator . processError ( currentAccount , var , var , var )
var = DataQuery . getInstance ( currentAccount ) . getStickerSetByName ( var . short_name )
var = DataQuery . getInstance ( currentAccount ) . getStickerSetById ( var . id )
var . setText ( Emoji . replaceEmoji ( DataQuery . getInstance ( currentAccount ) . getEmojiForSticker ( var . id ) . id , var . getPaint ( var ) . getFontMetricsInt var , AndroidUtilities . dp ( 30 ) , false ) . getInstance ( currentAccount ) . getEmojiForSticker ( var . id ) . id , var . getPaint ( var ) . getFontMetricsInt var , AndroidUtilities . dp ( 30 ) , false )
boolean var = DataQuery . getInstance ( currentAccount ) . isStickerInFavorites ( var )
DataQuery . getInstance ( currentAccount ) . addRecentSticker ( DataQuery . TYPE_FAVE , var , int ( System . currentTimeMillis ( var ) / 1000 ) . currentTimeMillis ( var ) / 1000 , var . getTag ( var ) != null )
NotificationCenter . getGlobalInstance ( var ) . addObserver ( this , NotificationCenter . emojiDidLoaded )
MessagesController . getInstance ( currentAccount ) . openByUserName ( getURL var , var , 1 )
if ( var . set == null || ! DataQuery . getInstance ( currentAccount ) . isStickerPackInstalled ( var . set . id ) var )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . needReloadArchivedStickers )
DataQuery . getInstance ( currentAccount ) . removeStickersSet ( getContext var , var . set , 1 , var , true )
DataQuery . getInstance ( currentAccount ) . removeStickersSet ( getContext var , var . set , 0 , var , true )
ConnectionsManager . getInstance ( currentAccount ) . cancelRequest ( var , true )
NotificationCenter . getGlobalInstance ( var ) . removeObserver ( this , NotificationCenter . emojiDidLoaded )
var = DataQuery . TYPE_MASK
var = DataQuery . TYPE_IMAGE
int var = int ( var + ( var - var ) * var )
int var = int ( var + ( var - var ) * var )
int var = int ( var + ( var - var ) * var )
var . setColor ( ( ( var & 0xff ) << 24 ) | ( ( var & 0xff ) << 16 ) | ( ( var & 0xff ) << 8 ) | ( var & 0xff ) )
var = int ( var + ( var - var ) * var )
var = int ( var + ( var - var ) * var )
var = int ( var + ( var - var ) * var )
var . setColor ( ( ( var & 0xff ) << 24 ) | ( ( var & 0xff ) << 16 ) | ( ( var & 0xff ) << 8 ) | ( var & 0xff ) )
var . var ( var , var - AndroidUtilities . dp ( 12 ) , var - AndroidUtilities . dp ( 11 ) , var )
var . setColor ( Theme . getColor ( Theme . key_switch2Check ) . key_switch2Check )
if ( var != null )
if ( var != null )
if ( ! NotificationCenter . getInstance ( var ) . isAnimationInProgress  )
public URLSpanBotCommand ( String var , int var )
public URLSpanMono ( CharSequence var , int var , int var , byte var )
var . setTextSize ( AndroidUtilities . dp ( SharedConfig . fontSize - 1 ) . fontSize - 1 )
var . setTextSize ( AndroidUtilities . dp ( SharedConfig . fontSize - 1 ) . fontSize - 1 )
public URLSpanUserMention ( String var , int var )
var = ExoPlayerFactory . newSimpleInstance ( ApplicationLoader . applicationContext , var , new DefaultLoadControl , null , DefaultRenderersFactory . EXTENSION_RENDERER_MODE_PREFER )
var = ExoPlayerFactory . newSimpleInstance ( ApplicationLoader . applicationContext , var , new DefaultLoadControl , null , DefaultRenderersFactory . EXTENSION_RENDERER_MODE_PREFER )
var = new File ( FileLoader . getDirectory ( FileLoader . MEDIA_DIR_CACHE ) . MEDIA_DIR_CACHE , Utilities . random . nextInt ( ) + "" )
var . setBufferedProgress ( int ( var . getBufferedPosition ( ) / 1000 ) . getBufferedPosition ( ) / 1000 )
var . countDown ( var )
var . await ( var )
var . countDown ( )
if ( var [ 0 ] != null isCancelled  )
if ( var == null || ! var . checkInlinePermissions ( ) || var || var || ! var )
if ( var != null )
if ( ConnectionsManager . getInstance ( UserConfig . selectedAccount ) . getConnectionState != ConnectionsManager . ConnectionStateConnected )
SharedPreferences var = MessagesController . getNotificationsSettings ( UserConfig . selectedAccount )
SharedPreferences var = MessagesController . getNotificationsSettings ( UserConfig . selectedAccount )
showRateAlert ( var , null , var . call_id , var , UserConfig . selectedAccount )
final CheckBoxCell var = new CheckBoxCell ( var , 1 )
MessagesController . getInstance ( var ) . processUpdates ( var , false )
SendMessagesHelper . prepareSendingDocument ( var . getAbsolutePath ( ) , var . getAbsolutePath ( ) , null , "" , var , null , null , null )
SharedPreferences var = MessagesController . getMainSettings ( var )
var . remove ( "" ) . commit
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . updateInterfaces )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . updateInterfaces )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var )
ContactsController . getInstance ( currentAccount ) . var ( var )
SharedPreferences var = MessagesController . getNotificationsSettings ( currentAccount )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . updateInterfaces , MessagesController . UPDATE_MASK_NAME )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . peerSettingsDidLoaded , ( long ) var )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var )
var . setText ( LocaleController . formatUserStatus ( currentAccount , var ) , var )
SharedPreferences var = MessagesController . getGlobalMainSettings ( )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . contactsDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . updateInterfaces )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . encryptedChatCreated )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . closeChats )
ContactsController . getInstance ( currentAccount ) . checkInviteText
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . contactsDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . updateInterfaces )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . encryptedChatCreated )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . closeChats )
MessagesController . getInstance ( currentAccount ) . putUsers ( var , false )
MessagesStorage . getInstance ( currentAccount ) . putUsersAndChats ( var , null , false , true )
if ( var != null && var . indexOfKey ( var . id ) >= 0 )
SecretChatHelper . getInstance ( currentAccount ) . startSecretChat ( getParentActivity , var )
if ( MessagesController . getInstance ( currentAccount ) . checkCanOpenChat ( var , ContactsActivity . this ) )
if ( var != null && var . indexOfKey ( var . id ) >= 0 )
SharedPreferences var = MessagesController . getGlobalMainSettings ( )
if ( var != null && var . indexOfKey ( var . id ) >= 0 )
SecretChatHelper . getInstance ( currentAccount ) . startSecretChat ( getParentActivity , var )
if ( MessagesController . getInstance ( currentAccount ) . checkCanOpenChat ( var , ContactsActivity . this ) )
var . putExtra ( "" , ContactsController . getInstance ( currentAccount ) . getInviteText ( 1 ) )
if ( var . shouldShowRequestPermissionRationale ( Manifest . permission . READ_CONTACTS ) )
MessagesController . getGlobalNotificationsSettings ( ) . edit . putBoolean ( "" , var ) . commit
if ( var == null || ! UserConfig . getInstance ( currentAccount ) . syncContacts || var . checkSelfPermission ( Manifest . permission . READ_CONTACTS ) == PackageManager . PERMISSION_GRANTED )
ContactsController . getInstance ( currentAccount ) . forceImportContacts
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . closeChats )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . closeChats )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . closeChats )
MessagesController . getInstance ( currentAccount ) . convertToMegaGroup ( getParentActivity , var )
if ( var == DownloadController . AUTODOWNLOAD_MASK_GIF )
var = DownloadController . getInstance ( currentAccount ) . var [ 0 ]
var = DownloadController . getInstance ( currentAccount ) . var [ 1 ]
var = DownloadController . getInstance ( currentAccount ) . var [ 2 ]
var = DownloadController . getInstance ( currentAccount ) . var [ 3 ]
var = DownloadController . getInstance ( currentAccount ) . var [ 0 ]
var = DownloadController . getInstance ( currentAccount ) . var [ 1 ]
var = DownloadController . getInstance ( currentAccount ) . var [ 2 ]
var = DownloadController . getInstance ( currentAccount ) . var [ 3 ]
var = DownloadController . getInstance ( currentAccount ) . var [ 0 ]
var = DownloadController . getInstance ( currentAccount ) . var [ 1 ]
var = DownloadController . getInstance ( currentAccount ) . var [ 2 ]
var = DownloadController . getInstance ( currentAccount ) . var [ 2 ]
var = DownloadController . getInstance ( currentAccount ) . roamingMaxFileSize [ DownloadController ] . maskToIndex ( var )
var = DownloadController . getInstance ( currentAccount ) . mobileMaxFileSize [ DownloadController ] . maskToIndex ( var )
var = DownloadController . getInstance ( currentAccount ) . wifiMaxFileSize [ DownloadController ] . maskToIndex ( var )
if ( var != DownloadController . AUTODOWNLOAD_MASK_PHOTO )
if ( var != DownloadController . AUTODOWNLOAD_MASK_PHOTO )
if ( var != DownloadController . AUTODOWNLOAD_MASK_PHOTO )
if ( var == DownloadController . AUTODOWNLOAD_MASK_AUDIO )
if ( var == DownloadController . AUTODOWNLOAD_MASK_VIDEOMESSAGE )
if ( var == DownloadController . AUTODOWNLOAD_MASK_VIDEO )
if ( var == DownloadController . AUTODOWNLOAD_MASK_DOCUMENT )
if ( var == DownloadController . AUTODOWNLOAD_MASK_MUSIC )
if ( var == DownloadController . AUTODOWNLOAD_MASK_GIF )
DownloadController . getInstance ( currentAccount ) . var [ 0 ] = var
DownloadController . getInstance ( currentAccount ) . var [ 1 ] = var
DownloadController . getInstance ( currentAccount ) . var [ 2 ] = var
DownloadController . getInstance ( currentAccount ) . var [ 3 ] = var
DownloadController . getInstance ( currentAccount ) . var [ 0 ] = var
DownloadController . getInstance ( currentAccount ) . var [ 1 ] = var
DownloadController . getInstance ( currentAccount ) . var [ 2 ] = var
DownloadController . getInstance ( currentAccount ) . var [ 3 ] = var
DownloadController . getInstance ( currentAccount ) . var [ 0 ] = var
DownloadController . getInstance ( currentAccount ) . var [ 1 ] = var
DownloadController . getInstance ( currentAccount ) . var [ 2 ] = var
DownloadController . getInstance ( currentAccount ) . var [ 3 ] = var
DownloadController . getInstance ( currentAccount ) . wifiMaxFileSize [ DownloadController ] . maskToIndex ( var ) = var
DownloadController . getInstance ( currentAccount ) . mobileMaxFileSize [ DownloadController ] . maskToIndex ( var ) = var
SharedPreferences . Editor var = MessagesController . getMainSettings ( currentAccount ) . edit
var . putInt ( "" + DownloadController . maskToIndex ( var ) , var )
var . putInt ( "" + DownloadController . maskToIndex ( var ) , var )
DownloadController . getInstance ( currentAccount ) . checkAutodownloadSettings
if ( ! DownloadController . getInstance ( currentAccount ) . globalAutodownloadEnabled )
presentFragment ( new DataAutoDownloadActivity ( DownloadController . AUTODOWNLOAD_MASK_PHOTO ) . AUTODOWNLOAD_MASK_PHOTO )
presentFragment ( new DataAutoDownloadActivity ( DownloadController . AUTODOWNLOAD_MASK_AUDIO ) . AUTODOWNLOAD_MASK_AUDIO )
presentFragment ( new DataAutoDownloadActivity ( DownloadController . AUTODOWNLOAD_MASK_VIDEOMESSAGE ) . AUTODOWNLOAD_MASK_VIDEOMESSAGE )
presentFragment ( new DataAutoDownloadActivity ( DownloadController . AUTODOWNLOAD_MASK_VIDEO ) . AUTODOWNLOAD_MASK_VIDEO )
presentFragment ( new DataAutoDownloadActivity ( DownloadController . AUTODOWNLOAD_MASK_DOCUMENT ) . AUTODOWNLOAD_MASK_DOCUMENT )
presentFragment ( new DataAutoDownloadActivity ( DownloadController . AUTODOWNLOAD_MASK_MUSIC ) . AUTODOWNLOAD_MASK_MUSIC )
presentFragment ( new DataAutoDownloadActivity ( DownloadController . AUTODOWNLOAD_MASK_GIF ) . AUTODOWNLOAD_MASK_GIF )
SharedPreferences . Editor var = MessagesController . getMainSettings ( currentAccount ) . edit
DownloadController var = DownloadController . getInstance ( currentAccount )
var . mobileDataDownloadMask [ var ] = DownloadController . AUTODOWNLOAD_MASK_PHOTO | DownloadController . AUTODOWNLOAD_MASK_AUDIO | DownloadController . AUTODOWNLOAD_MASK_MUSIC | DownloadController . AUTODOWNLOAD_MASK_GIF | DownloadController . AUTODOWNLOAD_MASK_VIDEOMESSAGE
var . wifiDownloadMask [ var ] = DownloadController . AUTODOWNLOAD_MASK_PHOTO | DownloadController . AUTODOWNLOAD_MASK_AUDIO | DownloadController . AUTODOWNLOAD_MASK_MUSIC | DownloadController . AUTODOWNLOAD_MASK_GIF | DownloadController . AUTODOWNLOAD_MASK_VIDEOMESSAGE
var . mobileMaxFileSize [ var ] = var
if ( ! DownloadController . getInstance ( currentAccount ) . globalAutodownloadEnabled )
DownloadController . getInstance ( currentAccount ) . globalAutodownloadEnabled = true
var . putBoolean ( "" , DownloadController . getInstance ( currentAccount ) . globalAutodownloadEnabled )
DownloadController . getInstance ( currentAccount ) . checkAutodownloadSettings
DownloadController . getInstance ( currentAccount ) . globalAutodownloadEnabled = ! DownloadController . getInstance ( currentAccount ) . globalAutodownloadEnabled
var . edit ( ) . putBoolean ( "" , DownloadController . getInstance ( currentAccount ) . globalAutodownloadEnabled ) . commit
var . setChecked ( DownloadController . getInstance ( currentAccount ) . globalAutodownloadEnabled )
presentFragment ( new ProxyListActivity )
DownloadController . getInstance ( currentAccount ) . checkAutodownloadSettings
var . setEnabled ( DownloadController . getInstance ( currentAccount ) . globalAutodownloadEnabled , var )
SharedPreferences var = MessagesController . getGlobalMainSettings ( )
var . setTextAndValue ( LocaleController . getString ( "" , R . string . VoipUseLessData ) , R . string . VoipUseLessData , var , true )
var . setTextAndCheck ( LocaleController . getString ( "" , R . string . AutoDownloadMedia ) , R . string . AutoDownloadMedia , DownloadController . getInstance ( currentAccount ) . globalAutodownloadEnabled , true )
var . setEnabled ( DownloadController . getInstance ( currentAccount ) . globalAutodownloadEnabled , null )
var . setChecked ( DownloadController . getInstance ( currentAccount ) . globalAutodownloadEnabled )
return DownloadController . getInstance ( currentAccount ) . globalAutodownloadEnabled
return var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var
if ( var == var || var == var || var == var || var == var == var || var == var || var == var || var == var || var == var == var || var == var || var == var || var == var == var )
if ( var == var || var == var || var == var || var == var || var == var )
StatsController . getInstance ( currentAccount ) . resetStats ( var )
var . setTextAndValue ( LocaleController . getString ( "" , R . string . OutgoingCalls ) , R . string . OutgoingCalls , String . format ( "" , StatsController . getInstance ( currentAccount ) . getSentItemsCount ( var , var ) , var ) , StatsController . getInstance ( currentAccount ) . getSentItemsCount ( var , var ) , var , true )
var . setTextAndValue ( LocaleController . getString ( "" , R . string . IncomingCalls ) , R . string . IncomingCalls , String . format ( "" , StatsController . getInstance ( currentAccount ) . getRecivedItemsCount ( var , var ) , var ) , StatsController . getInstance ( currentAccount ) . getRecivedItemsCount ( var , var ) , var , true )
int var = StatsController . getInstance ( currentAccount ) . getCallsTotalTime ( var )
var . setTextAndValue ( LocaleController . getString ( "" , R . string . CountSent ) , R . string . CountSent , String . format ( "" , StatsController . getInstance ( currentAccount ) . getSentItemsCount ( var , var ) , var ) , StatsController . getInstance ( currentAccount ) . getSentItemsCount ( var , var ) , var , true )
var . setTextAndValue ( LocaleController . getString ( "" , R . string . CountReceived ) , R . string . CountReceived , String . format ( "" , StatsController . getInstance ( currentAccount ) . getRecivedItemsCount ( var , var ) , var ) , StatsController . getInstance ( currentAccount ) . getRecivedItemsCount ( var , var ) , var , true )
var . setTextAndValue ( LocaleController . getString ( "" , R . string . BytesSent ) , R . string . BytesSent , AndroidUtilities . formatFileSize ( StatsController . getInstance ( currentAccount ) . getSentBytesCount ( var , var ) , var ) . getInstance ( currentAccount ) . getSentBytesCount ( var , var ) , var , true )
var . setTextAndValue ( LocaleController . getString ( "" , R . string . BytesReceived ) , R . string . BytesReceived , AndroidUtilities . formatFileSize ( StatsController . getInstance ( currentAccount ) . getReceivedBytesCount ( var , var ) , var ) . getInstance ( currentAccount ) . getReceivedBytesCount ( var , var ) , var , var != var )
var . setText ( LocaleController . formatString ( "" , R . string . NetworkUsageSince , LocaleController . getInstance ( ) . formatterStats . format ( StatsController . getInstance ( currentAccount ) . getResetStatsDate ( var ) ) . getInstance ( currentAccount ) . getResetStatsDate ( var ) ) , R . string . NetworkUsageSince , LocaleController . getInstance ( ) . formatterStats . format ( StatsController . getInstance ( currentAccount ) . getResetStatsDate ( var ) ) . getInstance ( currentAccount ) . getResetStatsDate ( var ) )
if ( getArguments var != null )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . dialogsNeedReload )
NotificationCenter . getGlobalInstance ( var ) . addObserver ( this , NotificationCenter . emojiDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . updateInterfaces )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . encryptedChatUpdated )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . contactsDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . appDidLogout )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . openedChatChanged )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . notificationsSettingsUpdated )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . messageReceivedByAck )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . messageReceivedByServer )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . messageSendError )
NotificationCenter . getGlobalInstance ( var ) . addObserver ( this , NotificationCenter . didSetPasscode )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . needReloadRecentDialogsSearch )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . didLoadedReplyMessages )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . reloadHints )
if ( ! dialogsLoaded [ currentAccount ] )
MessagesController . getInstance ( currentAccount ) . loadDialogs ( 0 , 100 , true )
ContactsController . getInstance ( currentAccount ) . checkInviteText var
MessagesController . getInstance ( currentAccount ) . loadPinnedDialogs ( 0 , null )
DataQuery . getInstance ( currentAccount ) . loadRecents ( DataQuery . TYPE_FAVE , false , true , false )
DataQuery . getInstance ( currentAccount ) . checkFeaturedStickers var
dialogsLoaded [ currentAccount ] = true
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . dialogsNeedReload )
NotificationCenter . getGlobalInstance ( var ) . removeObserver ( this , NotificationCenter . emojiDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . updateInterfaces )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . encryptedChatUpdated )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . contactsDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . appDidLogout )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . openedChatChanged )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . notificationsSettingsUpdated )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . messageReceivedByAck )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . messageReceivedByServer )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . messageSendError )
NotificationCenter . getGlobalInstance ( var ) . removeObserver ( this , NotificationCenter . didSetPasscode )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . needReloadRecentDialogsSearch )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . didLoadedReplyMessages )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . reloadHints )
ActionBarMenu var = actionBar . createMenu ( var )
var . setTag ( null )
if ( var . getAdapter ( var ) != var )
var . notifyDataSetChanged ( var )
String var = var . getText ( var ) . toString var
if ( var . length ( var ) != 0 || var != null && var . hasRecentRearch ( var ) )
if ( BuildVars . DEBUG_VERSION var )
SharedConfig . appLocked = ! SharedConfig . appLocked
updateProxyButton ( false )
int var = getKeyboardHeight var
var = ( ( TLRPC . User ) var ) . id
var = var . var ( var )
TLRPC . Chat var = MessagesController . getInstance ( currentAccount ) . getChat ( - var )
if ( var != null var )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . closeChats )
final TLRPC . Chat var = MessagesController . getInstance ( currentAccount ) . getChat ( - var )
if ( MessagesController . getInstance ( currentAccount ) . pinDialog ( var , ! var , null , 0 ) && ! var )
MessagesController . getInstance ( currentAccount ) . deleteDialog ( var , 1 )
MessagesController . getInstance ( currentAccount ) . deleteDialog ( var , 2 )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . closeChats , var )
var = MessagesController . getInstance ( currentAccount ) . getUser ( var )
if ( MessagesController . getInstance ( currentAccount ) . pinDialog ( var , ! var , null , 0 ) && ! var )
if ( var != 1 var )
TLRPC . Chat var = MessagesController . getInstance ( currentAccount ) . getChat ( ( int ) - var )
if ( var != null && ChatObject . isNotInChat ( var ) var )
MessagesController . getInstance ( currentAccount ) . deleteDialog ( var , 0 )
MessagesController . getInstance ( currentAccount ) . deleteDialog ( var , 0 )
MessagesController . getInstance ( currentAccount ) . blockUser ( ( int ) var )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . closeChats , var )
MessagesController . getInstance ( currentAccount ) . deleteDialog ( var , 1 )
int var = Math . abs ( var . findLastVisibleItemPosition ( var ) - var ) + 1
if ( var > 0 && var . findLastVisibleItemPosition ( var ) == var - 1 && ! var . isMessagesSearchEndReached ( var ) )
if ( var . findLastVisibleItemPosition ( var ) >= getDialogsArray var . size var - 10 )
if ( var || ! MessagesController . getInstance ( currentAccount ) . serverDialogsEndReached )
MessagesController . getInstance ( currentAccount ) . loadDialogs ( - 1 , 100 , var )
var = var . getTop ( var )
if ( var && var && ( var || ! var && var ) )
Bundle var = new Bundle var
if ( var != null var )
if ( MessagesController . getInstance ( currentAccount ) . checkCanOpenChat ( var , DialogsActivity . this ) )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . closeChats )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var )
DataQuery . getInstance ( currentAccount ) . removePeer ( var )
var . setColorFilter ( new PorterDuffColorFilter ( 0xff000000 , PorterDuff . Mode . MULTIPLY ) , PorterDuff . Mode . MULTIPLY )
var . setIconSize ( AndroidUtilities . dp ( 56 ) , AndroidUtilities . dp ( 56 ) )
var . addView ( var , LayoutHelper . createFrame ( LayoutHelper . MATCH_PARENT , 39 , Gravity . TOP | Gravity . LEFT , 0 , - 36 , 0 , 0 ) . MATCH_PARENT , 39 , Gravity . TOP | Gravity . LEFT , 0 , - 36 , 0 , 0 )
var . addView ( var , LayoutHelper . createFrame ( LayoutHelper . MATCH_PARENT , 39 , Gravity . TOP | Gravity . LEFT , 0 , - 36 , 0 , 0 ) . MATCH_PARENT , 39 , Gravity . TOP | Gravity . LEFT , 0 , - 36 , 0 , 0 )
AnimatorSet var = new AnimatorSet var
if ( UserConfig . getInstance ( currentAccount ) . syncContacts && var && var . checkSelfPermission ( Manifest . permission . READ_CONTACTS ) != PackageManager . PERMISSION_GRANTED )
if ( var != null && var == var && getParentActivity var != null )
ContactsController . getInstance ( currentAccount ) . forceImportContacts var
if ( var . isDataSetChanged ( var ) || var . length > 0 var )
if ( var . getAdapter ( var ) == var var )
if ( var == NotificationCenter . appDidLogout )
dialogsLoaded [ currentAccount ] = false
if ( var != var )
if ( var || ! MessagesController . getInstance ( currentAccount ) . serverDialogsEndReached )
boolean var = ! MessagesController . getInstance ( currentAccount ) . dialogsEndReached
if ( SharedConfig . passcodeHash . length ( var ) != 0 && ! var var )
if ( SharedConfig . appLocked var )
var . start ( var )
TLRPC . Chat var = MessagesController . getInstance ( currentAccount ) . getChat ( - ( int ) var )
if ( ChatObject . isChannel ( var ) && ! var . megagroup && ( var || ! ChatObject . isCanWriteToChannel ( - ( int ) var , currentAccount ) ) )
TLRPC . Chat var = MessagesController . getInstance ( currentAccount ) . getChat ( var )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var )
TLRPC . Chat var = MessagesController . getInstance ( currentAccount ) . getChat ( - var )
if ( var != null var )
TLRPC . EncryptedChat var = MessagesController . getInstance ( currentAccount ) . getEncryptedChat ( var )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . user_id )
int var = var . getChildCount ( var )
return new ThemeDescription var
ArrayList < String > var = new ArrayList ( var . keySet ( ) )
ArrayList < String > var = new ArrayList ( var . keySet ( ) )
FileLog . d ( var )
DataQuery . getInstance ( currentAccount ) . checkFeaturedStickers
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . featuredStickersDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . stickersDidLoaded )
ArrayList < Long > var = DataQuery . getInstance ( currentAccount ) . getUnreadStickerSets
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . featuredStickersDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . stickersDidLoaded )
final TLRPC . StickerSetCovered var = DataQuery . getInstance ( currentAccount ) . getFeaturedStickerSets . get ( var )
var = DataQuery . getInstance ( currentAccount ) . getUnreadStickerSets
ArrayList < TLRPC . StickerSetCovered > var = DataQuery . getInstance ( currentAccount ) . getFeaturedStickerSets
DataQuery . getInstance ( currentAccount ) . markFaturedStickersAsRead ( true )
ArrayList < TLRPC . StickerSetCovered > var = DataQuery . getInstance ( currentAccount ) . getFeaturedStickerSets
boolean var = var . indexOfKey ( var . set . id ) >= 0
if ( var . indexOfKey ( var . set . id ) >= 0 )
DataQuery . getInstance ( currentAccount ) . removeStickersSet ( getParentActivity , var . set , 2 , FeaturedStickersActivity . this , false )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . contactsDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . updateInterfaces )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . chatDidCreated )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . contactsDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . updateInterfaces )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . chatDidCreated )
if ( ContactsController . getInstance ( currentAccount ) . isLoadingContacts )
if ( var = var . indexOfKey ( var . id ) >= 0 )
if ( var == ChatObject . CHAT_TYPE_CHAT && var . size ( ) == MessagesController . getInstance ( currentAccount ) . maxGroupCount )
MessagesController . getInstance ( currentAccount ) . putUser ( var , ! var )
var . setChecked ( var . indexOfKey ( var . id ) . id >= 0 , true )
TLRPC . InputUser var = MessagesController . getInstance ( currentAccount ) . getInputUser ( MessagesController . getInstance ( currentAccount ) . getUser ( var . keyAt ( var ) ) . keyAt ( var ) )
MessagesController . getInstance ( currentAccount ) . addUsersToChannel ( var , var , null )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . closeChats )
if ( ! var || var . size ( ) == 0 )
var . add ( var . keyAt ( var ) )
if ( var . size ( ) == 0 )
ArrayList < TLRPC . TL_contact > var = ContactsController . getInstance ( currentAccount ) . var
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . get ( var ) . user_id )
var = new SearchAdapterHelper ( true )
var . setSpan ( new ForegroundColorSpan ( Theme . getColor ( Theme . key_windowBackgroundWhiteBlueText4 ) . key_windowBackgroundWhiteBlueText4 ) . getColor ( Theme . key_windowBackgroundWhiteBlueText4 ) . key_windowBackgroundWhiteBlueText4 , var , var + var , Spanned . SPAN_EXCLUSIVE_EXCLUSIVE )
var . setChecked ( var . indexOfKey ( var . id ) . id >= 0 , false )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . updateInterfaces )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . chatDidCreated )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . chatDidFailCreate )
if ( MessagesController . getInstance ( currentAccount ) . getUser ( var ) == null )
final CountDownLatch var = new CountDownLatch ( 1 )
var . addAll ( MessagesStorage . getInstance ( currentAccount ) . getUsers ( var ) )
var . countDown ( )
var . await ( )
MessagesController . getInstance ( currentAccount ) . putUser ( var , true )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . updateInterfaces )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . chatDidCreated )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . chatDidFailCreate )
ConnectionsManager . getInstance ( currentAccount ) . cancelRequest ( var , true )
if ( var . uploadingImage != null = true )
var = MessagesController . getInstance ( currentAccount ) . createChat ( var . getText ( ) . toString , var , null , var , GroupCreateFinalActivity . this )
MessagesController . getInstance ( currentAccount ) . createChat ( var . getText ( ) . toString , var , null , var , GroupCreateFinalActivity . this )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . closeChats )
MessagesController . getInstance ( currentAccount ) . changeChatAvatar ( var , var )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . get ( var - 1 ) - 1 )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . chatInfoDidLoaded )
MessagesController . getInstance ( currentAccount ) . loadFullChat ( var , classGuid , true )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . chatInfoDidLoaded )
var = MessagesController . getInstance ( currentAccount ) . getExportedInvite ( var )
if ( ChatObject . isChannel ( var , currentAccount ) )
var . channel = MessagesController . getInstance ( currentAccount ) . getInputChannel ( var )
ConnectionsManager . getInstance ( currentAccount ) . bindRequestToGuid ( var , classGuid )
TLRPC . Chat var = MessagesController . getInstance ( currentAccount ) . getChat ( var )
DataQuery . getInstance ( currentAccount ) . checkStickers ( DataQuery . TYPE_IMAGE )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . stickersDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . chatInfoDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . groupStickersDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . stickersDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . chatInfoDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . groupStickersDidLoaded )
var . setText ( MessagesController . getInstance ( currentAccount ) . linkPrefix + "" )
var = DataQuery . getInstance ( currentAccount ) . getStickerSets ( DataQuery . TYPE_IMAGE ) . get ( var - var )
if ( ( Integer ) var [ 0 ] == DataQuery . TYPE_IMAGE )
var = DataQuery . getInstance ( currentAccount ) . getGroupStickerSetById ( var . stickerset )
var = DataQuery . getInstance ( currentAccount ) . getGroupStickerSetById ( var . stickerset )
ConnectionsManager . getInstance ( currentAccount ) . cancelRequest ( var , true )
TLRPC . TL_messages_stickerSet var = DataQuery . getInstance ( currentAccount ) . getStickerSetByName ( var )
var . channel = MessagesController . getInstance ( currentAccount ) . getInputChannel ( var )
MessagesController . getEmojiSettings ( currentAccount ) . edit . remove ( "" + var . id ) . commit
DataQuery . getInstance ( currentAccount ) . putGroupStickerSet ( var )
MessagesStorage . getInstance ( currentAccount ) . updateChatInfo ( var , false )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . chatInfoDidLoaded , var , 0 , true , null )
ArrayList < TLRPC . TL_messages_stickerSet > var = DataQuery . getInstance ( currentAccount ) . getStickerSets ( DataQuery . TYPE_IMAGE )
SharedPreferences var = MessagesController . getGlobalMainSettings ( )
ArrayList < TLRPC . TL_messages_stickerSet > var = DataQuery . getInstance ( currentAccount ) . getStickerSets ( DataQuery . TYPE_IMAGE )
MessagesController . getInstance ( currentAccount ) . openByUserName ( "" , GroupStickersActivity . this , 1 )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . emojiDidLoaded )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . emojiDidLoaded )
TLRPC . EncryptedChat var = MessagesController . getInstance ( currentAccount ) . getEncryptedChat ( var )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . user_id )
SharedPreferences var = MessagesController . getGlobalMainSettings ( )
ConnectionsManager . getInstance ( var ) . switchBackend
LocaleController . getInstance ( ) . applyLanguage ( var , true , false , var )
LocaleController . getInstance ( ) . loadRemoteLanguages ( var )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . suggestedLangpack )
ConnectionsManager . getInstance ( var ) . setAppPaused ( false , false )
ConnectionsManager . getInstance ( var ) . setAppPaused ( true , false )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . suggestedLangpack )
SharedPreferences var = MessagesController . getGlobalMainSettings ( )
SharedPreferences var = MessagesController . getGlobalMainSettings ( )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . contactsImported )
if ( ! UserConfig . getInstance ( currentAccount ) . contactsReimported )
ContactsController . getInstance ( currentAccount ) . forceImportContacts
UserConfig . getInstance ( currentAccount ) . contactsReimported = true
UserConfig . getInstance ( currentAccount ) . saveConfig ( false )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . contactsImported )
if ( ContactsController . getInstance ( currentAccount ) . isLoadingContacts )
String var = ContactsController . getInstance ( currentAccount ) . getInviteText ( 0 )
var . putExtra ( "" , ContactsController . getInstance ( currentAccount ) . getInviteText ( var ) )
var . setBackgroundDrawable ( Theme . createRoundRectDrawable ( AndroidUtilities . dp ( 10 ) , Theme . getColor ( Theme . key_contacts_inviteText ) . key_contacts_inviteText ) . dp ( 10 ) , Theme . getColor ( Theme . key_contacts_inviteText ) . key_contacts_inviteText )
var = new ArrayList ( ContactsController . getInstance ( currentAccount ) . var )
LocaleController . getInstance ( ) . loadRemoteLanguages ( currentAccount )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . suggestedLangpack )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . suggestedLangpack )
LocaleController . getInstance ( ) . applyLanguage ( var , true , false , false , true , currentAccount )
if ( LocaleController . getInstance ( ) . deleteLanguage ( var , currentAccount ) )
var = new TermsOfServiceView ( this )
if ( ! UserConfig . getInstance ( var ) . isClientActivated )
if ( ! var && Math . abs ( var - System . currentTimeMillis ( ) ) >= 60 * 2 * 1000 && var != null && ! var )
if ( SharedConfig . passcodeHash . length ( ) > 0 && ! SharedConfig . allowScreenCapture )
if ( SharedConfig . passcodeHash . length ( ) != 0 && SharedConfig . appLocked )
SharedConfig . lastPauseTime = ConnectionsManager . getInstance ( var ) . getCurrentTime
if ( var == UserConfig . selectedAccount )
SharedPreferences var = MessagesController . getGlobalMainSettings ( )
var . putInt ( "" , UserConfig . getInstance ( var ) . getClientUserId )
NotificationCenter . getGlobalInstance ( ) . postNotificationName ( NotificationCenter . closeOtherAppActivities , this )
var = ConnectionsManager . getInstance ( var ) . getConnectionState
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . appDidLogout )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . mainUserInfoChanged )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . closeOtherAppActivities )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . didUpdatedConnectionState )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . needShowAlert )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . wasUnableToFindCurrentLocation )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . didSetNewWallpapper )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . didSetPasscode )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . reloadInterface )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . suggestedLangpack )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . openArticle )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . hasNewContactsToImport )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . didSetNewTheme )
if ( ! UserConfig . getInstance ( var ) . isClientActivated )
FileLog . d ( "" + AndroidUtilities . displaySize . y )
SharedConfig . appLocked = true
if ( PhotoViewer . hasInstance ( ) && PhotoViewer . getInstance ( ) . isVisible )
if ( ArticleViewer . hasInstance ( ) && ArticleViewer . getInstance ( ) . isVisible )
SharedConfig . isWaitingForPasscodeEnter = true
SharedConfig . isWaitingForPasscodeEnter = false
if ( ! var && ( AndroidUtilities . needShowPasscode ( true ) || SharedConfig . isWaitingForPasscodeEnter ) var )
UserConfig . getInstance ( 0 ) . saveConfig ( false )
if ( UserConfig . getInstance ( var ) . isClientActivated var && ( var & Intent . FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY ) == 0 )
if ( var != null && var . getAction ( var ) != null && ! var )
if ( var != null && var . equals ( ContactsContract . Contacts . CONTENT_VCARD_TYPE ) var )
Cursor var = null
var = AndroidUtilities . loadVCardFromStream ( var , var , false , null , null )
HashMap < String , String > var = null
var . removeFragmentFromStack ( 0 )
var = AndroidUtilities . loadVCardFromStream ( var , var , false , null , null )
for ( int var = 0 ; var < UserConfig . MAX_ACCOUNT_COUNT ; var ++ )
if ( UserConfig . getInstance ( var ) . isClientActivated )
var = AndroidUtilities . loadVCardFromStream ( var , var , false , null , null )
var = var
String var = null
TLRPC . User var = var . get ( var )
if ( var != null && var . length ( var ) > 0 = var )
if ( Intent . ACTION_SEND_MULTIPLE . equals ( var . getAction ( var ) ) )
String var = var . getType ( var )
SendMessagesHelper . SendingMediaInfo var = new SendMessagesHelper . SendingMediaInfo ( var )
if ( var != null || var != null || var != null || var != null || var != null || instantView != null || var != null || var != null )
if ( var . isEmpty ( ) || MessagesController . getInstance ( var ) . checkCanOpenChat ( var , var . get ( var . size ( ) - 1 ) . size ( ) - 1 ) )
if ( ! AndroidUtilities . isTablet ( var ) )
if ( var == 0 var )
if ( var != null var )
if ( PhotoViewer . hasInstance ( ) && PhotoViewer . getInstance ( ) . isVisible )
if ( ArticleViewer . hasInstance ( ) && ArticleViewer . getInstance ( ) . isVisible )
var . presentFragment ( new SettingsActivity var , false , true , true , false )
var . presentFragment ( new ContactsActivity ( var ) , false , true , true , false )
if ( ! UserConfig . getInstance ( var ) . isClientActivated var var )
var . addFragmentToStack ( new LoginActivity var )
if ( ! UserConfig . getInstance ( var ) . isClientActivated var var )
var . showLastFragment ( var )
MessagesController . getInstance ( var ) . putUsers ( var . users , false )
MessagesController . getInstance ( var ) . putChats ( var . chats , false )
MessagesStorage . getInstance ( var ) . putUsersAndChats ( var . users , var . chats , false , true )
var . id . bot_id = MessagesController . getInstance ( var ) . getInputUser ( var . users . get ( 0 ) )
SendMessagesHelper . getInstance ( var ) . sendGame ( MessagesController . getInstance ( var ) . getInputPeer ( ( int ) var ) int ) var , var , 0 , 0 )
var . presentFragment ( var , var , true , true , false )
SecretMediaViewer . getInstance ( var ) . closePhoto ( false , false )
if ( PhotoViewer . hasInstance ( var ) && PhotoViewer . getInstance ( var ) . isVisible var )
if ( ArticleViewer . hasInstance ( var ) && ArticleViewer . getInstance ( var ) . isVisible var )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . closeChats )
MessagesController . getInstance ( var ) . addUserToChat ( - ( int ) var , var , null , 0 , var , null )
var . presentFragment ( new ChatActivity ( var ) , true , false , true , false )
if ( var == null || MessagesController . getInstance ( var ) . checkCanOpenChat ( var , var ) )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . closeChats )
MessagesController . getInstance ( var ) . putChat ( var . chat , false )
MessagesStorage . getInstance ( var ) . putUsersAndChats ( null , var , false , true )
if ( var . isEmpty ( ) || MessagesController . getInstance ( var ) . checkCanOpenChat ( var , var . get ( var . size ( ) - 1 ) . size ( ) - 1 ) )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . closeChats )
runLinkRequest ( var , var , var , var , var , var , var , var , var , var , var , var , var , 1 )
MessagesController . getInstance ( var ) . processUpdates ( var , false )
MessagesController . getInstance ( var ) . putUsers ( var . users , false )
MessagesController . getInstance ( var ) . putChats ( var . chats , false )
if ( var . isEmpty ( ) || MessagesController . getInstance ( var ) . checkCanOpenChat ( var , var . get ( var . size ( ) - 1 ) . size ( ) - 1 ) )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . closeChats )
if ( MessagesController . getInstance ( var ) . checkCanOpenChat ( var , var ) )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . closeChats )
DataQuery . getInstance ( var ) . saveDraft ( var , var , null , null , false )
var . presentFragment ( new ChatActivity ( var ) , true , false , true , false )
if ( var [ 0 ] != 0 )
final int var = Utilities . parseInt ( var . get ( "" ) )
if ( var != null )
FileLog . var ( var )
final long var = var . get ( 0 )
NotificationCenter . getInstance ( var ) . postNotificationName ( NotificationCenter . closeChats )
if ( ! MessagesController . getInstance ( var ) . checkCanOpenChat ( var , var ) )
final ChatActivity var = new ChatActivity ( var )
SendMessagesHelper . prepareSendingMedia ( var , var , null , null , false , false , null )
SendMessagesHelper . prepareSendingDocuments ( var , var , var , var , var , null , null , null )
SendMessagesHelper . getInstance ( var ) . sendMessage ( var , var , null , null , null )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . appDidLogout )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . mainUserInfoChanged )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . closeOtherAppActivities )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . didUpdatedConnectionState )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . needShowAlert )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . wasUnableToFindCurrentLocation )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . didSetNewWallpapper )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . didSetPasscode )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . reloadInterface )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . suggestedLangpack )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . openArticle )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . hasNewContactsToImport )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . didSetNewTheme )
if ( SharedConfig . passcodeHash . length ( ) != 0 && SharedConfig . lastPauseTime != 0 )
SharedConfig . lastPauseTime = 0
UserConfig . getInstance ( 0 ) . saveConfig ( false )
if ( var == 3 || var == 4 || var == 5 || var == 19 || var == 20 || var == 22 == 2 )
if ( SharedConfig . inappCamera )
CameraController . getInstance ( ) . initCamera ( null )
if ( var == 19 || var == 20 || var == 22 = false )
if ( var == 19 || var == 20 || var == 22 )
NotificationCenter . getGlobalInstance ( ) . postNotificationName ( NotificationCenter . locationPermissionGranted )
SharedConfig . lastAppPauseTime = System . currentTimeMillis ( )
ConnectionsManager . getInstance ( var ) . setAppPaused ( true , false )
if ( PhotoViewer . hasInstance ( ) && PhotoViewer . getInstance ( ) . isVisible )
ConnectionsManager . getInstance ( var ) . setAppPaused ( false , false )
if ( PhotoViewer . hasInstance ( ) && PhotoViewer . getInstance ( ) . isVisible )
if ( var != 2 && var != 3 )
MessagesController . getInstance ( var ) . openByUserName ( "" , var . get ( var . size ( ) - 1 ) . size ( ) - 1 , 1 )
SendMessagesHelper . getInstance ( var ) . sendMessage ( var , var . getDialogId ( ) , var , null , null )
if ( SharedConfig . passcodeHash . length ( ) > 0 && ! SharedConfig . allowScreenCapture )
rebuildAllFragments ( false )
ContactsController . getInstance ( var ) . syncPhoneBookByAlert ( var , var , var , false )
ContactsController . getInstance ( var ) . syncPhoneBookByAlert ( var , var , var , true )
ContactsController . getInstance ( var ) . syncPhoneBookByAlert ( var , var , var , true )
if ( ! UserConfig . getInstance ( var ) . isClientActivated )
File var = FileLoader . getDirectory ( FileLoader . MEDIA_DIR_CACHE )
if ( SharedConfig . passcodeHash . length ( ) != 0 )
SharedConfig . lastPauseTime = ConnectionsManager . getInstance ( var ) . getCurrentTime
FileLog . d ( "" )
FileLog . d ( "" )
if ( SharedConfig . appLocked . autoLockIn != 0 )
if ( SharedConfig . autoLockIn != 0 )
AndroidUtilities . runOnUIThread ( var , ( long ) SharedConfig . autoLockIn * 1000 + 1000 )
SharedConfig . lastPauseTime = 0
checkAppUpdate ( false )
if ( SharedConfig . lastPauseTime != 0 )
SharedConfig . lastPauseTime = 0
SharedConfig . saveConfig ( )
BaseFragment var = null
if ( var == ConnectionsManager . ConnectionStateConnecting || var == ConnectionsManager . ConnectionStateConnectingToProxy )
if ( ! var . isEmpty ( ) )
if ( ! var . isEmpty ( ) )
presentFragment ( new ProxyListActivity )
NotificationCenter . getGlobalInstance ( ) . postNotificationName ( NotificationCenter . proxySettingsChanged )
var = ConnectionsManager . getInstance ( var ) . getConnectionState
var . setTitleOverlayText ( var , null , var )
if ( PhotoViewer . hasInstance ( ) && PhotoViewer . getInstance ( ) . isVisible )
if ( ArticleViewer . hasInstance ( ) && ArticleViewer . getInstance ( ) . isVisible )
if ( PhotoViewer . hasInstance ( ) && PhotoViewer . getInstance ( ) . isVisible )
if ( ArticleViewer . hasInstance ( ) && ArticleViewer . getInstance ( ) . isVisible )
if ( var == KeyEvent . KEYCODE_MENU && ! SharedConfig . isWaitingForPasscodeEnter )
if ( ArticleViewer . hasInstance ( ) && ArticleViewer . getInstance ( ) . isVisible )
var . presentFragment ( var , var , var , false , false )
var . presentFragment ( var , var , true , false , false )
var . presentFragment ( var , var , var , false , false )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . closeChats )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . locationPermissionGranted )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . didReceivedNewMessages )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . messagesDeleted )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . replaceMessagesObjects )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . locationPermissionGranted )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . closeChats )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . didReceivedNewMessages )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . messagesDeleted )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . replaceMessagesObjects )
var . searchPlacesWithQuery ( null , var , true )
var . geo . lat = AndroidUtilities . fixLocationCoord ( var . getLatitude ( ) )
var . geo . _long = AndroidUtilities . fixLocationCoord ( var . getLongitude ( ) )
if ( LocationController . getInstance ( currentAccount ) . isSharingLocation ( var ) )
var = MessagesController . getInstance ( currentAccount ) . getUser ( ( int ) var )
var . geo . lat = AndroidUtilities . fixLocationCoord ( var . getLatitude ( ) )
var . geo . _long = AndroidUtilities . fixLocationCoord ( var . getLongitude ( ) )
AndroidUtilities . requestAdjustResize ( getParentActivity , classGuid )
var . setPadding ( AndroidUtilities . dp ( 70 ) , 0 , AndroidUtilities . dp ( 70 ) , AndroidUtilities . dp ( 10 ) )
var . user = MessagesController . getInstance ( currentAccount ) . getUser ( var . object . from_id )
var . user = MessagesController . getInstance ( currentAccount ) . getUser ( var )
var . chat = MessagesController . getInstance ( currentAccount ) . getChat ( - var )
var . id = var
LocationController . SharingLocationInfo var = LocationController . getInstance ( currentAccount ) . getSharingLocationInfo ( var )
if ( var . id == UserConfig . getInstance ( currentAccount ) . getClientUserId && var != null && var . object . id == var . mid && var != null )
LocationController . getInstance ( currentAccount ) . setGoogleMapLocation ( var , var )
var . setPadding ( AndroidUtilities . dp ( 70 ) , 0 , AndroidUtilities . dp ( 70 ) , AndroidUtilities . dp ( 10 ) )
var . setPadding ( AndroidUtilities . dp ( 70 ) , 0 , AndroidUtilities . dp ( 70 ) , AndroidUtilities . dp ( 10 ) )
LiveLocation var = var . get ( UserConfig . getInstance ( currentAccount ) . getClientUserId )
LocationController . SharingLocationInfo var = LocationController . getInstance ( currentAccount ) . getSharingLocationInfo ( var )
var . searchPlacesWithQuery ( null , var , true )
int var = ConnectionsManager . getInstance ( currentAccount ) . getCurrentTime
ArrayList < TLRPC . Message > var = LocationController . getInstance ( currentAccount ) . locationsCache . get ( var . getDialogId ( ) )
var . peer = MessagesController . getInstance ( currentAccount ) . getInputPeer ( ( int ) var )
MessagesStorage . getInstance ( currentAccount ) . putUsersAndChats ( var . users , var . chats , true , true )
MessagesController . getInstance ( currentAccount ) . putUsers ( var . users , false )
MessagesController . getInstance ( currentAccount ) . putChats ( var . chats , false )
LocationController . getInstance ( currentAccount ) . locationsCache . put ( var , var . var )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . liveLocationsCacheChanged , var )
LocationController . SharingLocationInfo var = LocationController . getInstance ( currentAccount ) . getSharingLocationInfo ( var )
ConnectionsManager . getInstance ( currentAccount ) . cancelRequest ( var , true )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . mainUserInfoChanged )
selectCountry ( var , var )
var . replace ( 0 , var . length ( ) , var )
if ( var == 1 == 2 && ! BuildVars . DEBUG_VERSION )
if ( var == 2 && ! BuildVars . DEBUG_VERSION )
if ( ! var && ( var || var ) )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . didReceiveSmsCode )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . didReceiveCall )
var = AndroidUtilities . replaceTags ( LocaleController . formatString ( "" , R . string . SentSmsCode , LocaleController . addNbsp ( var ) ) , R . string . SentSmsCode , LocaleController . addNbsp ( var ) )
var = AndroidUtilities . replaceTags ( LocaleController . formatString ( "" , R . string . SentCallCode , LocaleController . addNbsp ( var ) ) , R . string . SentCallCode , LocaleController . addNbsp ( var ) )
var = AndroidUtilities . replaceTags ( LocaleController . formatString ( "" , R . string . SentCallOnly , LocaleController . addNbsp ( var ) ) , R . string . SentCallOnly , LocaleController . addNbsp ( var ) )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . didReceiveCall )
if ( var == 2 == 3 )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . didReceiveSmsCode )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . didReceiveSmsCode )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . didReceiveCall )
ConnectionsManager . getInstance ( currentAccount ) . setUserId ( var . user . id )
MessagesController . getInstance ( currentAccount ) . checkProxyInfo ( true )
UserConfig . getInstance ( currentAccount ) . setCurrentUser ( var . user )
MessagesController . getInstance ( currentAccount ) . checkProxyInfo ( true )
MessagesStorage . getInstance ( currentAccount ) . putUsersAndChats ( var , null , true , true )
MessagesController . getInstance ( currentAccount ) . putUser ( var . user , false )
ContactsController . getInstance ( currentAccount ) . checkAppAccount
NotificationCenter . getGlobalInstance ( ) . addObserver ( LoginActivitySmsView . this , NotificationCenter . didReceiveSmsCode )
NotificationCenter . getGlobalInstance ( ) . addObserver ( LoginActivitySmsView . this , NotificationCenter . didReceiveCall )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . didReceiveSmsCode )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . didReceiveCall )
if ( var == 3 )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . didReceiveSmsCode )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . didReceiveCall )
if ( var != null )
var . putInt ( "" , ConnectionsManager . getInstance ( currentAccount ) . getCurrentTime )
onAuthSuccess ( ( TLRPC . TL_auth_authorization ) var )
MessagesController . getInstance ( currentAccount ) . cleanup
UserConfig . getInstance ( currentAccount ) . saveConfig ( true )
var . putInt ( "" , ConnectionsManager . getInstance ( currentAccount ) . getCurrentTime )
if ( Math . abs ( ConnectionsManager . getInstance ( currentAccount ) . getCurrentTime - var ) < var )
int var = Math . max ( 0 , var - ( ConnectionsManager . getInstance ( currentAccount ) . getCurrentTime - var ) )
var . setText ( AndroidUtilities . replaceTags ( LocaleController . formatString ( "" , R . string . ResetAccountInfo , LocaleController . addNbsp ( PhoneFormat . getInstance ( ) . format ( "" + var ) + var ) . getInstance ( ) . format ( "" + var ) + var ) , R . string . ResetAccountInfo , LocaleController . addNbsp ( PhoneFormat . getInstance ( ) . format ( "" + var ) + var ) . getInstance ( ) . format ( "" + var ) + var ) . formatString ( "" , R . string . ResetAccountInfo , LocaleController . addNbsp ( PhoneFormat . getInstance ( ) . format ( "" + var ) + var ) . getInstance ( ) . format ( "" + var ) + var ) , R . string . ResetAccountInfo , LocaleController . addNbsp ( PhoneFormat . getInstance ( ) . format ( "" + var ) + var ) . getInstance ( ) . format ( "" + var ) + var )
onAuthSuccess ( ( TLRPC . TL_auth_authorization ) var )
var . setLinkTextColor ( Theme . getColor ( Theme . key_windowBackgroundWhiteLinkText ) . key_windowBackgroundWhiteLinkText )
onAuthSuccess ( ( TLRPC . TL_auth_authorization ) var )
showTermsOfService ( true )
if ( var == null || var [ 0 ] . selectedType != 0 )
int var = var [ 0 ] . listView . getChildCount ( )
View var = var [ 0 ] . listView . getChildAt ( var )
var . parentView = var [ 0 ] . listView
var . thumb = var . imageReceiver . getBitmapSafe ( var )
if ( var [ var ] . indexOfKey ( var . getId ( var ) ) >= 0 )
public MediaActivity ( Bundle var , int var var )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . mediaDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . messagesDeleted )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . didReceivedNewMessages )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . messageReceivedByServer )
DataQuery . getInstance ( currentAccount ) . loadMedia ( var , 50 , 0 , DataQuery . MEDIA_PHOTOVIDEO , true , classGuid )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . mediaDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . didReceivedNewMessages )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . messagesDeleted )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . messageReceivedByServer )
int var = var [ 0 ] . listView . getChildCount ( var )
View var = var [ 0 ] . listView . getChildAt ( var )
var = MessagesController . getInstance ( currentAccount ) . getUser ( var )
var = MessagesController . getInstance ( currentAccount ) . getChat ( - var )
int var = ConnectionsManager . getInstance ( currentAccount ) . getCurrentTime var
if ( var != null && var . var != UserConfig . getInstance ( currentAccount ) . getClientUserId var || var != null )
MessageObject var = var [ var ] . valueAt ( var )
CheckBoxCell var = new CheckBoxCell ( getParentActivity var , 1 )
var = MessagesController . getInstance ( currentAccount ) . getEncryptedChat ( int ( var >> 32 ) >> 32 )
MessageObject var = var [ var ] . valueAt ( var )
if ( var . size ( var ) > 1 || var . get ( 0 ) == UserConfig . getInstance ( currentAccount ) . getClientUserId var || var != null var )
SendMessagesHelper . getInstance ( currentAccount ) . sendMessage ( var . toString ( var ) , var , null , null , true , null , null , null )
SendMessagesHelper . getInstance ( currentAccount ) . sendMessage ( var , var )
if ( ! MessagesController . getInstance ( currentAccount ) . checkCanOpenChat ( var , var ) )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . closeChats )
var . showFieldPanelForForward ( true , var )
var [ 1 ] . setVisibility ( View . VISIBLE )
if ( var [ 0 ] . selectedType == 3 )
if ( var [ 0 ] . selectedType == 4 )
var = new ScrollSlidingTextTabStrip ( var )
var . setBackgroundColor ( Theme . getColor ( Theme . key_actionBarDefault ) . key_actionBarDefault )
var . setBackgroundColor ( Theme . getColor ( Theme . key_actionBarDefault ) . key_actionBarDefault )
actionBar . setItemsColor ( Theme . getColor ( Theme . key_actionBarDefaultIcon ) . key_actionBarDefaultIcon , true )
actionBar . setItemsBackgroundColor ( Theme . getColor ( Theme . key_actionBarDefaultSelector ) . key_actionBarDefaultSelector , true )
TLRPC . EncryptedChat var = MessagesController . getInstance ( currentAccount ) . getEncryptedChat ( int ( var >> 32 ) >> 32 )
var . clear ( var )
switchToCurrentSelectedMode ( true )
if ( ! var . hasTab ( 1 ) )
if ( ! var . hasTab ( 1 ) = true )
var . setInterpolator ( CubicBezierInterpolator . EASE_OUT_QUINT )
actionBar . setExtraHeight ( AndroidUtilities . dp ( 44 ) )
final ActionBarMenu var = actionBar . createActionMode ( false )
if ( var [ var ] != null && var [ var ] . layoutManager != null )
var = var [ var ] . layoutManager . findFirstVisibleItemPosition ( var )
if ( var != var [ var ] . layoutManager . getItemCount ( var ) - 1 var )
RecyclerListView . Holder var = ( RecyclerListView . Holder ) var [ var ] . listView . findViewHolderForAdapterPosition ( var )
var [ var ] . listView = new RecyclerListView ( var )
var [ var ] . listView . setClipToPadding ( false )
var [ var ] . listView . setSectionsType ( 2 )
if ( ( var . selectedType == 2 || var . selectedType == 4 ) && var instanceof SharedAudioCell )
if ( var != 0 && var + var > var - 2 && ! sharedMediaData [ var ] . selectedType . loading )
var = DataQuery . MEDIA_PHOTOVIDEO
if ( var . selectedType == 1 )
var = DataQuery . MEDIA_FILE
if ( var . selectedType == 2 )
var = DataQuery . MEDIA_AUDIO
if ( var . selectedType == 4 )
var = DataQuery . MEDIA_MUSIC
var = DataQuery . MEDIA_URL
sharedMediaData [ var ] . selectedType . loading = true
if ( var != 0 && ! sharedMediaData [ var ] . selectedType . endReached [ 1 ] )
sharedMediaData [ var ] . selectedType . loading = true
return MediaActivity . this . onItemLongClick ( ( ( SharedLinkCell ) var ) . getMessage var , var , 0 )
if ( ( var . selectedType == 2 || var . selectedType == 4 ) && var instanceof SharedAudioCell )
return MediaActivity . this . onItemLongClick ( ( ( SharedAudioCell ) var ) . getMessage var , var , 0 )
if ( var == 0 && var != - 1 )
var [ var ] . progressView = new LinearLayout ( var )
var [ var ] . emptyView . setOrientation ( LinearLayout . VERTICAL )
var [ var ] . emptyView . setGravity ( Gravity . CENTER )
var [ var ] . emptyView . setVisibility ( View . GONE )
var [ var ] . emptyView . setBackgroundColor ( Theme . getColor ( Theme . key_windowBackgroundGray ) . key_windowBackgroundGray )
var [ var ] . emptyImageView = new ImageView ( var )
var [ var ] . emptyTextView = new TextView ( var )
var [ var ] . emptyTextView . setTextColor ( Theme . getColor ( Theme . key_windowBackgroundWhiteGrayText2 ) . key_windowBackgroundWhiteGrayText2 )
var [ var ] . emptyTextView . setGravity ( Gravity . CENTER )
var [ var ] . emptyTextView . setTextSize ( TypedValue . COMPLEX_UNIT_DIP , 17 )
var [ var ] . emptyTextView . setPadding ( AndroidUtilities . dp ( 40 ) , 0 , AndroidUtilities . dp ( 40 ) , AndroidUtilities . dp ( 128 ) )
var [ var ] . emptyView = new LinearLayout ( var )
var [ var ] . progressView . setGravity ( Gravity . CENTER )
var [ var ] . progressView . setOrientation ( LinearLayout . VERTICAL )
var [ var ] . progressView . setVisibility ( View . GONE )
var [ var ] . progressView . setBackgroundColor ( Theme . getColor ( Theme . key_windowBackgroundGray ) . key_windowBackgroundGray )
var [ var ] . progressBar = new RadialProgressView ( var )
var . addView ( var = new FragmentContextView ( var , this , false ) , this , false , LayoutHelper . createFrame ( LayoutHelper . MATCH_PARENT , 39 , Gravity . TOP | Gravity . LEFT , 0 , 8 , 0 , 0 ) . MATCH_PARENT , 39 , Gravity . TOP | Gravity . LEFT , 0 , 8 , 0 , 0 )
var [ var ] . progressView . setVisibility ( View . GONE )
if ( var [ var ] . listView . getEmptyView ( var ) == null )
if ( var [ var ] . selectedType == 1 && var == 1 )
if ( var [ var ] . selectedType == 3 && var == 3 )
if ( var [ var ] . selectedType == 4 && var == 4 )
if ( var [ var ] . selectedType == var && var [ var ] . listView != null )
var = MessagesController . getInstance ( currentAccount ) . getChat ( - ( int ) var )
if ( var . messageOwner . media == null || var . needDrawBluredPreview ( var ) )
int var = DataQuery . getMediaType ( var . messageOwner )
if ( sharedMediaData [ var ] . addMessage ( var , true , var ) )
for ( int var = 0 ; var < var . length ; var ++ )
for ( int var = 0 ; var < var . length ; var ++ )
if ( var [ var ] . listView != null )
ViewTreeObserver var = var [ var ] . listView . getViewTreeObserver ( var )
if ( var == null )
var [ var ] . listView . setAdapter ( var )
var [ var ] . listView . setAdapter ( var )
var [ var ] . listView . setAdapter ( var )
if ( var != 2 && var [ var ] . emptyTextView != null )
var [ var ] . emptyTextView . setText ( LocaleController . getString ( "" , R . string . NoResult ) , R . string . NoResult )
var [ var ] . emptyTextView . setTextSize ( TypedValue . COMPLEX_UNIT_DIP , 20 )
var [ var ] . emptyImageView . setVisibility ( View . GONE )
var [ var ] . emptyTextView . setTextSize ( TypedValue . COMPLEX_UNIT_DIP , 17 )
var [ var ] . emptyImageView . setVisibility ( View . VISIBLE )
var [ var ] . listView . setAdapter ( var )
var . addTextTab ( 1 , LocaleController . getString ( "" , R . string . SharedFilesTab ) , R . string . SharedFilesTab )
var [ var ] . emptyImageView . setImageResource ( R . drawable . tip1 )
var [ var ] . emptyTextView . setText ( LocaleController . getString ( "" , R . string . NoMediaSecret ) , R . string . NoMediaSecret )
var [ var ] . emptyTextView . setText ( LocaleController . getString ( "" , R . string . NoMedia ) , R . string . NoMedia )
if ( var != null && AndroidUtilities . getPeerLayerVersion ( var . layer ) >= 46 )
var [ var ] . emptyView . setVisibility ( View . GONE )
var [ var ] . progressView . setVisibility ( View . GONE )
actionBar . setExtraHeight ( AndroidUtilities . dp ( 44 ) )
if ( var [ var ] . selectedType == 0 || var [ var ] . selectedType == 2 var )
var [ var ] . listView . setAdapter ( var )
var [ var ] . emptyImageView . setImageResource ( R . drawable . tip2 )
var [ var ] . emptyTextView . setText ( LocaleController . getString ( "" , R . string . NoSharedFilesSecret ) , R . string . NoSharedFilesSecret )
var [ var ] . emptyTextView . setText ( LocaleController . getString ( "" , R . string . NoSharedFiles ) , R . string . NoSharedFiles )
if ( var [ var ] . selectedType == 4 )
var [ var ] . listView . setAdapter ( var )
var [ var ] . emptyImageView . setImageResource ( R . drawable . tip4 )
var [ var ] . emptyTextView . setText ( LocaleController . getString ( "" , R . string . NoSharedAudioSecret ) , R . string . NoSharedAudioSecret )
var [ var ] . emptyTextView . setText ( LocaleController . getString ( "" , R . string . NoSharedAudio ) , R . string . NoSharedAudio )
var [ var ] . emptyTextView . setText ( LocaleController . getString ( "" , R . string . NoResult ) , R . string . NoResult )
var [ var ] . emptyImageView . setVisibility ( View . GONE )
var [ var ] . progressView . setVisibility ( View . VISIBLE )
var [ var ] . listView . setEmptyView ( null )
var [ var ] . emptyView . setVisibility ( View . GONE )
var [ var ] . progressView . setVisibility ( View . GONE )
if ( ( int ) var == 0 var )
var [ var ] . listView . setAdapter ( var )
var [ var ] . emptyTextView . setText ( LocaleController . getString ( "" , R . string . NoSharedVoiceSecret ) , R . string . NoSharedVoiceSecret )
var [ var ] . emptyImageView . setImageResource ( R . drawable . tip3 )
var [ var ] . emptyTextView . setText ( LocaleController . getString ( "" , R . string . NoSharedLinksSecret ) , R . string . NoSharedLinksSecret )
var [ var ] . emptyTextView . setText ( LocaleController . getString ( "" , R . string . NoSharedLinks ) , R . string . NoSharedLinks )
if ( ! sharedMediaData [ var ] [ var ] . selectedType . loading && ! sharedMediaData [ var ] [ var ] . selectedType . endReached [ 0 ] && sharedMediaData [ var ] [ var ] . selectedType . messages . isEmpty ( var ) )
sharedMediaData [ var ] [ var ] . selectedType . loading = true
var [ var ] . listView . setVisibility ( View . VISIBLE )
if ( sharedMediaData [ var ] [ var ] . selectedType . loading && sharedMediaData [ var ] [ var ] . selectedType . messages . isEmpty ( var ) var )
var [ var ] . progressView . setVisibility ( View . VISIBLE )
var [ var ] . listView . setEmptyView ( null )
var [ var ] . emptyView . setVisibility ( View . GONE )
var [ var ] . progressView . setVisibility ( View . GONE )
var . setVisibility ( View . GONE )
var [ var ] . listView . setPadding ( 0 , 0 , 0 , AndroidUtilities . dp ( 4 ) )
if ( var [ var ] . indexOfKey ( var . getId ( var ) ) >= 0 var )
if ( var [ 0 ] . size var == 0 && var [ 1 ] . size var == 0 var )
if ( var . getName ( var ) . toLowerCase var . endsWith ( "" ) var )
FileLoader . getInstance ( currentAccount ) . loadFile ( var . getMessage ( var ) . getDocument var , false , 0 )
FileLoader . getInstance ( currentAccount ) . cancelLoadFile ( var . getMessage ( var ) . getDocument var )
var [ var ] . emptyTextView . setPadding ( AndroidUtilities . dp ( 40 ) , 0 , AndroidUtilities . dp ( 40 ) , AndroidUtilities . dp ( 128 ) )
var [ var ] . emptyTextView . setPadding ( AndroidUtilities . dp ( 40 ) , 0 , AndroidUtilities . dp ( 40 ) , 0 )
var [ var ] . emptyTextView . setPadding ( AndroidUtilities . dp ( 40 ) , 0 , AndroidUtilities . dp ( 40 ) , AndroidUtilities . dp ( 128 ) )
ConnectionsManager . getInstance ( currentAccount ) . cancelRequest ( var , true )
var . peer = MessagesController . getInstance ( currentAccount ) . getInputPeer ( var )
var . add ( new MessageObject ( currentAccount , var , false ) , var , false )
ConnectionsManager . getInstance ( currentAccount ) . bindRequestToGuid ( var , classGuid )
ArrayList < ThemeDescription > var = new ArrayList var ( var )
int var = var [ var ] . listView . getChildCount ( var )
View var = var [ var ] . listView . getChildAt ( var )
MessagesController . getInstance ( currentAccount ) . putUsers ( var . users , false )
var . putExtra ( "" , ContactsController . getInstance ( currentAccount ) . getInviteText ( 1 ) )
AlertsCreator . processError ( currentAccount , var , NewContactActivity . this , var )
ConnectionsManager . getInstance ( currentAccount ) . bindRequestToGuid ( var , classGuid )
SharedPreferences var = MessagesController . getGlobalMainSettings ( )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . notificationsSettingsUpdated )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . notificationsSettingsUpdated )
SharedPreferences var = MessagesController . getNotificationsSettings ( currentAccount )
SharedPreferences var = MessagesController . getNotificationsSettings ( currentAccount )
SharedPreferences var = MessagesController . getNotificationsSettings ( currentAccount )
MessagesController . getInstance ( currentAccount ) . enableJoined = true
NotificationsController . getInstance ( currentAccount ) . setInChatSoundEnabled ( ! var )
MessagesController . getInstance ( currentAccount ) . enableJoined = ! var
var . putBoolean ( "" , NotificationsController . getInstance ( currentAccount ) . showBadgeNumber )
NotificationsController . getInstance ( currentAccount ) . setBadgeEnabled ( ! var )
SharedPreferences var = MessagesController . getNotificationsSettings ( currentAccount )
SharedPreferences var = MessagesController . getNotificationsSettings ( currentAccount )
SharedPreferences var = MessagesController . getNotificationsSettings ( currentAccount )
var . setTextAndCheck ( LocaleController . getString ( "" , R . string . NotificationsImportance ) , R . string . NotificationsImportance , var . getBoolean ( "" , false ) , false , false )
var . setTextAndCheck ( LocaleController . getString ( "" , R . string . BadgeNumber ) , R . string . BadgeNumber , NotificationsController . getInstance ( currentAccount ) . showBadgeNumber , true )
var . setTextAndValue ( LocaleController . getString ( "" , R . string . NotificationsImportance ) , R . string . NotificationsImportance , LocaleController . getString ( "" , R . string . NotificationsPriorityUrgent ) , R . string . NotificationsPriorityUrgent , false )
var . setTextAndValue ( LocaleController . getString ( "" , R . string . NotificationsImportance ) , R . string . NotificationsImportance , LocaleController . getString ( "" , R . string . NotificationsPriorityHigh ) , R . string . NotificationsPriorityHigh , false )
if ( var == 5 )
var . setTextAndValue ( LocaleController . getString ( "" , R . string . NotificationsImportance ) , R . string . NotificationsImportance , LocaleController . getString ( "" , R . string . NotificationsPriorityMedium ) , R . string . NotificationsPriorityMedium , false )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . didSetPasscode )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . didSetPasscode )
if ( SharedConfig . passcodeHash . length ( ) != 0 )
if ( var == 2 && SharedConfig . passcodeType == 0 == 1 && var == 0 )
if ( SharedConfig . passcodeHash . length ( ) != 0 )
SharedConfig . passcodeHash = ""
SharedConfig . appLocked = false
SharedConfig . saveConfig ( )
var . setChecked ( SharedConfig . passcodeHash . length ( ) != 0 )
NotificationCenter . getGlobalInstance ( ) . postNotificationName ( NotificationCenter . didSetPasscode )
if ( SharedConfig . autoLockIn == 60 )
if ( SharedConfig . autoLockIn == 60 * 5 )
if ( SharedConfig . autoLockIn == 60 * 60 )
if ( SharedConfig . autoLockIn == 60 * 60 * 5 )
SharedConfig . autoLockIn = 0
SharedConfig . autoLockIn = 60
SharedConfig . autoLockIn = 60 * 5
SharedConfig . autoLockIn = 60 * 60
SharedConfig . autoLockIn = 60 * 60 * 5
UserConfig . getInstance ( currentAccount ) . saveConfig ( false )
SharedConfig . useFingerprint = ! SharedConfig . useFingerprint
UserConfig . getInstance ( currentAccount ) . saveConfig ( false )
( ( TextCheckCell ) var ) . setChecked ( SharedConfig . useFingerprint )
SharedConfig . allowScreenCapture = ! SharedConfig . allowScreenCapture
UserConfig . getInstance ( currentAccount ) . saveConfig ( false )
( ( TextCheckCell ) var ) . setChecked ( SharedConfig . allowScreenCapture )
NotificationCenter . getGlobalInstance ( ) . postNotificationName ( NotificationCenter . didSetPasscode )
if ( SharedConfig . passcodeHash . length ( ) > 0 )
if ( var == 1 && var == 0 || var == 2 && SharedConfig . passcodeType == 0 == 1 && var == 1 || var == 2 && SharedConfig . passcodeType == 1 )
if ( var == 1 && var == 1 || var == 2 && SharedConfig . passcodeType == 1 )
SharedConfig . passcodeSalt = new byte [ 16 ]
Utilities . random . nextBytes ( SharedConfig . passcodeSalt )
System . arraycopy ( SharedConfig . passcodeSalt , 0 , var , 0 , 16 )
System . arraycopy ( SharedConfig . passcodeSalt , 0 , var , var . length + 16 , 16 )
SharedConfig . passcodeHash = Utilities . bytesToHex ( Utilities . computeSHA256 ( var , 0 , var . length ) , 0 , var . length )
SharedConfig . passcodeType = var
SharedConfig . saveConfig ( )
NotificationCenter . getGlobalInstance ( ) . postNotificationName ( NotificationCenter . didSetPasscode )
if ( ! SharedConfig . checkPasscode ( var . getText ( ) . toString ) )
return var == var || var == var || var == var || var == var || SharedConfig . passcodeHash . length ( ) != 0 && var == var
var . setTextAndCheck ( LocaleController . getString ( "" , R . string . Passcode ) , R . string . Passcode , SharedConfig . passcodeHash . length ( ) > 0 , true )
var . setTextAndCheck ( LocaleController . getString ( "" , R . string . UnlockFingerprint ) , R . string . UnlockFingerprint , SharedConfig . useFingerprint , true )
var . setTextAndCheck ( LocaleController . getString ( "" , R . string . ScreenCapture ) , R . string . ScreenCapture , SharedConfig . allowScreenCapture , false )
if ( SharedConfig . passcodeHash . length ( ) == 0 )
if ( SharedConfig . autoLockIn < 60 * 60 )
var = LocaleController . formatString ( "" , R . string . AutoLockInTime , LocaleController . formatPluralString ( "" , SharedConfig . autoLockIn / 60 ) , SharedConfig . autoLockIn / 60 )
if ( SharedConfig . autoLockIn < 60 * 60 * 24 )
var = LocaleController . formatString ( "" , R . string . AutoLockInTime , LocaleController . formatPluralString ( "" , ( int ) Math . ceil ( SharedConfig . autoLockIn / 60.0f / 60 ) . autoLockIn / 60.0f / 60 ) , ( int ) Math . ceil ( SharedConfig . autoLockIn / 60.0f / 60 ) . autoLockIn / 60.0f / 60 )
var = LocaleController . formatString ( "" , R . string . AutoLockInTime , LocaleController . formatPluralString ( "" , ( int ) Math . ceil ( SharedConfig . autoLockIn / 60.0f / 60 / 24 ) . autoLockIn / 60.0f / 60 / 24 ) , ( int ) Math . ceil ( SharedConfig . autoLockIn / 60.0f / 60 / 24 ) . autoLockIn / 60.0f / 60 / 24 )
var = MessagesController . getInstance ( currentAccount ) . getUser ( var . bot_id )
if ( UserConfig . getInstance ( currentAccount ) . tmpPassword != null )
if ( UserConfig . getInstance ( currentAccount ) . tmpPassword . valid_until < ConnectionsManager . getInstance ( currentAccount ) . getCurrentTime var + 60 )
UserConfig . getInstance ( currentAccount ) . tmpPassword = null
UserConfig . getInstance ( currentAccount ) . saveConfig ( false )
if ( UserConfig . getInstance ( currentAccount ) . tmpPassword != null = 4 = 3 )
var = MessagesController . getInstance ( currentAccount ) . getUser ( var . bot_id )
if ( SharedConfig . passcodeHash . length ( var ) == 0 || SharedConfig . allowScreenCapture )
bottomCell [ 1 ] . setText ( LocaleController . formatString ( "" , R . string . PaymentEmailToProvider , var ) , R . string . PaymentEmailToProvider , var )
bottomCell [ 1 ] . setText ( LocaleController . formatString ( "" , R . string . PaymentPhoneToProvider , var ) , R . string . PaymentPhoneToProvider , var )
ArrayList < TLRPC . TL_labeledPrice > var = new ArrayList var ( var . invoice . prices )
SharedPreferences var = MessagesController . getNotificationsSettings ( currentAccount )
if ( Build . VERSION . SDK_INT >= 0 )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . didSetTwoStepPassword )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . didRemovedTwoStepPassword )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . paymentFinished )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . didSetTwoStepPassword )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . didRemovedTwoStepPassword )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . paymentFinished )
if ( ( var == 2 || var == 6 ) && Build . VERSION . SDK_INT >= 23 && ( SharedConfig . passcodeHash . length ( var ) == 0 || SharedConfig . allowScreenCapture ) )
ArrayList < TLRPC . TL_labeledPrice > var = new ArrayList var ( var . invoice . prices )
ArrayList < TLRPC . TL_labeledPrice > var = new ArrayList var ( var . invoice . prices )
if ( UserConfig . getInstance ( currentAccount ) . tmpPassword != null )
if ( UserConfig . getInstance ( currentAccount ) . tmpPassword . valid_until < ConnectionsManager . getInstance ( currentAccount ) . getCurrentTime var + 60 )
UserConfig . getInstance ( currentAccount ) . tmpPassword = null
UserConfig . getInstance ( currentAccount ) . saveConfig ( false )
if ( UserConfig . getInstance ( currentAccount ) . tmpPassword != null = 4 = 3 )
if ( UserConfig . getInstance ( currentAccount ) . tmpPassword != null )
if ( UserConfig . getInstance ( currentAccount ) . tmpPassword . valid_until < ConnectionsManager . getInstance ( currentAccount ) . getCurrentTime var + 60 )
UserConfig . getInstance ( currentAccount ) . tmpPassword = null
UserConfig . getInstance ( currentAccount ) . saveConfig ( false )
if ( UserConfig . getInstance ( currentAccount ) . tmpPassword != null = 4 = 3 )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . paymentFinished )
bottomCell [ 0 ] . getTextView var . setMovementMethod ( new AndroidUtilities . LinkMovementMethodMy ( var ) )
AlertsCreator . processError ( currentAccount , var , PaymentFormActivity . this , var )
var . credentials . tmp_password = UserConfig . getInstance ( currentAccount ) . tmpPassword . tmp_password
MessagesController . getInstance ( currentAccount ) . processUpdates ( ( ( TLRPC . TL_payments_paymentResult ) var ) . updates , false )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . paymentFinished )
AlertsCreator . processError ( currentAccount , var , PaymentFormActivity . this , var )
if ( UserConfig . getInstance ( currentAccount ) . tmpPassword != null )
if ( UserConfig . getInstance ( currentAccount ) . tmpPassword . valid_until < ConnectionsManager . getInstance ( currentAccount ) . getCurrentTime var + 60 )
UserConfig . getInstance ( currentAccount ) . tmpPassword = null
UserConfig . getInstance ( currentAccount ) . saveConfig ( false )
if ( UserConfig . getInstance ( currentAccount ) . tmpPassword != null )
UserConfig . getInstance ( currentAccount ) . tmpPassword = ( TLRPC . TL_account_tmpPassword ) var
UserConfig . getInstance ( currentAccount ) . saveConfig ( false )
AlertsCreator . processError ( currentAccount , var , PaymentFormActivity . this , var )
AlertsCreator . processError ( currentAccount , var , PaymentFormActivity . this , var )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . albumsDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . recentImagesDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . closeChats )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . albumsDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . recentImagesDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . closeChats )
if ( var || ! var )
FileLog . var ( var )
var . thumb = var . imageReceiver . getBitmapSafe ( var )
return var . photoImage . getImageReceiver ( ) . getBitmapSafe
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . closeChats )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . recentImagesDidLoaded )
MessagesStorage . getInstance ( currentAccount ) . loadWebRecent ( var )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . closeChats )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . recentImagesDidLoaded )
if ( var != 0 )
ConnectionsManager . getInstance ( currentAccount ) . cancelRequest ( var , true )
var = 0
ConnectionsManager . getInstance ( currentAccount ) . cancelRequest ( var , true )
if ( var != 0 )
ConnectionsManager . getInstance ( currentAccount ) . cancelRequest ( var , true )
var = 0
ConnectionsManager . getInstance ( currentAccount ) . cancelRequest ( var , true )
searchImages ( var . getText ( ) . toString , "" , true )
MessagesStorage . getInstance ( currentAccount ) . clearWebRecent ( var )
SharedConfig . toggleGroupPhotosEnabled ( )
showHint ( false , SharedConfig . groupPhotosEnabled )
var = ( var != null || var == 0 ) && var <= 0
if ( ! var )
ConnectionsManager . getInstance ( currentAccount ) . cancelRequest ( var , true )
if ( var != 0 )
ConnectionsManager . getInstance ( currentAccount ) . cancelRequest ( var , true )
var = 0
ConnectionsManager . getInstance ( currentAccount ) . bindRequestToGuid ( var , classGuid )
ConnectionsManager . getInstance ( currentAccount ) . cancelRequest ( var , true )
if ( var != null )
TLRPC . TL_contacts_resolvedPeer var = ( TLRPC . TL_contacts_resolvedPeer ) var
Object var = null
ConnectionsManager . getInstance ( currentAccount ) . cancelRequest ( var , true )
ConnectionsManager . getInstance ( currentAccount ) . cancelRequest ( var , true )
if ( ! ( var instanceof TLRPC . User ) )
TLRPC . User var = ( TLRPC . User ) var
TLRPC . TL_messages_getInlineBotResults var = new TLRPC . TL_messages_getInlineBotResults ( )
long var = var . getDialogId ( )
var . peer = MessagesController . getInstance ( currentAccount ) . getInputPeer ( var )
var . peer = new TLRPC . TL_inputPeerEmpty ( )
var . peer = new TLRPC . TL_inputPeerEmpty ( )
TLRPC . messages_BotResults var = ( TLRPC . messages_BotResults ) var
var = var . next_offset
var = var . next_offset
if ( ! "" . equals ( var . var ) )
if ( var . containsKey ( var . id ) )
if ( var == null )
var . width = var . w
var . height = var . h
var . height = var . h
var . photoSize = var
var . thumbPhotoSize = var
if ( var . content == null )
TLRPC . DocumentAttribute var = var . content . attributes . get ( var )
var . put ( var . id , var )
var . put ( var . id , var )
var . imageUrl = var . content . url
var . size = var . content . size
var . var = 0
var . var = 0
var . localUrl = ""
var = ! var || var == null
var = PhotoViewer . isShowingImage ( var . path )
AndroidUtilities . runOnUIThread ( var , 17 )
if ( var . getGroupIdForUse ( var ) != var var )
var = var . getGroupIdForUse ( var )
if ( var != 0 || var . getGroupIdForUse ( var ) == var ++ )
if ( var != 0 || var . getGroupIdForUse ( var ) == var ++ )
setImageIndex ( var , true )
setImageIndex ( var , true )
setImageIndex ( var , true )
if ( var == var || var == var )
var += var . getMeasuredHeight ( var )
if ( Build . VERSION . SDK_INT >= 21 && AndroidUtilities . statusBarHeight != 0 && var != null )
if ( var == var || var == var || var == var || var == var || var . getVisibility ( var ) == VISIBLE && var == var )
if ( var == null && var == 0 && ( var != null && var . isVideo ( var ) || var != null && ( var . type . equals ( "" ) || MessageObject . isVideoDocument ( var . document ) ) ) )
DataQuery . getInstance ( var ) . loadMedia ( var , 80 , 0 , DataQuery . MEDIA_PHOTOVIDEO , true , var )
if ( var [ var ] . indexOfKey ( var . getId ( var ) ) < 0 )
if ( var [ var ] . indexOfKey ( var . getId ( var ) ) < 0 )
preparePlayer ( Uri . fromFile ( new File ( var ) ) File ( var ) , false , true )
var = UserConfig . selectedAccount
MediaActivity var = new MediaActivity ( var , new int var )
var . presentFragment ( new ChatActivity ( var ) , var , true )
if ( var . size ( var ) > 1 || var . get ( 0 ) == UserConfig . getInstance ( var ) . getClientUserId var || var != null var )
var . showFieldPanelForForward ( true , var )
if ( var == null || var == null )
if ( var != null && var . var != UserConfig . getInstance ( var ) . getClientUserId var || var != null )
CheckBoxCell var = new CheckBoxCell ( var , 1 )
var . setProgressColor ( 0xffffffff )
var . setCurrentAccount ( var )
photoProgressViews [ var ] = new PhotoProgressView ( var . getContext ( var ) , var )
photoProgressViews [ var ] . setBackgroundState ( 0 , false )
var . setColors ( 0x66ffffff , 0x66ffffff , 0xffd5d0d7 , 0xffffffff , 0xffffffff )
boolean var = super . onTouchEvent ( var , var , var )
var . addView ( var , LayoutHelper . createFrame ( 48 , 48 , Gravity . LEFT | Gravity . TOP , 4 , 0 , 0 , 0 ) , 48 , Gravity . LEFT | Gravity . TOP , 4 , 0 , 0 , 0 )
var = new SimpleTextView ( var . getContext ( var ) )
var . setScaleType ( ImageView . ScaleType . CENTER )
var . setTextSize ( 13 )
var . addView ( var , LayoutHelper . createFrame ( LayoutHelper . WRAP_CONTENT , LayoutHelper . MATCH_PARENT , Gravity . RIGHT | Gravity . TOP , 0 , 17 , 7 , 0 ) . WRAP_CONTENT , LayoutHelper . MATCH_PARENT , Gravity . RIGHT | Gravity . TOP , 0 , 17 , 7 , 0 )
var . setBackgroundDrawable ( Theme . createSelectorDrawable ( Theme . ACTION_BAR_WHITE_SELECTOR_COLOR ) . ACTION_BAR_WHITE_SELECTOR_COLOR )
LinearLayout var = new LinearLayout ( var )
if ( var == null || var . getTag ( var ) != null )
if ( var . getTag ( var ) != null || var == null || var . getSelectedPhotosOrder ( var ) == null || var . getSelectedPhotosOrder ( var ) . isEmpty var )
boolean var = SharedConfig . groupPhotosEnabled
SharedConfig . toggleGroupPhotosEnabled ( var )
setImageIndex ( var , true )
( ( DefaultItemAnimator ) var . getItemAnimator ( var ) ) . setDelayAnimations ( false )
if ( var . username != null var )
var . originalPath = var . getPath ( var )
if ( var && ( var != ExoPlayer . STATE_ENDED && var != ExoPlayer . STATE_IDLE ) var )
if ( var . getVisibility ( var ) != View . VISIBLE )
long var = var . getDuration ( var )
if ( var == C . TIME_UNSET = var )
var = Uri . fromFile ( var )
if ( TextUtils . isEmpty ( var ) var )
if ( ( var == 0 || var == 4 ) && var != null )
if ( var == 0 || var == 4 )
if ( var == 0 || var == 4 )
if ( var == 0 || var == 4 )
if ( var == 0 || var == 4 )
if ( var == 0 || var == 4 )
var . updateViewLayout ( var , var )
if ( var . equals ( var ) )
var . setVisibility ( View . INVISIBLE )
var . setVisibility ( View . INVISIBLE )
boolean var = var . getTag ( var ) != null
return var . getAttachName ( var )
if ( ! var . exists ( var ) )
if ( var . content instanceof TLRPC . TL_webDocument )
var = ConnectionsManager . generateClassGuid ( var )
if ( var . equals ( "" ) || var . equals ( "" ) || "" . equals ( var . type ) )
DataQuery . getInstance ( var ) . getMediaCount ( var , DataQuery . MEDIA_PHOTOVIDEO , var , true )
DataQuery . getInstance ( var ) . getMediaCount ( var , DataQuery . MEDIA_PHOTOVIDEO , var , true )
boolean var = var != null && ! var . isSecretChat ( var ) && var != null && ! var . bot && ! var . isEditingMessageMedia ( var )
preparePlayer ( Uri . fromFile ( new File ( var . path ) . path ) File ( var . path ) . path , false , false )
boolean var = var . var ( var )
var = var && var != null && var . getId ( var ) == var . getId ( var )
var = var . type . equals ( "" )
var = var . messageOwner . media . description
if ( TextUtils . isEmpty ( var ) var )
var . setTitle ( LocaleController . formatString ( "" , R . string . Of , ( var + var - var . size ( var ) ) + var + 1 , var + var ) , R . string . Of , ( var + var - var . size ( var ) ) + var + 1 , var + var )
var . setTitle ( LocaleController . formatString ( "" , R . string . Of , var + 1 , var + var ) , R . string . Of , var + 1 , var + var )
if ( var == UserConfig . getInstance ( var ) . getClientUserId var && ! var . isEmpty ( var ) var )
var = FileLoader . getPathToAttach ( FileLoader . getClosestPhotoSizeWithSize ( var . photo . sizes , AndroidUtilities . getPhotoSize ( var ) ) . photo . sizes , AndroidUtilities . getPhotoSize ( var ) ) . getAbsolutePath var
if ( var . content instanceof TLRPC . TL_webDocument )
var = var . content . url
var . setVisibility ( View . GONE )
if ( var . getVisibility ( var ) != View . GONE )
preparePlayer ( var , false , false )
if ( var . content instanceof TLRPC . TL_webDocument )
if ( var != null && ( var || var ) var )
Uri var = null
var = WebFile . createWithWebDocument ( var . thumb )
if ( var . content instanceof TLRPC . TL_webDocument )
var = WebFile . createWithWebDocument ( var . content )
String var = null
MessageObject var = null
var = var . var && ! var . var && var != null && var . var != null && var . local_id == var . var . local_id && var . volume_id == var . var . volume_id && var . dc_id == var . var . dc_id
var = var . var && ! var . var && var != null && var . var != null && var . id == var . var . id
var = var . var && ! var . var && var != null && var . var != null && var . equals ( var . var )
return openPhoto ( var . get ( var ) , null , var , null , null , var , var , null , var , var )
var . bottomMargin = AndroidUtilities . dp ( 19 )
if ( var == null || var || var == null && checkAnimation var || var == null && var == null && var == null && var == null && var == null )
NotificationCenter . getGlobalInstance ( var ) . addObserver ( this , NotificationCenter . emojiDidLoaded )
if ( var == null || ! var && ! var || checkAnimation var || var == null )
NotificationCenter . getGlobalInstance ( var ) . removeObserver ( this , NotificationCenter . emojiDidLoaded )
var . setScaleX ( 1.0f )
var . setImageBitmap ( var . getBitmapSafe ( var ) )
if ( var != null && ! var . canScrollAway ( var ) )
var . setBackgroundDrawable ( Theme . createRoundRectDrawable ( AndroidUtilities . dp ( 3 ) , 0xcc111111 ) . dp ( 3 ) , 0xcc111111 )
var . setTextColor ( 0xffffffff )
if ( var == 1 || ! var && var != 2 && ! var )
if ( var != 2 && ! var && ! var )
if ( ! ImageLoader . getInstance ( var ) . isLoadingHttpFile ( var . content . url ) var )
ImageLoader . getInstance ( var ) . cancelLoadHttpFile ( var . content . url )
if ( var == 0 || var == 4 )
var = new MessageObject ( UserConfig . selectedAccount , var , false )
var . var . originalPath = var . getPath ( var )
var = 426.0f
var = 854.0f
var . playTogether ( ObjectAnimator . ofFloat ( var , "" , 0 , AndroidUtilities . dp ( 152 ) ) , "" , 0 , AndroidUtilities . dp ( 152 ) , ObjectAnimator . ofFloat ( var , "" , 0 , AndroidUtilities . dp ( 152 ) ) , "" , 0 , AndroidUtilities . dp ( 152 ) , ObjectAnimator . ofFloat ( var , "" , - AndroidUtilities . dp ( 48 ) , AndroidUtilities . dp ( 104 ) ) , "" , - AndroidUtilities . dp ( 48 ) , AndroidUtilities . dp ( 104 ) )
var . playTogether ( ObjectAnimator . ofFloat ( var , "" , 0 ) , "" , 0 , ObjectAnimator . ofFloat ( var , "" , 0 ) , "" , 0 , ObjectAnimator . ofFloat ( var , "" , - AndroidUtilities . dp ( 48 ) ) , "" , - AndroidUtilities . dp ( 48 ) )
if ( var > 1280 || var > 1280 = 5 > 854 || var > 854 = 4 > 640 || var > 640 = 3 > 480 || var > 480 = 2 = 1 )
if ( var > 854 || var > 854 = 4 )
if ( var >= 0 var )
var . closePhoto ( false , true )
return openPhoto ( null , null , null , var , null , var , var , null , 0 , 0 )
var = ConnectionsManager . generateClassGuid ( )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . appDidLogout )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . pushMessagesUpdated )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . updateInterfaces )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . messagePlayingProgressDidChanged )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . messagePlayingDidReset )
NotificationCenter . getInstance ( var ) . addObserver ( this , NotificationCenter . contactsDidLoaded )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . emojiDidLoaded )
MessagesController . getInstance ( var . currentAccount ) . markDialogAsRead ( var . getDialogId ( ) , var . getId ( ) , Math . max ( 0 , var . getId ( ) ) , var . getId ( ) , var . messageOwner . date , true , 0 , true )
MessagesController . getInstance ( var . currentAccount ) . sendTyping ( var . getDialogId ( ) , 0 , var )
float var = 0
var = var - var . getTranslationX ( )
var = - var - var . getTranslationX ( )
if ( var . getTranslationX ( ) != 0 )
var = - var . getTranslationX ( )
int var = int ( Math . abs ( var / ( float ) var ) / ( float ) var * 200 )
var . playTogether ( var )
var . setTranslationX ( - var + var )
var . setTranslationX ( - var + var )
if ( var . width != var )
var . setTranslationX ( var )
var . setTranslationX ( var + var )
var . setTranslationX ( var + var )
var = new FrameLayout ( this )
TextView var = var . findViewWithTag ( 312 )
BackupImageView var = var . findViewWithTag ( 311 )
if ( var || DownloadController . getInstance ( var . currentAccount ) . canDownloadMedia ( var ) )
var . setTextSize ( TypedValue . COMPLEX_UNIT_SP , SharedConfig . fontSize )
TLRPC . GeoPoint var = var . messageOwner . media . geo
PopupAudioView var = var . findViewWithTag ( 300 )
var = new LinearLayout ( this )
if ( DownloadController . getInstance ( var . currentAccount ) . canDownloadMedia ( var ) )
var = new FrameLayout ( this )
TextView var = var . findViewWithTag ( 301 )
var . setTextSize ( TypedValue . COMPLEX_UNIT_SP , SharedConfig . fontSize )
var . setTranslationX ( 0 )
var . setTranslationX ( - var )
var . setTranslationX ( var )
float var = var . getTranslationX ( )
var . setTranslationX ( var )
float var = var . getTranslationX ( )
var . setTranslationX ( var )
var . addAll ( NotificationsController . getInstance ( var ) . var )
var . addAll ( NotificationsController . getInstance ( var ) . popupReplyMessages )
for ( int var = 0 , var = var . var ( ) ; var < var ; var ++ )
var . setDialogId ( var , var . currentAccount )
var = MessagesController . getInstance ( var . currentAccount ) . getUser ( var )
var = MessagesController . getInstance ( var . currentAccount ) . getChat ( - var )
var = MessagesController . getInstance ( var . currentAccount ) . getUser ( var . messageOwner . from_id )
TLRPC . EncryptedChat var = MessagesController . getInstance ( var . currentAccount ) . getEncryptedChat ( int ( var >> 32 ) >> 32 )
var = MessagesController . getInstance ( var . currentAccount ) . getUser ( var . user_id )
if ( var == null || var == null )
if ( var . id / 1000 != 777 && var . id / 1000 != 333 && ContactsController . getInstance ( var . currentAccount ) . contactsDict . get ( var . id ) == null && ( ContactsController . getInstance ( var . currentAccount ) . contactsDict . size ( ) != 0 || ! ContactsController . getInstance ( var . currentAccount ) . isLoadingContacts ) )
CharSequence var = MessagesController . getInstance ( var . currentAccount ) . printingStrings . get ( var . getDialogId ( ) )
TLRPC . User var = MessagesController . getInstance ( var . currentAccount ) . getUser ( var . id )
var . setText ( LocaleController . formatUserStatus ( var . currentAccount , var ) . currentAccount , var )
TLRPC . Chat var = MessagesController . getInstance ( var . currentAccount ) . getChat ( var . id )
TLRPC . User var = MessagesController . getInstance ( var . currentAccount ) . getUser ( var . id )
Integer var = MessagesController . getInstance ( var . currentAccount ) . printingStringsTypes . get ( var . getDialogId ( ) )
ConnectionsManager . getInstance ( var ) . setAppPaused ( false , false )
ConnectionsManager . getInstance ( var ) . setAppPaused ( true , false )
CharSequence var = MessagesController . getInstance ( var . currentAccount ) . printingStrings . get ( var . getDialogId ( ) )
if ( var != null && var . currentAccount == var && var . getId ( ) == var )
PopupAudioView var = var . findViewWithTag ( 300 )
if ( var != null && var . currentAccount == var && var . getId ( ) == var )
TextView var = var . findViewWithTag ( 301 )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . appDidLogout )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . pushMessagesUpdated )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . updateInterfaces )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . messagePlayingProgressDidChanged )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . messagePlayingDidReset )
NotificationCenter . getInstance ( var ) . removeObserver ( this , NotificationCenter . contactsDidLoaded )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . emojiDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . privacyRulesUpdated )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . privacyRulesUpdated )
final SharedPreferences var = MessagesController . getGlobalMainSettings ( )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . get ( var ) )
TLRPC . InputUser var = MessagesController . getInstance ( currentAccount ) . getInputUser ( var )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . get ( var ) )
TLRPC . InputUser var = MessagesController . getInstance ( currentAccount ) . getInputUser ( var )
MessagesController . getInstance ( currentAccount ) . putUsers ( var . users , false )
ContactsController . getInstance ( currentAccount ) . setPrivacyRules ( var . var , var )
ArrayList < TLRPC . PrivacyRule > var = ContactsController . getInstance ( currentAccount ) . getPrivacyRules ( var )
ContactsController . getInstance ( currentAccount ) . loadPrivacySettings var
if ( UserConfig . getInstance ( currentAccount ) . hasSecureData var )
var = var ++
var = var ++
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . privacyRulesUpdated )
VoIPHelper . upgradeP2pSetting ( currentAccount )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . privacyRulesUpdated )
presentFragment ( new SessionsActivity ( 0 ) )
ContactsController . getInstance ( currentAccount ) . setDeleteAccountTTL ( var . ttl . days )
if ( SharedConfig . passcodeHash . length ( var ) > 0 var )
MessagesController . getGlobalMainSettings ( var ) . edit var . putInt ( "" , MessagesController . getInstance ( currentAccount ) . secretWebpagePreview ) . commit var
MessagesController . getInstance ( currentAccount ) . secretWebpagePreview = 1
var . edit ( var ) . putInt ( "" , var ) . commit var
AlertDialog . Builder var = new AlertDialog . Builder ( getParentActivity var , 1 )
UserConfig . getInstance ( currentAccount ) . tmpPassword = null
UserConfig . getInstance ( currentAccount ) . saveConfig ( false )
ArrayList < TLRPC . PrivacyRule > var = ContactsController . getInstance ( currentAccount ) . getPrivacyRules ( var )
return var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var && ! ContactsController . getInstance ( currentAccount ) . getLoadingGroupInfo var || var == var && ! ContactsController . getInstance ( currentAccount ) . getLoadingLastSeenInfo var || var == var && ! ContactsController . getInstance ( currentAccount ) . getLoadingCallsInfo var || var == var && ! ContactsController . getInstance ( currentAccount ) . getLoadingDeleteInfo var || var == var || var == var || var == var || var == var || var == var || var == var || var == var
if ( ContactsController . getInstance ( currentAccount ) . getLoadingLastSeenInfo var var )
if ( ContactsController . getInstance ( currentAccount ) . getLoadingCallsInfo var var )
if ( ContactsController . getInstance ( currentAccount ) . getLoadingGroupInfo var var )
if ( ContactsController . getInstance ( currentAccount ) . getLoadingDeleteInfo var var )
var . setTextAndValue ( LocaleController . getString ( "" , R . string . DeleteAccountIfAwayFor2 ) , R . string . DeleteAccountIfAwayFor2 , var , false )
var . setText ( LocaleController . getString ( "" , R . string . PrivacyPaymentsClear ) , R . string . PrivacyPaymentsClear , true )
var . setText ( LocaleController . getString ( "" , R . string . SuggestContactsInfo ) , R . string . SuggestContactsInfo )
var . setBackgroundDrawable ( Theme . getThemedDrawable ( var , R . drawable . greydivider , Theme . key_windowBackgroundGrayShadow ) , R . drawable . greydivider , Theme . key_windowBackgroundGrayShadow )
var . setText ( LocaleController . getString ( "" , R . string . PrivacyAdvanced ) , R . string . PrivacyAdvanced )
var . setText ( LocaleController . getString ( "" , R . string . PrivacyBots ) , R . string . PrivacyBots )
var . setTextAndCheck ( LocaleController . getString ( "" , R . string . SecretWebPage ) , R . string . SecretWebPage , MessagesController . getInstance ( currentAccount ) . secretWebpagePreview == 1 , false )
if ( var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var == var || var == var || var == var || var == var || var == var || var == var || var == var == var || var == var || var == var || var == var || var == var || var == var || var == var == var || var == var || var == var )
if ( var == var || var == var || var == var || var == var || var == var || var == var || var == var )
if ( var == var || var == var || var == var || var == var || var == var || var == var || var == var )
if ( var == var || var == var || var == var )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . updateInterfaces )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . updateInterfaces )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . get ( var ) )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var )
TLRPC . Chat var = MessagesController . getInstance ( currentAccount ) . getChat ( var )
var . thumb = var . imageReceiver . getBitmapSafe ( var )
var = MessagesController . getInstance ( currentAccount ) . getEncryptedChat ( int ( var >> 32 ) >> 32 )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . updateInterfaces )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . contactsDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . encryptedChatCreated )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . encryptedChatUpdated )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . blockedUsersDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . botInfoDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . userInfoDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . didReceivedNewMessages )
var = MessagesController . getInstance ( currentAccount ) . blockedUsers . contains ( var )
DataQuery . getInstance ( currentAccount ) . loadBotInfo ( var . id , true , classGuid )
MessagesController . getInstance ( currentAccount ) . loadFullUser ( MessagesController . getInstance ( currentAccount ) . getUser ( var ) , classGuid , true )
var . countDown ( var )
var . await ( var )
MessagesController . getInstance ( currentAccount ) . putChat ( var , true )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . chatInfoDidLoaded )
var = new ImageUpdater var
MessagesController . getInstance ( currentAccount ) . changeChatAvatar ( var , var )
MessagesController . getInstance ( currentAccount ) . loadFullChat ( var , classGuid , true )
DataQuery . getInstance ( currentAccount ) . getMediaCount ( var , var , classGuid , true )
DataQuery . getInstance ( currentAccount ) . getMediaCount ( var , var , classGuid , true )
DataQuery . getInstance ( currentAccount ) . getMediaCount ( - var , var , classGuid , true )
DataQuery . getInstance ( currentAccount ) . getMediaCount ( var , var , classGuid , true )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . mediaCountDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . updateInterfaces )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . closeChats )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . mediaCountDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . updateInterfaces )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . closeChats )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . contactsDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . encryptedChatCreated )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . encryptedChatUpdated )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . blockedUsersDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . botInfoDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . userInfoDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . didReceivedNewMessages )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . chatInfoDidLoaded )
MessagesController . getInstance ( currentAccount ) . unblockUser ( var )
SendMessagesHelper . getInstance ( currentAccount ) . sendMessage ( "" , var , null , null , false , null , null , null )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var )
ContactsController . getInstance ( currentAccount ) . deleteContact ( var )
final TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var )
if ( ! MessagesController . getInstance ( currentAccount ) . checkCanOpenChat ( var , var ) )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( ProfileActivity . this , NotificationCenter . closeChats )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . closeChats )
MessagesController . getInstance ( currentAccount ) . addUserToChat ( - ( int ) var , var , null , 0 , null , ProfileActivity . this )
TLRPC . TL_userFull var = MessagesController . getInstance ( currentAccount ) . getUserFull ( var . var )
var . putExtra ( Intent . EXTRA_TEXT , String . format ( "" + MessagesController . getInstance ( currentAccount ) . linkPrefix + "" , var . about , var . username ) + MessagesController . getInstance ( currentAccount ) . linkPrefix + "" , var . about , var . username )
var . putExtra ( Intent . EXTRA_TEXT , String . format ( "" + MessagesController . getInstance ( currentAccount ) . linkPrefix + "" , var . username ) + MessagesController . getInstance ( currentAccount ) . linkPrefix + "" , var . username )
DataQuery . getInstance ( currentAccount ) . installShortcut ( var )
VoIPHelper . startCall ( var , getParentActivity var , MessagesController . getInstance ( currentAccount ) . getUserFull ( var . var ) . var )
MediaActivity var = new MediaActivity ( var , var )
MessagesStorage . getInstance ( currentAccount ) . setDialogFlags ( var , 0 )
TLRPC . TL_dialog var = MessagesController . getInstance ( currentAccount ) . dialogs_dict . get ( var )
NotificationsController . getInstance ( currentAccount ) . updateServerNotificationsSettings ( var )
int var = ConnectionsManager . getInstance ( currentAccount ) . getCurrentTime var
if ( var == 5 )
if ( var == 5 var )
MessagesStorage . getInstance ( currentAccount ) . setDialogFlags ( var , var )
TLRPC . TL_dialog var = MessagesController . getInstance ( currentAccount ) . dialogs_dict . get ( var )
NotificationsController . getInstance ( currentAccount ) . updateServerNotificationsSettings ( var )
SecretChatHelper . getInstance ( currentAccount ) . startSecretChat ( getParentActivity var , MessagesController . getInstance ( currentAccount ) . getUser ( var ) )
if ( var == UserConfig . getInstance ( currentAccount ) . getClientUserId var )
var . putExtra ( Intent . EXTRA_TEXT , var . title + "" + var . about + "" + MessagesController . getInstance ( currentAccount ) . linkPrefix + "" + var . username )
var . putExtra ( Intent . EXTRA_TEXT , var . title + "" + MessagesController . getInstance ( currentAccount ) . linkPrefix + "" + var . username )
MessagesController . getInstance ( currentAccount ) . convertToMegaGroup ( getParentActivity var , var )
if ( var . var == UserConfig . getInstance ( currentAccount ) . getClientUserId var )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . var )
if ( var . var != UserConfig . getInstance ( currentAccount ) . getClientUserId var )
if ( var . admin && var . admins_enabled || var . inviter_id == UserConfig . getInstance ( currentAccount ) . getClientUserId var = true )
var . var . inviter_id = UserConfig . getInstance ( currentAccount ) . getClientUserId var
var . channel = MessagesController . getInstance ( currentAccount ) . getInputChannel ( var )
var . var = MessagesController . getInstance ( currentAccount ) . getInputUser ( var )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var )
TLRPC . Chat var = MessagesController . getInstance ( currentAccount ) . getChat ( var )
if ( ! MessagesController . getInstance ( currentAccount ) . checkCanOpenChat ( var , ProfileActivity . this ) )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( ProfileActivity . this , NotificationCenter . closeChats )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . closeChats )
if ( ! MessagesController . getInstance ( currentAccount ) . checkCanOpenChat ( var , ProfileActivity . this ) )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( ProfileActivity . this , NotificationCenter . closeChats )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . closeChats )
MessagesController . getInstance ( currentAccount ) . changeChatAvatar ( var , null )
final TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var )
if ( ChatObject . isChannel ( var , currentAccount ) && ! var . megagroup var )
MessagesController . getInstance ( currentAccount ) . loadChatInfo ( var , null , false )
var . channel = MessagesController . getInstance ( currentAccount ) . getInputChannel ( var )
MessagesController . getInstance ( currentAccount ) . putUsers ( var . users , false )
if ( var . users . size ( var ) < 200 = true )
MessagesStorage . getInstance ( currentAccount ) . putUsersAndChats ( var . users , null , true , true )
MessagesStorage . getInstance ( currentAccount ) . updateChannelUsers ( var , var . participants )
if ( var . indexOfKey ( var . var ) < 0 )
ConnectionsManager . getInstance ( currentAccount ) . bindRequestToGuid ( var , classGuid )
SparseArray < TLRPC . User > var = new SparseArray var ( var )
if ( var == DataQuery . MEDIA_PHOTOVIDEO )
if ( var == var = var = var )
var = var
int var = ( Integer ) var [ 1 ]
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( ProfileActivity . this , NotificationCenter . closeChats )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . closeChats )
var = MessagesController . getInstance ( currentAccount ) . blockedUsers . contains ( var )
DataQuery . getInstance ( currentAccount ) . getMediaCount ( var , DataQuery . MEDIA_PHOTOVIDEO , classGuid , true )
TLRPC . Chat var = MessagesController . getInstance ( currentAccount ) . getChat ( var )
SharedPreferences var = MessagesController . getGlobalMainSettings ( var )
NotificationCenter . getInstance ( currentAccount ) . setAllowedNotificationsDutingAnimation ( new int var )
int var = ConnectionsManager . getInstance ( currentAccount ) . getConnectionState var
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . var )
if ( var != null && var . status != null && ( var . status . expires > var || var . id == UserConfig . getInstance ( currentAccount ) . getClientUserId var ) && var . status . expires > 10000 ++ )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . participants . participants . get ( var ) . var )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . participants . participants . get ( var ) . var )
if ( var . id == UserConfig . getInstance ( currentAccount ) . getClientUserId var var )
var = ConnectionsManager . getInstance ( currentAccount ) . getCurrentTime var + 50000
if ( var . id == UserConfig . getInstance ( currentAccount ) . getClientUserId var var )
MessagesController . getInstance ( currentAccount ) . deleteUserFromChat ( var , MessagesController . getInstance ( currentAccount ) . getUser ( var ) , var )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . closeChats )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . closeChats , - ( long ) var )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . closeChats )
MessagesController . getInstance ( currentAccount ) . deleteUserFromChat ( var , MessagesController . getInstance ( currentAccount ) . getUser ( UserConfig . getInstance ( currentAccount ) . getClientUserId var ) . getInstance ( currentAccount ) . getClientUserId var , var )
TLRPC . TL_userFull var = MessagesController . getInstance ( currentAccount ) . getUserFull ( var )
if ( var != UserConfig . getInstance ( currentAccount ) . getClientUserId var )
if ( var != null && ! var && var == null && var . id != UserConfig . getInstance ( currentAccount ) . getClientUserId var )
if ( var == null || var . participants_count < MessagesController . getInstance ( currentAccount ) . maxMegagroupCount )
if ( ! ( var . participants instanceof TLRPC . TL_chatParticipantsForbidden ) && var . participants . participants . size ( var ) < MessagesController . getInstance ( currentAccount ) . maxGroupCount && ( var . admin || var . creator || ! var . admins_enabled ) )
if ( var . creator && var . participants . participants . size ( var ) >= MessagesController . getInstance ( currentAccount ) . minGroupConvertSize )
var = LocaleController . formatUserStatus ( currentAccount , var )
if ( var == 0 && var . id != UserConfig . getInstance ( currentAccount ) . getClientUserId var && var . id / 1000 != 777 && var . id / 1000 != 333 && var . phone != null && var . phone . length ( var ) != 0 && ContactsController . getInstance ( currentAccount ) . contactsDict . get ( var . id ) == null && ( ContactsController . getInstance ( currentAccount ) . contactsDict . size ( var ) != 0 || ! ContactsController . getInstance ( currentAccount ) . isLoadingContacts var ) var )
var . getImageReceiver ( var ) . setVisible ( ! PhotoViewer . isShowingImage ( var ) , false )
var . getImageReceiver ( var ) . setVisible ( ! PhotoViewer . isShowingImage ( var ) , false )
if ( UserConfig . getInstance ( currentAccount ) . getClientUserId var != var var )
TLRPC . TL_userFull var = MessagesController . getInstance ( currentAccount ) . getUserFull ( var )
if ( ContactsController . getInstance ( currentAccount ) . contactsDict . get ( var ) == null var )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var )
if ( ! MessagesController . getInstance ( currentAccount ) . checkCanOpenChat ( var , var ) )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . closeChats )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . closeChats )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var )
SendMessagesHelper . getInstance ( currentAccount ) . sendMessage ( var , var , null , null , null )
VoIPHelper . startCall ( var , getParentActivity var , MessagesController . getInstance ( currentAccount ) . getUserFull ( var . id ) . id )
var . setText ( AndroidUtilities . replaceTags ( LocaleController . formatString ( "" , R . string . ConvertGroupInfo , LocaleController . formatPluralString ( "" , MessagesController . getInstance ( currentAccount ) . maxMegagroupCount ) , MessagesController . getInstance ( currentAccount ) . maxMegagroupCount ) , R . string . ConvertGroupInfo , LocaleController . formatPluralString ( "" , MessagesController . getInstance ( currentAccount ) . maxMegagroupCount ) , MessagesController . getInstance ( currentAccount ) . maxMegagroupCount ) . formatString ( "" , R . string . ConvertGroupInfo , LocaleController . formatPluralString ( "" , MessagesController . getInstance ( currentAccount ) . maxMegagroupCount ) , MessagesController . getInstance ( currentAccount ) . maxMegagroupCount ) , R . string . ConvertGroupInfo , LocaleController . formatPluralString ( "" , MessagesController . getInstance ( currentAccount ) . maxMegagroupCount ) , MessagesController . getInstance ( currentAccount ) . maxMegagroupCount )
MessagesController . getInstance ( currentAccount ) . openByUserName ( var . substring ( 1 ) , ProfileActivity . this , 0 )
final TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var )
var . setTextAndValue ( var , MessagesController . getInstance ( currentAccount ) . linkPrefix + "" + var . username )
if ( var != 0 && UserConfig . getInstance ( currentAccount ) . getClientUserId var == var var )
TLRPC . EncryptedChat var = MessagesController . getInstance ( currentAccount ) . getEncryptedChat ( int ( var >> 32 ) >> 32 )
SharedPreferences var = MessagesController . getNotificationsSettings ( currentAccount )
var -= ConnectionsManager . getInstance ( currentAccount ) . getCurrentTime var
TLRPC . EncryptedChat var = MessagesController . getInstance ( currentAccount ) . getEncryptedChat ( int ( var >> 32 ) >> 32 )
TLRPC . Chat var = MessagesController . getInstance ( currentAccount ) . getChat ( - var )
SharedPreferences var = MessagesController . getNotificationsSettings ( currentAccount )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . notificationsSettingsUpdated )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . notificationsSettingsUpdated )
SharedPreferences var = MessagesController . getNotificationsSettings ( currentAccount )
SharedPreferences var = MessagesController . getNotificationsSettings ( currentAccount )
SharedPreferences var = MessagesController . getNotificationsSettings ( currentAccount )
SharedPreferences var = MessagesController . getNotificationsSettings ( currentAccount )
SharedPreferences var = MessagesController . getNotificationsSettings ( currentAccount )
SharedPreferences var = MessagesController . getNotificationsSettings ( currentAccount )
SharedPreferences var = MessagesController . getNotificationsSettings ( currentAccount )
SharedPreferences var = MessagesController . getNotificationsSettings ( currentAccount )
SharedPreferences var = MessagesController . getNotificationsSettings ( currentAccount )
var . setTextAndValue ( LocaleController . getString ( "" , R . string . VoipSettingsRingtone ) , R . string . VoipSettingsRingtone , var , false )
var . setTextAndValue ( LocaleController . getString ( "" , R . string . NotificationsImportance ) , R . string . NotificationsImportance , LocaleController . getString ( "" , R . string . NotificationsPriorityUrgent ) , R . string . NotificationsPriorityUrgent , false )
var . setTextAndValue ( LocaleController . getString ( "" , R . string . NotificationsImportance ) , R . string . NotificationsImportance , LocaleController . getString ( "" , R . string . NotificationsPriorityHigh ) , R . string . NotificationsPriorityHigh , false )
if ( var == 5 )
var . setTextAndValue ( LocaleController . getString ( "" , R . string . NotificationsImportance ) , R . string . NotificationsImportance , LocaleController . getString ( "" , R . string . NotificationsPriorityMedium ) , R . string . NotificationsPriorityMedium , false )
var . setTextAndValue ( LocaleController . getString ( "" , R . string . NotificationsImportance ) , R . string . NotificationsImportance , LocaleController . getString ( "" , R . string . NotificationsPrioritySettings ) , R . string . NotificationsPrioritySettings , false )
SharedPreferences var = MessagesController . getNotificationsSettings ( currentAccount )
SharedPreferences var = MessagesController . getNotificationsSettings ( currentAccount )
SharedPreferences var = MessagesController . getNotificationsSettings ( currentAccount )
var . setMaxLines ( 1 )
NotificationCenter . getGlobalInstance ( ) . postNotificationName ( NotificationCenter . proxySettingsChanged )
var . putBoolean ( "" , true )
var . putString ( "" , var . password )
var . putInt ( "" , var . port )
var . drawLine ( getPaddingLeft , getHeight - 1 , getWidth - getPaddingRight , getHeight - 1 , Theme . dividerPaint )
var = new SharedConfig . ProxyInfo ( "" , 1080 , "" , "" , "" )
var . username = var [ var ] . getText . toString
actionBar . setAllowOverlayTitle ( false )
var . putExtra ( Intent . EXTRA_TEXT , var + var . toString ( ) )
var = new ImageView ( var )
var [ var ] . setBackgroundDrawable ( Theme . getSelectorDrawable ( true ) )
var . putString ( "" , var . secret )
if ( AndroidUtilities . isTablet ( ) )
actionBar . setOccupyStatusBar ( false )
var [ 0 ] = new ShadowSectionCell ( var )
for ( int var = 0 ; var < 5 ; var ++ )
var [ var ] . setSingleLine ( true )
var [ var ] . setHeaderHintColor ( Theme . getColor ( Theme . key_windowBackgroundWhiteBlueHeader ) . key_windowBackgroundWhiteBlueHeader )
var [ var ] . setHintColor ( Theme . getColor ( Theme . key_windowBackgroundWhiteHintText ) . key_windowBackgroundWhiteHintText )
var [ var ] . setHintText ( LocaleController . getString ( "" , R . string . UseProxyAddress ) , R . string . UseProxyAddress )
var [ var ] . setText ( var . address )
var [ var ] . setHintText ( LocaleController . getString ( "" , R . string . UseProxyPassword ) , R . string . UseProxyPassword )
var [ var ] . setText ( var . password )
var [ var ] . setHintText ( LocaleController . getString ( "" , R . string . UseProxyPort ) , R . string . UseProxyPort )
var [ var ] . setText ( "" + var . port )
var [ var ] . setHintText ( LocaleController . getString ( "" , R . string . UseProxyUsername ) , R . string . UseProxyUsername )
var [ var ] . setHintText ( LocaleController . getString ( "" , R . string . UseProxySecret ) , R . string . UseProxySecret )
var [ var ] . setPadding ( 0 , 0 , 0 , 0 )
var = new TextView ( var )
var [ var ] . setValue ( LocaleController . getString ( "" , R . string . UseProxySocks5 ) , R . string . UseProxySocks5 , var == var , true )
var = ( Integer ) var . getTag ( )
var [ 1 ] . setBackgroundDrawable ( Theme . getThemedDrawable ( var , R . drawable . greydivider_bottom , Theme . key_windowBackgroundGrayShadow ) , R . drawable . greydivider_bottom , Theme . key_windowBackgroundGrayShadow )
var . setText ( LocaleController . getString ( "" , R . string . ShareFile ) , R . string . ShareFile , false )
if ( var == null || var == null || var [ var ] == null || var [ var ] == null )
var . getTextView ( ) . setAlpha ( 1.0f )
var . getTextView ( ) . setAlpha ( 0.5f )
if ( var && ! var && var )
if ( var == 0 == 1 )
( ( View ) var [ var ] . getParent ) . setVisibility ( View . GONE )
var . setEnabled ( false )
var . setEnabled ( true )
for ( int var = 0 ; var < 5 ; var ++ )
for ( int var = 0 ; var < var . length ; var ++ )
SharedPreferences var = MessagesController . getGlobalMainSettings ( )
long var = System . currentTimeMillis ( ) + ConnectionsManager . getInstance ( currentAccount ) . getTimeDifference * 1000
if ( var == null || var == null || ! var . needDrawBluredPreview ( var ) || var == null )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . newSessionReceived )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . newSessionReceived )
var . registeredForPush = false
var . saveConfig ( false )
MessagesController . getInstance ( var ) . registerForPush ( SharedConfig . pushString )
ConnectionsManager . getInstance ( var ) . setUserId ( var . getClientUserId ( ) )
final TLRPC . TL_webAuthorization var = ( TLRPC . TL_webAuthorization ) var . get ( var - var )
ConnectionsManager . getInstance ( currentAccount ) . bindRequestToGuid ( var , classGuid )
if ( var == 1 || var != null )
var = new SessionCell ( var , var )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . chatInfoDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . updateInterfaces )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . chatInfoDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . updateInterfaces )
var = MessagesController . getInstance ( currentAccount ) . getChat ( var )
MessagesController . getInstance ( currentAccount ) . toggleUserAdmin ( var , var . user_id , ! ( var instanceof TLRPC . TL_chatParticipant ) )
var = MessagesController . getInstance ( currentAccount ) . getChat ( var )
MessagesController . getInstance ( currentAccount ) . toggleAdminMode ( var , var . admins_enabled )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . user_id )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . user_id )
var = MessagesController . getInstance ( currentAccount ) . getChat ( var )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . user_id )
var = MessagesController . getInstance ( currentAccount ) . getChat ( var )
var . setCheckDisabled ( var == null || ! var . admins_enabled || var . user_id == UserConfig . getInstance ( currentAccount ) . getClientUserId )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . user_id )
if ( var . id == UserConfig . getInstance ( currentAccount ) . getClientUserId var )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( var . user_id )
var = MessagesController . getInstance ( currentAccount ) . getChat ( var )
var . setCheckDisabled ( var == null || ! var . admins_enabled || var . user_id == UserConfig . getInstance ( currentAccount ) . getClientUserId )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( UserConfig . getInstance ( currentAccount ) . getClientUserId )
var . dialogId = UserConfig . getInstance ( currentAccount ) . getClientUserId var
var . thumb = var . imageReceiver . getBitmapSafe ( var )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( UserConfig . getInstance ( currentAccount ) . getClientUserId )
var = UserConfig . getInstance ( currentAccount ) . getCurrentUser
MessagesController . getInstance ( currentAccount ) . putUser ( var , false )
UserConfig . getInstance ( currentAccount ) . setCurrentUser ( var )
MessagesStorage . getInstance ( currentAccount ) . clearUserPhotos ( var . id )
MessagesStorage . getInstance ( currentAccount ) . putUsersAndChats ( var , null , false , true )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . updateInterfaces , MessagesController . UPDATE_MASK_ALL )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . mainUserInfoChanged )
UserConfig . getInstance ( currentAccount ) . saveConfig ( true )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . updateInterfaces )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . featuredStickersDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . userInfoDidLoaded )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . emojiDidLoaded )
if ( BuildVars . LOGS_ENABLED )
DataQuery . getInstance ( currentAccount ) . checkFeaturedStickers
MessagesController . getInstance ( currentAccount ) . loadFullUser ( UserConfig . getInstance ( currentAccount ) . getCurrentUser , classGuid , true )
MessagesController . getInstance ( currentAccount ) . cancelLoadFullUser ( UserConfig . getInstance ( currentAccount ) . getClientUserId )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . updateInterfaces )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . featuredStickersDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . userInfoDidLoaded )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . emojiDidLoaded )
var . setValue ( SharedConfig . fontSize )
SharedConfig . fontSize = var . getValue ( )
SharedPreferences var = MessagesController . getGlobalMainSettings ( )
SharedConfig . toogleRaiseToSpeak ( )
( ( TextCheckCell ) var ) . setChecked ( SharedConfig . raiseToSpeak )
SharedConfig . toggleAutoplayGifs ( )
( ( TextCheckCell ) var ) . setChecked ( SharedConfig . autoplayGifs )
SharedConfig . toggleSaveToGallery ( )
( ( TextCheckCell ) var ) . setChecked ( SharedConfig . saveToGallery )
SharedConfig . toggleCustomTabs ( )
( ( TextCheckCell ) var ) . setChecked ( SharedConfig . customTabs )
SharedConfig . toggleDirectShare ( )
( ( TextCheckCell ) var ) . setChecked ( SharedConfig . directShare )
presentFragment ( new ThemeActivity ( ThemeActivity . THEME_TYPE_BASIC ) . THEME_TYPE_BASIC )
ConnectionsManager . getInstance ( currentAccount ) . switchBackend
SharedPreferences var = MessagesController . getGlobalMainSettings ( )
TLRPC . TL_userFull var = MessagesController . getInstance ( currentAccount ) . getUserFull ( UserConfig . getInstance ( currentAccount ) . getClientUserId )
presentFragment ( new StickersActivity ( DataQuery . TYPE_IMAGE ) . TYPE_IMAGE )
CheckBoxCell var = new CheckBoxCell ( getParentActivity var , 1 )
SharedPreferences . Editor var = MessagesController . getGlobalMainSettings ( var ) . edit var
ContactsController . getInstance ( currentAccount ) . resetImportedContacts
ContactsController . getInstance ( currentAccount ) . loadContacts ( false , 0 )
ContactsController . getInstance ( currentAccount ) . forceImportContacts
MessagesController . getInstance ( currentAccount ) . forceResetDialogs
if ( var == 7 )
SharedConfig . toggleRoundCamera16to9 ( )
( ( LaunchActivity ) getParentActivity ) . checkAppUpdate ( true )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( UserConfig . getInstance ( currentAccount ) . getClientUserId )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( UserConfig . getInstance ( currentAccount ) . getClientUserId )
var = UserConfig . getInstance ( currentAccount ) . getCurrentUser
final SharedPreferences var = MessagesController . getMainSettings ( currentAccount )
var = MessagesController . getInstance ( currentAccount ) . getUser ( var )
MessagesStorage . getInstance ( currentAccount ) . putUsersAndChats ( var , null , true , true )
MessagesController . getInstance ( currentAccount ) . putUser ( var . user , false )
MessagesController . getInstance ( currentAccount ) . putUser ( var , true )
if ( var == UserConfig . getInstance ( currentAccount ) . getClientUserId && var != null )
TLRPC . User var = MessagesController . getInstance ( currentAccount ) . getUser ( UserConfig . getInstance ( currentAccount ) . getClientUserId )
var . getImageReceiver ( ) . setVisible ( ! PhotoViewer . isShowingImage ( var ) , false )
var . getImageReceiver ( ) . setVisible ( ! PhotoViewer . isShowingImage ( var ) , false )
int var = DataQuery . getInstance ( currentAccount ) . getUnreadStickerSets . size
SharedPreferences var = MessagesController . getGlobalMainSettings ( )
var . setTextAndCheck ( LocaleController . getString ( "" , R . string . SaveToGallerySettings ) , R . string . SaveToGallerySettings , SharedConfig . saveToGallery , false )
var . setTextAndCheck ( LocaleController . getString ( "" , R . string . AutoplayGifs ) , R . string . AutoplayGifs , SharedConfig . autoplayGifs , true )
var . setTextAndCheck ( LocaleController . getString ( "" , R . string . RaiseToSpeak ) , R . string . RaiseToSpeak , SharedConfig . raiseToSpeak , true )
var . setTextAndValueAndCheck ( LocaleController . getString ( "" , R . string . ChromeCustomTabs ) , R . string . ChromeCustomTabs , LocaleController . getString ( "" , R . string . ChromeCustomTabsInfo ) , R . string . ChromeCustomTabsInfo , SharedConfig . customTabs , false , true )
var . setTextAndValueAndCheck ( LocaleController . getString ( "" , R . string . DirectShare ) , R . string . DirectShare , LocaleController . getString ( "" , R . string . DirectShareInfo ) , R . string . DirectShareInfo , SharedConfig . directShare , false , true )
TLRPC . User var = UserConfig . getInstance ( currentAccount ) . getCurrentUser
TLRPC . User var = UserConfig . getInstance ( currentAccount ) . getCurrentUser
TLRPC . TL_userFull var = MessagesController . getInstance ( currentAccount ) . getUserFull ( UserConfig . getInstance ( currentAccount ) . getClientUserId )
return var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var
if ( var == var || var == var || var == var || var == var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var == var == var || var == var || var == var == var || var == var || var == var || var == var )
if ( var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var )
MessageObject var = new MessageObject ( UserConfig . selectedAccount , var , false )
final boolean var = DataQuery . getInstance ( var ) . isStickerInFavorites ( currentSticker )
if ( ! MessageObject . isMaskDocument ( currentSticker ) && ( var || DataQuery . getInstance ( var ) . canAddStickerToFavorites ) )
var . sendSticker ( currentSticker )
DataQuery . getInstance ( var ) . addRecentSticker ( DataQuery . TYPE_FAVE , currentSticker , int ( System . currentTimeMillis ( ) / 1000 ) . currentTimeMillis ( ) / 1000 , var )
DataQuery . getInstance ( currentAccount ) . checkStickers ( var )
if ( var == DataQuery . TYPE_IMAGE )
DataQuery . getInstance ( currentAccount ) . checkFeaturedStickers
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . stickersDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . archivedStickersCountDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . featuredStickersDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . stickersDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . archivedStickersCountDidLoaded )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . featuredStickersDidLoaded )
if ( var == DataQuery . TYPE_IMAGE )
final TLRPC . TL_messages_stickerSet var = DataQuery . getInstance ( currentAccount ) . getStickerSets ( var ) . get ( var - var )
presentFragment ( new StickersActivity ( DataQuery . TYPE_MASK ) . TYPE_MASK )
var . masks = var == DataQuery . TYPE_MASK
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . stickersDidLoaded , var )
if ( var == DataQuery . TYPE_IMAGE )
if ( DataQuery . getInstance ( currentAccount ) . getArchivedStickersCount ( var ) != 0 )
ArrayList < TLRPC . TL_messages_stickerSet > var = DataQuery . getInstance ( currentAccount ) . getStickerSets ( var )
if ( var >= var && var < var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var )
if ( var == var || var == var || var == var || var == var || var == var || var == var || var == var || var == var )
DataQuery . getInstance ( currentAccount ) . removeStickersSet ( getParentActivity , var . set , 0 , StickersActivity . this , true )
ArrayList < TLRPC . TL_messages_stickerSet > var = DataQuery . getInstance ( currentAccount ) . getStickerSets ( var )
MessagesController . getInstance ( currentAccount ) . openByUserName ( "" , StickersActivity . this , 1 )
if ( var == DataQuery . TYPE_IMAGE )
int var = DataQuery . getInstance ( currentAccount ) . getUnreadStickerSets . size
if ( var == DataQuery . TYPE_IMAGE )
( ( TextSettingsCell ) var . itemView ) . setText ( LocaleController . getString ( "" , R . string . Masks ) , R . string . Masks , false )
if ( var == DataQuery . TYPE_IMAGE )
if ( var >= var && var < var == var || var == var || var == var == var || var == var || var == var || var == var == var || var == var )
if ( var == var || var == var || var == var || var == var )
if ( var == var || var == var )
ArrayList < TLRPC . TL_messages_stickerSet > var = DataQuery . getInstance ( currentAccount ) . getStickerSets ( var )
updateRows
SharedPreferences var = MessagesController . getGlobalMainSettings ( )
var += Theme . themes . size ( )
return var == 0 || var == 1 || var == 4 || var == 7
var = new ThemeTypeCell ( var )
var . write ( AndroidUtilities . getStringBytes ( var . toString ( ) ) . toString ( ) )
FileLog . var ( var )
File var = new File ( FileLoader . getDirectory ( FileLoader . MEDIA_DIR_CACHE ) . MEDIA_DIR_CACHE , var . getName ( ) )
var . setText ( LocaleController . getString ( "" , R . string . CreateNewTheme ) , R . string . CreateNewTheme , false )
var . setText ( LocaleController . getString ( "" , R . string . CreateNewThemeInfo ) , R . string . CreateNewThemeInfo )
var -= var
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . emojiDidLoaded )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . emojiDidLoaded )
var . from_id = UserConfig . getInstance ( currentAccount ) . getClientUserId
MessageObject var = new MessageObject ( currentAccount , var , true )
var . from_id = UserConfig . getInstance ( currentAccount ) . getClientUserId
var . add ( new MessageObject ( currentAccount , var , true ) , var , true )
var . to_id . user_id = UserConfig . getInstance ( currentAccount ) . getClientUserId
var . add ( new MessageObject ( currentAccount , var , true ) , var , true )
var . to_id . user_id = UserConfig . getInstance ( currentAccount ) . getClientUserId
var = new MessageObject ( currentAccount , var , true )
var . from_id = UserConfig . getInstance ( currentAccount ) . getClientUserId
var = new MessageObject ( currentAccount , var , true )
var . var = ""
var . to_id . user_id = UserConfig . getInstance ( currentAccount ) . getClientUserId
var = new MessageObject ( currentAccount , var , true )
var = new MessageObject ( currentAccount , var , false )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . didSetTwoStepPassword )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . didSetTwoStepPassword )
var . setBackgroundColor ( Theme . getColor ( Theme . key_windowBackgroundWhite ) . key_windowBackgroundWhite )
TwoStepVerificationActivity var = new TwoStepVerificationActivity ( currentAccount , 1 )
var . setTitle ( LocaleController . getString ( "" , R . string . RestorePasswordNoEmailTitle ) , R . string . RestorePasswordNoEmailTitle )
TwoStepVerificationActivity var = new TwoStepVerificationActivity ( currentAccount , 1 )
TwoStepVerificationActivity var = new TwoStepVerificationActivity ( currentAccount , 1 )
if ( ! isFinishing && ! var && var != null )
System . arraycopy ( var , 0 , var , 0 , 32 )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . didRemovedTwoStepPassword )
byte var = new byte [ 32 ]
final byte var = AndroidUtilities . getStringBytes ( var )
NotificationCenter . getInstance ( currentAccount ) . postNotificationName ( NotificationCenter . didSetTwoStepPassword )
if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . LOLLIPOP . VERSION . SDK_INT >= Build . VERSION_CODES . KITKAT )
ImageReceiver . BitmapHolder var = var . getBitmapSafe ( )
var . setSingleLine ( false )
var . setClipToPadding ( false )
var . setFitsSystemWindows ( true )
if ( VoIPService . getSharedInstance ( ) != null )
if ( ! var . hasEarpiece ( ) && ! var . isBluetoothHeadsetConnected ( ) )
getWindow . setBackgroundDrawable ( new ColorDrawable ( 0 ) )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . emojiDidLoaded )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . closeInCallActivity )
var . addView ( var = var , LayoutHelper . createFrame ( 38 , 38 , Gravity . CENTER_HORIZONTAL | Gravity . BOTTOM , 0 , 0 , 0 , 10 ) , 38 , Gravity . CENTER_HORIZONTAL | Gravity . BOTTOM , 0 , 0 , 0 , 10 )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . emojiDidLoaded )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . closeInCallActivity )
var . playTogether ( ObjectAnimator . ofFloat ( var , "" , 0 , 1 ) , "" , 0 , 1 , ObjectAnimator . ofFloat ( var , "" , 0 , var . getWidth ( ) / 2 - AndroidUtilities . dp ( 52 ) - var . getWidth ( ) / 2 ) , "" , 0 , var . getWidth ( ) / 2 - AndroidUtilities . dp ( 52 ) - var . getWidth ( ) / 2 , var , ObjectAnimator . ofFloat ( var , "" , 0 , - 135 ) , "" , 0 , - 135 )
var . playTogether ( var , ObjectAnimator . ofFloat ( var , "" , - 135 , 0 ) , "" , - 135 , 0 , ObjectAnimator . ofFloat ( var , "" , 0 ) , "" , 0 , ObjectAnimator . ofFloat ( var , "" , 0 ) , "" , 0 )
int var = MessagesController . getGlobalMainSettings ( ) . getInt ( "" , 0 )
MessagesController . getGlobalMainSettings ( ) . edit . putInt ( "" , var + 1 ) . commit
AlertDialog var = new DarkAlertDialog . Builder ( VoIPActivity . this ) . setTitle ( LocaleController . getString ( "" , R . string . VoipFailed ) , R . string . VoipFailed ) . setMessage ( var ) . setPositiveButton ( LocaleController . getString ( "" , R . string . OK ) , R . string . OK , null ) . show
var . setChecked ( var . isMicMute ( ) )
if ( ! var . hasEarpiece ( ) && ! var . isBluetoothHeadsetConnected ( ) )
if ( var . isBluetoothHeadsetConnected ( ) )
var . drawBitmap ( var . bitmap , null , new Rect ( 0 , 0 , 150 , 150 ) , 0 , 150 , 150 , new Paint ( Paint . FILTER_BITMAP_FLAG ) . FILTER_BITMAP_FLAG )
final Palette var = Palette . from ( var . bitmap ) . generate
var . drawBitmap ( var . bitmap , null , new Rect ( 0 , 0 , 50 , 50 ) , 0 , 50 , 50 , new Paint ( Paint . FILTER_BITMAP_FLAG ) . FILTER_BITMAP_FLAG )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . FileDidFailedLoad )
NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . FileDidLoaded )
NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . wallpapersDidLoaded )
SharedPreferences var = MessagesController . getGlobalMainSettings ( )
MessagesStorage . getInstance ( currentAccount ) . getWallpapers
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . FileDidFailedLoad )
NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . FileDidLoaded )
NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . wallpapersDidLoaded )
File var = new File ( FileLoader . getDirectory ( FileLoader . MEDIA_DIR_CACHE ) . MEDIA_DIR_CACHE , var )
SharedPreferences var = MessagesController . getGlobalMainSettings ( )
RadialProgressView var = new RadialProgressView ( var )
File var = new File ( FileLoader . getDirectory ( FileLoader . MEDIA_DIR_CACHE ) . MEDIA_DIR_CACHE , var )
FileLoader . getInstance ( currentAccount ) . loadFile ( var , null , 1 )
FileLoader . getInstance ( currentAccount ) . cancelLoadFile ( var )
FileLoader . getInstance ( currentAccount ) . cancelLoadFile ( var )
MessagesStorage . getInstance ( currentAccount ) . putWallpapers ( var )
ConnectionsManager . getInstance ( currentAccount ) . bindRequestToGuid ( var , classGuid )
FileLog . d ( var )
MessagesController . getInstance ( currentAccount ) . sendTyping ( var . getDialogId ( ) , 6 , 0 )
