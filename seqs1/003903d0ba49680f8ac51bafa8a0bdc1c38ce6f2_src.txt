if ( this . loadAttributes ( ) )  
Session session = driver ( ) . session ( )  
StatementResult result = session . run ( "MATCH (n:Article) WHERE id(n)={node-identifier} return n.title, n.lang, n.wikiid, n.parents, n.outdegree, " + "n.indegree, n.globe, n.latitude, n.longitude, n.type" , Values . parameters ( "node-identifier" , this . nodeIdentifier ( ) ) )  
for ( Record record : result . list ( ) )  
title ( record . get ( "n.title" ) . asString ( ) )  
language ( record . get ( "n.lang" ) . asString ( ) )  
wikiid ( record . get ( "n.wikiid" ) . asString ( ) )  
parents ( record . get ( "n.parents" ) . asInt ( ) )  
outdegree ( record . get ( "n.outdegree" ) . asInt ( ) )  
indegree ( record . get ( "n.indegree" ) . asInt ( ) )  
if ( ! record . get ( "n.globe" ) . isNull ( ) ) 
globe ( record . get ( "n.globe" ) . asString ( ) )  
if ( ! record . get ( "n.latitude" ) . isNull ( ) ) 
latitude ( record . get ( "n.latitude" ) . asDouble ( ) )  
if ( ! record . get ( "n.longitude" ) . isNull ( ) ) 
latitude ( record . get ( "n.longitude" ) . asDouble ( ) )  
if ( ! record . get ( "n.type" ) . isNull ( ) ) 
type ( record . get ( "n.type" ) . asString ( ) )  
session . close ( )  
this . loadAttributes ( false )  
@ Override public String title ( )  
title ( record . get ( "n.title" ) . asString ( ) )  
language ( record . get ( "n.lang" ) . asString ( ) )  
wikiid ( record . get ( "n.wikiid" ) . asString ( ) )  
parents ( record . get ( "n.parents" ) . asInt ( ) )  
children ( record . get ( "n.children" ) . asInt ( ) )  
size ( record . get ( "n.size" ) . asInt ( ) )  
this . loadAttributes ( false )  
protected Page ( Driver driver , long nodeIdentifier )  
class PageFactory  
PageFactory ( Driver driver )  
Article createArticle ( Node node )  
Set < Article > createArticles ( String query , Value parameters , String targetArticleVariable )  
Set < Category > createCategories ( String query , Value parameters , String targetCategoryVariable )  
Category createCategory ( Node node )  
this . driver = GraphDatabase . driver ( "bolt://" + host , AuthTokens . basic ( "neo4j" , "neo4j" ) )  
