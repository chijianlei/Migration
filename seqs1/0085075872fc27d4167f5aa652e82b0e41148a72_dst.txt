@ Override public List < Guest > findStayingGuestsByDate ( LocalDate date )  
throw new IllegalArgumentException ( "date must not be null" )  
@ Override public List < Room > findFreeRoomsByDateAndLen ( LocalDate date , int len )  
throw new IllegalArgumentException ( "date must not be null" )  
@ Override public List < Room > findRoomsForGuestByDate ( Guest guest , LocalDate date )  
throw new IllegalArgumentException ( "date must not be null" )  
@ Override public List < Guest > findGuestsForRoomByDate ( Room room , LocalDate date )  
throw new IllegalArgumentException ( "date must not be null" )  
assertDeepEqualsStays ( expected , actual )  
assertDeepEqualsStays ( expected , actual )  
@ Test public void findStayingGuestsByDate ( )  
@ Test public void findFreeRoomsByDateAndLen ( )  
Room r1 = roomBuilder . number ( "A001" ) . build ( )  
Room r2 = roomBuilder . number ( "A002" ) . build ( )  
Room r4 = roomBuilder . number ( "A004" ) . build ( )  
Room r3 = roomBuilder . number ( "A003" ) . build ( )  
assertDeepEqualsRooms ( expected , actual )  
assertDeepEqualsRooms ( expected , actual )  
assertDeepEqualsRooms ( expected , actual )  
@ Test ( expected = IllegalArgumentException . class ) public void findFreeRoomsByDateAndLenWithLenNegative ( )  
assertDeepEqualsStays ( expected , actual )  
assertDeepEqualsStays ( expected , actual )  
Guest g2 = guestBuilder . name ( "Chuck Norris" ) . passportNo ( "999" ) . build ( )  
assertDeepEqualsRooms ( expected , actual )  
assertDeepEqualsRooms ( expected , actual )  
assertDeepEqualsRooms ( expected , actual )  
Guest g1 = guestBuilder . name ( "Vin Diesel" ) . passportNo ( "888" ) . build ( )  
assertDeepEqualsStays ( expected , actual )  
assertDeepEqualsStays ( expected , actual )  
assertDeepEqualsStays ( expected , actual )  
assertDeepEqualsStays ( expected , actual )  
Guest g4 = guestBuilder . name ( "Harry Potter" ) . passportNo ( "723" ) . build ( )  
assertDeepEqualsGuests ( expected , actual )  
assertDeepEqualsGuests ( expected , actual )  
assertDeepEqualsGuests ( expected , actual )  
Guest g4 = guestBuilder . name ( "Harry Potter" ) . passportNo ( "723" ) . build ( )  
assertDeepEqualsRooms ( expected , actual )  
assertDeepEqualsRooms ( expected , actual )  
assertDeepEqualsRooms ( expected , actual )  
Stay s1 = stayBuilder . startDate ( LocalDate . of ( 2015 , 1 , 1 ) ) . expectedEndDate ( LocalDate . of ( 2015 , 1 , 3 ) ) . realEndDate ( LocalDate . of ( 2015 , 1 , 3 ) ) . guest ( g0 ) . room ( r1 ) . build ( )  
