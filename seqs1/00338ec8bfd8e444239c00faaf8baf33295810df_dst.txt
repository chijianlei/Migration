public void postEvents ( EventBatchImpl events )  
this . ackTracker . preEventPost ( events )  
sender . getChannelMetrics ( ) . update ( new EventBatchRequest ( LifecycleEvent . Type . PRE_EVENT_POST , events ) )  
FutureCallback < HttpResponse > cb = new HecHttpEventPostCallbacks ( sender . getConnection ( ) , events )  
private class HecHttpEventPostCallbacks extends AbstractHttpCallback  
sender . postEvents ( events , cb )  
sender . getChannelMetrics ( ) . update ( new EventBatchRequest ( LifecycleEvent . Type . EVENT_POSTED , events ) )  
private static class IndexerBusyEventEndpoint extends EventEndpoint  
@ Override public void post ( HttpPostable events , FutureCallback < HttpResponse > cb )  
Runnable r = ( ) -> cb . completed ( new HecErrorResponse ( new IndexerBusyEntity ( ) , new IndexerBusyStatusLine ( ) ) )  
recoverAndThrowException ( events , forced , new HecConnectionTimeoutException ( PropertyKeys . BLOCKING_TIMEOUT_MS + " timeout exceeded on send. Timeout was " + timeout ) )  
private int numEvents = 100  
protected int getNumEventsToSend ( )  
@ Override public void failed ( EventBatch events , Exception e )  
Assert . assertTrue ( e . getMessage ( ) , e instanceof HecServerErrorResponseException )  
LOG . trace ( "Got expected exception: " + e )  
latch . countDown ( ) ; 
props . put ( BLOCKING_TIMEOUT_MS , "5000" ) ; 
@ Test public void postToBusyIndexerButHealthCheckOK ( ) throws InterruptedException , TimeoutException , HecConnectionTimeoutException  
catch ( HecConnectionTimeoutException e )  
LOG . trace ( "Got expected timeout exception because all channels are unhealthy " + "due to indexer being busy (per test design): " + e . getMessage ( ) ) ; 
