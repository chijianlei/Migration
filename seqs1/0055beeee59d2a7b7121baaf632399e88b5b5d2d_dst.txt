socket = new Socket ( ( String ) null , Settings . getSyncropCommunicationPort ( ) )  
out = new PrintWriter ( socket . getOutputStream ( ) )  
out . flush ( )  
in = new Scanner ( socket . getInputStream ( ) )  
out . print ( s )  
out . flush ( )  
setPriority ( Thread . MIN_PRIORITY )  
while ( ! SyncropGUI . isShuttingDown ( ) ) 
if ( socket == null ) 
connect ( )  
else if ( socket . isBound ( ) )  
print ( STATUS )  
setStatus ( in . nextLine ( ) )  
catch ( ConnectException e )  
catch ( IOException e )  
Syncrop . logger . logError ( e )  
try { Thread . sleep ( 5000 ) ; } catch ( InterruptedException e ) {  
private void setStatus ( String status )  
this . status = status  
syncropCommunicationThread . start ( )  
updateStatus ( SyncropCommunication . STATE_OFFLINE )  
syncropClientButton . addActionListener ( this )  
double maxSize = Settings . getMaxAccountSize ( )  
String percentUsed = String . format ( "%.2f" , size / maxSize * 100 )  
size > GIGABYTE ? 
spaceLeftInAccount . setText ( "<html>" + percentUsed + "% used;<br/>" + spaceUsed + " of " + maxSize / GIGABYTE + " GiB</html>" )  
fileSyncStatusPanel . revalidate ( )  
@ Override public void actionPerformed ( ActionEvent e )  
if ( e . getSource ( ) . equals ( syncropClientButton ) ) 
Runtime . getRuntime ( ) . exec ( "syncrop stop" )  
logger . log ( "Tried to start Syncrop" )  
Runtime . getRuntime ( ) . exec ( "syncrop start" )  
} catch ( IOException e1 )  
logger . logError ( e1 )  
public static SyncropCommunicationThread getSyncropCommunicationThread ( )  
new FileWatcher ( null ) . checkAllFiles ( new RemoveSyncropConflictsAction ( ) )  
