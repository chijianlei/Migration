resourceManagement = ( ResourceManagement ) context . getBean ( "openstackVIM" , "15672" )  
nfvoRequestor . getNetworkServiceRecordAgent ( ) . updateVNFR ( nsr_id , vnfr_id , vnfr )  
for ( int i = currentPoolSize ; i <= pool_size ; i ++ )  
log . info ( "Terminating vnfr with id " + virtualNetworkFunctionRecord . getId ( ) )  
Set < Event > events = lifecycleManagement . listEvents ( virtualNetworkFunctionRecord )  
for ( VirtualDeploymentUnit vdu : virtualNetworkFunctionRecord . getVdu ( ) )  
Set < VNFCInstance > vnfciToRem = new HashSet < > ( )  
for ( VNFCInstance vnfcInstance : vdu . getVnfc_instance ( ) )  
log . debug ( "Releasing resources for vdu with id " + vdu . getId ( ) )  
resourceManagement . release ( vnfcInstance , vdu . getVimInstance ( ) )  
log . debug ( "Removed VNFCinstance: " + vnfcInstance )  
catch ( VimException e )  
log . error ( e . getMessage ( ) , e )  
throw new RuntimeException ( e . getMessage ( ) , e )  
vnfciToRem . add ( vnfcInstance )  
log . debug ( "Released resources for vdu with id " + vdu . getId ( ) )  
vdu . getVnfc_instance ( ) . removeAll ( vnfciToRem )  
log . info ( "Terminated vnfr with id " + virtualNetworkFunctionRecord . getId ( ) )  
applicationManagement . deleteByVnfrId ( virtualNetworkFunctionRecord . getId ( ) )  
mediaServerManagement . deleteByVnfrId ( virtualNetworkFunctionRecord . getId ( ) )  
managedVnfrRepository . deleteByVnfrId ( virtualNetworkFunctionRecord . getId ( ) )  
catch ( NotFoundException e )  
log . warn ( e . getMessage ( ) )  
@ Override public VirtualNetworkFunctionRecord start ( VirtualNetworkFunctionRecord virtualNetworkFunctionRecord ) throws VimException , NotFoundException , VimDriverException  
