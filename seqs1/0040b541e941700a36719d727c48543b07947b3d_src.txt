SourceCallback sourceCallback  
Gson gson  
Map messageMap = gson . fromJson ( message , stringStringMap )  
e . printStackTrace ( )  
@ OAuthProtected @ Summary ( "This processor returns a portion of messages/events from the specified channel." ) @ Processor ( friendlyName = "Channel - History" ) @ MetaDataScope ( ChannelCategory . class ) public List < Message > getChannelHistory ( @ FriendlyName ( "Channel ID" ) @ Summary ( "Channel to fetch history for" ) @ MetaDataKeyParam String channelId , @ Optional @ Summary ( "End of time range of messages to include in results. Leave it blank to select current time." ) String latestTimestamp , @ Optional @ Summary ( "Start of time range of messages to include in results. Leave it blank for timestamp 0" ) String oldestTimestamp , @ Default ( "100" ) @ Summary ( NUMBER_OF_MESSAGES ) String mountOfMessages )  
return slack ( ) . channels . getChannelHistory ( channelId , latestTimestamp , oldestTimestamp , mountOfMessages )  
@ OAuthProtected @ Processor ( friendlyName = "Chat - Post message" ) @ MetaDataScope ( AllChannelCategory . class ) public MessageResponse postMessage ( String message , @ FriendlyName ( "Channel ID" ) @ MetaDataKeyParam String channelId , @ Optional @ FriendlyName ( "Name to show" ) String username , @ Optional @ FriendlyName ( "Icon URL" ) String iconURL , @ Optional Boolean asUser )  
@ OAuthProtected @ Processor ( friendlyName = "Chat - Post message with attachment" ) @ MetaDataScope ( AllChannelCategory . class ) public MessageResponse postMessageWithAttachment ( @ Optional String message , @ FriendlyName ( "Channel ID" ) @ MetaDataKeyParam String channelId , @ Optional @ FriendlyName ( "Name to show" ) String username , @ Optional @ FriendlyName ( "Icon URL" ) String iconURL , @ FriendlyName ( "Attachment List" ) @ Default ( "#[payload]" ) @ RefOnly List < ChatAttachment > chatAttachmentList , @ Optional Boolean asUser )  
@ OAuthProtected @ Summary ( "This processor returns a portion of messages/events from the specified DM." ) @ Processor ( friendlyName = "IM - History" ) @ MetaDataScope ( UserCategory . class ) public List < Message > getDMHistory ( @ FriendlyName ( "Channel ID" ) @ Summary ( "Channel to fetch history for" ) @ MetaDataKeyParam String channelID , @ Optional @ Summary ( "End of time range of messages to include in results. Leave it blank to select current time." ) String latestTimestamp , @ Optional @ Summary ( "Start of time range of messages to include in results. Leave it blank for timestamp 0" ) String oldestTimestamp , @ Default ( "100" ) @ Summary ( "Number of messages to return, between 1 and 1000." ) String mountOfMessages )  
@ OAuthProtected @ Summary ( "This processor returns a portion of messages/events from the specified group." ) @ Processor ( friendlyName = "Group - History" ) @ MetaDataScope ( GroupCategory . class ) public List < Message > getGroupHistory ( @ FriendlyName ( "Channel ID" ) @ Summary ( "Group to fetch history for" ) @ MetaDataKeyParam String groupID , @ Optional @ Summary ( "End of time range of messages to include in results. Leave it blank to select current time." ) String latestTimestamp , @ Optional @ Summary ( "Start of time range of messages to include in results. Leave it blank for timestamp 0" ) String oldestTimestamp , @ Default ( "100" ) @ Summary ( "Number of messages to return, between 1 and 1000." ) String mountOfMessages )  
return slack ( ) . usergroups . disableUserGroup ( userGroupId , includeCount )  
@ OAuthProtected @ Processor ( friendlyName = "UserGroups - Create" ) public Usergroup createUserGroup ( @ Summary ( "A name for the User Group. Must be unique among User Groups." ) String userGroupName , @ Optional @ Summary ( "A mention handle. Must be unique among channels, user and User Groups." ) String handle , @ Optional @ Summary ( "A short description of the User Group." ) String description , @ Optional @ Summary ( "A list channel IDs for which the User Group uses as a default." ) List < String > channels , @ Summary ( "Include the number of user in each user group." ) @ Default ( "false" ) Boolean includeCount )  
return slack ( ) . usergroups . createUserGroup ( userGroupName , handle , description , channels , includeCount )  
@ OAuthProtected @ Processor ( friendlyName = "UserGroups - Update" ) public Usergroup updateUserGroup ( @ Summary ( "The ID of the User Group" ) String userGroupId , @ Optional @ Summary ( "A name for the User Group. Must be unique among User Groups." ) String userGroupName , @ Optional @ Summary ( "A mention handle. Must be unique among channels, user and User Groups." ) String handle , @ Optional @ Summary ( "A short description of the User Group." ) String description , @ Optional @ Summary ( "A list channel IDs for which the User Group uses as a default." ) List < String > channels , @ Summary ( "Include the number of user in each user group." ) @ Default ( "false" ) Boolean includeCount )  
