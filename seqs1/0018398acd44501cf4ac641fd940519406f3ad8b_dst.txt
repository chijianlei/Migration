public final class ListShardMap < TKey > extends ShardMap implements ICloneable < ShardMap >  
@ Override public SQLServerConnection OpenConnectionForKey ( TKey key , String connectionString )  
@ Override public SQLServerConnection OpenConnectionForKey ( TKey key , String connectionString , ConnectionOptions options )  
@ Override public Callable < SQLServerConnection > OpenConnectionForKeyAsync ( TKey key , String connectionString )  
@ Override public Callable < SQLServerConnection > OpenConnectionForKeyAsync ( TKey key , String connectionString , ConnectionOptions options )  
Stopwatch stopwatch = Stopwatch . createStarted ( )  
String mappingKey = creationInfo . getKey ( ) . getRawValue ( ) . toString ( )  
log . info ( "CreatePointMapping Start; ShardMap name: {}; Point Mapping: {} " , this . getName ( ) , mappingKey )  
PointMapping < TKey > pointMapping = _lsm . Add ( new PointMapping < TKey > ( this . getShardMapManager ( ) , creationInfo ) )  
log . info ( "CreatePointMapping Complete; ShardMap name: {}; Point Mapping: {}; Duration: {}" , this . getName ( ) , mappingKey , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) )  
String mappingKey = args . getKey ( ) . getRawValue ( ) . toString ( )  
log . info ( "CreatePointMapping Start; ShardMap name: {}; Point Mapping: {}" , this . getName ( ) , mappingKey )  
PointMapping < TKey > pointMapping = _lsm . Add ( new PointMapping < TKey > ( this . getShardMapManager ( ) , args ) )  
log . info ( "CreatePointMapping Complete; ShardMap name: {}; Point Mapping: {}; Duration: {}" , this . getName ( ) , mappingKey , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) )  
public void DeleteMapping ( PointMapping < TKey > mapping )  
String mappingKey = mapping . getKey ( ) . getRawValue ( ) . toString ( )  
log . info ( "DeletePointMapping Start; ShardMap name: {}; Point Mapping: {}" , this . getName ( ) , mappingKey )  
log . info ( "DeletePointMapping Completed; ShardMap name: {}; Point Mapping: {}; Duration: {}" , this . getName ( ) , mappingKey , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) )  
public PointMapping < TKey > GetMappingForKey ( TKey key )  
log . info ( "LookupPointMapping" , "Start; ShardMap name: {0}; Point Mapping Key Type: {1}" , this . getName ( ) , key . getClass ( ) )  
log . info ( "TryLookupPointMapping" , "Complete; ShardMap name: {0}; Point Mapping Key Type: {1}; Duration: {2}" , this . getName ( ) , key . getClass ( ) , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) )  
log . info ( "TryLookupPointMapping" , "Start; ShardMap name: {0}; Point Mapping Key Type: {1}" , this . getName ( ) , key . getClass ( ) )  
log . info ( "LookupPointMapping" , "Complete; ShardMap name: {0}; Point Mapping Key Type: {1}; Duration: {2}" , this . getName ( ) , key . getClass ( ) , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) )  
log . info ( "GetPointMappings" , "Complete; Duration: {0}" , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) )  
log . info ( "GetPointMappings" , "Complete; Range: {0}; Duration: {1}" , range , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) )  
log . info ( "GetPointMappings" , "Complete; Shard: {0}; Duration: {1}" , shard . getLocation ( ) , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) )  
log . info ( "GetPointMappings" , "Complete; Shard: {0}; Duration: {1}" , shard . getLocation ( ) , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) )  
log . info ( "MarkMappingOffline" , "Complete; Duration: {0}" , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) )  
log . info ( "MarkMappingOnline" , "Complete; Duration: {0}" , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) )  
String mappingKey = currentMapping . getKey ( ) . getRawValue ( ) . toString ( )  
log . info ( "UpdatePointMapping" , "Start; ShardMap name: {0}; Current Point Mapping: {1}" , this . getName ( ) , mappingKey )  
log . info ( "UpdatePointMapping" , "Complete; ShardMap name: {0}; Current Point Mapping: {1}; Duration: {2}" , this . getName ( ) , mappingKey , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) )  
public void UnlockMapping ( PointMapping < TKey > mapping , MappingLockToken mappingLockToken )  
ExceptionUtils . DisallowNullArgument ( mapping , "mapping" )  
UUID lockOwnerId = mappingLockToken . getLockOwnerId ( )  
@ Override public < V > IShardMapper1 < V > GetMapper ( )  
return ( IShardMapper1 < V > ) ( ( _lsm instanceof IShardMapper ) ? _lsm : null )  
( IShardMapper1 < V > ) ( ( _lsm instanceof IShardMapper ) ? _lsm : null )  
@ Override public Connection OpenConnectionForKey ( TKey key , String connectionString )  
@ Override public Connection OpenConnectionForKey ( TKey key , String connectionString , ConnectionOptions options )  
@ Override public Callable < SQLServerConnection > OpenConnectionForKeyAsync ( TKey key , String connectionString )  
@ Override public Callable < SQLServerConnection > OpenConnectionForKeyAsync ( TKey key , String connectionString , ConnectionOptions options )  
try ( ActivityIdScope activityIdScope = new ActivityIdScope ( UUID . randomUUID ( ) ) )  
try ( ActivityIdScope activityIdScope = new ActivityIdScope ( UUID . randomUUID ( ) ) )  
public void DeleteMapping ( RangeMapping < TKey > mapping )  
public void DeleteMapping ( RangeMapping < TKey > mapping , MappingLockToken mappingLockToken )  
ExceptionUtils . DisallowNullArgument ( mapping , "mapping" )  
ExceptionUtils . DisallowNullArgument ( mappingLockToken , "mappingLockToken" )  
try ( ActivityIdScope activityIdScope = new ActivityIdScope ( UUID . randomUUID ( ) ) )  
Stopwatch stopwatch = Stopwatch . createStarted ( )  
stopwatch . stop ( )  
log . info ( "GetMapping Start; Range Mapping Key Type: {}" , key . getClass ( ) )  
log . info ( "GetMapping Complete; Range Mapping Key Type: {} Duration: {}" , key . getClass ( ) , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) )  
log . info ( "TryLookupRangeMapping Start; ShardMap name: {}; Range Mapping Key Type: {}" , this . getName ( ) , key . getClass ( ) )  
stopwatch . stop ( )  
log . info ( "TryLookupRangeMapping Complete; ShardMap name: {}; Range Mapping Key Type: {}; Duration: {}" , this . getName ( ) , key . getClass ( ) , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) )  
List < RangeMapping < TKey >> rangeMappings = this . rsm . GetMappingsForRange ( range , shard )  
try ( ActivityIdScope activityIdScope = new ActivityIdScope ( UUID . randomUUID ( ) ) )  
List < RangeMapping < TKey >> rangeMappings = this . rsm . GetMappingsForRange ( null , null )  
public List < RangeMapping < TKey >> GetMappings ( Range < TKey > range )  
try ( ActivityIdScope activityIdScope = new ActivityIdScope ( UUID . randomUUID ( ) ) )  
log . info ( "GetMappings Start; Range: {}" , range )  
List < RangeMapping < TKey >> rangeMappings = this . rsm . GetMappingsForRange ( range , null )  
stopwatch . stop ( )  
log . info ( "GetMappings Complete; Range: {}; Duration: {}" , range , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) )  
public List < RangeMapping < TKey >> GetMappings ( Shard shard )  
try ( ActivityIdScope activityIdScope = new ActivityIdScope ( UUID . randomUUID ( ) ) )  
log . info ( "GetMappings Start; Shard: {}" , shard . getLocation ( ) )  
List < RangeMapping < TKey >> rangeMappings = this . rsm . GetMappingsForRange ( null , shard )  
log . info ( "GetMappings Complete; Shard: {}; Duration: {}" , shard . getLocation ( ) , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) )  
public List < RangeMapping < TKey >> GetMappings ( Range < TKey > range , Shard shard )  
try ( ActivityIdScope activityIdScope = new ActivityIdScope ( UUID . randomUUID ( ) ) )  
log . info ( "GetMappings Start; Shard: {}; Range: {}" , shard . getLocation ( ) , range )  
List < RangeMapping < TKey >> rangeMappings = this . rsm . GetMappingsForRange ( range , shard )  
log . info ( "GetMappings Complete; Shard: {}; Duration: {}" , shard . getLocation ( ) , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) )  
return this . MarkMappingOffline ( mapping , MappingLockToken . NoLock )  
public RangeMapping < TKey > MarkMappingOnline ( RangeMapping < TKey > mapping , MappingLockToken mappingLockToken )  
ExceptionUtils . DisallowNullArgument ( mapping , "mapping" )  
ExceptionUtils . DisallowNullArgument ( mappingLockToken , "mappingLockToken" )  
try ( ActivityIdScope activityIdScope = new ActivityIdScope ( UUID . randomUUID ( ) ) )  
log . info ( "MarkMappingOnline Start; " )  
Stopwatch stopwatch = Stopwatch . createStarted ( )  
RangeMapping < TKey > result = this . rsm . MarkMappingOnline ( mapping , mappingLockToken . getLockOwnerId ( ) )  
stopwatch . stop ( )  
log . info ( "MarkMappingOnline Complete; Duration: {}" , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) )  
public RangeMapping < TKey > MarkMappingOnline ( RangeMapping < TKey > mapping )  
return this . MarkMappingOnline ( mapping , MappingLockToken . NoLock )  
public RangeMapping < TKey > MarkMappingOffline ( RangeMapping < TKey > mapping , MappingLockToken mappingLockToken )  
log . info ( "MarkMappingOffline Start; " )  
RangeMapping < TKey > result = this . rsm . MarkMappingOffline ( mapping , mappingLockToken . getLockOwnerId ( ) )  
log . info ( "MarkMappingOffline Complete; Duration: {}" , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) )  
log . info ( "LookupLockOwner Start" )  
stopwatch . stop ( )  
log . info ( "LookupLockOwner Complete; Duration: {}; StoreLockOwnerId: {}" , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) , storeLockOwnerId )  
ExceptionUtils . DisallowNullArgument ( mapping , "mapping" )  
UUID lockOwnerId = mappingLockToken . getLockOwnerId ( )  
log . info ( "Lock Start; LockOwnerId: {}" , lockOwnerId )  
log . info ( "Lock Complete; Duration: {}; StoreLockOwnerId: {}" , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) , lockOwnerId )  
try ( ActivityIdScope activityIdScope = new ActivityIdScope ( UUID . randomUUID ( ) ) )  
UUID lockOwnerId = mappingLockToken . getLockOwnerId ( )  
log . info ( "UnLock Complete; Duration: {}; StoreLockOwnerId: {}" , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) , lockOwnerId )  
try ( ActivityIdScope activityIdScope = new ActivityIdScope ( UUID . randomUUID ( ) ) )  
UUID lockOwnerId = mappingLockToken . getLockOwnerId ( )  
log . info ( "UnlockAllMappingsWithLockOwnerId Complete; Duration: {}" , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) )  
try ( ActivityIdScope activityIdScope = new ActivityIdScope ( UUID . randomUUID ( ) ) )  
log . info ( "UpdateMapping Start; Current mapping shard: {}" , currentMapping . getShard ( ) . getLocation ( ) )  
RangeMapping < TKey > rangeMapping = this . rsm . Update ( currentMapping , update , mappingLockToken . getLockOwnerId ( ) )  
log . info ( "UpdateMapping Complete; Current mapping shard: {}; Duration: {}" , currentMapping . getShard ( ) . getLocation ( ) , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) )  
public List < RangeMapping < TKey >> SplitMapping ( RangeMapping < TKey > existingMapping , TKey splitAt )  
public List < RangeMapping < TKey >> SplitMapping ( RangeMapping < TKey > existingMapping , TKey splitAt , MappingLockToken mappingLockToken )  
ExceptionUtils . DisallowNullArgument ( mappingLockToken , "mappingLockToken" )  
try ( ActivityIdScope activityIdScope = new ActivityIdScope ( UUID . randomUUID ( ) ) )  
log . info ( "SplitMapping Start; Shard: {}" , existingMapping . getShard ( ) . getLocation ( ) )  
List < RangeMapping < TKey >> rangeMapping = this . rsm . Split ( existingMapping , splitAt , mappingLockToken . getLockOwnerId ( ) )  
log . info ( "SplitMapping Complete; Shard: {}; Duration: {}" , existingMapping . getShard ( ) . getLocation ( ) , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) )  
public RangeMapping < TKey > MergeMappings ( RangeMapping < TKey > left , RangeMapping < TKey > right )  
public RangeMapping < TKey > MergeMappings ( RangeMapping < TKey > left , RangeMapping < TKey > right , MappingLockToken leftMappingLockToken , MappingLockToken rightMappingLockToken )  
ExceptionUtils . DisallowNullArgument ( left , "left" )  
ExceptionUtils . DisallowNullArgument ( right , "right" )  
log . info ( "SplitMapping Start; Left Shard: {}; Right Shard: {}" , left . getShard ( ) . getLocation ( ) , right . getShard ( ) . getLocation ( ) )  
RangeMapping < TKey > rangeMapping = this . rsm . Merge ( left , right , leftMappingLockToken . getLockOwnerId ( ) , rightMappingLockToken . getLockOwnerId ( ) )  
log . info ( "SplitMapping Complete; Duration: {}" , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) )  
@ Override public < V > IShardMapper1 < V > GetMapper ( )  
return ( IShardMapper1 < V > ) ( ( this . rsm instanceof IShardMapper ) ? this . rsm : null )  
@ Override public < V > IShardMapper1 < V > GetMapper ( )  
( IShardMapper1 < V > ) ( ( this . rsm instanceof IShardMapper ) ? this . rsm : null )  
: null )  
public ShardMap Clone ( )  
return new RangeShardMap < TKey > ( this . getShardMapManager ( ) , this . getStoreShardMap ( ) )  
