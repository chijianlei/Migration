if ( verifyFactorResponse . getStatus ( ) . getCode ( ) == 400L )  
final CreateSessionLoginTokenResponse createSessionLoginTokenResponse = oneLoginClient . createSessionLoginToken ( username , password )  
if ( createSessionLoginTokenResponse . getStatus ( ) . isError ( ) )  
String msg = String . format ( "The user %s failed to authenticate for reason: %s" , username , createSessionLoginTokenResponse . getStatus ( ) . getMessage ( ) )  
if ( createSessionLoginTokenResponse . getStatus ( ) . getCode ( ) == 400L )  
if ( StringUtils . startsWithIgnoreCase ( createSessionLoginTokenResponse . getStatus ( ) . getMessage ( ) , "MFA" ) )  
throw ApiException . newBuilder ( ) . withApiErrors ( DefaultApiError . MFA_SETUP_REQUIRED ) . withExceptionMessage ( msg ) . build ( )  
throw ApiException . newBuilder ( ) . withApiErrors ( DefaultApiError . AUTH_BAD_CREDENTIALS ) . withExceptionMessage ( msg ) . build ( )  
throw ApiException . newBuilder ( ) . withApiErrors ( DefaultApiError . GENERIC_BAD_REQUEST ) . withExceptionMessage ( msg ) . build ( )  
return createSessionLoginTokenResponse . getData ( ) . get ( 0 )  
catch ( IllegalArgumentException iae )  
public enum DefaultApiError implements ApiError { REQUEST_BODY_MISSING ( 99000 , "Request body required" , HttpServletResponse . SC_BAD_REQUEST ) , REQUEST_BODY_MALFORMED ( 99001 , "Request body malformed." , HttpServletResponse . SC_BAD_REQUEST ) , IAM_ROLE_ACCT_ID_INVALID ( 99102 , "AWS account id is malformed." , HttpServletResponse . SC_BAD_REQUEST ) , AUTH_IAM_ROLE_NAME_INVALID ( 99103 , "AWS IAM role name is invalid." , HttpServletResponse . SC_BAD_REQUEST ) , AUTH_IAM_ROLE_AWS_REGION_BLANK ( 99104 , "AWS region is malformed." , HttpServletResponse . SC_BAD_REQUEST ) , AUTH_VAULT_TOKEN_INVALID ( 99105 , "X-Vault-Token header is malformed." , HttpServletResponse . SC_UNAUTHORIZED ) , AUTH_BAD_CREDENTIALS ( 99106 , "Invalid credentials" , HttpServletResponse . SC_BAD_REQUEST ) , CATEGORY_DISPLAY_NAME_BLANK ( 99200 , "Display name may not be blank." , HttpServletResponse . SC_BAD_REQUEST ) , CATEGORY_DISPLAY_NAME_TOO_LONG ( 99201 , "Display name must be 255 characters or less." , HttpServletResponse . SC_BAD_REQUEST ) , USER_GROUP_NAME_BLANK ( 99202 , "User group name may not be blank." , HttpServletResponse . SC_BAD_REQUEST ) , USER_GROUP_ROLE_ID_INVALID ( 99203 , "User group role id is invalid." , HttpServletResponse . SC_BAD_REQUEST ) , IAM_ROLE_ACCT_ID_BLANK ( 99204 , "The AWS account id for the IAM role may not be blank." , HttpServletResponse . SC_BAD_REQUEST ) , IAM_ROLE_NAME_INVALID ( 99205 , "The AWS IAM role name is invalid. Alpha-numeric characters and the dash (-) are valid." , HttpServletResponse . SC_BAD_REQUEST ) , IAM_ROLE_ROLE_ID_INVALID ( 99206 , "The role id for the IAM role is invalid." , HttpServletResponse . SC_BAD_REQUEST ) , SDB_CATEGORY_ID_INVALID ( 99207 , "The category id is invalid." , HttpServletResponse . SC_BAD_REQUEST ) , SDB_NAME_BLANK ( 99208 , "The name may not be blank." , HttpServletResponse . SC_BAD_REQUEST ) , SDB_OWNER_BLANK ( 99209 , "The owner may not be blank." , HttpServletResponse . SC_BAD_REQUEST ) , SDB_UNIQUE_NAME ( 99210 , "The name is not unique." , HttpServletResponse . SC_BAD_REQUEST ) , SDB_CALLER_OWNERSHIP_REQUIRED ( 99211 , "Ownership required." , HttpServletResponse . SC_FORBIDDEN ) , SDB_NAME_TOO_LONG ( 99212 , "Name may not exceed 100 characters." , HttpServletResponse . SC_BAD_REQUEST ) , SDB_DESCRIPTION_TOO_LONG ( 99213 , "Description may not exceed 1000 characters." , HttpServletResponse . SC_BAD_REQUEST ) , SDB_OWNER_TOO_LONG ( 99214 , "Owner may not exceed 255 characters." , HttpServletResponse . SC_BAD_REQUEST ) , AUTH_IAM_ROLE_AWS_REGION_INVALID ( 99215 , "Invalid AWS region." , HttpServletResponse . SC_BAD_REQUEST ) , AUTH_IAM_PRINCIPAL_INVALID ( 99216 , "The specified IAM principal is not valid." , HttpServletResponse . SC_BAD_REQUEST ) , SDB_IAM_ROLE_PERMISSION_AWS_REGION_INVALID ( 99217 , "Invalid AWS region specified for the IAM role." , HttpServletResponse . SC_BAD_REQUEST ) , SDB_IAM_ROLE_PERMISSION_IAM_ROLE_INVALID ( 99226 , "Invalid AWS IAM role specified for the SDB." , HttpServletResponse . SC_BAD_REQUEST ) , SDB_USER_GROUP_REPEATED ( 99218 , "The user group permissions contains duplicate entries." , HttpServletResponse . SC_BAD_REQUEST ) , SDB_IAM_ROLE_REPEATED ( 99219 , "The IAM role permissions contains duplicate entries." , HttpServletResponse . SC_BAD_REQUEST ) , SDB_OWNER_IN_USER_GROUP_PERMS ( 99220 , "The owner can not be included in the user group permissions." , HttpServletResponse . SC_BAD_REQUEST ) , SDB_TOO_MANY_OWNERS ( 99221 , "The SDB has more than one owners!" , HttpServletResponse . SC_INTERNAL_SERVER_ERROR ) , MFA_SETUP_REQUIRED ( 99222 , "MFA is required but the user has not set up any factors." , HttpServletResponse . SC_BAD_REQUEST ) , AUTH_IAM_ROLE_REJECTED ( 99223 , "KMS rejected the IAM Role ARN with an InvalidArnException." , HttpServletResponse . SC_INTERNAL_SERVER_ERROR ) , INVALID_QUERY_PARAMS ( 99224 , "Invalid query params" , HttpServletResponse . SC_BAD_REQUEST ) , FAILED_TO_VALIDATE_KMS_KEY_POLICY ( 99225 , "Failed to validate KMS key policy" , HttpServletResponse . SC_INTERNAL_SERVER_ERROR ) , SDB_IAM_PRINCIPAL_PERMISSION_ARN_INVALID ( 99226 , "Invalid AWS IAM role specified for the SDB." , HttpServletResponse . SC_BAD_REQUEST ) , SDB_IAM_PRINCIPAL_REPEATED ( 99227 , "The IAM principal permissions contains duplicate entries." , HttpServletResponse . SC_BAD_REQUEST ) , AUTH_IAM_PRINCIPAL_AWS_REGION_BLANK ( 99228 , "AWS region is malformed." , HttpServletResponse . SC_BAD_REQUEST ) , ENTITY_NOT_FOUND ( 99996 , "Not found" , HttpServletResponse . SC_NOT_FOUND ) , SERVICE_UNAVAILABLE ( 99997 , "Service is unavailable at this time." , HttpServletResponse . SC_SERVICE_UNAVAILABLE ) , INTERNAL_SERVER_ERROR ( 99998 , "Internal server error has occurred." , HttpServletResponse . SC_INTERNAL_SERVER_ERROR ) , GENERIC_BAD_REQUEST ( 99999 , "Request will not be completed." , HttpServletResponse . SC_BAD_REQUEST ) , MISCONFIGURED_APP ( 99995 , "The application is not properly configured." , HttpServletResponse . SC_SERVICE_UNAVAILABLE ) , ACCESS_DENIED ( 99994 , "Access to the requested resource was denied." , HttpServletResponse . SC_FORBIDDEN )  
setupMockWhereLoginGivesError ( 400L , "mfa something error message" )  
assertTrue ( e . getApiErrors ( ) . contains ( DefaultApiError . MFA_SETUP_REQUIRED ) )  
setupMockWhereLoginGivesError ( 400L , "any other error message" )  
assertFalse ( e . getApiErrors ( ) . contains ( DefaultApiError . MFA_SETUP_REQUIRED ) )  
setupMockWhereVerifyGivesError ( 400L , "any error message" )  
@ Test ( expected = IllegalArgumentException . class ) public void get_client_by_region_string_throws_exception_if_bad_region_passed ( )  
