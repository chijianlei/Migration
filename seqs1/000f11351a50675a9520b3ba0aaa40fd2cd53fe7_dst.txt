( ( ExtractTask ) project . getTasks ( ) . getByName ( projectString ( TASK_PROJECT_EXTRACT_SRC , patcher ) ) ) . from ( patched )  
if ( lastPatcher != null ) 
patch . dependsOn ( projectString ( TASK_PROJECT_PATCH , lastPatcher ) )  
remap . dependsOn ( projectString ( TASK_PROJECT_REMAP_JAR , lastPatcher ) )  
patch . addInject ( lastPatcher . getDelayedSourcesDir ( ) )  
patch . addInject ( lastPatcher . getDelayedResourcesDir ( ) )  
ApplyS2STask retromap = ( ApplyS2STask ) project . getTasks ( ) . getByName ( projectString ( TASK_PROJECT_RETROMAP , patcher ) )  
genPatches . addOriginalSource ( delayedFile ( projectString ( JAR_PROJECT_REMAPPED , patcher ) ) )  
genPatches . addOriginalSource ( genFrom . getDelayedSourcesDir ( ) )  
inject ( getProject ( ) , getInjects ( ) , sourceMap , resourceMap )  
getLogger ( ) . info ( "Applying patches" )  
protected static void inject ( Project project , FileCollection injects , final Map < String , String > sourceMap , final Map < String , byte [ ] > resourceMap ) throws IOException 
project . fileTree ( inject ) . visit ( visitor )  
if ( inject . getName ( ) . endsWith ( ".jar" ) || inject . getName ( ) . endsWith ( ".zip" ) ) 
