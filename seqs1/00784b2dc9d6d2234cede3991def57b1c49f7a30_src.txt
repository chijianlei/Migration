private long processedItems = 0  
startTime = System . currentTimeMillis ( )  
System . out . println ( "Process items: " + processedItems )  
processedItems += wordVectors . size ( )  
printProgress ( wordVectors . size ( ) )  
@ Service public class CreateDatasetService  
@ Autowired private WordVectorService service  
@ Value ( "${chatdemo.movie-lines}" ) private String movieLinesPath  
@ Value ( "${chatdemo.movie-conversations}" ) private String moviceConversationsPath  
private final int INPUT_HEIGHT = 32  
final private static String DELIMITER = " +++$+++ "  
public void createDataSet ( )  
Path conversations = Paths . get ( moviceConversationsPath )  
Path lines = Paths . get ( movieLinesPath )  
createDataSet ( conversations , lines , null , null )  
} catch ( IOException e )  
e . printStackTrace ( )  
private void createDataSet ( Path conversationsPath , Path movieLinesPath , File inputs , File labels ) throws IOException  
Map < Integer , String > linesMap = Files . lines ( movieLinesPath ) . map ( Phrase : : new ) . collect ( toMap ( Phrase : : getLine , Phrase : : getText ) )  
Files . lines ( conversationsPath ) . flatMap ( line -> extractPairs ( line , linesMap ) . stream ( ) ) . map ( this : : createTrainData ) . forEach ( System . out : : println )  
private LabeledTrainData createTrainData ( QAPair pair )  
return new LabeledTrainData ( ) . withInput ( createInputVectors ( pair . getQuestion ( ) ) ) . withLabels ( createOutputVectors ( pair . getAnswer ( ) ) )  
private List < WordVector > createOutputVectors ( String pair )  
List < WordVector > list = convertToWordVectors ( pair ) . stream ( ) . filter ( service : : isNotEnd ) . collect ( toList ( ) )  
list . add ( END )  
private List < WordVector > createInputVectors ( String question )  
List < WordVector > vectors = convertToWordVectors ( question )  
int len = INPUT_HEIGHT - 1  
int length = len < vectors . size ( ) ? len : vectors . size ( )  
int length = len < vectors . size ( ) ? len : vectors . size ( )  
. size ( ) ? len : vectors . size ( )  
List < WordVector > inputs = new ArrayList < > ( vectors . subList ( 0 , length ) )  
List < WordVector > tail = new ArrayList < > ( vectors . subList ( length , vectors . size ( ) ) )  
while ( inputs . size ( ) < len )  
inputs . add ( END )  
WordVector finalWord = tail . stream ( ) . reduce ( END , WordVector : : plus )  
inputs . add ( finalWord )  
private List < WordVector > convertToWordVectors ( String answer )  
return stream ( answer . split ( "[ ]+" ) ) . filter ( word -> ! word . isEmpty ( ) ) . map ( service : : getWordVectorByWord ) . collect ( toList ( ) )  
private void tokenizeSentences ( QAPair qaPair )  
qaPair . answer = tokenizeSentence ( qaPair . answer )  
qaPair . question = tokenizeSentence ( qaPair . question )  
private String tokenizeSentence ( String sentence )  
return stream ( sentence . split ( "[ ]+" ) ) . filter ( word -> ! word . isEmpty ( ) ) . flatMap ( word -> service . createTokens ( word ) . stream ( ) ) . collect ( joining ( " " ) )  
private List < QAPair > extractPairs ( String conversation , Map < Integer , String > linesMap )  
int index = conversation . lastIndexOf ( DELIMITER )  
conversation = conversation . substring ( index + DELIMITER . length ( ) )  
conversation = conversation . replaceAll ( "[L'\\[\\],]+" , "" )  
String [ ] senseLines = conversation . split ( " " )  
int conversationLength = senseLines . length & ~ 1  
List < QAPair > pairs = new ArrayList < > ( )  
for ( int i = 0 ; i < conversationLength ; i += 2 )  
QAPair pair = new QAPair ( )  
pair . question = linesMap . get ( Integer . valueOf ( senseLines [ i ] ) )  
pair . answer = linesMap . get ( Integer . valueOf ( senseLines [ i + 1 ] ) )  
tokenizeSentences ( pair )  
pairs . add ( pair )  
static class QAPair  
String question , answer  
public String getQuestion ( )  
public String getAnswer ( )  
@ Override public String toString ( )  
return "[ " + question + " ] -> [ " + answer + " ];"  
static class Phrase  
Integer line  
String text  
Phrase ( String str )  
int i = str . lastIndexOf ( DELIMITER )  
text = str . substring ( i + DELIMITER . length ( ) )  
str = str . substring ( 0 , i )  
str = str . split ( " " ) [ 0 ] . substring ( 1 )  
line = Integer . parseInt ( str )  
Integer getLine ( )  
String getText ( )  
if ( vectors . size ( ) == 0 )  
vector = vectors . stream ( ) . filter ( wv -> word . toLowerCase ( ) . equals ( wv . getWord ( ) . toLowerCase ( ) ) ) . findAny ( ) . orElse ( null )  
String chunks [ ] = source . split ( " " )  
String prefix = word . substring ( 0 , i + 1 )  
vector = getWordVectorByWord111 ( prefix . substring ( 0 , prefix . length ( ) - 1 ) )  
return getWordVectorByWord111 ( word . substring ( 0 , i ) )  
