return IntStream . range ( 0 , bitext . length ) . parallel ( ) . boxed ( ) . sorted ( ( x , y ) -> { int xPos = x , yPos = y , xId = bitext [ x ] , yId = bitext [ y ] ; while ( xId >= 0 && yId >= 0 ) { if ( xId == yId ) { xId = bitext [ ++ xPos ] ; yId = bitext [ ++ yPos ] ; } else { return vocabulary . get ( xId ) . compareTo ( vocabulary . get ( yId ) ) ; } } if ( xId < 0 && yId < 0 ) { return 0 ; } else { return xId < 0 ? 1 : - 1 ; } } ) . limit ( numPositions ) . mapToInt ( i -> i ) . toArray ( )  
while ( xId >= 0 && yId >= 0 )  
if ( xId == yId )  
xId = bitext [ ++ xPos ]  
yId = bitext [ ++ yPos ]  
return vocabulary . get ( xId ) . compareTo ( vocabulary . get ( yId ) )  
if ( xId < 0 && yId < 0 )  
xId < 0 ? 1 : - 1  
xId < 0 ? 1 : - 1  
: - 1  
for ( int i = 0 ; i < sa . length ; ++ i )  
for ( int corpusPos = sa [ i ] ; bitext [ corpusPos ] >= 0 ; ++ corpusPos )  
if ( sb . length ( ) > 0 ) sb . append ( " " )  
sb . length ( ) > 0 ) sb . append ( " " )  
sb . append ( vocabulary . get ( bitext [ corpusPos ] ) )  
Span nSpan = Span . getSpan ( firstSuffix , 1 ) , nnSpan = Span . getSpan ( firstSuffix , 2 ) , nnnSpan = Span . getSpan ( firstSuffix , 3 )  
Span nSpanThis = Span . getSpan ( suffix , 1 )  
Span nnSpanThis = Span . getSpan ( suffix , 2 )  
Span nnnSpanThis = Span . getSpan ( suffix , 3 )  
nSpan = nSpanThis  
nnCnt = checkSpan ( nnSpan , nnSpanThis , nnStart , i , nnCnt , minOccurrences , sampleSize , queryCache )  
for ( int i = startSa ; i < endSa && hits . size ( ) < maxHits ; i += stepSize )  
public static class Span  
this . tokens = tokens  
this . hashCode = MurmurHash . hash32 ( tokens , tokens . length , 1 )  
int [ ] tokens = new int [ order ]  
for ( int i = 0 ; i < order ; ++ i )  
tokens [ i ] = suffix . get ( i )  
catch ( Exception e )  
if ( o == null || ! ( o instanceof Span ) )  
if ( this . tokens . length == otherSpan . tokens . length )  
return findBound ( query , isSource , lowerBound , startFrom , sa . length - 1 )  
while ( low <= high ) { final int mid = ( low + high ) >>> 1 ; assert mid < sa . length ; final int corpusPos = sa [ mid ] ; assert corpusPos > 0  
private SentencePair ( int corpusPosition ) { int j = corpusPosition ; assert srcBitext [ j ] > 0 ; while ( srcBitext [ j ] >= 0 ) j ++ ; srcEndExclusive = j ; j = corpusPosition - 1 ; while ( j >= 0 && srcBitext [ j ] >= 0 ) j -- ; srcStartInclusive = j + 1 ; tgtEndExclusive = fromSentenceOffset ( srcBitext [ srcEndExclusive ] ) ; assert tgtEndExclusive > 0 : String . valueOf ( tgtEndExclusive ) ; assert fromSentenceOffset ( tgtBitext [ tgtEndExclusive ] ) == srcEndExclusive : String . format ( "%d %d" , fromSentenceOffset ( tgtBitext [ tgtEndExclusive ] ) , srcEndExclusive )  
