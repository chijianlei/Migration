switch ( sourceCode . charAt ( currentIndex ) ) { case ' ' : case '\t' : break ; case '\r' : case '\n' : handleLineBreak ( ) ; break ; case '~' : toAdd = new Token ( TokenType . TILDE , getColumn ( ) ) ; break ; case ';' : toAdd = new Token ( TokenType . SEMICOLON , getColumn ( ) ) ; break ; case '?' : toAdd = new Token ( TokenType . QUESTION , getColumn ( ) ) ; break ; case ':' : toAdd = new Token ( TokenType . COLON , getColumn ( ) ) ; break ; case ',' : toAdd = new Token ( TokenType . COMMA , getColumn ( ) ) ; break ; case '(' : toAdd = new Token ( TokenType . PAREN_LEFT , getColumn ( ) ) ; break ; case ')' : toAdd = new Token ( TokenType . PAREN_RIGHT , getColumn ( ) ) ; break ; case '{' : toAdd = new Token ( TokenType . CURL_BRACE_LEFT , getColumn ( ) ) ; break ; case '}' : toAdd = new Token ( TokenType . CURL_BRACE_RIGHT , getColumn ( ) ) ; break ; case '[' : toAdd = new Token ( TokenType . SQUARE_BRACE_LEFT , getColumn ( ) ) ; break ; case ']' : toAdd = new Token ( TokenType . SQUARE_BRACE_RIGHT , getColumn ( ) ) ; break ; case '=' : toAdd = handleEqual ( ) ; break ; case '!' : toAdd = handleExclaim ( ) ; break ; case '*' : toAdd = handleStar ( ) ; break ; case '%' : toAdd = handlePercent ( ) ; break ; case '^' : toAdd = handleCarat ( ) ; break ; case '+' : toAdd = handlePlus ( ) ; break ; case '-' : toAdd = handleDash ( ) ; break ; case '&' : toAdd = handleAnd ( ) ; break ; case '|' : toAdd = handlePipe ( ) ; break ; case '<' : toAdd = handleLeft ( ) ; break ; case '>' : toAdd = handleRight ( ) ; break ; case '/' : toAdd = handleSlash ( ) ; break ; case '\'' : toAdd = handleChar ( ) ; break ; case '\"' : toAdd = handleString ( ) ; break ; case '.' : toAdd = handleDot ( ) ; break ; case '0' : toAdd = handleZero ( ) ; break ; case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : toAdd = handleNumber ( 10 ) ; break ; default : if ( isAlpha ( sourceCode , currentIndex ) ) { toAdd = handleId ( ) ; } else { int line = Token . getCurrentLine ( ) ; Logger . error ( "illegal character: " + sourceCode . charAt ( currentIndex ) , source . getFilename ( ) , line , getColumn ( ) , source . getLine ( line - 1 ) ) ; } break  
current ++  
current ++  
current ++  
current ++  
current ++  
