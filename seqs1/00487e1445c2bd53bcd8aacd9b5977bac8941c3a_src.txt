ResultSet rs = new ResultSet ( )  
if ( pred . equals ( RDF_TYPE ) )  
return processType ( fact , fact . getIteration ( ) )  
private ResultSet deriveType ( RyaURI type , OwlRule rule , Set < ReasonerFact > sources )  
return new ResultSet ( )  
private ResultSet checkNewType ( ReasonerFact typeFact )  
disjoint . retainAll ( knownTypes . keySet ( ) )  
if ( typeFact . getIteration ( ) >= minIteration || otherTypeFact . getIteration ( ) >= minIteration )  
disjoint . retainAll ( knownTypes . keySet ( ) )  
if ( typeFact . getIteration ( ) >= minIteration || otherTypeFact . getIteration ( ) >= minIteration )  
private ResultSet processType ( ReasonerFact typeFact , int iteration )  
RyaURI type = typeFact . getObject ( )  
if ( iteration >= minIteration )  
RyaURI object = fact . getObject ( )  
if ( ! transitiveOutgoing . containsKey ( predicate ) )  
if ( ( isNew || fact . getIteration ( ) >= minIteration || other . getIteration ( ) >= minIteration ) && object . equals ( other . getSubject ( ) ) )  
for ( RyaURI inverseProp : schema . getInverseProperties ( predicate ) )  
if ( fact . getRule ( ) == OwlRule . PRP_INV && fact . hasSourcePredicate ( predicate ) )  
invFact . derivedFrom ( fact )  
rs . addFact ( invFact )  
spoFact . derivedFrom ( fact )  
ReasonerFact trpFact = ReasonerFact . createTriple ( subject , predicate , otherObject , OwlRule . PRP_TRP )  
trpFact . setIteration ( currentIteration )  
ReasonerFact asypFact = ReasonerFact . createInconsistency ( OwlRule . PRP_ASYP )  
asypFact . setIteration ( currentIteration )  
if ( ( isNew || fact . getIteration ( ) >= minIteration || otherFact . getIteration ( ) >= minIteration ) && subject . equals ( otherFact . getSubject ( ) ) )  
newResults . addAll ( deriveType ( fact . getObject ( ) , fact . getRule ( ) , fact . getSources ( ) ) )  
ToolRunner . run ( new SchemaFilter ( ) , args )  
public static ReasonerFact createTriple ( RyaURI s , RyaURI p , RyaURI o , OwlRule rule )  
public static ReasonerFact createInconsistency ( OwlRule rule )  
sources . addAll ( predecessors )  
public boolean isInconsistent ( )  
public boolean hasSourcePredicate ( RyaURI pred )  
for ( ReasonerFact sourceFact : sources )  
for ( ReasonerFact reason : sources )  
createTriple ( reason . getSubject ( ) , reason . getPredicate ( ) , reason . getObject ( ) , reason . rule ) . write ( out )  
if ( type == FACT_TYPE . TRIPLE )  
sources . clear ( )  
for ( int i = 0 ; i < numPredecessors ; i ++ )  
if ( this . equals ( other ) )  
return 0  
if ( type != other . type )  
return type . compareTo ( other . type )  
if ( type == FACT_TYPE . INCONSISTENCY )  
if ( rule . equals ( other . rule ) )  
if ( hashDiff != 0 )  
return rule . compareTo ( other . rule )  
int result = this . getSubject ( ) . compareTo ( other . getSubject ( ) )  
result = this . getPredicate ( ) . compareTo ( other . getPredicate ( ) )  
result = this . getObject ( ) . compareTo ( other . getObject ( ) )  
ReasonerFact other = ( ReasonerFact ) o  
reasoner . processFact ( triple ( NODE , RDF_TYPE , Schema . OWL_NOTHING ) )  
ResultSet rs = reasoner . getTypes ( )  
