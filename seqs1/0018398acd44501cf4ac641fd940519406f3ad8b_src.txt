@ Slf4j public final class ListShardMap < TKey > extends ShardMap implements Cloneable < ShardMap > , Cloneable < ListShardMap < TKey >>  
public SQLServerConnection OpenConnectionForKey ( TKey key , String connectionString )  
public SQLServerConnection OpenConnectionForKey ( TKey key , String connectionString , ConnectionOptions options )  
public Callable < SQLServerConnection > OpenConnectionForKeyAsync ( TKey key , String connectionString )  
public Callable < SQLServerConnection > OpenConnectionForKeyAsync ( TKey key , String connectionString , ConnectionOptions options )  
Stopwatch stopwatch = Stopwatch . createStarted ( )  
String mappingKey = BitConverter . toString ( creationInfo . Key . RawValue )  
log . info ( "CreatePointMapping Start; ShardMap name: {}; Point Mapping: {} " , this . Name , mappingKey )  
PointMapping < TKey > pointMapping = _lsm . Add ( new PointMapping < TKey > ( this . Manager , creationInfo ) )  
log . info ( "CreatePointMapping Complete; ShardMap name: {}; Point Mapping: {}; Duration: {}" , this . Name , mappingKey , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) ( TimeUnit . MILLISECONDS ) )  
String mappingKey = BitConverter . toString ( args . Key . RawValue )  
log . info ( "CreatePointMapping Start; ShardMap name: {}; Point Mapping: {}" , this . Name , mappingKey )  
PointMapping < TKey > pointMapping = _lsm . Add ( new PointMapping < TKey > ( this . Manager , args ) )  
log . info ( "CreatePointMapping Complete; ShardMap name: {}; Point Mapping: {}; Duration: {}" , this . Name , mappingKey , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) ( TimeUnit . MILLISECONDS ) )  
public void DeleteMapping ( PointMapping < TKey > mapping )  
String mappingKey = BitConverter . toString ( mapping . Key . RawValue )  
log . info ( "DeletePointMapping Start; ShardMap name: {}; Point Mapping: {}" , this . Name , mappingKey )  
log . info ( "DeletePointMapping Completed; ShardMap name: {}; Point Mapping: {}; Duration: {}" , this . Name , mappingKey , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) ( TimeUnit . MILLISECONDS ) )  
public PointMapping < TKey > GetMappingForKey ( TKey key )  
log . info ( "LookupPointMapping" , "Start; ShardMap name: {0}; Point Mapping Key Type: {1}" , this . Name , TKey . class )  
log . info ( "LookupPointMapping" , "Complete; ShardMap name: {0}; Point Mapping Key Type: {1}; Duration: {2}" , this . Name , TKey . class , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) )  
log . info ( "TryLookupPointMapping" , "Start; ShardMap name: {0}; Point Mapping Key Type: {1}" , this . Name , TKey . class )  
log . info ( "TryLookupPointMapping" , "Complete; ShardMap name: {0}; Point Mapping Key Type: {1}; Duration: {2}" , this . Name , TKey . class , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) )  
log . info ( "GetPointMappings" , "Complete; Duration: {0}" , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) ( TimeUnit . MILLISECONDS ) )  
log . info ( "GetPointMappings" , "Complete; Range: {0}; Duration: {1}" , range , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) ( TimeUnit . MILLISECONDS ) )  
log . info ( "GetPointMappings" , "Complete; Shard: {0}; Duration: {1}" , shard . getLocation ( ) , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) ( TimeUnit . MILLISECONDS ) )  
log . info ( "GetPointMappings" , "Complete; Shard: {0}; Duration: {1}" , shard . getLocation ( ) , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) ( TimeUnit . MILLISECONDS ) )  
log . info ( "MarkMappingOffline" , "Complete; Duration: {0}" , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) ( TimeUnit . MILLISECONDS ) )  
log . info ( "MarkMappingOnline" , "Complete; Duration: {0}" , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) ( TimeUnit . MILLISECONDS ) )  
String mappingKey = BitConverter . toString ( currentMapping . Key . RawValue )  
log . info ( "UpdatePointMapping" , "Start; ShardMap name: {0}; Current Point Mapping: {1}" , this . Name , mappingKey )  
log . info ( "UpdatePointMapping" , "Complete; ShardMap name: {0}; Current Point Mapping: {1}; Duration: {2}" , this . Name , mappingKey , stopwatch . elapsed ( TimeUnit . MILLISECONDS ) )  
public void UnlockMapping ( PointMapping < TKey > mapping , MappingLockToken mappingLockToken )  
ExceptionUtils . DisallowNullArgument ( mapping , "mapping" )  
UUID lockOwnerId = mappingLockToken . getLockOwnerId ( )  
@ Override public < V > IShardMapper < V > GetMapper ( )  
return ( IShardMapper < V > ) ( ( _lsm instanceof IShardMapper < V > ) ? _lsm : null )  
( IShardMapper < V > ) ( ( _lsm instanceof IShardMapper < V > ) ? _lsm : null )  
public Connection OpenConnectionForKey ( TKey key , String connectionString )  
public Connection OpenConnectionForKey ( TKey key , String connectionString , ConnectionOptions options )  
public Task < Connection > OpenConnectionForKeyAsync ( TKey key , String connectionString )  
public Task < Connection > OpenConnectionForKeyAsync ( TKey key , String connectionString , ConnectionOptions options )  
try ( ActivityIdScope activityIdScope = new ActivityIdScope ( UUID . randomUUID ( ) ) )  
try ( ActivityIdScope activityIdScope = new ActivityIdScope ( UUID . randomUUID ( ) ) )  
public void DeleteMapping ( RangeMapping < TKey > mapping )  
public void DeleteMapping ( RangeMapping < TKey > mapping , MappingLockToken mappingLockToken )  
ExceptionUtils . DisallowNullArgument ( mapping , "mapping" )  
ExceptionUtils . DisallowNullArgument ( mappingLockToken , "mappingLockToken" )  
try ( ActivityIdScope activityIdScope = new ActivityIdScope ( UUID . randomUUID ( ) ) )  
Stopwatch stopwatch = Stopwatch . createStarted ( )  
stopwatch . stop ( )  
getTracer ( ) . TraceInfo ( TraceSourceConstants . ComponentNames . RangeShardMap , "GetMapping" , "Start; Range Mapping Key Type: {0}" , TKey . class )  
getTracer ( ) . TraceInfo ( TraceSourceConstants . ComponentNames . RangeShardMap , "GetMapping" , "Complete; Range Mapping Key Type: {0} Duration: {1}" , TKey . class , stopwatch . Elapsed )  
getTracer ( ) . TraceInfo ( TraceSourceConstants . ComponentNames . RangeShardMap , "TryLookupRangeMapping" , "Start; ShardMap name: {0}; Range Mapping Key Type: {1}" , this . Name , TKey . class )  
stopwatch . stop ( )  
getTracer ( ) . TraceInfo ( TraceSourceConstants . ComponentNames . RangeShardMap , "TryLookupRangeMapping" , "Complete; ShardMap name: {0}; Range Mapping Key Type: {1}; Duration: {2}" , this . Name , TKey . class , stopwatch . Elapsed )  
public IReadOnlyList < RangeMapping < TKey >> GetMappings ( )  
try ( ActivityIdScope activityIdScope = new ActivityIdScope ( UUID . randomUUID ( ) ) )  
IReadOnlyList < RangeMapping < TKey >> rangeMappings = this . rsm . GetMappingsForRange ( null , null )  
public IReadOnlyList < RangeMapping < TKey >> GetMappings ( Range < TKey > range )  
try ( ActivityIdScope activityIdScope = new ActivityIdScope ( UUID . randomUUID ( ) ) )  
getTracer ( ) . TraceInfo ( TraceSourceConstants . ComponentNames . RangeShardMap , "GetMappings" , "Start; Range: {0}" , range )  
IReadOnlyList < RangeMapping < TKey >> rangeMappings = this . rsm . GetMappingsForRange ( range , null )  
stopwatch . stop ( )  
getTracer ( ) . TraceInfo ( TraceSourceConstants . ComponentNames . RangeShardMap , "GetMappings" , "Complete; Range: {0}; Duration: {1}" , range , stopwatch . Elapsed )  
public IReadOnlyList < RangeMapping < TKey >> GetMappings ( Shard shard )  
try ( ActivityIdScope activityIdScope = new ActivityIdScope ( UUID . randomUUID ( ) ) )  
getTracer ( ) . TraceInfo ( TraceSourceConstants . ComponentNames . RangeShardMap , "GetMappings" , "Start; Shard: {0}" , shard . Location )  
IReadOnlyList < RangeMapping < TKey >> rangeMappings = this . rsm . GetMappingsForRange ( null , shard )  
getTracer ( ) . TraceInfo ( TraceSourceConstants . ComponentNames . RangeShardMap , "GetMappings" , "Complete; Shard: {0}; Duration: {1}" , shard . Location , stopwatch . Elapsed )  
public IReadOnlyList < RangeMapping < TKey >> GetMappings ( Range < TKey > range , Shard shard )  
try ( ActivityIdScope activityIdScope = new ActivityIdScope ( UUID . randomUUID ( ) ) )  
getTracer ( ) . TraceInfo ( TraceSourceConstants . ComponentNames . RangeShardMap , "GetMappings" , "Start; Shard: {0}; Range: {1}" , shard . Location , range )  
IReadOnlyList < RangeMapping < TKey >> rangeMappings = this . rsm . GetMappingsForRange ( range , shard )  
getTracer ( ) . TraceInfo ( TraceSourceConstants . ComponentNames . RangeShardMap , "GetMappings" , "Complete; Shard: {0}; Duration: {1}" , shard . Location , stopwatch . Elapsed )  
return this . MarkMappingOffline ( mapping , MappingLockToken . NoLock )  
public RangeMapping < TKey > MarkMappingOffline ( RangeMapping < TKey > mapping , MappingLockToken mappingLockToken )  
ExceptionUtils . DisallowNullArgument ( mapping , "mapping" )  
ExceptionUtils . DisallowNullArgument ( mappingLockToken , "mappingLockToken" )  
try ( ActivityIdScope activityIdScope = new ActivityIdScope ( UUID . randomUUID ( ) ) )  
getTracer ( ) . TraceInfo ( TraceSourceConstants . ComponentNames . RangeShardMap , "MarkMappingOffline" , "Start; " )  
Stopwatch stopwatch = Stopwatch . createStarted ( )  
RangeMapping < TKey > result = this . rsm . MarkMappingOffline ( mapping , mappingLockToken . LockOwnerId )  
stopwatch . stop ( )  
getTracer ( ) . TraceInfo ( TraceSourceConstants . ComponentNames . RangeShardMap , "MarkMappingOffline" , "Complete; Duration: {0}" , stopwatch . Elapsed )  
public RangeMapping < TKey > MarkMappingOnline ( RangeMapping < TKey > mapping )  
return this . MarkMappingOnline ( mapping , MappingLockToken . NoLock )  
public RangeMapping < TKey > MarkMappingOnline ( RangeMapping < TKey > mapping , MappingLockToken mappingLockToken )  
getTracer ( ) . TraceInfo ( TraceSourceConstants . ComponentNames . RangeShardMap , "MarkMappingOnline" , "Start; " )  
RangeMapping < TKey > result = this . rsm . MarkMappingOnline ( mapping , mappingLockToken . LockOwnerId )  
getTracer ( ) . TraceInfo ( TraceSourceConstants . ComponentNames . RangeShardMap , "MarkMappingOnline" , "Complete; Duration: {0}" , stopwatch . Elapsed )  
getTracer ( ) . TraceInfo ( TraceSourceConstants . ComponentNames . RangeShardMap , "LookupLockOwner" , "Start" )  
stopwatch . stop ( )  
getTracer ( ) . TraceInfo ( TraceSourceConstants . ComponentNames . RangeShardMap , "LookupLockOwner" , "Complete; Duration: {0}; StoreLockOwnerId: {1}" , stopwatch . Elapsed , storeLockOwnerId )  
ExceptionUtils . DisallowNullArgument ( mapping , "mapping" )  
UUID lockOwnerId = mappingLockToken . LockOwnerId  
getTracer ( ) . TraceInfo ( TraceSourceConstants . ComponentNames . RangeShardMap , "Lock" , "Start; LockOwnerId: {0}" , lockOwnerId )  
getTracer ( ) . TraceInfo ( TraceSourceConstants . ComponentNames . RangeShardMap , "Lock" , "Complete; Duration: {0}; StoreLockOwnerId: {1}" , stopwatch . Elapsed , lockOwnerId )  
try ( ActivityIdScope activityIdScope = new ActivityIdScope ( UUID . randomUUID ( ) ) )  
UUID lockOwnerId = mappingLockToken . LockOwnerId  
getTracer ( ) . TraceInfo ( TraceSourceConstants . ComponentNames . RangeShardMap , "UnLock" , "Complete; Duration: {0}; StoreLockOwnerId: {1}" , stopwatch . Elapsed , lockOwnerId )  
try ( ActivityIdScope activityIdScope = new ActivityIdScope ( UUID . randomUUID ( ) ) )  
UUID lockOwnerId = mappingLockToken . LockOwnerId  
getTracer ( ) . TraceInfo ( TraceSourceConstants . ComponentNames . RangeShardMap , "UnlockAllMappingsWithLockOwnerId" , "Complete; Duration: {0}" , stopwatch . Elapsed )  
try ( ActivityIdScope activityIdScope = new ActivityIdScope ( UUID . randomUUID ( ) ) )  
getTracer ( ) . TraceInfo ( TraceSourceConstants . ComponentNames . RangeShardMap , "UpdateMapping" , "Start; Current mapping shard: {0}" , currentMapping . Shard . Location )  
RangeMapping < TKey > rangeMapping = this . rsm . Update ( currentMapping , update , mappingLockToken . LockOwnerId )  
getTracer ( ) . TraceInfo ( TraceSourceConstants . ComponentNames . RangeShardMap , "UpdateMapping" , "Complete; Current mapping shard: {0}; Duration: {1}" , currentMapping . Shard . Location , stopwatch . Elapsed )  
public IReadOnlyList < RangeMapping < TKey >> SplitMapping ( RangeMapping < TKey > existingMapping , TKey splitAt )  
public IReadOnlyList < RangeMapping < TKey >> SplitMapping ( RangeMapping < TKey > existingMapping , TKey splitAt , MappingLockToken mappingLockToken )  
ExceptionUtils . DisallowNullArgument ( mappingLockToken , "mappingLockToken" )  
try ( ActivityIdScope activityIdScope = new ActivityIdScope ( UUID . randomUUID ( ) ) )  
getTracer ( ) . TraceInfo ( TraceSourceConstants . ComponentNames . RangeShardMap , "SplitMapping" , "Start; Shard: {0}" , existingMapping . Shard . Location )  
IReadOnlyList < RangeMapping < TKey >> rangeMapping = this . rsm . Split ( existingMapping , splitAt , mappingLockToken . LockOwnerId )  
getTracer ( ) . TraceInfo ( TraceSourceConstants . ComponentNames . RangeShardMap , "SplitMapping" , "Complete; Shard: {0}; Duration: {1}" , existingMapping . Shard . Location , stopwatch . Elapsed )  
public RangeMapping < TKey > MergeMappings ( RangeMapping < TKey > left , RangeMapping < TKey > right )  
public RangeMapping < TKey > MergeMappings ( RangeMapping < TKey > left , RangeMapping < TKey > right , MappingLockToken leftMappingLockToken , MappingLockToken rightMappingLockToken )  
ExceptionUtils . DisallowNullArgument ( left , "left" )  
ExceptionUtils . DisallowNullArgument ( right , "right" )  
getTracer ( ) . TraceInfo ( TraceSourceConstants . ComponentNames . RangeShardMap , "SplitMapping" , "Start; Left Shard: {0}; Right Shard: {1}" , left . Shard . Location , right . Shard . Location )  
RangeMapping < TKey > rangeMapping = this . rsm . Merge ( left , right , leftMappingLockToken . LockOwnerId , rightMappingLockToken . LockOwnerId )  
getTracer ( ) . TraceInfo ( TraceSourceConstants . ComponentNames . RangeShardMap , "SplitMapping" , "Complete; Duration: {0}" , stopwatch . Elapsed )  
@ Override public < V > IShardMapper < V > GetMapper ( )  
return ( IShardMapper < V > ) ( ( this . rsm instanceof IShardMapper < V > ) ? this . rsm : null )  
( IShardMapper < V > ) ( ( this . rsm instanceof IShardMapper < V > ) ? this . rsm : null )  
( IShardMapper < V > ) ( ( this . rsm instanceof IShardMapper < V > ) ? this . rsm : null )  
: null )  
public ShardMap Clone ( )  
return new RangeShardMap < TKey > ( this . Manager , this . StoreShardMap )  
