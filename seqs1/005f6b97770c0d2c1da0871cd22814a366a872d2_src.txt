private boolean parseLocal ( final String localFile , final XmldbURI docUri , final int overwrite , final String mimeType , final Boolean isXML , final Date created , final Date modified ) throws EXistException , PermissionDeniedException  
return this . < Boolean > writeCollection ( docUri . removeLastSegment ( ) ) . apply ( ( collection , broker , transaction ) -> { if ( overwrite == 0 ) { final DocumentImpl old = collection . getDocument ( broker , docUri . lastSegment ( ) ) ; if ( old != null ) { throw new PermissionDeniedException ( "Old document exists and overwrite is not allowed" ) ; } } VirtualTempFileInputSource source = null ; try { try { final int handle = Integer . parseInt ( localFile ) ; final SerializedResult sr = factory . resultSets . getSerializedResult ( handle ) ; if ( sr == null ) { throw new EXistException ( "Invalid handle specified" ) ; } source = new VirtualTempFileInputSource ( sr . result ) ; sr . result = null ; factory . resultSets . remove ( handle ) ; } catch ( final NumberFormatException nfe ) { final Path file = Paths . get ( localFile ) ; if ( ! Files . isReadable ( file ) ) { throw new EXistException ( "unable to read file " + file . toAbsolutePath ( ) . toString ( ) ) ; } source = new VirtualTempFileInputSource ( file ) ; } catch ( final IOException ioe ) { throw new EXistException ( "Error preparing virtual temp file for parsing" ) ; } finally { source . close ( ) ; } final MimeType mime = Optional . ofNullable ( MimeTable . getInstance ( ) . getContentType ( mimeType ) ) . orElse ( MimeType . BINARY_TYPE ) ; final boolean treatAsXML = ( isXML != null && isXML ) || ( isXML == null && mime . isXMLType ( ) ) ; if ( treatAsXML ) { final IndexInfo info = collection . validateXMLResource ( transaction , broker , docUri . lastSegment ( ) , source ) ; if ( created != null ) { info . getDocument ( ) . getMetadata ( ) . setCreated ( created . getTime ( ) ) ; } if ( modified != null ) { info . getDocument ( ) . getMetadata ( ) . setLastModified ( modified . getTime ( ) ) ; } collection . store ( transaction , broker , info , source , false ) ; } else { try ( final InputStream is = source . getByteStream ( ) ) { final DocumentImpl doc = collection . addBinaryResource ( transaction , broker , docUri . lastSegment ( ) , is , mime . getName ( ) , source . getByteStreamLength ( ) ) ; if ( created != null ) { doc . getMetadata ( ) . setCreated ( created . getTime ( ) ) ; } if ( modified != null ) { doc . getMetadata ( ) . setLastModified ( modified . getTime ( ) ) ; } } } return true ; } finally { if ( source != null ) { source . close ( ) ; } } } )  
if ( overwrite == 0 )  
final DocumentImpl old = collection . getDocument ( broker , docUri . lastSegment ( ) )  
if ( old != null )  
throw new PermissionDeniedException ( "Old document exists and overwrite is not allowed" )  
final int handle = Integer . parseInt ( localFile )  
final SerializedResult sr = factory . resultSets . getSerializedResult ( handle )  
if ( sr == null )  
throw new EXistException ( "Invalid handle specified" )  
source = new VirtualTempFileInputSource ( sr . result )  
sr . result = null  
factory . resultSets . remove ( handle )  
catch ( final NumberFormatException nfe )  
final Path file = Paths . get ( localFile )  
if ( ! Files . isReadable ( file ) )  
throw new EXistException ( "unable to read file " + file . toAbsolutePath ( ) . toString ( ) )  
source = new VirtualTempFileInputSource ( file )  
final MimeType mime = Optional . ofNullable ( MimeTable . getInstance ( ) . getContentType ( mimeType ) ) . orElse ( MimeType . BINARY_TYPE )  
final boolean treatAsXML = ( isXML != null && isXML ) || ( isXML == null && mime . isXMLType ( ) )  
final IndexInfo info = collection . validateXMLResource ( transaction , broker , docUri . lastSegment ( ) , source )  
if ( created != null )  
info . getDocument ( ) . getMetadata ( ) . setCreated ( created . getTime ( ) )  
if ( modified != null )  
info . getDocument ( ) . getMetadata ( ) . setLastModified ( modified . getTime ( ) )  
collection . store ( transaction , broker , info , source , false )  
try ( final InputStream is = source . getByteStream ( ) )  
final DocumentImpl doc = collection . addBinaryResource ( transaction , broker , docUri . lastSegment ( ) , is , mime . getName ( ) , source . getByteStreamLength ( ) )  
if ( created != null )  
doc . getMetadata ( ) . setCreated ( created . getTime ( ) )  
if ( modified != null )  
doc . getMetadata ( ) . setLastModified ( modified . getTime ( ) )  
return true  
source . close ( )  
