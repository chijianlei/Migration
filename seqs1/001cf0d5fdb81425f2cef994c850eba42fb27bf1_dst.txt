switch ( type ) { case ARRAY : String matchType = matchExpr . getExprType ( ) . toBytecodeName ( ) ; equalityNode = new GenNodeFuncCall ( "java/util/Arrays" , "equals" , "(" + matchType + matchType + ")Z" , false , false , true , false ) ; break ; case REFERENCE : if ( ! isNullExpr ) equalityNode = new GenNodeFuncCall ( "java/lang/Object" , "equals" , "(Ljava/lang/Object;)Z" , false , false , false , false ) ; else if ( ! isLastExpr ) equalityNode = new GenNodeJump ( Opcodes . IFNONNULL , popLabel ) ; else equalityNode = new GenNodeJump ( Opcodes . IFNULL , isLast ? endLabel : nextLabel ) ; break ; case DOUBLE : equalityNode = new GenNodeOpcode ( Opcodes . DCMPL ) ; break ; case FLOAT : equalityNode = new GenNodeOpcode ( Opcodes . FCMPL ) ; break ; case LONG : equalityNode = new GenNodeOpcode ( Opcodes . LCMP ) ; break ; default : 
equalityNode = new GenNodeFuncCall ( "java/util/Arrays" , "equals" , "(" + matchType + matchType + ")Z" , false , false , true , false )  
block . generate ( )  
