if ( subreddit . getSubredditType ( ) != null )  
switch ( item . getItemId ( ) ) { case R . id . filter : filterContent ( shouldLoad ) ; return true ; case R . id . sidebar : if ( ! subreddit . equals ( "all" ) && ! subreddit . equals ( "frontpage" ) && ! subreddit . contains ( "." ) && ! subreddit . contains ( "+" ) && ! subreddit . contains ( "." ) && ! subreddit . contains ( "/m/" ) ) { drawerLayout . openDrawer ( GravityCompat . END ) ; } else { Toast . makeText ( this , R . string . sidebar_notfound , Toast . LENGTH_SHORT ) . show ( ) ; } return true ; case R . id . night : { LayoutInflater inflater = getLayoutInflater ( ) ; final View dialoglayout = inflater . inflate ( R . layout . choosethemesmall , null ) ; AlertDialogWrapper . Builder builder = new AlertDialogWrapper . Builder ( MainActivity . this ) ; final TextView title = ( TextView ) dialoglayout . findViewById ( R . id . title ) ; title . setBackgroundColor ( Palette . getDefaultColor ( ) ) ; builder . setView ( dialoglayout ) ; final Dialog d = builder . show ( ) ; back = new ColorPreferences ( MainActivity . this ) . getFontStyle ( ) . getThemeType ( ) ; dialoglayout . findViewById ( R . id . black ) . setOnClickListener ( new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { String [ ] names = new ColorPreferences ( MainActivity . this ) . getFontStyle ( ) . getTitle ( ) . split ( "_" ) ; String name = names [ names . length - 1 ] ; final String newName = name . replace ( "(" , "" ) ; for ( ColorPreferences . Theme theme : ColorPreferences . Theme . values ( ) ) { if ( theme . toString ( ) . contains ( newName ) && theme . getThemeType ( ) == 2 ) { back = theme . getThemeType ( ) ; new ColorPreferences ( MainActivity . this ) . setFontStyle ( theme ) ; d . dismiss ( ) ; restartTheme ( ) ; break ; } } } } ) ; dialoglayout . findViewById ( R . id . blacklighter ) . setOnClickListener ( new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { String [ ] names = new ColorPreferences ( MainActivity . this ) . getFontStyle ( ) . getTitle ( ) . split ( "_" ) ; String name = names [ names . length - 1 ] ; final String newName = name . replace ( "(" , "" ) ; for ( ColorPreferences . Theme theme : ColorPreferences . Theme . values ( ) ) { if ( theme . toString ( ) . contains ( newName ) && theme . getThemeType ( ) == 4 ) { back = theme . getThemeType ( ) ; new ColorPreferences ( MainActivity . this ) . setFontStyle ( theme ) ; d . dismiss ( ) ; restartTheme ( ) ; break ; } } } } ) ; dialoglayout . findViewById ( R . id . sepia ) . setOnClickListener ( new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { String [ ] names = new ColorPreferences ( MainActivity . this ) . getFontStyle ( ) . getTitle ( ) . split ( "_" ) ; String name = names [ names . length - 1 ] ; final String newName = name . replace ( "(" , "" ) ; for ( ColorPreferences . Theme theme : ColorPreferences . Theme . values ( ) ) { if ( theme . toString ( ) . contains ( newName ) && theme . getThemeType ( ) == 5 ) { back = theme . getThemeType ( ) ; new ColorPreferences ( MainActivity . this ) . setFontStyle ( theme ) ; d . dismiss ( ) ; restartTheme ( ) ; break ; } } } } ) ; dialoglayout . findViewById ( R . id . light ) . setOnClickListener ( new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { String [ ] names = new ColorPreferences ( MainActivity . this ) . getFontStyle ( ) . getTitle ( ) . split ( "_" ) ; String name = names [ names . length - 1 ] ; final String newName = name . replace ( "(" , "" ) ; for ( ColorPreferences . Theme theme : ColorPreferences . Theme . values ( ) ) { if ( theme . toString ( ) . contains ( newName ) && theme . getThemeType ( ) == 1 ) { new ColorPreferences ( MainActivity . this ) . setFontStyle ( theme ) ; back = theme . getThemeType ( ) ; d . dismiss ( ) ; restartTheme ( ) ; break ; } } } } ) ; dialoglayout . findViewById ( R . id . dark ) . setOnClickListener ( new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { String [ ] names = new ColorPreferences ( MainActivity . this ) . getFontStyle ( ) . getTitle ( ) . split ( "_" ) ; String name = names [ names . length - 1 ] ; final String newName = name . replace ( "(" , "" ) ; for ( ColorPreferences . Theme theme : ColorPreferences . Theme . values ( ) ) { if ( theme . toString ( ) . contains ( newName ) && theme . getThemeType ( ) == 0 ) { new ColorPreferences ( MainActivity . this ) . setFontStyle ( theme ) ; back = theme . getThemeType ( ) ; d . dismiss ( ) ; restartTheme ( ) ; break ; } } } } ) ; dialoglayout . findViewById ( R . id . blue ) . setOnClickListener ( new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { String [ ] names = new ColorPreferences ( MainActivity . this ) . getFontStyle ( ) . getTitle ( ) . split ( "_" ) ; String name = names [ names . length - 1 ] ; final String newName = name . replace ( "(" , "" ) ; for ( ColorPreferences . Theme theme : ColorPreferences . Theme . values ( ) ) { if ( theme . toString ( ) . contains ( newName ) && theme . getThemeType ( ) == 3 ) { new ColorPreferences ( MainActivity . this ) . setFontStyle ( theme ) ; back = theme . getThemeType ( ) ; d . dismiss ( ) ; restartTheme ( ) ; break ; } } } } ) ; } return true ; case R . id . action_refresh : if ( adapter != null && adapter . getCurrentFragment ( ) != null ) { ( ( SubmissionsView ) adapter . getCurrentFragment ( ) ) . forceRefresh ( ) ; } return true ; case R . id . action_sort : if ( subreddit . equalsIgnoreCase ( "friends" ) ) { Snackbar s = Snackbar . make ( findViewById ( R . id . anchor ) , getString ( R . string . friends_sort_error ) , Snackbar . LENGTH_SHORT ) ; View view = s . getView ( ) ; TextView tv = ( TextView ) view . findViewById ( android . support . design . R . id . snackbar_text ) ; tv . setTextColor ( Color . WHITE ) ; s . show ( ) ; } else { openPopup ( ) ; } return true ; case R . id . search : MaterialDialog . Builder builder = new MaterialDialog . Builder ( this ) . title ( R . string . search_title ) . alwaysCallInputCallback ( ) . input ( getString ( R . string . search_msg ) , "" , new MaterialDialog . InputCallback ( ) { @ Override public void onInput ( MaterialDialog materialDialog , CharSequence charSequence ) { term = charSequence . toString ( ) ; } } ) ; if ( ! subreddit . equalsIgnoreCase ( "frontpage" ) && ! subreddit . equalsIgnoreCase ( "all" ) && ! subreddit . contains ( "." ) && ! subreddit . contains ( "/m/" ) && ! subreddit . equalsIgnoreCase ( "friends" ) && ! subreddit . equalsIgnoreCase ( "random" ) && ! subreddit . equalsIgnoreCase ( "myrandom" ) && ! subreddit . equalsIgnoreCase ( "nsfwrandom" ) ) { builder . positiveText ( getString ( R . string . search_subreddit , subreddit ) ) . onPositive ( new MaterialDialog . SingleButtonCallback ( ) { @ Override public void onClick ( @ NonNull MaterialDialog materialDialog , @ NonNull DialogAction dialogAction ) { Intent i = new Intent ( MainActivity . this , Search . class ) ; i . putExtra ( Search . EXTRA_TERM , term ) ; i . putExtra ( Search . EXTRA_SUBREDDIT , subreddit ) ; Log . v ( LogUtil . getTag ( ) , "INTENT SHOWS " + term + " AND " + subreddit ) ; startActivity ( i ) ; } } ) ; builder . neutralText ( R . string . search_all ) . onNeutral ( new MaterialDialog . SingleButtonCallback ( ) { @ Override public void onClick ( @ NonNull MaterialDialog materialDialog , @ NonNull DialogAction dialogAction ) { Intent i = new Intent ( MainActivity . this , Search . class ) ; i . putExtra ( Search . EXTRA_TERM , term ) ; startActivity ( i ) ; } } ) ; } else { builder . positiveText ( R . string . search_all ) . onPositive ( new MaterialDialog . SingleButtonCallback ( ) { @ Override public void onClick ( @ NonNull MaterialDialog materialDialog , @ NonNull DialogAction dialogAction ) { Intent i = new Intent ( MainActivity . this , Search . class ) ; i . putExtra ( Search . EXTRA_TERM , term ) ; startActivity ( i ) ; } } ) ; } builder . show ( ) ; return true ; case R . id . save : saveOffline ( ( ( SubmissionsView ) adapter . getCurrentFragment ( ) ) . posts . posts , ( ( SubmissionsView ) adapter . getCurrentFragment ( ) ) . posts . subreddit ) ; return true ; case R . id . hide_posts : ( ( SubmissionsView ) adapter . getCurrentFragment ( ) ) . clearSeenPosts ( false ) ; return true ; case R . id . schedule : final String sub = ( ( SubmissionsView ) adapter . getCurrentFragment ( ) ) . posts . subreddit ; if ( ! sub . equalsIgnoreCase ( "all" ) && ! sub . equalsIgnoreCase ( "frontpage" ) && ! sub . equalsIgnoreCase ( "friends" ) && ! sub . equalsIgnoreCase ( "mod" ) && ! sub . contains ( "+" ) && ! sub . contains ( "." ) && ! sub . contains ( "/m/" ) ) { new AlertDialogWrapper . Builder ( MainActivity . this ) . setTitle ( getString ( R . string . sub_post_notifs_title ) + sub ) . setMessage ( R . string . sub_post_notifs_text ) . setPositiveButton ( R . string . btn_ok , new DialogInterface . OnClickListener ( ) { @ Override public void onClick ( DialogInterface dialog , int which ) { new MaterialDialog . Builder ( MainActivity . this ) . title ( R . string . sub_post_notifs_threshold ) . items ( new String [ ] { "1" , "5" , "10" , "20" , "40" , "50" } ) . alwaysCallSingleChoiceCallback ( ) . itemsCallbackSingleChoice ( 0 , new MaterialDialog . ListCallbackSingleChoice ( ) { @ Override public boolean onSelection ( MaterialDialog dialog , View itemView , int which , CharSequence text ) { ArrayList < String > subs = Reddit . stringToArray ( Reddit . appRestart . getString ( CheckForMail . SUBS_TO_GET , "" ) ) ; subs . add ( sub + ":" + text ) ; Reddit . appRestart . edit ( ) . putString ( CheckForMail . SUBS_TO_GET , Reddit . arrayToString ( subs ) ) . commit ( ) ; return true ; } } ) . cancelable ( false ) . show ( ) ; } } ) . setNegativeButton ( R . string . btn_cancel , null ) . show ( ) ; } else { Toast . makeText ( MainActivity . this , R . string . sub_post_notifs_err , Toast . LENGTH_SHORT ) . show ( ) ; } return true ; case R . id . share : Reddit . defaultShareText ( "Slide for Reddit" , "https://play.google.com/store/apps/details?id=me.ccrama.redditslide" , MainActivity . this ) ; return true ; case R . id . submit : { Intent i = new Intent ( MainActivity . this , Submit . class ) ; i . putExtra ( Submit . EXTRA_SUBREDDIT , subreddit ) ; startActivity ( i ) ; } return true ; case R . id . gallery : if ( SettingValues . tabletUI ) { List < Submission > posts = ( ( SubmissionsView ) adapter . getCurrentFragment ( ) ) . posts . posts ; if ( posts != null && ! posts . isEmpty ( ) ) { Intent i2 = new Intent ( this , Gallery . class ) ; i2 . putExtra ( "offline" , ( ( SubmissionsView ) adapter . getCurrentFragment ( ) ) . posts . cached != null ? ( ( SubmissionsView ) adapter . getCurrentFragment ( ) ) . posts . cached . time : 0L ) ; i2 . putExtra ( Gallery . EXTRA_SUBREDDIT , ( ( SubmissionsView ) adapter . getCurrentFragment ( ) ) . posts . subreddit ) ; startActivity ( i2 ) ; } } else { AlertDialogWrapper . Builder b = new AlertDialogWrapper . Builder ( this ) . setTitle ( R . string . general_gallerymode_ispro ) . setMessage ( R . string . pro_upgrade_msg ) . setPositiveButton ( R . string . btn_yes_exclaim , new DialogInterface . OnClickListener ( ) { public void onClick ( DialogInterface dialog , int whichButton ) { try { startActivity ( new Intent ( Intent . ACTION_VIEW , Uri . parse ( "market://details?id=me.ccrama.slideforreddittabletuiunlock" ) ) ) ; } catch ( ActivityNotFoundException e ) { startActivity ( new Intent ( Intent . ACTION_VIEW , Uri . parse ( "http://play.google.com/store/apps/details?id=me.ccrama.slideforreddittabletuiunlock" ) ) ) ; } } } ) . setNegativeButton ( R . string . btn_no_danks , new DialogInterface . OnClickListener ( ) { public void onClick ( DialogInterface dialog , int whichButton ) { dialog . dismiss ( ) ; } } ) ; if ( SettingValues . previews > 0 ) { b . setNeutralButton ( getString ( R . string . pro_previews , SettingValues . previews ) , new DialogInterface . OnClickListener ( ) { @ Override public void onClick ( DialogInterface dialog , int which ) { SettingValues . prefs . edit ( ) . putInt ( SettingValues . PREVIEWS_LEFT , SettingValues . previews - 1 ) . apply ( ) ; SettingValues . previews = SettingValues . prefs . getInt ( SettingValues . PREVIEWS_LEFT , 10 ) ; List < Submission > posts = ( ( SubmissionsView ) adapter . getCurrentFragment ( ) ) . posts . posts ; if ( posts != null && ! posts . isEmpty ( ) ) { Intent i2 = new Intent ( MainActivity . this , Gallery . class ) ; i2 . putExtra ( "offline" , ( ( SubmissionsView ) adapter . getCurrentFragment ( ) ) . posts . cached != null ? ( ( SubmissionsView ) adapter . getCurrentFragment ( ) ) . posts . cached . time : 0L ) ; i2 . putExtra ( Gallery . EXTRA_SUBREDDIT , ( ( SubmissionsView ) adapter . getCurrentFragment ( ) ) . posts . subreddit ) ; startActivity ( i2 ) ; } } } ) ; } b . show ( ) ; } return true ; case R . id . action_shadowbox : if ( SettingValues . tabletUI ) { List < Submission > posts = ( ( SubmissionsView ) adapter . getCurrentFragment ( ) ) . posts . posts ; if ( posts != null && ! posts . isEmpty ( ) ) { Intent i2 = new Intent ( this , Shadowbox . class ) ; i2 . putExtra ( Shadowbox . EXTRA_PAGE , getCurrentPage ( ) ) ; i2 . putExtra ( "offline" , ( ( SubmissionsView ) adapter . getCurrentFragment ( ) ) . posts . cached != null ? ( ( SubmissionsView ) adapter . getCurrentFragment ( ) ) . posts . cached . time : 0L ) ; i2 . putExtra ( Shadowbox . EXTRA_SUBREDDIT , ( ( SubmissionsView ) adapter . getCurrentFragment ( ) ) . posts . subreddit ) ; startActivity ( i2 ) ; } } else { AlertDialogWrapper . Builder b = new AlertDialogWrapper . Builder ( this ) . setTitle ( R . string . general_shadowbox_ispro ) . setMessage ( R . string . pro_upgrade_msg ) . setPositiveButton ( R . string . btn_yes_exclaim , new DialogInterface . OnClickListener ( ) { public void onClick ( DialogInterface dialog , int whichButton ) { try { startActivity ( new Intent ( Intent . ACTION_VIEW , Uri . parse ( "market://details?id=me.ccrama.slideforreddittabletuiunlock" ) ) ) ; } catch ( ActivityNotFoundException e ) { startActivity ( new Intent ( Intent . ACTION_VIEW , Uri . parse ( "http://play.google.com/store/apps/details?id=me.ccrama.slideforreddittabletuiunlock" ) ) ) ; } } } ) . setNegativeButton ( R . string . btn_no_danks , new DialogInterface . OnClickListener ( ) { public void onClick ( DialogInterface dialog , int whichButton ) { dialog . dismiss ( ) ; } } ) ; if ( SettingValues . previews > 0 ) { b . setNeutralButton ( "Preview (" + SettingValues . previews + ")" , new DialogInterface . OnClickListener ( ) { @ Override public void onClick ( DialogInterface dialog , int which ) { SettingValues . prefs . edit ( ) . putInt ( SettingValues . PREVIEWS_LEFT , SettingValues . previews - 1 ) . apply ( ) ; SettingValues . previews = SettingValues . prefs . getInt ( SettingValues . PREVIEWS_LEFT , 10 ) ; List < Submission > posts = ( ( SubmissionsView ) adapter . getCurrentFragment ( ) ) . posts . posts ; if ( posts != null && ! posts . isEmpty ( ) ) { Intent i2 = new Intent ( MainActivity . this , Shadowbox . class ) ; i2 . putExtra ( Shadowbox . EXTRA_PAGE , getCurrentPage ( ) ) ; i2 . putExtra ( "offline" , ( ( SubmissionsView ) adapter . getCurrentFragment ( ) ) . posts . cached != null ? ( ( SubmissionsView ) adapter . getCurrentFragment ( ) ) . posts . cached . time : 0L ) ; i2 . putExtra ( Shadowbox . EXTRA_SUBREDDIT , ( ( SubmissionsView ) adapter . getCurrentFragment ( ) ) . posts . subreddit ) ; startActivity ( i2 ) ; } } } ) ; } b . show ( ) ; } return true ; default : 
Intent i = new Intent ( MainActivity . this , Submit . class )  
i . putExtra ( Submit . EXTRA_SUBREDDIT , subreddit )  
startActivity ( i )  
b . setNeutralButton ( "Preview (" + SettingValues . previews + ")" , new DialogInterface . OnClickListener ( ) { @ Override public void onClick ( DialogInterface dialog , int which ) { SettingValues . prefs . edit ( ) . putInt ( SettingValues . PREVIEWS_LEFT , SettingValues . previews - 1 ) . apply ( ) ; SettingValues . previews = SettingValues . prefs . getInt ( SettingValues . PREVIEWS_LEFT , 10 ) ; List < Submission > posts = ( ( SubmissionsView ) adapter . getCurrentFragment ( ) ) . posts . posts ; if ( posts != null && ! posts . isEmpty ( ) ) { Intent i2 = new Intent ( MainActivity . this , Shadowbox . class ) ; i2 . putExtra ( Shadowbox . EXTRA_PAGE , getCurrentPage ( ) ) ; i2 . putExtra ( "offline" , ( ( SubmissionsView ) adapter . getCurrentFragment ( ) ) . posts . cached != null ? ( ( SubmissionsView ) adapter . getCurrentFragment ( ) ) . posts . cached . time : 0L ) ; i2 . putExtra ( Shadowbox . EXTRA_SUBREDDIT , ( ( SubmissionsView ) adapter . getCurrentFragment ( ) ) . posts . subreddit ) ; startActivity ( i2 ) ; } } } )  
