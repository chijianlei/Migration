public Observable < Supplier < OrderCallResult >> orderTask ( final Supplier < OrderCallResult > orderCallSupplier , final EnumSet < OrderEventType > doneTypes , final EnumSet < OrderEventType > rejectTypes )  
final OrderCallResult orderCallResult = orderCallSupplier . get ( )  
final IOrder order = orderCallResult . orderOpt ( ) . get ( )  
public Observable < OrderEvent > orderEventObservable ( final IOrder order , final EnumSet < OrderEventType > doneTypes , final EnumSet < OrderEventType > rejectTypes )  
return orderEventObservable . filter ( oe -> oe . order ( ) . equals ( order ) ) . takeUntil ( oe -> doneTypes . contains ( oe . type ( ) ) || rejectTypes . contains ( oe . type ( ) ) ) . flatMap ( oe -> Observable . create ( subscriber -> { updateRepository ( oe ) ; final OrderEventType oet = oe . type ( ) ; if ( rejectTypes . contains ( oet ) ) { logger . warn ( "Received reject event type: " + oet ) ; subscriber . onError ( new TaskException ( "" ) )  
if ( doneTypes . contains ( oet ) )  
logger . info ( "Received done event type: " + oet )  
subscriber . onNext ( oe )  
isSLSetTo ( newSL ) . test ( orderToChangeSL ) 
Observable . empty ( ) : taskObservableWithRetry ( ( ) -> orderUtil . close ( orderToClose ) , 
return isSLSetTo ( newSL ) . test ( orderToChangeSL ) ? Observable . empty ( ) : taskObservableWithRetry ( ( ) -> orderUtil . changeSL ( orderToChangeSL , newSL ) , EnumSet . of ( SL_CHANGE_OK ) , EnumSet . of ( CHANGE_SL_REJECTED ) ) . doOnSubscribe ( ( ) -> logger . info ( "Start change SL from " + orderToChangeSL . getStopLossPrice ( ) + " to new SL: " + newSL ) )  
isTPSetTo ( newTP ) . test ( orderToChangeTP ) 
Observable . empty ( ) : taskObservableWithRetry ( ( ) -> orderUtil . changeSL ( orderToChangeSL , newSL ) , 
return isTPSetTo ( newTP ) . test ( orderToChangeTP ) ? Observable . empty ( ) : taskObservableWithRetry ( ( ) -> orderUtil . changeTP ( orderToChangeTP , newTP ) , EnumSet . of ( TP_CHANGE_OK ) , EnumSet . of ( CHANGE_TP_REJECTED ) ) . doOnSubscribe ( ( ) -> logger . info ( "Start change TP from " + orderToChangeTP . getTakeProfitPrice ( ) + " to new TP: " + newTP ) )  
return taskObservableWithRetry ( ( ) -> orderUtil . merge ( mergeLabel , orderRepository . filled ( ) ) , EnumSet . of ( MERGE_OK , MERGE_CLOSE_OK ) , EnumSet . of ( MERGE_REJECTED ) ) . doOnSubscribe ( ( ) -> logger . info ( "Starting merge with label: " + mergeLabel ) )  
isClosed . test ( orderToClose ) 
Observable . empty ( ) : taskObservableWithRetry ( ( ) -> orderUtil . changeTP ( orderToChangeTP , newTP ) , 
return isClosed . test ( orderToClose ) ? Observable . empty ( ) : taskObservableWithRetry ( ( ) -> orderUtil . close ( orderToClose ) , EnumSet . of ( CLOSE_OK ) , EnumSet . of ( CLOSE_REJECTED ) ) . doOnSubscribe ( ( ) -> logger . info ( "Starting close for label: " + orderToClose . getLabel ( ) ) )  
return orderTask ( ( ) -> orderUtil . submit ( orderParams ) , EnumSet . of ( FULL_FILL_OK ) , EnumSet . of ( FILL_REJECTED , SUBMIT_REJECTED ) ) . doOnSubscribe ( ( ) -> logger . info ( "Starting submit with label: " + orderParams . label ( ) ) )  
private Observable < Supplier < OrderCallResult >> taskObservableWithRetry ( final Supplier < OrderCallResult > ocrs , final EnumSet < OrderEventType > doneTypes , final EnumSet < OrderEventType > rejectTypes )  
return orderTask ( ocrs , doneTypes , rejectTypes ) . retry ( ( a , e ) -> e instanceof TaskException && a < PlatformSettings . MAX_NUM_RETRIES_ON_FAIL )  
return multiTask ( orderRepository . filled ( ) , order -> changeSLTask ( order , newSL ) )  
return multiTask ( orderRepository . filled ( ) , order -> changeTPTask ( order , newTP ) )  
return multiTask ( submittedOrders ( ) , order -> closeTask ( order ) ) . doOnSubscribe ( ( ) -> logger . info ( "Start to close all position orders..." ) )  
return Observable . concat ( multiChangeTPTask ( NO_STOP_LOSS_PRICE ) . doOnSubscribe ( ( ) -> logger . info ( "Start to remove all TPs..." ) ) , multiChangeSLTask ( NO_STOP_LOSS_PRICE ) . doOnSubscribe ( ( ) -> logger . info ( "Start to remove all SLs..." ) ) , mergeTask ( mergeLabel ) , multiChangeSLTask ( restoreSL ) . doOnSubscribe ( ( ) -> logger . info ( "Start restore SL..." ) ) , multiChangeTPTask ( restoreTP ) . doOnSubscribe ( ( ) -> logger . info ( "Start restore TP..." ) ) )  
private Observable < Supplier < OrderCallResult >> multiTask ( final Collection < IOrder > orders , final Function < IOrder , Observable < Supplier < OrderCallResult >>> mapper )  
return multiTask ( orderRepository . filled ( ) , order -> changeSLTask ( order , newSL ) )  
