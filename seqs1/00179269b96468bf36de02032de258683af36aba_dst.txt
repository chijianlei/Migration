@ ApiOperation ( value = "Finds a client by client id" ) @ ApiResponses ( value = { @ ApiResponse ( code = 200 , message = "Client returned successfully" ) , @ ApiResponse ( code = 404 , message = "Client couldn't be found" ) , @ ApiResponse ( code = 500 , message = "Internal server error" ) } ) @ RequestMapping ( value = { "/{clientId:\\d+}" } , method = RequestMethod . GET ) public Client getClientById ( @ ApiParam ( name = "clientId" , value = "Client id" ) @ PathVariable ( ) Long clientId )  
return clientService . findClientById ( clientId )  
@ ApiOperation ( value = "Deletes a client given an id" ) @ ApiResponses ( value = { @ ApiResponse ( code = 204 , message = "Client successfully deleted" ) , @ ApiResponse ( code = 404 , message = "Client can't be found by id" ) , @ ApiResponse ( code = 500 , message = "Internal server error" ) } ) @ RequestMapping ( value = { "/{clientId:\\d+}" } , method = RequestMethod . DELETE ) @ ResponseStatus ( HttpStatus . NO_CONTENT ) public void deleteClient ( @ ApiParam ( name = "clientId" , value = "Client id" ) @ PathVariable ( ) Long clientId )  
clientService . deleteClient ( clientId )  
public Client findClientById ( Long clientId )  
public void deleteClient ( Long clientId )  
clientRepository . delete ( clientId )  
Order resultOrder = orderConverter . repositoryToApiModel ( newOrder )  
ProductEntity product  
for ( OrderDetail detail : details )  
productId = detail != null && detail . getProductId ( ) != null ? detail . getProductId ( ) : 0  
if ( ! resultProduct . isPresent ( ) || ! resultProduct . get ( ) . getStore ( ) . getId ( ) . equals ( storeId ) || detail == null || detail . getCount ( ) == null || detail . getCount ( ) <= 0 )  
resultOrder . getErrors ( ) . add ( detail )  
Optional < StockEntity > resultStock = stockRepository . findByProduct ( product )  
resultStock . isPresent ( ) ? resultStock . get ( ) . getExistence ( ) : 0  
: 0  
existence = resultStock . isPresent ( ) ? resultStock . get ( ) . getExistence ( ) : 0  
createOrderDetail ( resultOrder , detail , newOrder , product , OrderDetailStatusEnum . ORDERED )  
createOrderDetail ( resultOrder , detailOrdered , newOrder , product , OrderDetailStatusEnum . ORDERED )  
createOrderDetail ( resultOrder , detailBackordered , newOrder , product , OrderDetailStatusEnum . BACKORDERED )  
createOrderDetail ( resultOrder , detail , newOrder , product , OrderDetailStatusEnum . BACKORDERED )  
OrderDetailEntity detailEntity = new OrderDetailEntity ( orderEntity , productEntity , status , detail . getCount ( ) )  
@ Test @ FlywayTest public void createOrderNotFound ( ) throws IOException  
ResponseEntity < String > response = getJSONResponse ( template , String . format ( REQUEST_URI , basePath ( ) ) + "99" , FileUtils . readFileToString ( newStockRequest ) , HttpMethod . POST )  
assertEquals ( "Store not found" , HttpStatus . NOT_FOUND , response . getStatusCode ( ) )  
@ Before public void setUp ( ) throws IOException  
ResourceCreated responseStoreId = mapper . readValue ( responseStore . getBody ( ) , ResourceCreated . class )  
ResponseEntity < String > responseProduct = getJSONResponse ( template , String . format ( TestProductController . REQUEST_URI , basePath ( ) ) + storeId , FileUtils . readFileToString ( newProductRequest ) , HttpMethod . POST )  
assertEquals ( "Product created" , HttpStatus . CREATED , responseProduct . getStatusCode ( ) )  
ResourceCreated responseProductId = mapper . readValue ( responseProduct . getBody ( ) , ResourceCreated . class )  
ResponseEntity < String > responseStock = getJSONResponse ( template , String . format ( TestStockController . REQUEST_URI , basePath ( ) ) + storeId + "/" + productId , FileUtils . readFileToString ( newStockRequest ) , HttpMethod . POST )  
ResponseEntity < String > response = getJSONResponse ( template , String . format ( REQUEST_URI , basePath ( ) ) + storeId , FileUtils . readFileToString ( newOrderClientInvalidRequest ) , HttpMethod . POST )  
assertEquals ( "Order not created, client not found" , HttpStatus . NOT_FOUND , response . getStatusCode ( ) )  
ResponseEntity < String > response = getJSONResponse ( template , String . format ( REQUEST_URI , basePath ( ) ) + storeId , FileUtils . readFileToString ( newOrderRequest ) , HttpMethod . POST )  
assertEquals ( "Product created" , HttpStatus . CREATED , responseProduct . getStatusCode ( ) )  
ResourceCreated responseProductId = mapper . readValue ( responseProduct . getBody ( ) , ResourceCreated . class )  
ResponseEntity < String > responseStock = getJSONResponse ( template , String . format ( TestStockController . REQUEST_URI , basePath ( ) ) + storeId + "/" + productId , FileUtils . readFileToString ( newStockRequest ) , HttpMethod . POST )  
assertEquals ( "Stock created" , HttpStatus . OK , responseStock . getStatusCode ( ) )  
ResponseEntity < String > responseClient = getJSONResponse ( template , String . format ( TestClientController . REQUEST_URI , basePath ( ) ) , FileUtils . readFileToString ( newClientRequest ) , HttpMethod . POST )  
ResponseEntity < String > response = getJSONResponse ( template , String . format ( REQUEST_URI , basePath ( ) ) + storeId , FileUtils . readFileToString ( newOrderRequest ) , HttpMethod . POST )  
Order orderResponse = mapper . readValue ( response . getBody ( ) , Order . class )  
assertEquals ( "Order created correct store id" , orderResponse . getStoreId ( ) . intValue ( ) , storeId . intValue ( ) )  
assertEquals ( "Order created correct client last name" , orderResponse . getClient ( ) . getLastName ( ) , "Roger" )  
assertEquals ( "Order created correct client email" , orderResponse . getClient ( ) . getEmail ( ) , "client@domian.co" )  
assertEquals ( "Order created correct client phone" , orderResponse . getClient ( ) . getPhone ( ) , "5512345678" )  
ResponseEntity < String > response = getJSONResponse ( template , String . format ( REQUEST_URI , basePath ( ) ) + storeId , FileUtils . readFileToString ( newOrderRequest ) , HttpMethod . POST )  
ResponseEntity < String > responseGet = getJSONResponse ( template , String . format ( TestStockController . REQUEST_URI , basePath ( ) ) + storeId + "/" + productId , null , HttpMethod . GET )  
assertEquals ( "Stock created" , HttpStatus . OK , responseStock . getStatusCode ( ) )  
ResourceCreated responseClientId = mapper . readValue ( responseClient . getBody ( ) , ResourceCreated . class )  
Order orderResponse = mapper . readValue ( response . getBody ( ) , Order . class )  
assertEquals ( "Order created correct store id" , orderResponse . getStoreId ( ) . intValue ( ) , storeId . intValue ( ) )  
assertEquals ( "Order created correct product count" , orderResponse . getProducts ( ) . get ( 0 ) . getCount ( ) , Long . valueOf ( 10 ) )  
ResponseEntity < String > responseStock = getJSONResponse ( template , String . format ( TestStockController . REQUEST_URI , basePath ( ) ) + storeId + "/" + productId , FileUtils . readFileToString ( newStockRequest ) , HttpMethod . POST )  
Stock stockResponse = mapper . readValue ( responseStock . getBody ( ) , Stock . class )  
assertEquals ( "Stock count OK" , stockResponse . getCount ( ) , Long . valueOf ( 50 ) )  
ResponseEntity < String > responseGet = getJSONResponse ( template , String . format ( TestStockController . REQUEST_URI , basePath ( ) ) + storeId + "/" + productId , null , HttpMethod . GET )  
assertEquals ( "Stock created" , HttpStatus . OK , responseStock . getStatusCode ( ) )  
ResponseEntity < String > responseClient = getJSONResponse ( template , String . format ( TestClientController . REQUEST_URI , basePath ( ) ) , FileUtils . readFileToString ( newClientRequest ) , HttpMethod . POST )  
assertEquals ( "Client created" , HttpStatus . CREATED , responseClient . getStatusCode ( ) )  
ResponseEntity < String > response = getJSONResponse ( template , String . format ( REQUEST_URI , basePath ( ) ) + storeId , FileUtils . readFileToString ( newOrderBackorderRequest ) , HttpMethod . POST )  
assertEquals ( "Order created correct order id" , orderResponse . getOrderId ( ) , Long . valueOf ( 1 ) )  
assertEquals ( "Order created correct store id" , orderResponse . getStoreId ( ) . intValue ( ) , storeId . intValue ( ) )  
ResponseEntity < String > responseGet = getJSONResponse ( template , String . format ( TestStockController . REQUEST_URI , basePath ( ) ) + storeId + "/" + productId , null , HttpMethod . GET )  
Stock responseGetBody = mapper . readValue ( responseGet . getBody ( ) , Stock . class )  
ResponseEntity < String > responseStock = getJSONResponse ( template , String . format ( TestStockController . REQUEST_URI , basePath ( ) ) + storeId + "/" + productId , FileUtils . readFileToString ( newStockRequest ) , HttpMethod . POST )  
ResponseEntity < String > response = getJSONResponse ( template , String . format ( REQUEST_URI , basePath ( ) ) + storeId , FileUtils . readFileToString ( newOrderErrorsRequest ) , HttpMethod . POST )  
assertEquals ( "Order created correct store id" , orderResponse . getStoreId ( ) . intValue ( ) , storeId . intValue ( ) )  
ResponseEntity < String > responseGet = getJSONResponse ( template , String . format ( TestStockController . REQUEST_URI , basePath ( ) ) + storeId + "/" + productId , null , HttpMethod . GET )  
assertEquals ( "Stock get OK correct count" , responseGetBody . getCount ( ) , Long . valueOf ( 25 ) )  
ResponseEntity < String > responseStock = getJSONResponse ( template , String . format ( TestStockController . REQUEST_URI , basePath ( ) ) + storeId + "/" + productId , FileUtils . readFileToString ( newStockRequest ) , HttpMethod . POST )  
ResponseEntity < String > response = getJSONResponse ( template , String . format ( REQUEST_URI , basePath ( ) ) + storeId , FileUtils . readFileToString ( newOrderDetailNullRequest ) , HttpMethod . POST )  
ResponseEntity < String > responseStock = getJSONResponse ( template , String . format ( TestStockController . REQUEST_URI , basePath ( ) ) + storeId + "/" + productId , FileUtils . readFileToString ( newStockRequest ) , HttpMethod . POST )  
ResponseEntity < String > response = getJSONResponse ( template , String . format ( REQUEST_URI , basePath ( ) ) + storeId , FileUtils . readFileToString ( newOrderProductIdNullRequest ) , HttpMethod . POST )  
@ Test @ FlywayTest public void updateStockNotFound ( ) throws IOException  
ResponseEntity < String > response = getJSONResponse ( template , String . format ( REQUEST_URI , basePath ( ) ) + "99/99" , FileUtils . readFileToString ( newStockRequest ) , HttpMethod . POST )  
assertEquals ( "Store or product not found" , HttpStatus . NOT_FOUND , response . getStatusCode ( ) )  
@ Before public void setUp ( ) throws IOException  
ResponseEntity < String > responseGet = getJSONResponse ( template , String . format ( REQUEST_URI , basePath ( ) ) + storeId + "/" + productId , null , HttpMethod . GET )  
assertEquals ( "Stock created" , HttpStatus . OK , response . getStatusCode ( ) )  
ResponseEntity < String > response = getJSONResponse ( template , String . format ( REQUEST_URI , basePath ( ) ) + storeId + "/" + productId , FileUtils . readFileToString ( newStockRequest ) , HttpMethod . POST )  
assertEquals ( "Stock get OK" , HttpStatus . OK , responseGet . getStatusCode ( ) )  
Stock responseGetBody = mapper . readValue ( responseGet . getBody ( ) , Stock . class )  
assertEquals ( "Stock get OK correct count" , responseGetBody . getCount ( ) , Long . valueOf ( 50 ) )  
@ Test @ FlywayTest public void getEmptyStockOk ( ) throws IOException  
ResponseEntity < String > responseGet = getJSONResponse ( template , String . format ( REQUEST_URI , basePath ( ) ) + storeId + "/" + productId , null , HttpMethod . GET )  
assertEquals ( "Stock get OK" , HttpStatus . OK , responseGet . getStatusCode ( ) )  
Stock responseGetBody = mapper . readValue ( responseGet . getBody ( ) , Stock . class )  
assertEquals ( "Stock get OK correct count" , responseGetBody . getCount ( ) , Long . valueOf ( 0 ) )  
ResponseEntity < String > responseGet = getJSONResponse ( template , String . format ( REQUEST_URI , basePath ( ) ) + "9/9" , null , HttpMethod . GET )  
assertEquals ( "Stock get not found" , HttpStatus . NOT_FOUND , responseGet . getStatusCode ( ) )  
@ Test @ FlywayTest public void getStockProductNotFound ( ) throws IOException  
ResponseEntity < String > response = getJSONResponse ( template , String . format ( REQUEST_URI , basePath ( ) ) + storeId + "/5" , FileUtils . readFileToString ( newStockRequest ) , HttpMethod . POST )  
assertEquals ( "Stock get product not found" , HttpStatus . NOT_FOUND , responseGet . getStatusCode ( ) )  
@ Test @ FlywayTest public void getStockProductWrongStoreNotFound ( ) throws IOException  
ResponseEntity < String > responseGet = getJSONResponse ( template , String . format ( REQUEST_URI , basePath ( ) ) + storeId + "/" + productId , null , HttpMethod . GET )  
assertEquals ( "Stock get wrong store" , HttpStatus . NOT_FOUND , responseGet . getStatusCode ( ) )  
@ Test @ FlywayTest public void createStockProductNotFound ( ) throws IOException  
ResponseEntity < String > responseGetUpdate = getJSONResponse ( template , String . format ( REQUEST_URI , basePath ( ) ) + storeId + "/" + productId , null , HttpMethod . GET )  
assertEquals ( "Stock not created, product not found" , HttpStatus . NOT_FOUND , response . getStatusCode ( ) )  
@ Test @ FlywayTest public void createStockCountNull ( ) throws IOException  
assertEquals ( "Stock not created, stock count null" , HttpStatus . PRECONDITION_FAILED , response . getStatusCode ( ) )  
ResponseEntity < String > responseGet = getJSONResponse ( template , String . format ( REQUEST_URI , basePath ( ) ) + "9/" + productId , null , HttpMethod . GET )  
@ Test @ FlywayTest public void createStockInvalidCount ( ) throws IOException  
ResponseEntity < String > responseGet = getJSONResponse ( template , String . format ( REQUEST_URI , basePath ( ) ) + storeId + "/9" , null , HttpMethod . GET )  
assertEquals ( "Stock not created bad request" , HttpStatus . BAD_REQUEST , response . getStatusCode ( ) )  
