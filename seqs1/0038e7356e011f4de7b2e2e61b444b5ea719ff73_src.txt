@ Inject public CoreErrorsDialogModel ( final ErrorManager errorManager , final DMDircMBassador eventBus )  
@ Override public void load ( )  
eventBus . subscribe ( this )  
@ Override public void unload ( )  
eventBus . unsubscribe ( this )  
@ Override public Set < DisplayableError > getErrors ( )  
final Set < DisplayableError > errors = new HashSet < > ( )  
errorManager . getErrors ( ) . forEach ( e -> errors . add ( getDisplayableError ( e ) ) )  
@ Override public void deleteAllErrors ( )  
@ Handler public void handleErrorStatusChanged ( final ProgramErrorStatusEvent event )  
listenerList . getCallable ( ErrorsDialogModelListener . class ) . errorStatusChanged ( getDisplayableError ( event . getError ( ) ) )  
listenerList . getCallable ( ErrorsDialogModelListener . class ) . errorDeleted ( getDisplayableError ( event . getError ( ) ) )  
private DisplayableError getDisplayableError ( final ProgramError error )  
final String details  
if ( error . getDetails ( ) . isEmpty ( ) )  
details = error . getMessage ( ) + '\n' + getThrowableAsString ( error . getThrowable ( ) )  
details = error . getMessage ( ) + '\n' + error . getDetails ( ) + '\n' + getThrowableAsString ( error . getThrowable ( ) )  
return DisplayableError . create ( error . getDate ( ) , error . getMessage ( ) , details , error . getLevel ( ) , error . getReportStatus ( ) , error )  
private String getThrowableAsString ( final Throwable throwable )  
if ( throwable == null )  
return ""  
return Throwables . getStackTraceAsString ( throwable )  
@ AutoValue public abstract class DisplayableError  
DisplayableError ( ) {  
public abstract Date getDate ( )  
public abstract String getSummary ( )  
public abstract String getDetails ( )  
public abstract ErrorLevel getSeverity ( )  
public abstract ProgramError getProgramError ( )  
