public static boolean USE_CAMERA_STREAM = false  
camera_theta = - 89.999f  
camera_phi = 90  
projector_theta = - 89.999f  
projector_phi = 90  
switch ( e . getActionMasked ( ) ) { case MotionEvent . ACTION_POINTER_DOWN : isTwoFingerGesture = true ; currentGesture = NOT_DECIDED ; gestStartX1 = p1x ; gestStartY1 = p1y ; gestStartX2 = p2x ; gestStartY2 = p2y ; twoFingerRotationTotal = 0 ; break ; case MotionEvent . ACTION_MOVE : float rotation_angle = computeRotationAngle ( p1x , p1y , p2x , p2y , prevX1 , prevY1 , prevX2 , prevY2 ) ; float finger_dist = ( float ) sqrt ( pow ( p1x - p2x , 2 ) + pow ( p1y - p2y , 2 ) ) ; float p1_move = ( float ) sqrt ( pow ( p1x - gestStartX1 , 2 ) + pow ( p1y - gestStartY1 , 2 ) ) ; float p2_move = ( float ) sqrt ( pow ( p2x - gestStartX2 , 2 ) + pow ( p2y - gestStartY2 , 2 ) ) ; if ( currentGesture == NOT_DECIDED && max ( p1_move , p2_move ) < 60 ) { break ; } else if ( currentGesture == NOT_DECIDED ) { if ( min ( p1_move , p2_move ) < 25 ) { currentGesture = ORBIT ; } else { currentGesture = ZOOM_AND_TRANSLATE ; } } twoFingerRotationTotal += rotation_angle ; Log . d ( "total_rotation" , " , min finger move: " + min ( p1_move , p2_move ) + ", max: " + max ( p1_move , p2_move ) + ", rotation: " + twoFingerRotationTotal ) ; float [ ] rotationPt = computeRotationPoint ( p1x , p1y , p2x , p2y ) ; float rx = rotationPt [ 0 ] ; float ry = rotationPt [ 1 ] ; if ( currentGesture == ZOOM_AND_TRANSLATE ) { twoFingerDrag ( p1x , p1y , p2x , p2y ) ; zoomGesture ( p1x , p1y , p2x , p2y , rx , ry ) ; } else if ( currentGesture == ORBIT ) { mRenderer . moveBasedOnTwoFingerRotation ( rx , ry , rotation_angle ) ; } break ; case MotionEvent . ACTION_POINTER_UP : float [ ] cameraTranslationV = mRenderer . getCameraTranslation ( ) ; float x_translate = cameraTranslationV [ 0 ] ; float y_translate = cameraTranslationV [ 1 ] ; float z_translate = cameraTranslationV [ 2 ] ; float heading = mRenderer . getPhiCamera ( ) ; mDroneWrapper . setNewGPSCoordinates ( x_translate , y_translate , z_translate , heading ) ; if ( e . getActionIndex ( ) == 0 ) { prevX = p2x ; prevY = p2y ; } else { prevX = p1x ; prevY = p1y ; } break  
isGestureInProgress = false  
prevY = y  
