checkArgument ( table . getStorage ( ) . getLocation ( ) == null , "Storage location for view must be null" )  
@ Override public synchronized void replaceTable ( String databaseName , String tableName , Table newTable , PrincipalPrivileges principalPrivileges ) 
if ( relations . putIfAbsent ( newName , newTable ) != null )  
for ( Partition partition : partitions )  
Table table = getRequiredTable ( new SchemaTableName ( databaseName , tableName ) )  
PartitionName partitionName = entry . getKey ( )  
Partition partition = entry . getValue ( )  
if ( partitions . remove ( partitionName , partition ) && deleteData && table . getTableType ( ) . equals ( MANAGED_TABLE . name ( ) ) )  
File directory = new File ( URI . create ( partition . getStorage ( ) . getLocation ( ) ) )  
checkArgument ( isParentDir ( directory , baseDirectory ) , "Partition directory must be inside of the metastore base directory" )  
deleteRecursively ( directory )  
throw new PartitionNotFoundException ( new SchemaTableName ( databaseName , tableName ) , partition . getValues ( ) )  
@ Override public synchronized Optional < List < String >> getPartitionNames ( String databaseName , String tableName ) 
return getTable ( databaseName , tableName ) . map ( table -> partitions . entrySet ( ) . stream ( ) . filter ( entry -> entry . getKey ( ) . matches ( databaseName , tableName ) ) . map ( entry -> entry . getKey ( ) . getPartitionName ( table . getPartitionColumns ( ) ) ) . collect ( toImmutableList ( ) ) )  
