@ Override protected void scripts ( )  
VolumeVO vol = Q . New ( VolumeVO . class ) . eq ( VolumeVO_ . uuid , msg . getVolumeUuid ( ) ) . find ( )  
if ( vol . getType ( ) == VolumeType . Root )  
throw new ApiMessageInterceptionException ( operr ( "the volume[uuid:%s, name:%s] is Root Volume, can't attach it" , vol . getUuid ( ) , vol . getName ( ) ) )  
if ( vol . getState ( ) == VolumeState . Disabled )  
throw new ApiMessageInterceptionException ( operr ( "data volume[uuid:%s] is Disabled, can't attach" , vol . getUuid ( ) ) )  
if ( vol . getStatus ( ) == VolumeStatus . Deleted )  
throw new ApiMessageInterceptionException ( operr ( "the volume[uuid:%s] is in status of deleted, cannot do the operation" , vol . getUuid ( ) ) )  
if ( vol . getVmInstanceUuid ( ) != null )  
throw new ApiMessageInterceptionException ( operr ( "data volume[%s] has been attached to vm[uuid:%s], can't attach again" , vol . getUuid ( ) , vol . getVmInstanceUuid ( ) ) )  
if ( VolumeStatus . Ready != vol . getStatus ( ) && VolumeStatus . NotInstantiated != vol . getStatus ( ) )  
throw new ApiMessageInterceptionException ( operr ( "data volume can only be attached when status is [%s, %s], current is %s" , VolumeStatus . Ready , VolumeStatus . NotInstantiated , vol . getStatus ( ) ) )  
String hvType = Q . New ( VmInstanceVO . class ) . eq ( VmInstanceVO_ . uuid , msg . getVmInstanceUuid ( ) ) . select ( VmInstanceVO_ . hypervisorType ) . findValue ( )  
String hvType = Q . New ( VmInstanceVO . class ) . eq ( VmInstanceVO_ . uuid , msg . getVmInstanceUuid ( ) ) . select ( VmInstanceVO_ . hypervisorType ) . findValue ( )  
String hvType = Q . New ( VmInstanceVO . class ) . eq ( VmInstanceVO_ . uuid , msg . getVmInstanceUuid ( ) ) . select ( VmInstanceVO_ . hypervisorType ) . findValue ( )  
if ( vol . getFormat ( ) != null )  
HypervisorType volHvType = VolumeFormat . getMasterHypervisorTypeByVolumeFormat ( vol . getFormat ( ) )  
if ( ! hvType . equals ( volHvType . toString ( ) ) )  
throw new ApiMessageInterceptionException ( operr ( "data volume[uuid:%s] has format[%s] that can only be attached to hypervisor[%s], but vm[uuid:%s] has hypervisor type[%s]. Can't attach" , vol . getUuid ( ) , vol . getFormat ( ) , volHvType , msg . getVmInstanceUuid ( ) , hvType ) )  
MaxDataVolumeNumberExtensionPoint ext = maxDataVolumeNumberExtensions . get ( hvType )  
int maxDataVolumeNum = DEFAULT_MAX_DATA_VOLUME_NUMBER  
if ( ext != null )  
maxDataVolumeNum = ext . getMaxDataVolumeNumber ( )  
count = Q . New ( VolumeVO . class ) . eq ( VolumeVO_ . type , VolumeType . Data ) . eq ( VolumeVO_ . vmInstanceUuid , msg . getVolumeUuid ( ) ) . count ( )  
count = Q . New ( VolumeVO . class ) . eq ( VolumeVO_ . type , VolumeType . Data ) . eq ( VolumeVO_ . vmInstanceUuid , msg . getVolumeUuid ( ) ) . count ( )  
count = Q . New ( VolumeVO . class ) . eq ( VolumeVO_ . type , VolumeType . Data ) . eq ( VolumeVO_ . vmInstanceUuid , msg . getVolumeUuid ( ) ) . count ( )  
if ( count + 1 > maxDataVolumeNum )  
throw new ApiMessageInterceptionException ( operr ( "hypervisor[%s] only allows max %s data volumes to be attached to a single vm; there have been %s data volumes attached to vm[uuid:%s]" , hvType , maxDataVolumeNum , count , msg . getVmInstanceUuid ( ) ) )  
if ( isRootVolume ( msg . getUuid ( ) ) )  
throw new ApiMessageInterceptionException ( operr ( "it's not allowed to backup root volume, uuid:%s" , msg . getUuid ( ) ) )  
@ Override protected List < VmInstanceVO > scripts ( )  
List < String > vmUuids = acntMgr . getResourceUuidsCanAccessByAccount ( accountUuid , VmInstanceVO . class )  
if ( vmUuids != null && vmUuids . isEmpty ( ) )  
SQL sql = null  
if ( vmUuids == null )  
if ( self . getStatus ( ) == VolumeStatus . Ready )  
List < String > hvTypes = VolumeFormat . valueOf ( self . getFormat ( ) ) . getHypervisorTypesSupportingThisVolumeFormatInString ( )  
sql = SQL . New ( "select vm " + "from VmInstanceVO vm, PrimaryStorageClusterRefVO ref, VolumeVO vol " + "where vm.state in (:vmStates) " + "and vol.uuid = :volUuid " + "and vm.hypervisorType in (:hvTypes) " + "and vm.clusterUuid = ref.clusterUuid " + "and ref.primaryStorageUuid = vol.primaryStorageUuid " + "group by vm.uuid" ) . param ( "volUuid" , self . getUuid ( ) ) . param ( "hvTypes" , hvTypes )  
if ( self . getStatus ( ) == VolumeStatus . NotInstantiated )  
sql = SQL . New ( "select vm " + "from VmInstanceVO vm,PrimaryStorageClusterRefVO ref,PrimaryStorageEO ps " + "where vm.state in (:vmStates) " + "and vm.hypervisorType <> :hvType  " + "and vm.clusterUuid = ref.clusterUuid " + "and ref.primaryStorageUuid = ps.uuid " + "and ps.state in (:psState) " + "group by vm.uuid" ) . param ( "hvType" , "ESX" ) . param ( "psState" , PrimaryStorageState . Enabled )  
DebugUtils . Assert ( false , String . format ( "should not reach here, volume[uuid:%s]" , self . getUuid ( ) ) )  
if ( self . getStatus ( ) == VolumeStatus . Ready )  
List < String > hvTypes = VolumeFormat . valueOf ( self . getFormat ( ) ) . getHypervisorTypesSupportingThisVolumeFormatInString ( )  
sql = SQL . New ( "select vm " + "from VmInstanceVO vm, PrimaryStorageClusterRefVO ref, VolumeVO vol " + "where vm.uuid in (:vmUuids) " + "and vm.state in (:vmStates) " + "and vol.uuid = :volUuid " + "and vm.hypervisorType in (:hvTypes) " + "and vm.clusterUuid = ref.clusterUuid " + "and ref.primaryStorageUuid = vol.primaryStorageUuid " + "group by vm.uuid" ) . param ( "volUuid" , self . getUuid ( ) ) . param ( "hvTypes" , hvTypes )  
if ( self . getStatus ( ) == VolumeStatus . NotInstantiated )  
sql = SQL . New ( "select vm " + "from VmInstanceVO vm,PrimaryStorageClusterRefVO ref,PrimaryStorageEO ps " + "where vm.uuid in (:vmUuids) " + "and vm.state in (:vmStates) " + "and vm.clusterUuid = ref.clusterUuid " + "and ref.primaryStorageUuid = ps.uuid " + "and ps.state in (:psState) " + "group by vm.uuid" ) . param ( "psState" , PrimaryStorageState . Enabled )  
DebugUtils . Assert ( false , String . format ( "should not reach here, volume[uuid:%s]" , self . getUuid ( ) ) )  
sql . param ( "vmUuids" , vmUuids )  
List < VmInstanceVO > ret = sql . param ( "vmStates" , Arrays . asList ( VmInstanceState . Running , VmInstanceState . Stopped ) ) . list ( )  
if ( ret . isEmpty ( ) )  
VolumeInventory vol = getSelfInventory ( )  
for ( VolumeGetAttachableVmExtensionPoint ext : pluginRgty . getExtensionList ( VolumeGetAttachableVmExtensionPoint . class ) )  
ret = ext . returnAttachableVms ( vol , ret )  
