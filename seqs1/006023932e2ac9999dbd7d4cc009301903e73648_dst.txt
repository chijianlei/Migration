when ( configurationManagement . update ( configuration2 , configutation . getId ( ) , anyString ( ) ) ) . thenReturn ( configuration2 )  
configutation = configurationManagement . update ( configuration2 , configutation . getId ( ) , "pi" )  
when ( vimRepository . findByProjectId ( anyString ( ) ) ) . thenReturn ( new ArrayList < VimInstance > ( ) { { add ( createVimInstance ( ) ) ; } } )  
nsdManagement . onboard ( nsd_exp , "pi" )  
nsdManagement . delete ( nsd_exp . getId ( ) , "pi" )  
nsdManagement . onboard ( nsd_exp , "" )  
nsdManagement . delete ( nsd_exp . getId ( ) , "pi" )  
add ( nsd_exp )  
nsdManagement . delete ( nsd_exp . getId ( ) , "pi" )  
vnfmManagerEndpoint . setEnabled ( true )  
nsdManagement . update ( new_nsd , "pi" )  
NetworkServiceDescriptor nsd = nsdManagement . query ( nsd_exp . getId ( ) , "pi" )  
Set < VirtualNetworkFunctionDescriptor > virtualNetworkFunctionDescriptors = new HashSet < > ( )  
nsrManagement . delete ( nsd_exp . getId ( ) , "pi" )  
nsrManagement . onboard ( nsd_exp , "pi" )  
nsrManagement . onboard ( networkServiceDescriptor . getId ( ) , "pi" )  
nsrManagement . onboard ( networkServiceDescriptor . getId ( ) , "pi" )  
nsrManagement . update ( new_nsr , nsd_exp . getId ( ) , "pi" )  
NetworkServiceRecord networkServiceRecord = nsrManagement . query ( nsr_exp . getId ( ) , "pi" )  
vimInstance_exp = vimManagement . update ( vimInstance_new , vimInstance_exp . getId ( ) , "pi" )  
VimInstance vimInstance_new = vimManagement . add ( vimInstance_exp , "pi" )  
doNothing ( ) . when ( networkRepository ) . delete ( any ( Network . class ) )  
when ( vimRepository . findFirstById ( vimInstance_exp . getId ( ) ) ) . thenReturn ( vimInstance_exp )  
VimInstance vimInstance_new = vimManagement . query ( vimInstance_exp . getId ( ) , "pi" )  
vimManagement . delete ( vimInstance_exp . getId ( ) , "pi" )  
Assert . assertEquals ( vimInstance_exp . getId ( ) , vimInstance_new . getId ( ) )  
VimInstance vimInstance_new = vimManagement . query ( vimInstance_exp . getId ( ) , "pi" )  
