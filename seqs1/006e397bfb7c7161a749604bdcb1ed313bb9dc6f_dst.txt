IWorkspace workspace = ResourcesPlugin . getWorkspace ( )  
String sep = System . getProperty ( "file.separator" )  
ArrayList < String > cmdList = new ArrayList < String > ( )  
ProcessBuilder jobBuilder = null  
String os = System . getProperty ( "os.name" )  
cmdList . add ( "/bin/bash" )  
cmdList . add ( "-c" )  
cmdList . add ( "python make_new_application.py" )  
final ForkStorkWizard wizard = new ForkStorkWizard ( )  
String appName = wizard . getMooseAppName ( )  
String gitHubUser = wizard . getGitUsername ( )  
String password = wizard . getGitPassword ( )  
File workspaceFile = new File ( ResourcesPlugin . getWorkspace ( ) . getRoot ( ) . getLocation ( ) . toOSString ( ) + sep + appName )  
RepositoryService service = new RepositoryService ( )  
RepositoryId id = new RepositoryId ( "idaholab" , "stork" )  
service . getClient ( ) . setCredentials ( gitHubUser , password )  
Repository repo = service . forkRepository ( id )  
Map < String , Object > fields = new HashMap < String , Object > ( )  
fields . put ( "name" , appName )  
service . editRepository ( repo , fields )  
} catch ( IOException e1 )  
e1 . printStackTrace ( )  
Git result = Git . cloneRepository ( ) . setURI ( remoteURI ) . setDirectory ( workspaceFile ) . call ( )  
return new Status ( Status . ERROR , "org.eclipse.ice.client.widgets.moose" , 1 , errorMessage , null )  
e1 . printStackTrace ( )  
} catch ( GitAPIException e1 )  
e1 . printStackTrace ( )  
if ( os . contains ( "Linux" ) || os . contains ( "Mac" ) )  
jobBuilder = new ProcessBuilder ( cmdList )  
jobBuilder . directory ( new File ( workspaceFile . getAbsolutePath ( ) ) )  
jobBuilder . redirectErrorStream ( false )  
jobBuilder . start ( )  
} catch ( IOException e )  
e . printStackTrace ( )  
IProject project = workspace . getRoot ( ) . getProject ( appName )  
IProjectDescription description = workspace . newProjectDescription ( appName )  
CCorePlugin . getDefault ( ) . createCDTProject ( description , project , new NullProgressMonitor ( ) )  
CCProjectNature . addCCNature ( project , new NullProgressMonitor ( ) )  
ICProjectDescriptionManager pdMgr = CoreModel . getDefault ( ) . getProjectDescriptionManager ( )  
ICProjectDescription projDesc = pdMgr . createProjectDescription ( project , false )  
ManagedBuildInfo info = ManagedBuildManager . createBuildInfo ( project )  
ManagedProject mProj = new ManagedProject ( projDesc )  
info . setManagedProject ( mProj )  
IToolChain toolChain = null  
for ( IToolChain tool : ManagedBuildManager . getRealToolChains ( ) )  
if ( os . contains ( "Mac" ) && tool . getName ( ) . contains ( "Mac" ) && tool . getName ( ) . contains ( "GCC" ) )  
toolChain = tool  
} else if ( os . contains ( "Linux" ) && tool . getName ( ) . contains ( "Linux" ) && tool . getName ( ) . contains ( "GCC" ) )  
toolChain = tool  
} else if ( os . contains ( "Windows" ) && tool . getName ( ) . contains ( "Cygwin" ) )  
toolChain = tool  
toolChain = null  
CfgHolder cfgHolder = new CfgHolder ( toolChain , null )  
String s = toolChain == null ? "0" : toolChain . getId ( ) ; 
String s = toolChain == null ? "0" : toolChain . getId ( ) ; 
String s = toolChain == null ? "0" : toolChain . getId ( ) ; 
IConfiguration config = new Configuration ( mProj , ( org . eclipse . cdt . managedbuilder . internal . core . ToolChain ) toolChain , ManagedBuildManager . calculateChildId ( s , null ) , cfgHolder . getName ( ) )  
IBuilder builder = config . getEditableBuilder ( )  
builder . setManagedBuildOn ( false )  
CConfigurationData data = config . getConfigurationData ( )  
projDesc . createConfiguration ( ManagedBuildManager . CFG_DATA_PROVIDER_ID , data )  
pdMgr . setProjectDescription ( project , projDesc )  
IProject cProject = projDesc . getProject ( )  
IMakeTargetManager manager = MakeCorePlugin . getDefault ( ) . getTargetManager ( )  
String [ ] ids = manager . getTargetBuilders ( cProject )  
IMakeTarget target = manager . createTarget ( cProject , "make all" , ids [ 0 ] )  
target . setStopOnError ( false )  
target . setRunAllBuilders ( false )  
target . setUseDefaultBuildCmd ( false )  
target . setBuildAttribute ( IMakeCommonBuildInfo . BUILD_COMMAND , "make" )  
target . setBuildAttribute ( IMakeTarget . BUILD_LOCATION , cProject . getLocation ( ) . toOSString ( ) )  
target . setBuildAttribute ( IMakeTarget . BUILD_ARGUMENTS , "" )  
target . setBuildAttribute ( IMakeTarget . BUILD_TARGET , "all" )  
manager . addTarget ( cProject , target )  
ICProjectDescription cDescription = CoreModel . getDefault ( ) . getProjectDescriptionManager ( ) . createProjectDescription ( cProject , false )  
ICConfigurationDescription cConfigDescription = cDescription . createConfiguration ( ManagedBuildManager . CFG_DATA_PROVIDER_ID , config . getConfigurationData ( ) )  
cDescription . setActiveConfiguration ( cConfigDescription )  
cConfigDescription . setSourceEntries ( null )  
IFolder srcFolder = cProject . getFolder ( "src" )  
IFolder includeFolder = cProject . getFolder ( "include" )  
ICSourceEntry srcFolderEntry = new CSourceEntry ( srcFolder , null , ICSettingEntry . RESOLVED )  
ICSourceEntry includeFolderEntry = new CSourceEntry ( includeFolder , null , ICSettingEntry . RESOLVED )  
cConfigDescription . setSourceEntries ( new ICSourceEntry [ ] { srcFolderEntry , includeFolderEntry } )  
ICProjectDescription projectDescription = CoreModel . getDefault ( ) . getProjectDescription ( cProject , true )  
ICConfigurationDescription configDecriptions [ ] = projectDescription . getConfigurations ( )  
for ( ICConfigurationDescription configDescription : configDecriptions )  
ICFolderDescription projectRoot = configDescription . getRootFolderDescription ( )  
ICLanguageSetting [ ] settings = projectRoot . getLanguageSettings ( )  
for ( ICLanguageSetting setting : settings )  
List < ICLanguageSettingEntry > includes = getIncludePaths ( )  
includes . addAll ( setting . getSettingEntriesList ( ICSettingEntry . INCLUDE_PATH ) )  
setting . setSettingEntries ( ICSettingEntry . INCLUDE_PATH , includes )  
CoreModel . getDefault ( ) . setProjectDescription ( cProject , projectDescription )  
} catch ( CoreException e )  
e . printStackTrace ( )  
variableEntry . setValue ( currentValue )  
