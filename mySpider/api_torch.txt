torch.is_tensor(obj)
torch.is_storage(obj)
torch.is_floating_point(tensor) -> (bool)
torch.set_default_dtype(d)
torch.get_default_dtype() → torch.dtype
torch.set_default_tensor_type(t)
torch.numel(input) → int
torch.set_printoptions(precision=None, threshold=None, edgeitems=None, linewidth=None, profile=None, sci_mode=None)
torch.set_flush_denormal(mode) → bool
torch.tensor(data, dtype=None, device=None, requires_grad=False, pin_memory=False) → Tensor
torch.sparse_coo_tensor(indices, values, size=None, dtype=None, device=None, requires_grad=False) → Tensor
torch.as_tensor(data, dtype=None, device=None) → Tensor
torch.from_numpy(ndarray) → Tensor
torch.zeros(*sizes, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) → Tensor
torch.zeros_like(input, dtype=None, layout=None, device=None, requires_grad=False) → Tensor
torch.ones(*sizes, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) → Tensor
torch.ones_like(input, dtype=None, layout=None, device=None, requires_grad=False) → Tensor
torch.arange(start=0, end, step=1, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) → Tensor
torch.range(start=0, end, step=1, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) → Tensor
torch.linspace(start, end, steps=100, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) → Tensor
torch.logspace(start, end, steps=100, base=10.0, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) → Tensor
torch.eye(n, m=None, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) → Tensor
torch.empty(*sizes, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False, pin_memory=False) → Tensor
torch.empty_like(input, dtype=None, layout=None, device=None, requires_grad=False) → Tensor
torch.full(size, fill_value, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) → Tensor
torch.full_like(input, fill_value, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) → Tensor
torch.cat(tensors, dim=0, out=None) → Tensor
torch.chunk(tensor, chunks, dim=0) → List of Tensors
torch.gather(input, dim, index, out=None, sparse_grad=False) → Tensor
torch.index_select(input, dim, index, out=None) → Tensor
torch.masked_select(input, mask, out=None) → Tensor
torch.narrow(input, dimension, start, length) → Tensor
torch.nonzero(input, out=None) → LongTensor
torch.reshape(input, shape) → Tensor
torch.split(tensor, split_size_or_sections, dim=0)
torch.squeeze(input, dim=None, out=None) → Tensor
torch.stack(seq, dim=0, out=None) → Tensor
torch.t(input) → Tensor
torch.take(input, indices) → Tensor
torch.transpose(input, dim0, dim1) → Tensor
torch.unbind(tensor, dim=0) → seq
torch.unsqueeze(input, dim, out=None) → Tensor
torch.where(condition, x, y) → Tensor
torch.manual_seed(seed)
torch.initial_seed()
torch.get_rng_state()
torch.set_rng_state(new_state)
torch.bernoulli(input, *, generator=None, out=None) → Tensor
torch.multinomial(input, num_samples, replacement=False, out=None) → LongTensor
torch.normal()
torch.rand(*sizes, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) → Tensor
torch.rand_like(input, dtype=None, layout=None, device=None, requires_grad=False) → Tensor
torch.randint(low=0, high, size, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) → Tensor
torch.randint_like(input, low=0, high, dtype=None, layout=torch.strided, device=None, requires_grad=False) → Tensor
torch.randn(*sizes, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) → Tensor
torch.randn_like(input, dtype=None, layout=None, device=None, requires_grad=False) → Tensor
torch.randperm(n, out=None, dtype=torch.int64, layout=torch.strided, device=None, requires_grad=False) → LongTensor
torch.save(obj, f, pickle_module=<module 'pickle' from '/opt/conda/lib/python3.6/pickle.py'>, pickle_protocol=2)
torch.load(f, map_location=None, pickle_module=<module 'pickle' from '/opt/conda/lib/python3.6/pickle.py'>, **pickle_load_args)
torch.get_num_threads() → int
torch.set_num_threads(int)
torch.abs(input, out=None) → Tensor
torch.acos(input, out=None) → Tensor
torch.add()
torch.addcdiv(tensor, value=1, tensor1, tensor2, out=None) → Tensor
torch.addcmul(tensor, value=1, tensor1, tensor2, out=None) → Tensor
torch.asin(input, out=None) → Tensor
torch.atan(input, out=None) → Tensor
torch.atan2(input1, input2, out=None) → Tensor
torch.ceil(input, out=None) → Tensor
torch.clamp(input, min, max, out=None) → Tensor
torch.cos(input, out=None) → Tensor
torch.cosh(input, out=None) → Tensor
torch.div()
torch.digamma(input, out=None) → Tensor
torch.erf(tensor, out=None) → Tensor
torch.erfc(input, out=None) → Tensor
torch.erfinv(input, out=None) → Tensor
torch.exp(input, out=None) → Tensor
torch.expm1(input, out=None) → Tensor
torch.floor(input, out=None) → Tensor
torch.fmod(input, divisor, out=None) → Tensor
torch.frac(input, out=None) → Tensor
torch.lerp(start, end, weight, out=None)
torch.log(input, out=None) → Tensor
torch.log10(input, out=None) → Tensor
torch.log1p(input, out=None) → Tensor
torch.log2(input, out=None) → Tensor
torch.mul()
torch.mvlgamma(input, p) → Tensor
torch.neg(input, out=None) → Tensor
torch.pow()
torch.reciprocal(input, out=None) → Tensor
torch.remainder(input, divisor, out=None) → Tensor
torch.round(input, out=None) → Tensor
torch.rsqrt(input, out=None) → Tensor
torch.sigmoid(input, out=None) → Tensor
torch.sign(input, out=None) → Tensor
torch.sin(input, out=None) → Tensor
torch.sinh(input, out=None) → Tensor
torch.sqrt(input, out=None) → Tensor
torch.tan(input, out=None) → Tensor
torch.tanh(input, out=None) → Tensor
torch.trunc(input, out=None) → Tensor
torch.argmax()
torch.argmin()
torch.cumprod(input, dim, out=None, dtype=None) → Tensor
torch.cumsum(input, dim, out=None, dtype=None) → Tensor
torch.dist(input, other, p=2) → Tensor
torch.logsumexp(input, dim, keepdim=False, out=None)
torch.mean()
torch.median()
torch.mode(input, dim=-1, keepdim=False, values=None, indices=None) -> (Tensor, LongTensor)
torch.norm(input, p='fro', dim=None, keepdim=False, out=None, dtype=None)
torch.prod()
torch.std()
torch.sum()
torch.unique(input, sorted=True, return_inverse=False, return_counts=False, dim=None)
torch.unique_consecutive(input, return_inverse=False, return_counts=False, dim=None)
torch.var()
torch.allclose(self, other, rtol=1e-05, atol=1e-08, equal_nan=False) → bool
torch.argsort(input, dim=-1, descending=False, out=None) → LongTensor
torch.eq(input, other, out=None) → Tensor
torch.equal(tensor1, tensor2) → bool
torch.ge(input, other, out=None) → Tensor
torch.gt(input, other, out=None) → Tensor
torch.isfinite(tensor)
torch.isinf(tensor)
torch.isnan()
torch.kthvalue(input, k, dim=None, keepdim=False, out=None) -> (Tensor, LongTensor)
torch.le(input, other, out=None) → Tensor
torch.lt(input, other, out=None) → Tensor
torch.max()
torch.min()
torch.ne(input, other, out=None) → Tensor
torch.sort(input, dim=-1, descending=False, out=None) -> (Tensor, LongTensor)
torch.topk(input, k, dim=None, largest=True, sorted=True, out=None) -> (Tensor, LongTensor)
torch.fft(input, signal_ndim, normalized=False) → Tensor
torch.ifft(input, signal_ndim, normalized=False) → Tensor
torch.rfft(input, signal_ndim, normalized=False, onesided=True) → Tensor
torch.irfft(input, signal_ndim, normalized=False, onesided=True, signal_sizes=None) → Tensor
torch.stft(input, n_fft, hop_length=None, win_length=None, window=None, center=True, pad_mode='reflect', normalized=False, onesided=True)
torch.bartlett_window(window_length, periodic=True, dtype=None, layout=torch.strided, device=None, requires_grad=False) → Tensor
torch.blackman_window(window_length, periodic=True, dtype=None, layout=torch.strided, device=None, requires_grad=False) → Tensor
torch.hamming_window(window_length, periodic=True, alpha=0.54, beta=0.46, dtype=None, layout=torch.strided, device=None, requires_grad=False) → Tensor
torch.hann_window(window_length, periodic=True, dtype=None, layout=torch.strided, device=None, requires_grad=False) → Tensor
torch.bincount(self, weights=None, minlength=0) → Tensor
torch.broadcast_tensors(*tensors) → List of Tensors
torch.cartesian_prod(*tensors)
torch.combinations(tensor, r=2, with_replacement=False) → seq
torch.cross(input, other, dim=-1, out=None) → Tensor
torch.diag(input, diagonal=0, out=None) → Tensor
torch.diag_embed(input, offset=0, dim1=-2, dim2=-1) → Tensor
torch.diagflat(input, diagonal=0) → Tensor
torch.diagonal(input, offset=0, dim1=0, dim2=1) → Tensor
torch.einsum(equation, *operands) → Tensor
torch.flatten(input, start_dim=0, end_dim=-1) → Tensor
torch.flip(input, dims) → Tensor
torch.rot90(input, k, dims) → Tensor
torch.histc(input, bins=100, min=0, max=0, out=None) → Tensor
torch.meshgrid(*tensors, **kwargs)
torch.renorm(input, p, dim, maxnorm, out=None) → Tensor
torch.repeat_interleave()
torch.roll(input, shifts, dims=None) → Tensor
torch.tensordot(a, b, dims=2)
torch.trace(input) → Tensor
torch.tril(input, diagonal=0, out=None) → Tensor
torch.tril_indices(row, column, offset=0, dtype=torch.long, device='cpu', layout=torch.strided) → Tensor
torch.triu(input, diagonal=0, out=None) → Tensor
torch.triu_indices(row, column, offset=0, dtype=torch.long, device='cpu', layout=torch.strided) → Tensor
torch.addbmm(beta=1, mat, alpha=1, batch1, batch2, out=None) → Tensor
torch.addmm(beta=1, mat, alpha=1, mat1, mat2, out=None) → Tensor
torch.addmv(beta=1, tensor, alpha=1, mat, vec, out=None) → Tensor
torch.addr(beta=1, mat, alpha=1, vec1, vec2, out=None) → Tensor
torch.baddbmm(beta=1, mat, alpha=1, batch1, batch2, out=None) → Tensor
torch.bmm(batch1, batch2, out=None) → Tensor
torch.btrifact(A, pivot=True, out=None)
torch.btrifact_with_info(A, pivot=True, out=None)
torch.btrisolve(b, LU_data, LU_pivots, out=None)
torch.btriunpack(LU_data, LU_pivots, unpack_data=True, unpack_pivots=True)
torch.chain_matmul(*matrices)
torch.cholesky(A, upper=False, out=None) → Tensor
torch.cholesky_inverse(u, upper=False, out=None) → Tensor
torch.cholesky_solve(b, u, upper=False, out=None) → Tensor
torch.dot(tensor1, tensor2) → Tensor
torch.eig(a, eigenvectors=False, out=None) -> (Tensor, Tensor)
torch.gels(B, A, out=None) → Tensor
torch.geqrf(input, out=None) -> (Tensor, Tensor)
torch.ger(vec1, vec2, out=None) → Tensor
torch.gesv(b, A, out=None)
torch.inverse(input, out=None) → Tensor
torch.det(A) → Tensor
torch.logdet(A) → Tensor
torch.slogdet(A) -> (Tensor, Tensor)
torch.lu(A, pivot=True, get_infos=False, out=None)
torch.lu_solve(b, LU_data, LU_pivots, out=None) → Tensor
torch.lu_unpack(LU_data, LU_pivots, unpack_data=True, unpack_pivots=True)
torch.matmul(tensor1, tensor2, out=None) → Tensor
torch.matrix_power(input, n) → Tensor
torch.matrix_rank(input, tol=None, bool symmetric=False) → Tensor
torch.mm(mat1, mat2, out=None) → Tensor
torch.mv(mat, vec, out=None) → Tensor
torch.orgqr(a, tau) → Tensor
torch.ormqr(a, tau, mat, left=True, transpose=False) → Tensor
torch.pinverse(input, rcond=1e-15) → Tensor
torch.potrf(a, upper=True, out=None)
torch.potri(a, upper=True, out=None)
torch.potrs(b, u, upper=True, out=None)
torch.pstrf(a, upper=True, out=None)
torch.qr(input, out=None) -> (Tensor, Tensor)
torch.solve(B, A, out=None) -> (Tensor, Tensor)
torch.svd(input, some=True, compute_uv=True, out=None) -> (Tensor, Tensor, Tensor)
torch.symeig(input, eigenvectors=False, upper=True, out=None) -> (Tensor, Tensor)
torch.triangular_solve(b, A, upper=True, transpose=False, unitriangular=False) -> (Tensor, Tensor)
torch.trtrs(b, A, upper=True, transpose=False, unitriangular=False, out=None)
torch.compiled_with_cxx11_abi()
