testdiff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessageObject.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessageObject.java
index d16372a..3766942 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessageObject.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessageObject.java
@@ -31,6 +31,7 @@
 import org.telegram.tgnet.TLObject;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.ActionBar.Theme;
+import org.telegram.ui.Components.TextStyleSpan;
 import org.telegram.ui.Components.TypefaceSpan;
 import org.telegram.ui.Components.URLSpanBotCommand;
 import org.telegram.ui.Components.URLSpanBrowser;
@@ -48,6 +49,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Calendar;
+import java.util.Collections;
 import java.util.GregorianCalendar;
 import java.util.HashMap;
 import java.util.regex.Matcher;
@@ -766,7 +768,7 @@
         eventId = eid;
 
         if (message.replyMessage != null) {
-            replyMessageObject = new MessageObject(accountNum, message.replyMessage, users, chats, sUsers, sChats, false, eid);
+            replyMessageObject = new MessageObject(currentAccount, message.replyMessage, users, chats, sUsers, sChats, false, eid);
         }
 
         TLRPC.User fromUser = null;
@@ -777,407 +779,11 @@
                 fromUser = sUsers.get(message.from_id);
             }
             if (fromUser == null) {
-                fromUser = MessagesController.getInstance(accountNum).getUser(message.from_id);
+                fromUser = MessagesController.getInstance(currentAccount).getUser(message.from_id);
             }
         }
 
-        if (message instanceof TLRPC.TL_messageService) {
-            if (message.action != null) {
-                if (message.action instanceof TLRPC.TL_messageActionCustomAction) {
-                    messageText = message.action.message;
-                } else if (message.action instanceof TLRPC.TL_messageActionChatCreate) {
-                    if (isOut()) {
-                        messageText = LocaleController.getString("ActionYouCreateGroup", R.string.ActionYouCreateGroup);
-                    } else {
-                        messageText = replaceWithLink(LocaleController.getString("ActionCreateGroup", R.string.ActionCreateGroup), "un1", fromUser);
-                    }
-                } else if (message.action instanceof TLRPC.TL_messageActionChatDeleteUser) {
-                    if (message.action.user_id == message.from_id) {
-                        if (isOut()) {
-                            messageText = LocaleController.getString("ActionYouLeftUser", R.string.ActionYouLeftUser);
-                        } else {
-                            messageText = replaceWithLink(LocaleController.getString("ActionLeftUser", R.string.ActionLeftUser), "un1", fromUser);
-                        }
-                    } else {
-                        TLRPC.User whoUser = null;
-                        if (users != null) {
-                            whoUser = users.get(message.action.user_id);
-                        } else if (sUsers != null) {
-                            whoUser = sUsers.get(message.action.user_id);
-                        }
-                        if (whoUser == null) {
-                            whoUser = MessagesController.getInstance(accountNum).getUser(message.action.user_id);
-                        }
-                        if (isOut()) {
-                            messageText = replaceWithLink(LocaleController.getString("ActionYouKickUser", R.string.ActionYouKickUser), "un2", whoUser);
-                        } else if (message.action.user_id == UserConfig.getInstance(currentAccount).getClientUserId()) {
-                            messageText = replaceWithLink(LocaleController.getString("ActionKickUserYou", R.string.ActionKickUserYou), "un1", fromUser);
-                        } else {
-                            messageText = replaceWithLink(LocaleController.getString("ActionKickUser", R.string.ActionKickUser), "un2", whoUser);
-                            messageText = replaceWithLink(messageText, "un1", fromUser);
-                        }
-                    }
-                } else if (message.action instanceof TLRPC.TL_messageActionChatAddUser) {
-                    int singleUserId = messageOwner.action.user_id;
-                    if (singleUserId == 0 && messageOwner.action.users.size() == 1) {
-                        singleUserId = messageOwner.action.users.get(0);
-                    }
-                    if (singleUserId != 0) {
-                        TLRPC.User whoUser = null;
-                        if (users != null) {
-                            whoUser = users.get(singleUserId);
-                        } else if (sUsers != null) {
-                            whoUser = sUsers.get(singleUserId);
-                        }
-                        if (whoUser == null) {
-                            whoUser = MessagesController.getInstance(accountNum).getUser(singleUserId);
-                        }
-                        if (singleUserId == message.from_id) {
-                            if (message.to_id.channel_id != 0 && !isMegagroup()) {
-                                messageText = LocaleController.getString("ChannelJoined", R.string.ChannelJoined);
-                            } else {
-                                if (message.to_id.channel_id != 0 && isMegagroup()) {
-                                    if (singleUserId == UserConfig.getInstance(currentAccount).getClientUserId()) {
-                                        messageText = LocaleController.getString("ChannelMegaJoined", R.string.ChannelMegaJoined);
-                                    } else {
-                                        messageText = replaceWithLink(LocaleController.getString("ActionAddUserSelfMega", R.string.ActionAddUserSelfMega), "un1", fromUser);
-                                    }
-                                } else if (isOut()) {
-                                    messageText = LocaleController.getString("ActionAddUserSelfYou", R.string.ActionAddUserSelfYou);
-                                } else {
-                                    messageText = replaceWithLink(LocaleController.getString("ActionAddUserSelf", R.string.ActionAddUserSelf), "un1", fromUser);
-                                }
-                            }
-                        } else {
-                            if (isOut()) {
-                                messageText = replaceWithLink(LocaleController.getString("ActionYouAddUser", R.string.ActionYouAddUser), "un2", whoUser);
-                            } else if (singleUserId == UserConfig.getInstance(currentAccount).getClientUserId()) {
-                                if (message.to_id.channel_id != 0) {
-                                    if (isMegagroup()) {
-                                        messageText = replaceWithLink(LocaleController.getString("MegaAddedBy", R.string.MegaAddedBy), "un1", fromUser);
-                                    } else {
-                                        messageText = replaceWithLink(LocaleController.getString("ChannelAddedBy", R.string.ChannelAddedBy), "un1", fromUser);
-                                    }
-                                } else {
-                                    messageText = replaceWithLink(LocaleController.getString("ActionAddUserYou", R.string.ActionAddUserYou), "un1", fromUser);
-                                }
-                            } else {
-                                messageText = replaceWithLink(LocaleController.getString("ActionAddUser", R.string.ActionAddUser), "un2", whoUser);
-                                messageText = replaceWithLink(messageText, "un1", fromUser);
-                            }
-                        }
-                    } else {
-                        if (isOut()) {
-                            messageText = replaceWithLink(LocaleController.getString("ActionYouAddUser", R.string.ActionYouAddUser), "un2", message.action.users, users, sUsers);
-                        } else {
-                            messageText = replaceWithLink(LocaleController.getString("ActionAddUser", R.string.ActionAddUser), "un2", message.action.users, users, sUsers);
-                            messageText = replaceWithLink(messageText, "un1", fromUser);
-                        }
-                    }
-                } else if (message.action instanceof TLRPC.TL_messageActionChatJoinedByLink) {
-                    if (isOut()) {
-                        messageText = LocaleController.getString("ActionInviteYou", R.string.ActionInviteYou);
-                    } else {
-                        messageText = replaceWithLink(LocaleController.getString("ActionInviteUser", R.string.ActionInviteUser), "un1", fromUser);
-                    }
-                } else if (message.action instanceof TLRPC.TL_messageActionChatEditPhoto) {
-                    if (message.to_id.channel_id != 0 && !isMegagroup()) {
-                        messageText = LocaleController.getString("ActionChannelChangedPhoto", R.string.ActionChannelChangedPhoto);
-                    } else {
-                        if (isOut()) {
-                            messageText = LocaleController.getString("ActionYouChangedPhoto", R.string.ActionYouChangedPhoto);
-                        } else {
-                            messageText = replaceWithLink(LocaleController.getString("ActionChangedPhoto", R.string.ActionChangedPhoto), "un1", fromUser);
-                        }
-                    }
-                } else if (message.action instanceof TLRPC.TL_messageActionChatEditTitle) {
-                    if (message.to_id.channel_id != 0 && !isMegagroup()) {
-                        messageText = LocaleController.getString("ActionChannelChangedTitle", R.string.ActionChannelChangedTitle).replace("un2", message.action.title);
-                    } else {
-                        if (isOut()) {
-                            messageText = LocaleController.getString("ActionYouChangedTitle", R.string.ActionYouChangedTitle).replace("un2", message.action.title);
-                        } else {
-                            messageText = replaceWithLink(LocaleController.getString("ActionChangedTitle", R.string.ActionChangedTitle).replace("un2", message.action.title), "un1", fromUser);
-                        }
-                    }
-                } else if (message.action instanceof TLRPC.TL_messageActionChatDeletePhoto) {
-                    if (message.to_id.channel_id != 0 && !isMegagroup()) {
-                        messageText = LocaleController.getString("ActionChannelRemovedPhoto", R.string.ActionChannelRemovedPhoto);
-                    } else {
-                        if (isOut()) {
-                            messageText = LocaleController.getString("ActionYouRemovedPhoto", R.string.ActionYouRemovedPhoto);
-                        } else {
-                            messageText = replaceWithLink(LocaleController.getString("ActionRemovedPhoto", R.string.ActionRemovedPhoto), "un1", fromUser);
-                        }
-                    }
-                } else if (message.action instanceof TLRPC.TL_messageActionTTLChange) {
-                    if (message.action.ttl != 0) {
-                        if (isOut()) {
-                            messageText = LocaleController.formatString("MessageLifetimeChangedOutgoing", R.string.MessageLifetimeChangedOutgoing, LocaleController.formatTTLString(message.action.ttl));
-                        } else {
-                            messageText = LocaleController.formatString("MessageLifetimeChanged", R.string.MessageLifetimeChanged, UserObject.getFirstName(fromUser), LocaleController.formatTTLString(message.action.ttl));
-                        }
-                    } else {
-                        if (isOut()) {
-                            messageText = LocaleController.getString("MessageLifetimeYouRemoved", R.string.MessageLifetimeYouRemoved);
-                        } else {
-                            messageText = LocaleController.formatString("MessageLifetimeRemoved", R.string.MessageLifetimeRemoved, UserObject.getFirstName(fromUser));
-                        }
-                    }
-                } else if (message.action instanceof TLRPC.TL_messageActionLoginUnknownLocation) {
-                    String date;
-                    long time = ((long) message.date) * 1000;
-                    if (LocaleController.getInstance().formatterDay != null && LocaleController.getInstance().formatterYear != null) {
-                        date = LocaleController.formatString("formatDateAtTime", R.string.formatDateAtTime, LocaleController.getInstance().formatterYear.format(time), LocaleController.getInstance().formatterDay.format(time));
-                    } else {
-                        date = "" + message.date;
-                    }
-                    TLRPC.User to_user = UserConfig.getInstance(currentAccount).getCurrentUser();
-                    if (to_user == null) {
-                        if (users != null) {
-                            to_user = users.get(messageOwner.to_id.user_id);
-                        } else if (sUsers != null) {
-                            to_user = sUsers.get(messageOwner.to_id.user_id);
-                        }
-                        if (to_user == null) {
-                            to_user = MessagesController.getInstance(accountNum).getUser(messageOwner.to_id.user_id);
-                        }
-                    }
-                    String name = to_user != null ? UserObject.getFirstName(to_user) : "";
-                    messageText = LocaleController.formatString("NotificationUnrecognizedDevice", R.string.NotificationUnrecognizedDevice, name, date, message.action.title, message.action.address);
-                } else if (message.action instanceof TLRPC.TL_messageActionUserJoined || message.action instanceof TLRPC.TL_messageActionContactSignUp) {
-                    messageText = LocaleController.formatString("NotificationContactJoined", R.string.NotificationContactJoined, UserObject.getUserName(fromUser));
-                } else if (message.action instanceof TLRPC.TL_messageActionUserUpdatedPhoto) {
-                    messageText = LocaleController.formatString("NotificationContactNewPhoto", R.string.NotificationContactNewPhoto, UserObject.getUserName(fromUser));
-                } else if (message.action instanceof TLRPC.TL_messageEncryptedAction) {
-                    if (message.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionScreenshotMessages) {
-                        if (isOut()) {
-                            messageText = LocaleController.formatString("ActionTakeScreenshootYou", R.string.ActionTakeScreenshootYou);
-                        } else {
-                            messageText = replaceWithLink(LocaleController.getString("ActionTakeScreenshoot", R.string.ActionTakeScreenshoot), "un1", fromUser);
-                        }
-                    } else if (message.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL) {
-                        TLRPC.TL_decryptedMessageActionSetMessageTTL action = (TLRPC.TL_decryptedMessageActionSetMessageTTL) message.action.encryptedAction;
-                        if (action.ttl_seconds != 0) {
-                            if (isOut()) {
-                                messageText = LocaleController.formatString("MessageLifetimeChangedOutgoing", R.string.MessageLifetimeChangedOutgoing, LocaleController.formatTTLString(action.ttl_seconds));
-                            } else {
-                                messageText = LocaleController.formatString("MessageLifetimeChanged", R.string.MessageLifetimeChanged, UserObject.getFirstName(fromUser), LocaleController.formatTTLString(action.ttl_seconds));
-                            }
-                        } else {
-                            if (isOut()) {
-                                messageText = LocaleController.getString("MessageLifetimeYouRemoved", R.string.MessageLifetimeYouRemoved);
-                            } else {
-                                messageText = LocaleController.formatString("MessageLifetimeRemoved", R.string.MessageLifetimeRemoved, UserObject.getFirstName(fromUser));
-                            }
-                        }
-                    }
-                } else if (message.action instanceof TLRPC.TL_messageActionScreenshotTaken) {
-                    if (isOut()) {
-                        messageText = LocaleController.formatString("ActionTakeScreenshootYou", R.string.ActionTakeScreenshootYou);
-                    } else {
-                        messageText = replaceWithLink(LocaleController.getString("ActionTakeScreenshoot", R.string.ActionTakeScreenshoot), "un1", fromUser);
-                    }
-                } else if (message.action instanceof TLRPC.TL_messageActionCreatedBroadcastList) {
-                    messageText = LocaleController.formatString("YouCreatedBroadcastList", R.string.YouCreatedBroadcastList);
-                } else if (message.action instanceof TLRPC.TL_messageActionChannelCreate) {
-                    if (isMegagroup()) {
-                        messageText = LocaleController.getString("ActionCreateMega", R.string.ActionCreateMega);
-                    } else {
-                        messageText = LocaleController.getString("ActionCreateChannel", R.string.ActionCreateChannel);
-                    }
-                } else if (message.action instanceof TLRPC.TL_messageActionChatMigrateTo) {
-                    messageText = LocaleController.getString("ActionMigrateFromGroup", R.string.ActionMigrateFromGroup);
-                } else if (message.action instanceof TLRPC.TL_messageActionChannelMigrateFrom) {
-                    messageText = LocaleController.getString("ActionMigrateFromGroup", R.string.ActionMigrateFromGroup);
-                } else if (message.action instanceof TLRPC.TL_messageActionPinMessage) {
-                    TLRPC.Chat chat;
-                    if (fromUser == null) {
-                        if (chats != null) {
-                            chat = chats.get(message.to_id.channel_id);
-                        } else if (sChats != null) {
-                            chat = sChats.get(message.to_id.channel_id);
-                        } else {
-                            chat = null;
-                        }
-                    } else {
-                        chat = null;
-                    }
-                    generatePinMessageText(fromUser, chat);
-                } else if (message.action instanceof TLRPC.TL_messageActionHistoryClear) {
-                    messageText = LocaleController.getString("HistoryCleared", R.string.HistoryCleared);
-                } else if (message.action instanceof TLRPC.TL_messageActionGameScore) {
-                    generateGameMessageText(fromUser);
-                } else if (message.action instanceof TLRPC.TL_messageActionPhoneCall) {
-                    TLRPC.TL_messageActionPhoneCall call = (TLRPC.TL_messageActionPhoneCall) messageOwner.action;
-                    boolean isMissed = call.reason instanceof TLRPC.TL_phoneCallDiscardReasonMissed;
-                    if (messageOwner.from_id == UserConfig.getInstance(currentAccount).getClientUserId()) {
-                        if (isMissed) {
-                            messageText = LocaleController.getString("CallMessageOutgoingMissed", R.string.CallMessageOutgoingMissed);
-                        }else {
-                            messageText = LocaleController.getString("CallMessageOutgoing", R.string.CallMessageOutgoing);
-                        }
-                    } else {
-                        if (isMissed) {
-                            messageText = LocaleController.getString("CallMessageIncomingMissed", R.string.CallMessageIncomingMissed);
-                        } else if(call.reason instanceof TLRPC.TL_phoneCallDiscardReasonBusy) {
-                            messageText = LocaleController.getString("CallMessageIncomingDeclined", R.string.CallMessageIncomingDeclined);
-                        } else {
-                            messageText = LocaleController.getString("CallMessageIncoming", R.string.CallMessageIncoming);
-                        }
-                    }
-                    if (call.duration > 0) {
-                        String duration = LocaleController.formatCallDuration(call.duration);
-                        messageText = LocaleController.formatString("CallMessageWithDuration", R.string.CallMessageWithDuration, messageText, duration);
-                        String _messageText = messageText.toString();
-                        int start = _messageText.indexOf(duration);
-                        if (start != -1) {
-                            SpannableString sp = new SpannableString(messageText);
-                            int end = start + duration.length();
-                            if (start > 0 && _messageText.charAt(start - 1) == '(') {
-                                start--;
-                            }
-                            if (end < _messageText.length() && _messageText.charAt(end) == ')') {
-                                end++;
-                            }
-                            sp.setSpan(new TypefaceSpan(Typeface.DEFAULT), start, end, 0);
-                            messageText = sp;
-                        }
-                    }
-                } else if (message.action instanceof TLRPC.TL_messageActionPaymentSent) {
-                    TLRPC.User user = null;
-                    int uid = (int) getDialogId();
-                    if (users != null) {
-                        fromUser = users.get(uid);
-                    } else if (sUsers != null) {
-                        fromUser = sUsers.get(uid);
-                    }
-                    if (fromUser == null) {
-                        fromUser = MessagesController.getInstance(accountNum).getUser(uid);
-                    }
-                    generatePaymentSentMessageText(user);
-                } else if (message.action instanceof TLRPC.TL_messageActionBotAllowed) {
-                    String domain = ((TLRPC.TL_messageActionBotAllowed) message.action).domain;
-                    String text = LocaleController.getString("ActionBotAllowed", R.string.ActionBotAllowed);
-                    int start = text.indexOf("%1$s");
-                    SpannableString str = new SpannableString(String.format(text, domain));
-                    if (start >= 0) {
-                        str.setSpan(new URLSpanNoUnderlineBold("http://" + domain), start, start + domain.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
-                    }
-                    messageText = str;
-                } else if (message.action instanceof TLRPC.TL_messageActionSecureValuesSent) {
-                    TLRPC.TL_messageActionSecureValuesSent valuesSent = (TLRPC.TL_messageActionSecureValuesSent) message.action;
-                    StringBuilder str = new StringBuilder();
-                    for (int a = 0, size = valuesSent.types.size(); a < size; a++) {
-                        TLRPC.SecureValueType type = valuesSent.types.get(a);
-                        if (str.length() > 0) {
-                            str.append(", ");
-                        }
-                        if (type instanceof TLRPC.TL_secureValueTypePhone) {
-                            str.append(LocaleController.getString("ActionBotDocumentPhone", R.string.ActionBotDocumentPhone));
-                        } else if (type instanceof TLRPC.TL_secureValueTypeEmail) {
-                            str.append(LocaleController.getString("ActionBotDocumentEmail", R.string.ActionBotDocumentEmail));
-                        } else if (type instanceof TLRPC.TL_secureValueTypeAddress) {
-                            str.append(LocaleController.getString("ActionBotDocumentAddress", R.string.ActionBotDocumentAddress));
-                        } else if (type instanceof TLRPC.TL_secureValueTypePersonalDetails) {
-                            str.append(LocaleController.getString("ActionBotDocumentIdentity", R.string.ActionBotDocumentIdentity));
-                        } else if (type instanceof TLRPC.TL_secureValueTypePassport) {
-                            str.append(LocaleController.getString("ActionBotDocumentPassport", R.string.ActionBotDocumentPassport));
-                        } else if (type instanceof TLRPC.TL_secureValueTypeDriverLicense) {
-                            str.append(LocaleController.getString("ActionBotDocumentDriverLicence", R.string.ActionBotDocumentDriverLicence));
-                        } else if (type instanceof TLRPC.TL_secureValueTypeIdentityCard) {
-                            str.append(LocaleController.getString("ActionBotDocumentIdentityCard", R.string.ActionBotDocumentIdentityCard));
-                        } else if (type instanceof TLRPC.TL_secureValueTypeUtilityBill) {
-                            str.append(LocaleController.getString("ActionBotDocumentUtilityBill", R.string.ActionBotDocumentUtilityBill));
-                        } else if (type instanceof TLRPC.TL_secureValueTypeBankStatement) {
-                            str.append(LocaleController.getString("ActionBotDocumentBankStatement", R.string.ActionBotDocumentBankStatement));
-                        } else if (type instanceof TLRPC.TL_secureValueTypeRentalAgreement) {
-                            str.append(LocaleController.getString("ActionBotDocumentRentalAgreement", R.string.ActionBotDocumentRentalAgreement));
-                        } else if (type instanceof TLRPC.TL_secureValueTypeInternalPassport) {
-                            str.append(LocaleController.getString("ActionBotDocumentInternalPassport", R.string.ActionBotDocumentInternalPassport));
-                        } else if (type instanceof TLRPC.TL_secureValueTypePassportRegistration) {
-                            str.append(LocaleController.getString("ActionBotDocumentPassportRegistration", R.string.ActionBotDocumentPassportRegistration));
-                        } else if (type instanceof TLRPC.TL_secureValueTypeTemporaryRegistration) {
-                            str.append(LocaleController.getString("ActionBotDocumentTemporaryRegistration", R.string.ActionBotDocumentTemporaryRegistration));
-                        }
-                    }
-                    TLRPC.User user = null;
-                    if (message.to_id != null) {
-                        if (users != null) {
-                            user = users.get(message.to_id.user_id);
-                        } else if (sUsers != null) {
-                            user = sUsers.get(message.to_id.user_id);
-                        }
-                        if (user == null) {
-                            user = MessagesController.getInstance(accountNum).getUser(message.to_id.user_id);
-                        }
-                    }
-                    messageText = LocaleController.formatString("ActionBotDocuments", R.string.ActionBotDocuments, UserObject.getFirstName(user), str.toString());
-                }
-            }
-        } else if (!isMediaEmpty()) {
-            if (message.media instanceof TLRPC.TL_messageMediaPoll) {
-                messageText = LocaleController.getString("Poll", R.string.Poll);
-            } else if (message.media instanceof TLRPC.TL_messageMediaPhoto) {
-                if (message.media.ttl_seconds != 0 && !(message instanceof TLRPC.TL_message_secret)) {
-                    messageText = LocaleController.getString("AttachDestructingPhoto", R.string.AttachDestructingPhoto);
-                } else {
-                    messageText = LocaleController.getString("AttachPhoto", R.string.AttachPhoto);
-                }
-            } else if (isVideo() || message.media instanceof TLRPC.TL_messageMediaDocument && message.media.document instanceof TLRPC.TL_documentEmpty && message.media.ttl_seconds != 0) {
-                if (message.media.ttl_seconds != 0 && !(message instanceof TLRPC.TL_message_secret)) {
-                    messageText = LocaleController.getString("AttachDestructingVideo", R.string.AttachDestructingVideo);
-                } else {
-                    messageText = LocaleController.getString("AttachVideo", R.string.AttachVideo);
-                }
-            } else if (isVoice()) {
-                messageText = LocaleController.getString("AttachAudio", R.string.AttachAudio);
-            } else if (isRoundVideo()) {
-                messageText = LocaleController.getString("AttachRound", R.string.AttachRound);
-            } else if (message.media instanceof TLRPC.TL_messageMediaGeo || message.media instanceof TLRPC.TL_messageMediaVenue) {
-                messageText = LocaleController.getString("AttachLocation", R.string.AttachLocation);
-            } else if (message.media instanceof TLRPC.TL_messageMediaGeoLive) {
-                messageText = LocaleController.getString("AttachLiveLocation", R.string.AttachLiveLocation);
-            } else if (message.media instanceof TLRPC.TL_messageMediaContact) {
-                messageText = LocaleController.getString("AttachContact", R.string.AttachContact);
-                if (!TextUtils.isEmpty(message.media.vcard)) {
-                    vCardData = VCardData.parse(message.media.vcard);
-                }
-            } else if (message.media instanceof TLRPC.TL_messageMediaGame) {
-                messageText = message.message;
-            } else if (message.media instanceof TLRPC.TL_messageMediaInvoice) {
-                messageText = message.media.description;
-            } else if (message.media instanceof TLRPC.TL_messageMediaUnsupported) {
-                messageText = LocaleController.getString("UnsupportedMedia", R.string.UnsupportedMedia);
-            } else if (message.media instanceof TLRPC.TL_messageMediaDocument) {
-                if (isSticker() || isAnimatedSticker()) {
-                    String sch = getStrickerChar();
-                    if (sch != null && sch.length() > 0) {
-                        messageText = String.format("%s %s", sch, LocaleController.getString("AttachSticker", R.string.AttachSticker));
-                    } else {
-                        messageText = LocaleController.getString("AttachSticker", R.string.AttachSticker);
-                    }
-                } else if (isMusic()) {
-                    messageText = LocaleController.getString("AttachMusic", R.string.AttachMusic);
-                } else if (isGif()) {
-                    messageText = LocaleController.getString("AttachGif", R.string.AttachGif);
-                } else {
-                    String name = FileLoader.getDocumentFileName(message.media.document);
-                    if (name != null && name.length() > 0) {
-                        messageText = name;
-                    } else {
-                        messageText = LocaleController.getString("AttachDocument", R.string.AttachDocument);
-                    }
-                }
-            }
-        } else {
-            messageText = message.message;
-        }
-
-        if (messageText == null) {
-            messageText = "";
-        }
-
+        updateMessageText(users, chats, sUsers, sChats);
         setType();
         measureInlineBotButtons();
 
@@ -1261,13 +867,15 @@
     }
 
     public MessageObject(int accountNum, TLRPC.TL_channelAdminLogEvent event, ArrayList<MessageObject> messageObjects, HashMap<String, ArrayList<MessageObject>> messagesByDays, TLRPC.Chat chat, int[] mid) {
+        currentEvent = event;
+        currentAccount = accountNum;
+
         TLRPC.User fromUser = null;
         if (event.user_id > 0) {
             if (fromUser == null) {
-                fromUser = MessagesController.getInstance(accountNum).getUser(event.user_id);
+                fromUser = MessagesController.getInstance(currentAccount).getUser(event.user_id);
             }
         }
-        currentEvent = event;
 
         Calendar rightNow = new GregorianCalendar();
         rightNow.setTimeInMillis((long) (event.date) * 1000);
@@ -1325,7 +933,7 @@
         } else if (event.action instanceof TLRPC.TL_channelAdminLogEventActionParticipantInvite) {
             messageOwner = new TLRPC.TL_messageService();
             messageOwner.action = new TLRPC.TL_messageActionChatAddUser();
-            TLRPC.User whoUser = MessagesController.getInstance(accountNum).getUser(event.action.participant.user_id);
+            TLRPC.User whoUser = MessagesController.getInstance(currentAccount).getUser(event.action.participant.user_id);
             if (event.action.participant.user_id == messageOwner.from_id) {
                 if (chat.megagroup) {
                     messageText = replaceWithLink(LocaleController.getString("EventLogGroupJoined", R.string.EventLogGroupJoined), "un1", fromUser);
@@ -1338,11 +946,16 @@
             }
         } else if (event.action instanceof TLRPC.TL_channelAdminLogEventActionParticipantToggleAdmin) {
             messageOwner = new TLRPC.TL_message();
-
-            TLRPC.User whoUser = MessagesController.getInstance(accountNum).getUser(event.action.prev_participant.user_id);
+            TLRPC.User whoUser = MessagesController.getInstance(currentAccount).getUser(event.action.prev_participant.user_id);
+            StringBuilder rights;
+            if (!(event.action.prev_participant instanceof TLRPC.TL_channelParticipantCreator) && event.action.new_participant instanceof TLRPC.TL_channelParticipantCreator) {
+                String str = LocaleController.getString("EventLogChangedOwnership", R.string.EventLogChangedOwnership);
+                int offset = str.indexOf("%1$s");
+                rights = new StringBuilder(String.format(str, getUserName(whoUser, messageOwner.entities, offset)));
+            } else {
             String str = LocaleController.getString("EventLogPromoted", R.string.EventLogPromoted);
             int offset = str.indexOf("%1$s");
-            StringBuilder rights = new StringBuilder(String.format(str, getUserName(whoUser, messageOwner.entities, offset)));
+                rights = new StringBuilder(String.format(str, getUserName(whoUser, messageOwner.entities, offset)));
             rights.append("\n");
 
             TLRPC.TL_chatAdminRights o = event.action.prev_participant.admin_rights;
@@ -1391,6 +1004,7 @@
                     rights.append(LocaleController.getString("EventLogPromotedPinMessages", R.string.EventLogPromotedPinMessages));
                 }
             }
+            }
             messageText = rights.toString();
         } else if (event.action instanceof TLRPC.TL_channelAdminLogEventActionDefaultBannedRights) {
             TLRPC.TL_channelAdminLogEventActionDefaultBannedRights bannedRights = (TLRPC.TL_channelAdminLogEventActionDefaultBannedRights) event.action;
@@ -1473,7 +1087,7 @@
             messageText = rights.toString();
         } else if (event.action instanceof TLRPC.TL_channelAdminLogEventActionParticipantToggleBan) {
             messageOwner = new TLRPC.TL_message();
-            TLRPC.User whoUser = MessagesController.getInstance(accountNum).getUser(event.action.prev_participant.user_id);
+            TLRPC.User whoUser = MessagesController.getInstance(currentAccount).getUser(event.action.prev_participant.user_id);
             TLRPC.TL_chatBannedRights o = event.action.prev_participant.banned_rights;
             TLRPC.TL_chatBannedRights n = event.action.new_participant.banned_rights;
             if (chat.megagroup && (n == null || !n.view_messages || n != null && o != null && n.until_date != o.until_date)) {
@@ -1710,7 +1324,7 @@
             message.to_id = to_id;
             message.date = event.date;
             if (!TextUtils.isEmpty(newLink)) {
-                message.message = "https://" + MessagesController.getInstance(accountNum).linkPrefix + "/" + newLink;
+                message.message = "https://" + MessagesController.getInstance(currentAccount).linkPrefix + "/" + newLink;
             } else {
                 message.message = "";
             }
@@ -1725,7 +1339,7 @@
                 message.media.webpage.display_url = "";
                 message.media.webpage.url = "";
                 message.media.webpage.site_name = LocaleController.getString("EventLogPreviousLink", R.string.EventLogPreviousLink);
-                message.media.webpage.description = "https://" + MessagesController.getInstance(accountNum).linkPrefix + "/" + ((TLRPC.TL_channelAdminLogEventActionChangeUsername) event.action).prev_value;
+                message.media.webpage.description = "https://" + MessagesController.getInstance(currentAccount).linkPrefix + "/" + ((TLRPC.TL_channelAdminLogEventActionChangeUsername) event.action).prev_value;
             } else {
                 message.media = new TLRPC.TL_messageMediaEmpty();
             }
@@ -1796,6 +1410,14 @@
             } else {
                 messageText = replaceWithLink(LocaleController.getString("EventLogChangedStickersSet", R.string.EventLogChangedStickersSet), "un1", fromUser);
             }
+        } else if (event.action instanceof TLRPC.TL_channelAdminLogEventActionChangeLocation) {
+            TLRPC.TL_channelAdminLogEventActionChangeLocation location = (TLRPC.TL_channelAdminLogEventActionChangeLocation) event.action;
+            if (location.new_value instanceof TLRPC.TL_channelLocationEmpty) {
+                messageText = replaceWithLink(LocaleController.getString("EventLogRemovedLocation", R.string.EventLogRemovedLocation), "un1", fromUser);
+            } else {
+                TLRPC.TL_channelLocation channelLocation = (TLRPC.TL_channelLocation) location.new_value;
+                messageText = replaceWithLink(LocaleController.formatString("EventLogChangedLocation", R.string.EventLogChangedLocation, channelLocation.address), "un1", fromUser);
+            }
         } else {
             messageText = "unsupported " + event.action;
         }
@@ -1829,21 +1451,21 @@
             if (chat.megagroup) {
                 message.flags |= TLRPC.MESSAGE_FLAG_MEGAGROUP;
             }
-            MessageObject messageObject = new MessageObject(accountNum, message, null, null, true, eventId);
+            MessageObject messageObject = new MessageObject(currentAccount, message, null, null, true, eventId);
             if (messageObject.contentType >= 0) {
                 if (mediaController.isPlayingMessage(messageObject)) {
                     MessageObject player = mediaController.getPlayingMessageObject();
                     messageObject.audioProgress = player.audioProgress;
                     messageObject.audioProgressSec = player.audioProgressSec;
                 }
-                createDateArray(accountNum, event, messageObjects, messagesByDays);
+                createDateArray(currentAccount, event, messageObjects, messagesByDays);
                 messageObjects.add(messageObjects.size() - 1, messageObject);
             } else {
                 contentType = -1;
             }
         }
         if (contentType >= 0) {
-            createDateArray(accountNum, event, messageObjects, messagesByDays);
+            createDateArray(currentAccount, event, messageObjects, messagesByDays);
             messageObjects.add(messageObjects.size() - 1, this);
         } else {
             return;
@@ -2246,6 +1868,417 @@
         return localType != 0;
     }
 
+    private void updateMessageText(AbstractMap<Integer, TLRPC.User> users, AbstractMap<Integer, TLRPC.Chat> chats, SparseArray<TLRPC.User> sUsers, SparseArray<TLRPC.Chat> sChats) {
+        TLRPC.User fromUser = null;
+        if (messageOwner.from_id > 0) {
+            if (users != null) {
+                fromUser = users.get(messageOwner.from_id);
+            } else if (sUsers != null) {
+                fromUser = sUsers.get(messageOwner.from_id);
+            }
+            if (fromUser == null) {
+                fromUser = MessagesController.getInstance(currentAccount).getUser(messageOwner.from_id);
+            }
+        }
+
+        if (messageOwner instanceof TLRPC.TL_messageService) {
+            if (messageOwner.action != null) {
+                if (messageOwner.action instanceof TLRPC.TL_messageActionCustomAction) {
+                    messageText = messageOwner.action.message;
+                } else if (messageOwner.action instanceof TLRPC.TL_messageActionChatCreate) {
+                    if (isOut()) {
+                        messageText = LocaleController.getString("ActionYouCreateGroup", R.string.ActionYouCreateGroup);
+                    } else {
+                        messageText = replaceWithLink(LocaleController.getString("ActionCreateGroup", R.string.ActionCreateGroup), "un1", fromUser);
+                    }
+                } else if (messageOwner.action instanceof TLRPC.TL_messageActionChatDeleteUser) {
+                    if (messageOwner.action.user_id == messageOwner.from_id) {
+                        if (isOut()) {
+                            messageText = LocaleController.getString("ActionYouLeftUser", R.string.ActionYouLeftUser);
+                        } else {
+                            messageText = replaceWithLink(LocaleController.getString("ActionLeftUser", R.string.ActionLeftUser), "un1", fromUser);
+                        }
+                    } else {
+                        TLRPC.User whoUser = null;
+                        if (users != null) {
+                            whoUser = users.get(messageOwner.action.user_id);
+                        } else if (sUsers != null) {
+                            whoUser = sUsers.get(messageOwner.action.user_id);
+                        }
+                        if (whoUser == null) {
+                            whoUser = MessagesController.getInstance(currentAccount).getUser(messageOwner.action.user_id);
+                        }
+                        if (isOut()) {
+                            messageText = replaceWithLink(LocaleController.getString("ActionYouKickUser", R.string.ActionYouKickUser), "un2", whoUser);
+                        } else if (messageOwner.action.user_id == UserConfig.getInstance(currentAccount).getClientUserId()) {
+                            messageText = replaceWithLink(LocaleController.getString("ActionKickUserYou", R.string.ActionKickUserYou), "un1", fromUser);
+                        } else {
+                            messageText = replaceWithLink(LocaleController.getString("ActionKickUser", R.string.ActionKickUser), "un2", whoUser);
+                            messageText = replaceWithLink(messageText, "un1", fromUser);
+                        }
+                    }
+                } else if (messageOwner.action instanceof TLRPC.TL_messageActionChatAddUser) {
+                    int singleUserId = messageOwner.action.user_id;
+                    if (singleUserId == 0 && messageOwner.action.users.size() == 1) {
+                        singleUserId = messageOwner.action.users.get(0);
+                    }
+                    if (singleUserId != 0) {
+                        TLRPC.User whoUser = null;
+                        if (users != null) {
+                            whoUser = users.get(singleUserId);
+                        } else if (sUsers != null) {
+                            whoUser = sUsers.get(singleUserId);
+                        }
+                        if (whoUser == null) {
+                            whoUser = MessagesController.getInstance(currentAccount).getUser(singleUserId);
+                        }
+                        if (singleUserId == messageOwner.from_id) {
+                            if (messageOwner.to_id.channel_id != 0 && !isMegagroup()) {
+                                messageText = LocaleController.getString("ChannelJoined", R.string.ChannelJoined);
+                            } else {
+                                if (messageOwner.to_id.channel_id != 0 && isMegagroup()) {
+                                    if (singleUserId == UserConfig.getInstance(currentAccount).getClientUserId()) {
+                                        messageText = LocaleController.getString("ChannelMegaJoined", R.string.ChannelMegaJoined);
+                                    } else {
+                                        messageText = replaceWithLink(LocaleController.getString("ActionAddUserSelfMega", R.string.ActionAddUserSelfMega), "un1", fromUser);
+                                    }
+                                } else if (isOut()) {
+                                    messageText = LocaleController.getString("ActionAddUserSelfYou", R.string.ActionAddUserSelfYou);
+                                } else {
+                                    messageText = replaceWithLink(LocaleController.getString("ActionAddUserSelf", R.string.ActionAddUserSelf), "un1", fromUser);
+                                }
+                            }
+                        } else {
+                            if (isOut()) {
+                                messageText = replaceWithLink(LocaleController.getString("ActionYouAddUser", R.string.ActionYouAddUser), "un2", whoUser);
+                            } else if (singleUserId == UserConfig.getInstance(currentAccount).getClientUserId()) {
+                                if (messageOwner.to_id.channel_id != 0) {
+                                    if (isMegagroup()) {
+                                        messageText = replaceWithLink(LocaleController.getString("MegaAddedBy", R.string.MegaAddedBy), "un1", fromUser);
+                                    } else {
+                                        messageText = replaceWithLink(LocaleController.getString("ChannelAddedBy", R.string.ChannelAddedBy), "un1", fromUser);
+                                    }
+                                } else {
+                                    messageText = replaceWithLink(LocaleController.getString("ActionAddUserYou", R.string.ActionAddUserYou), "un1", fromUser);
+                                }
+                            } else {
+                                messageText = replaceWithLink(LocaleController.getString("ActionAddUser", R.string.ActionAddUser), "un2", whoUser);
+                                messageText = replaceWithLink(messageText, "un1", fromUser);
+                            }
+                        }
+                    } else {
+                        if (isOut()) {
+                            messageText = replaceWithLink(LocaleController.getString("ActionYouAddUser", R.string.ActionYouAddUser), "un2", messageOwner.action.users, users, sUsers);
+                        } else {
+                            messageText = replaceWithLink(LocaleController.getString("ActionAddUser", R.string.ActionAddUser), "un2", messageOwner.action.users, users, sUsers);
+                            messageText = replaceWithLink(messageText, "un1", fromUser);
+                        }
+                    }
+                } else if (messageOwner.action instanceof TLRPC.TL_messageActionChatJoinedByLink) {
+                    if (isOut()) {
+                        messageText = LocaleController.getString("ActionInviteYou", R.string.ActionInviteYou);
+                    } else {
+                        messageText = replaceWithLink(LocaleController.getString("ActionInviteUser", R.string.ActionInviteUser), "un1", fromUser);
+                    }
+                } else if (messageOwner.action instanceof TLRPC.TL_messageActionChatEditPhoto) {
+                    if (messageOwner.to_id.channel_id != 0 && !isMegagroup()) {
+                        messageText = LocaleController.getString("ActionChannelChangedPhoto", R.string.ActionChannelChangedPhoto);
+                    } else {
+                        if (isOut()) {
+                            messageText = LocaleController.getString("ActionYouChangedPhoto", R.string.ActionYouChangedPhoto);
+                        } else {
+                            messageText = replaceWithLink(LocaleController.getString("ActionChangedPhoto", R.string.ActionChangedPhoto), "un1", fromUser);
+                        }
+                    }
+                } else if (messageOwner.action instanceof TLRPC.TL_messageActionChatEditTitle) {
+                    if (messageOwner.to_id.channel_id != 0 && !isMegagroup()) {
+                        messageText = LocaleController.getString("ActionChannelChangedTitle", R.string.ActionChannelChangedTitle).replace("un2", messageOwner.action.title);
+                    } else {
+                        if (isOut()) {
+                            messageText = LocaleController.getString("ActionYouChangedTitle", R.string.ActionYouChangedTitle).replace("un2", messageOwner.action.title);
+                        } else {
+                            messageText = replaceWithLink(LocaleController.getString("ActionChangedTitle", R.string.ActionChangedTitle).replace("un2", messageOwner.action.title), "un1", fromUser);
+                        }
+                    }
+                } else if (messageOwner.action instanceof TLRPC.TL_messageActionChatDeletePhoto) {
+                    if (messageOwner.to_id.channel_id != 0 && !isMegagroup()) {
+                        messageText = LocaleController.getString("ActionChannelRemovedPhoto", R.string.ActionChannelRemovedPhoto);
+                    } else {
+                        if (isOut()) {
+                            messageText = LocaleController.getString("ActionYouRemovedPhoto", R.string.ActionYouRemovedPhoto);
+                        } else {
+                            messageText = replaceWithLink(LocaleController.getString("ActionRemovedPhoto", R.string.ActionRemovedPhoto), "un1", fromUser);
+                        }
+                    }
+                } else if (messageOwner.action instanceof TLRPC.TL_messageActionTTLChange) {
+                    if (messageOwner.action.ttl != 0) {
+                        if (isOut()) {
+                            messageText = LocaleController.formatString("MessageLifetimeChangedOutgoing", R.string.MessageLifetimeChangedOutgoing, LocaleController.formatTTLString(messageOwner.action.ttl));
+                        } else {
+                            messageText = LocaleController.formatString("MessageLifetimeChanged", R.string.MessageLifetimeChanged, UserObject.getFirstName(fromUser), LocaleController.formatTTLString(messageOwner.action.ttl));
+                        }
+                    } else {
+                        if (isOut()) {
+                            messageText = LocaleController.getString("MessageLifetimeYouRemoved", R.string.MessageLifetimeYouRemoved);
+                        } else {
+                            messageText = LocaleController.formatString("MessageLifetimeRemoved", R.string.MessageLifetimeRemoved, UserObject.getFirstName(fromUser));
+                        }
+                    }
+                } else if (messageOwner.action instanceof TLRPC.TL_messageActionLoginUnknownLocation) {
+                    String date;
+                    long time = ((long) messageOwner.date) * 1000;
+                    if (LocaleController.getInstance().formatterDay != null && LocaleController.getInstance().formatterYear != null) {
+                        date = LocaleController.formatString("formatDateAtTime", R.string.formatDateAtTime, LocaleController.getInstance().formatterYear.format(time), LocaleController.getInstance().formatterDay.format(time));
+                    } else {
+                        date = "" + messageOwner.date;
+                    }
+                    TLRPC.User to_user = UserConfig.getInstance(currentAccount).getCurrentUser();
+                    if (to_user == null) {
+                        if (users != null) {
+                            to_user = users.get(messageOwner.to_id.user_id);
+                        } else if (sUsers != null) {
+                            to_user = sUsers.get(messageOwner.to_id.user_id);
+                        }
+                        if (to_user == null) {
+                            to_user = MessagesController.getInstance(currentAccount).getUser(messageOwner.to_id.user_id);
+                        }
+                    }
+                    String name = to_user != null ? UserObject.getFirstName(to_user) : "";
+                    messageText = LocaleController.formatString("NotificationUnrecognizedDevice", R.string.NotificationUnrecognizedDevice, name, date, messageOwner.action.title, messageOwner.action.address);
+                } else if (messageOwner.action instanceof TLRPC.TL_messageActionUserJoined || messageOwner.action instanceof TLRPC.TL_messageActionContactSignUp) {
+                    messageText = LocaleController.formatString("NotificationContactJoined", R.string.NotificationContactJoined, UserObject.getUserName(fromUser));
+                } else if (messageOwner.action instanceof TLRPC.TL_messageActionUserUpdatedPhoto) {
+                    messageText = LocaleController.formatString("NotificationContactNewPhoto", R.string.NotificationContactNewPhoto, UserObject.getUserName(fromUser));
+                } else if (messageOwner.action instanceof TLRPC.TL_messageEncryptedAction) {
+                    if (messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionScreenshotMessages) {
+                        if (isOut()) {
+                            messageText = LocaleController.formatString("ActionTakeScreenshootYou", R.string.ActionTakeScreenshootYou);
+                        } else {
+                            messageText = replaceWithLink(LocaleController.getString("ActionTakeScreenshoot", R.string.ActionTakeScreenshoot), "un1", fromUser);
+                        }
+                    } else if (messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL) {
+                        TLRPC.TL_decryptedMessageActionSetMessageTTL action = (TLRPC.TL_decryptedMessageActionSetMessageTTL) messageOwner.action.encryptedAction;
+                        if (action.ttl_seconds != 0) {
+                            if (isOut()) {
+                                messageText = LocaleController.formatString("MessageLifetimeChangedOutgoing", R.string.MessageLifetimeChangedOutgoing, LocaleController.formatTTLString(action.ttl_seconds));
+                            } else {
+                                messageText = LocaleController.formatString("MessageLifetimeChanged", R.string.MessageLifetimeChanged, UserObject.getFirstName(fromUser), LocaleController.formatTTLString(action.ttl_seconds));
+                            }
+                        } else {
+                            if (isOut()) {
+                                messageText = LocaleController.getString("MessageLifetimeYouRemoved", R.string.MessageLifetimeYouRemoved);
+                            } else {
+                                messageText = LocaleController.formatString("MessageLifetimeRemoved", R.string.MessageLifetimeRemoved, UserObject.getFirstName(fromUser));
+                            }
+                        }
+                    }
+                } else if (messageOwner.action instanceof TLRPC.TL_messageActionScreenshotTaken) {
+                    if (isOut()) {
+                        messageText = LocaleController.formatString("ActionTakeScreenshootYou", R.string.ActionTakeScreenshootYou);
+                    } else {
+                        messageText = replaceWithLink(LocaleController.getString("ActionTakeScreenshoot", R.string.ActionTakeScreenshoot), "un1", fromUser);
+                    }
+                } else if (messageOwner.action instanceof TLRPC.TL_messageActionCreatedBroadcastList) {
+                    messageText = LocaleController.formatString("YouCreatedBroadcastList", R.string.YouCreatedBroadcastList);
+                } else if (messageOwner.action instanceof TLRPC.TL_messageActionChannelCreate) {
+                    if (isMegagroup()) {
+                        messageText = LocaleController.getString("ActionCreateMega", R.string.ActionCreateMega);
+                    } else {
+                        messageText = LocaleController.getString("ActionCreateChannel", R.string.ActionCreateChannel);
+                    }
+                } else if (messageOwner.action instanceof TLRPC.TL_messageActionChatMigrateTo) {
+                    messageText = LocaleController.getString("ActionMigrateFromGroup", R.string.ActionMigrateFromGroup);
+                } else if (messageOwner.action instanceof TLRPC.TL_messageActionChannelMigrateFrom) {
+                    messageText = LocaleController.getString("ActionMigrateFromGroup", R.string.ActionMigrateFromGroup);
+                } else if (messageOwner.action instanceof TLRPC.TL_messageActionPinMessage) {
+                    TLRPC.Chat chat;
+                    if (fromUser == null) {
+                        if (chats != null) {
+                            chat = chats.get(messageOwner.to_id.channel_id);
+                        } else if (sChats != null) {
+                            chat = sChats.get(messageOwner.to_id.channel_id);
+                        } else {
+                            chat = null;
+                        }
+                    } else {
+                        chat = null;
+                    }
+                    generatePinMessageText(fromUser, chat);
+                } else if (messageOwner.action instanceof TLRPC.TL_messageActionHistoryClear) {
+                    messageText = LocaleController.getString("HistoryCleared", R.string.HistoryCleared);
+                } else if (messageOwner.action instanceof TLRPC.TL_messageActionGameScore) {
+                    generateGameMessageText(fromUser);
+                } else if (messageOwner.action instanceof TLRPC.TL_messageActionPhoneCall) {
+                    TLRPC.TL_messageActionPhoneCall call = (TLRPC.TL_messageActionPhoneCall) messageOwner.action;
+                    boolean isMissed = call.reason instanceof TLRPC.TL_phoneCallDiscardReasonMissed;
+                    if (messageOwner.from_id == UserConfig.getInstance(currentAccount).getClientUserId()) {
+                        if (isMissed) {
+                            messageText = LocaleController.getString("CallMessageOutgoingMissed", R.string.CallMessageOutgoingMissed);
+                        }else {
+                            messageText = LocaleController.getString("CallMessageOutgoing", R.string.CallMessageOutgoing);
+                        }
+                    } else {
+                        if (isMissed) {
+                            messageText = LocaleController.getString("CallMessageIncomingMissed", R.string.CallMessageIncomingMissed);
+                        } else if(call.reason instanceof TLRPC.TL_phoneCallDiscardReasonBusy) {
+                            messageText = LocaleController.getString("CallMessageIncomingDeclined", R.string.CallMessageIncomingDeclined);
+                        } else {
+                            messageText = LocaleController.getString("CallMessageIncoming", R.string.CallMessageIncoming);
+                        }
+                    }
+                    if (call.duration > 0) {
+                        String duration = LocaleController.formatCallDuration(call.duration);
+                        messageText = LocaleController.formatString("CallMessageWithDuration", R.string.CallMessageWithDuration, messageText, duration);
+                        String _messageText = messageText.toString();
+                        int start = _messageText.indexOf(duration);
+                        if (start != -1) {
+                            SpannableString sp = new SpannableString(messageText);
+                            int end = start + duration.length();
+                            if (start > 0 && _messageText.charAt(start - 1) == '(') {
+                                start--;
+                            }
+                            if (end < _messageText.length() && _messageText.charAt(end) == ')') {
+                                end++;
+                            }
+                            sp.setSpan(new TypefaceSpan(Typeface.DEFAULT), start, end, 0);
+                            messageText = sp;
+                        }
+                    }
+                } else if (messageOwner.action instanceof TLRPC.TL_messageActionPaymentSent) {
+                    TLRPC.User user = null;
+                    int uid = (int) getDialogId();
+                    if (users != null) {
+                        user = users.get(uid);
+                    } else if (sUsers != null) {
+                        user = sUsers.get(uid);
+                    }
+                    if (user == null) {
+                        user = MessagesController.getInstance(currentAccount).getUser(uid);
+                    }
+                    generatePaymentSentMessageText(user);
+                } else if (messageOwner.action instanceof TLRPC.TL_messageActionBotAllowed) {
+                    String domain = ((TLRPC.TL_messageActionBotAllowed) messageOwner.action).domain;
+                    String text = LocaleController.getString("ActionBotAllowed", R.string.ActionBotAllowed);
+                    int start = text.indexOf("%1$s");
+                    SpannableString str = new SpannableString(String.format(text, domain));
+                    if (start >= 0) {
+                        str.setSpan(new URLSpanNoUnderlineBold("http://" + domain), start, start + domain.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+                    }
+                    messageText = str;
+                } else if (messageOwner.action instanceof TLRPC.TL_messageActionSecureValuesSent) {
+                    TLRPC.TL_messageActionSecureValuesSent valuesSent = (TLRPC.TL_messageActionSecureValuesSent) messageOwner.action;
+                    StringBuilder str = new StringBuilder();
+                    for (int a = 0, size = valuesSent.types.size(); a < size; a++) {
+                        TLRPC.SecureValueType type = valuesSent.types.get(a);
+                        if (str.length() > 0) {
+                            str.append(", ");
+                        }
+                        if (type instanceof TLRPC.TL_secureValueTypePhone) {
+                            str.append(LocaleController.getString("ActionBotDocumentPhone", R.string.ActionBotDocumentPhone));
+                        } else if (type instanceof TLRPC.TL_secureValueTypeEmail) {
+                            str.append(LocaleController.getString("ActionBotDocumentEmail", R.string.ActionBotDocumentEmail));
+                        } else if (type instanceof TLRPC.TL_secureValueTypeAddress) {
+                            str.append(LocaleController.getString("ActionBotDocumentAddress", R.string.ActionBotDocumentAddress));
+                        } else if (type instanceof TLRPC.TL_secureValueTypePersonalDetails) {
+                            str.append(LocaleController.getString("ActionBotDocumentIdentity", R.string.ActionBotDocumentIdentity));
+                        } else if (type instanceof TLRPC.TL_secureValueTypePassport) {
+                            str.append(LocaleController.getString("ActionBotDocumentPassport", R.string.ActionBotDocumentPassport));
+                        } else if (type instanceof TLRPC.TL_secureValueTypeDriverLicense) {
+                            str.append(LocaleController.getString("ActionBotDocumentDriverLicence", R.string.ActionBotDocumentDriverLicence));
+                        } else if (type instanceof TLRPC.TL_secureValueTypeIdentityCard) {
+                            str.append(LocaleController.getString("ActionBotDocumentIdentityCard", R.string.ActionBotDocumentIdentityCard));
+                        } else if (type instanceof TLRPC.TL_secureValueTypeUtilityBill) {
+                            str.append(LocaleController.getString("ActionBotDocumentUtilityBill", R.string.ActionBotDocumentUtilityBill));
+                        } else if (type instanceof TLRPC.TL_secureValueTypeBankStatement) {
+                            str.append(LocaleController.getString("ActionBotDocumentBankStatement", R.string.ActionBotDocumentBankStatement));
+                        } else if (type instanceof TLRPC.TL_secureValueTypeRentalAgreement) {
+                            str.append(LocaleController.getString("ActionBotDocumentRentalAgreement", R.string.ActionBotDocumentRentalAgreement));
+                        } else if (type instanceof TLRPC.TL_secureValueTypeInternalPassport) {
+                            str.append(LocaleController.getString("ActionBotDocumentInternalPassport", R.string.ActionBotDocumentInternalPassport));
+                        } else if (type instanceof TLRPC.TL_secureValueTypePassportRegistration) {
+                            str.append(LocaleController.getString("ActionBotDocumentPassportRegistration", R.string.ActionBotDocumentPassportRegistration));
+                        } else if (type instanceof TLRPC.TL_secureValueTypeTemporaryRegistration) {
+                            str.append(LocaleController.getString("ActionBotDocumentTemporaryRegistration", R.string.ActionBotDocumentTemporaryRegistration));
+                        }
+                    }
+                    TLRPC.User user = null;
+                    if (messageOwner.to_id != null) {
+                        if (users != null) {
+                            user = users.get(messageOwner.to_id.user_id);
+                        } else if (sUsers != null) {
+                            user = sUsers.get(messageOwner.to_id.user_id);
+                        }
+                        if (user == null) {
+                            user = MessagesController.getInstance(currentAccount).getUser(messageOwner.to_id.user_id);
+                        }
+                    }
+                    messageText = LocaleController.formatString("ActionBotDocuments", R.string.ActionBotDocuments, UserObject.getFirstName(user), str.toString());
+                }
+            }
+        } else if (!isMediaEmpty()) {
+            if (messageOwner.media instanceof TLRPC.TL_messageMediaPoll) {
+                messageText = LocaleController.getString("Poll", R.string.Poll);
+            } else if (messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) {
+                if (messageOwner.media.ttl_seconds != 0 && !(messageOwner instanceof TLRPC.TL_message_secret)) {
+                    messageText = LocaleController.getString("AttachDestructingPhoto", R.string.AttachDestructingPhoto);
+                } else {
+                    messageText = LocaleController.getString("AttachPhoto", R.string.AttachPhoto);
+                }
+            } else if (isVideo() || messageOwner.media instanceof TLRPC.TL_messageMediaDocument && messageOwner.media.document instanceof TLRPC.TL_documentEmpty && messageOwner.media.ttl_seconds != 0) {
+                if (messageOwner.media.ttl_seconds != 0 && !(messageOwner instanceof TLRPC.TL_message_secret)) {
+                    messageText = LocaleController.getString("AttachDestructingVideo", R.string.AttachDestructingVideo);
+                } else {
+                    messageText = LocaleController.getString("AttachVideo", R.string.AttachVideo);
+                }
+            } else if (isVoice()) {
+                messageText = LocaleController.getString("AttachAudio", R.string.AttachAudio);
+            } else if (isRoundVideo()) {
+                messageText = LocaleController.getString("AttachRound", R.string.AttachRound);
+            } else if (messageOwner.media instanceof TLRPC.TL_messageMediaGeo || messageOwner.media instanceof TLRPC.TL_messageMediaVenue) {
+                messageText = LocaleController.getString("AttachLocation", R.string.AttachLocation);
+            } else if (messageOwner.media instanceof TLRPC.TL_messageMediaGeoLive) {
+                messageText = LocaleController.getString("AttachLiveLocation", R.string.AttachLiveLocation);
+            } else if (messageOwner.media instanceof TLRPC.TL_messageMediaContact) {
+                messageText = LocaleController.getString("AttachContact", R.string.AttachContact);
+                if (!TextUtils.isEmpty(messageOwner.media.vcard)) {
+                    vCardData = VCardData.parse(messageOwner.media.vcard);
+                }
+            } else if (messageOwner.media instanceof TLRPC.TL_messageMediaGame) {
+                messageText = messageOwner.message;
+            } else if (messageOwner.media instanceof TLRPC.TL_messageMediaInvoice) {
+                messageText = messageOwner.media.description;
+            } else if (messageOwner.media instanceof TLRPC.TL_messageMediaUnsupported) {
+                messageText = LocaleController.getString("UnsupportedMedia", R.string.UnsupportedMedia);
+            } else if (messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
+                if (isSticker() || isAnimatedSticker()) {
+                    String sch = getStrickerChar();
+                    if (sch != null && sch.length() > 0) {
+                        messageText = String.format("%s %s", sch, LocaleController.getString("AttachSticker", R.string.AttachSticker));
+                    } else {
+                        messageText = LocaleController.getString("AttachSticker", R.string.AttachSticker);
+                    }
+                } else if (isMusic()) {
+                    messageText = LocaleController.getString("AttachMusic", R.string.AttachMusic);
+                } else if (isGif()) {
+                    messageText = LocaleController.getString("AttachGif", R.string.AttachGif);
+                } else {
+                    String name = FileLoader.getDocumentFileName(messageOwner.media.document);
+                    if (name != null && name.length() > 0) {
+                        messageText = name;
+                    } else {
+                        messageText = LocaleController.getString("AttachDocument", R.string.AttachDocument);
+                    }
+                }
+            }
+        } else {
+            messageText = messageOwner.message;
+        }
+
+        if (messageText == null) {
+            messageText = "";
+        }
+    }
+
     public void setType() {
         int oldType = type;
         isRoundVideoCached = 0;
@@ -2320,6 +2353,7 @@
             }
         }
         if (oldType != 1000 && oldType != type) {
+            updateMessageText(MessagesController.getInstance(currentAccount).getUsers(), MessagesController.getInstance(currentAccount).getChats(), null, null);
             generateThumbs(false);
         }
     }
@@ -3036,16 +3070,16 @@
     }
 
     public static boolean addEntitiesToText(CharSequence text, ArrayList<TLRPC.MessageEntity> entities, boolean out, int type, boolean usernames, boolean photoViewer, boolean useManualParse) {
-        boolean hasUrls = false;
         if (!(text instanceof Spannable)) {
             return false;
         }
         Spannable spannable = (Spannable) text;
-        int count = entities.size();
         URLSpan[] spans = spannable.getSpans(0, text.length(), URLSpan.class);
-        if (spans != null && spans.length > 0) {
-            hasUrls = true;
+        boolean hasUrls = spans != null && spans.length > 0;
+        if (entities.isEmpty()) {
+            return hasUrls;
         }
+
         byte t;
         if (photoViewer) {
             t = 2;
@@ -3054,15 +3088,31 @@
         } else {
             t = 0;
         }
-        for (int a = 0; a < count; a++) {
-            TLRPC.MessageEntity entity = entities.get(a);
+
+        ArrayList<TextStyleSpan.TextStyleRun> runs = new ArrayList<>();
+        ArrayList<TLRPC.MessageEntity> entitiesCopy = new ArrayList<>(entities);
+
+        Collections.sort(entitiesCopy, (o1, o2) -> {
+            if (o1.offset > o2.offset) {
+                return 1;
+            } else if (o1.offset < o2.offset) {
+                return -1;
+            }
+            return 0;
+        });
+        for (int a = 0, N = entitiesCopy.size(); a < N; a++) {
+            TLRPC.MessageEntity entity = entitiesCopy.get(a);
             if (entity.length <= 0 || entity.offset < 0 || entity.offset >= text.length()) {
                 continue;
             } else if (entity.offset + entity.length > text.length()) {
                 entity.length = text.length() - entity.offset;
             }
+
             if (!useManualParse || entity instanceof TLRPC.TL_messageEntityBold ||
                     entity instanceof TLRPC.TL_messageEntityItalic ||
+                    entity instanceof TLRPC.TL_messageEntityStrike ||
+                    entity instanceof TLRPC.TL_messageEntityUnderline ||
+                    entity instanceof TLRPC.TL_messageEntityBlockquote ||
                     entity instanceof TLRPC.TL_messageEntityCode ||
                     entity instanceof TLRPC.TL_messageEntityPre ||
                     entity instanceof TLRPC.TL_messageEntityMentionName ||
@@ -3081,51 +3131,149 @@
                     }
                 }
             }
-            if (entity instanceof TLRPC.TL_messageEntityBold) {
-                spannable.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface("fonts/rmedium.ttf")), entity.offset, entity.offset + entity.length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+
+            TextStyleSpan.TextStyleRun newRun = new TextStyleSpan.TextStyleRun();
+            newRun.start = entity.offset;
+            newRun.end = newRun.start + entity.length;
+            TLRPC.MessageEntity urlEntity = null;
+            if (entity instanceof TLRPC.TL_messageEntityStrike) {
+                newRun.flags = TextStyleSpan.FLAG_STYLE_STRIKE;
+            } else if (entity instanceof TLRPC.TL_messageEntityUnderline) {
+                newRun.flags = TextStyleSpan.FLAG_STYLE_UNDERLINE;
+            } else if (entity instanceof TLRPC.TL_messageEntityBlockquote) {
+                newRun.flags = TextStyleSpan.FLAG_STYLE_QUOTE;
+            } else if (entity instanceof TLRPC.TL_messageEntityBold) {
+                newRun.flags = TextStyleSpan.FLAG_STYLE_BOLD;
             } else if (entity instanceof TLRPC.TL_messageEntityItalic) {
-                spannable.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface("fonts/ritalic.ttf")), entity.offset, entity.offset + entity.length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+                newRun.flags = TextStyleSpan.FLAG_STYLE_ITALIC;
             } else if (entity instanceof TLRPC.TL_messageEntityCode || entity instanceof TLRPC.TL_messageEntityPre) {
-                spannable.setSpan(new URLSpanMono(spannable, entity.offset, entity.offset + entity.length, t), entity.offset, entity.offset + entity.length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+                newRun.flags = TextStyleSpan.FLAG_STYLE_MONO;
             } else if (entity instanceof TLRPC.TL_messageEntityMentionName) {
-                if (usernames) {
-                    spannable.setSpan(new URLSpanUserMention("" + ((TLRPC.TL_messageEntityMentionName) entity).user_id, t), entity.offset, entity.offset + entity.length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
-                }
-            } else if (entity instanceof TLRPC.TL_inputMessageEntityMentionName) {
-                if (usernames) {
-                    spannable.setSpan(new URLSpanUserMention("" + ((TLRPC.TL_inputMessageEntityMentionName) entity).user_id.user_id, t), entity.offset, entity.offset + entity.length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
-                }
-            } else if (!useManualParse) {
-                String url = TextUtils.substring(text, entity.offset, entity.offset + entity.length);
-                if (entity instanceof TLRPC.TL_messageEntityBotCommand) {
-                    spannable.setSpan(new URLSpanBotCommand(url, t), entity.offset, entity.offset + entity.length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
-                } else if (entity instanceof TLRPC.TL_messageEntityHashtag || (usernames && entity instanceof TLRPC.TL_messageEntityMention) || entity instanceof TLRPC.TL_messageEntityCashtag) {
-                    spannable.setSpan(new URLSpanNoUnderline(url), entity.offset, entity.offset + entity.length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
-                } else if (entity instanceof TLRPC.TL_messageEntityEmail) {
-                    spannable.setSpan(new URLSpanReplacement("mailto:" + url), entity.offset, entity.offset + entity.length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
-                } else if (entity instanceof TLRPC.TL_messageEntityUrl) {
-                    if (Browser.isPassportUrl(entity.url)) {
+                if (!usernames) {
                         continue;
                     }
+                newRun.flags = TextStyleSpan.FLAG_STYLE_MENTION;
+                newRun.urlEntity = entity;
+            } else if (entity instanceof TLRPC.TL_inputMessageEntityMentionName) {
+                if (!usernames) {
+                    continue;
+                }
+                newRun.flags = TextStyleSpan.FLAG_STYLE_MENTION;
+                newRun.urlEntity = entity;
+            } else {
+                if (useManualParse) {
+                    continue;
+                }
+                if ((entity instanceof TLRPC.TL_messageEntityUrl || entity instanceof TLRPC.TL_messageEntityTextUrl) && Browser.isPassportUrl(entity.url)) {
+                    continue;
+                }
+                if (entity instanceof TLRPC.TL_messageEntityMention && !usernames) {
+                    continue;
+                }
+                newRun.flags = TextStyleSpan.FLAG_STYLE_URL;
+                newRun.urlEntity = entity;
+            }
+
+            for (int b = 0, N2 = runs.size(); b < N2; b++) {
+                TextStyleSpan.TextStyleRun run = runs.get(b);
+
+                if (newRun.start > run.start) {
+                    if (newRun.start >= run.end) {
+                        continue;
+                    }
+
+                    if (newRun.end < run.end) {
+                        TextStyleSpan.TextStyleRun r = new TextStyleSpan.TextStyleRun(newRun);
+                        r.merge(run);
+                        b++;
+                        N2++;
+                        runs.add(b, r);
+
+                        r = new TextStyleSpan.TextStyleRun(run);
+                        r.start = newRun.end;
+                        b++;
+                        N2++;
+                        runs.add(b, r);
+                    } else if (newRun.end >= run.end) {
+                        TextStyleSpan.TextStyleRun r = new TextStyleSpan.TextStyleRun(newRun);
+                        r.merge(run);
+                        r.end = run.end;
+                        b++;
+                        N2++;
+                        runs.add(b, r);
+                    }
+
+                    int temp = newRun.start;
+                    newRun.start = run.end;
+                    run.end = temp;
+                } else {
+                    if (run.start >= newRun.end) {
+                        continue;
+                    }
+                    int temp = run.start;
+                    if (newRun.end == run.end) {
+                        run.merge(newRun);
+                    } else if (newRun.end < run.end) {
+                        TextStyleSpan.TextStyleRun r = new TextStyleSpan.TextStyleRun(run);
+                        r.merge(newRun);
+                        r.end = newRun.end;
+                        b++;
+                        N2++;
+                        runs.add(b, r);
+
+                        run.start = newRun.end;
+                    } else {
+                        TextStyleSpan.TextStyleRun r = new TextStyleSpan.TextStyleRun(newRun);
+                        r.start = run.end;
+                        b++;
+                        N2++;
+                        runs.add(b, r);
+
+                        run.merge(newRun);
+                    }
+                    newRun.end = temp;
+                }
+            }
+            if (newRun.start < newRun.end) {
+                runs.add(newRun);
+            }
+        }
+
+        int count = runs.size();
+        for (int a = 0; a < count; a++) {
+            TextStyleSpan.TextStyleRun run = runs.get(a);
+
+            String url = run.urlEntity != null ? TextUtils.substring(text, run.urlEntity.offset, run.urlEntity.offset + run.urlEntity.length) : null;
+            if (run.urlEntity instanceof TLRPC.TL_messageEntityBotCommand) {
+                spannable.setSpan(new URLSpanBotCommand(url, t, run), run.start, run.end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+            } else if (run.urlEntity instanceof TLRPC.TL_messageEntityHashtag || run.urlEntity instanceof TLRPC.TL_messageEntityMention || run.urlEntity instanceof TLRPC.TL_messageEntityCashtag) {
+                spannable.setSpan(new URLSpanNoUnderline(url, run), run.start, run.end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+            } else if (run.urlEntity instanceof TLRPC.TL_messageEntityEmail) {
+                spannable.setSpan(new URLSpanReplacement("mailto:" + url, run), run.start, run.end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+            } else if (run.urlEntity instanceof TLRPC.TL_messageEntityUrl) {
                     hasUrls = true;
                     if (!url.toLowerCase().startsWith("http") && !url.toLowerCase().startsWith("tg://")) {
-                        spannable.setSpan(new URLSpanBrowser("http://" + url), entity.offset, entity.offset + entity.length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+                    spannable.setSpan(new URLSpanBrowser("http://" + url, run), run.start, run.end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
                     } else {
-                        spannable.setSpan(new URLSpanBrowser(url), entity.offset, entity.offset + entity.length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+                    spannable.setSpan(new URLSpanBrowser(url, run), run.start, run.end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
                     }
-                } else if (entity instanceof TLRPC.TL_messageEntityPhone) {
+            } else if (run.urlEntity instanceof TLRPC.TL_messageEntityPhone) {
                     hasUrls = true;
                     String tel = PhoneFormat.stripExceptNumbers(url);
                     if (url.startsWith("+")) {
                         tel = "+" + tel;
                     }
-                    spannable.setSpan(new URLSpanBrowser("tel:" + tel), entity.offset, entity.offset + entity.length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
-                } else if (entity instanceof TLRPC.TL_messageEntityTextUrl) {
-                    if (Browser.isPassportUrl(entity.url)) {
-                        continue;
-                    }
-                    spannable.setSpan(new URLSpanReplacement(entity.url), entity.offset, entity.offset + entity.length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
-                }
+                spannable.setSpan(new URLSpanBrowser("tel:" + tel, run), run.start, run.end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+            } else if (run.urlEntity instanceof TLRPC.TL_messageEntityTextUrl) {
+                spannable.setSpan(new URLSpanReplacement(run.urlEntity.url, run), run.start, run.end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+            } else if (run.urlEntity instanceof TLRPC.TL_messageEntityMentionName) {
+                spannable.setSpan(new URLSpanUserMention("" + ((TLRPC.TL_messageEntityMentionName) run.urlEntity).user_id, t, run), run.start, run.end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+            } else if (run.urlEntity instanceof TLRPC.TL_inputMessageEntityMentionName) {
+                spannable.setSpan(new URLSpanUserMention("" + ((TLRPC.TL_inputMessageEntityMentionName) run.urlEntity).user_id.user_id, t, run), run.start, run.end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+            } else if ((run.flags & TextStyleSpan.FLAG_STYLE_MONO) != 0) {
+                spannable.setSpan(new URLSpanMono(spannable, run.start, run.end, t, run), run.start, run.end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+            } else {
+                spannable.setSpan(new TextStyleSpan(run), run.start, run.end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
             }
         }
         return hasUrls;
@@ -3209,12 +3357,12 @@
         boolean hasEntities;
         if (messageOwner.send_state != MESSAGE_SEND_STATE_SENT) {
             hasEntities = false;
-            for (int a = 0; a < messageOwner.entities.size(); a++) {
+            /*for (int a = 0; a < messageOwner.entities.size(); a++) {
                 if (!(messageOwner.entities.get(a) instanceof TLRPC.TL_inputMessageEntityMentionName)) {
                     hasEntities = true;
                     break;
                 }
-            }
+            }*/
         } else {
             hasEntities = !messageOwner.entities.isEmpty();
         }
@@ -3768,7 +3916,11 @@
     }
 
     public static boolean isAnimatedStickerDocument(TLRPC.Document document) {
-        return SharedConfig.showAnimatedStickers && document != null && "application/x-tgsticker".equals(document.mime_type) && !document.thumbs.isEmpty();
+        return document != null && "application/x-tgsticker".equals(document.mime_type) && !document.thumbs.isEmpty();
+    }
+
+    public static boolean canAutoplayAnimatedSticker(TLRPC.Document document) {
+        return isAnimatedStickerDocument(document) && SharedConfig.getDevicePerfomanceClass() != SharedConfig.PERFORMANCE_CLASS_LOW;
     }
 
     public static boolean isMaskDocument(TLRPC.Document document) {
