testdiff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/SearchAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/SearchAdapter.java
index 784ef2d..7271152 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/SearchAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/SearchAdapter.java
@@ -16,6 +16,7 @@
 import android.view.View;
 import android.view.ViewGroup;
 
+import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.R;
@@ -29,6 +30,7 @@
 import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Cells.GraySectionCell;
 import org.telegram.ui.Cells.ProfileSearchCell;
+import org.telegram.ui.Cells.TextCell;
 import org.telegram.ui.Cells.UserCell;
 import org.telegram.ui.Components.RecyclerListView;
 
@@ -53,9 +55,10 @@
     private boolean onlyMutual;
     private boolean allowChats;
     private boolean allowBots;
+    private boolean allowPhoneNumbers;
     private int channelId;
 
-    public SearchAdapter(Context context, SparseArray<TLRPC.User> arg1, boolean usernameSearch, boolean mutual, boolean chats, boolean bots, int searchChannelId) {
+    public SearchAdapter(Context context, SparseArray<TLRPC.User> arg1, boolean usernameSearch, boolean mutual, boolean chats, boolean bots, boolean phones, int searchChannelId) {
         mContext = context;
         ignoreUsers = arg1;
         onlyMutual = mutual;
@@ -63,6 +66,7 @@
         allowChats = chats;
         allowBots = bots;
         channelId = searchChannelId;
+        allowPhoneNumbers = phones;
         searchAdapterHelper = new SearchAdapterHelper(true);
         searchAdapterHelper.setDelegate(new SearchAdapterHelper.SearchAdapterHelperDelegate() {
             @Override
@@ -102,7 +106,7 @@
             searchResult.clear();
             searchResultNames.clear();
             if (allowUsernameSearch) {
-                searchAdapterHelper.queryServerSearch(null, true, allowChats, allowBots, true, channelId, 0);
+                searchAdapterHelper.queryServerSearch(null, true, allowChats, allowBots, true, channelId, allowPhoneNumbers, 0);
             }
             notifyDataSetChanged();
         } else {
@@ -125,7 +129,7 @@
     private void processSearch(final String query) {
         AndroidUtilities.runOnUIThread(() -> {
             if (allowUsernameSearch) {
-                searchAdapterHelper.queryServerSearch(query, true, allowChats, allowBots, true, channelId, -1);
+                searchAdapterHelper.queryServerSearch(query, true, allowChats, allowBots, true, channelId, allowPhoneNumbers, -1);
             }
             final int currentAccount = UserConfig.selectedAccount;
             final ArrayList<TLRPC.TL_contact> contactsCopy = new ArrayList<>(ContactsController.getInstance(currentAccount).contacts);
@@ -197,7 +201,8 @@
 
     @Override
     public boolean isEnabled(RecyclerView.ViewHolder holder) {
-        return holder.getItemViewType() == 0;
+        int type = holder.getItemViewType();
+        return type == 0 || type == 2;
     }
 
     @Override
@@ -207,27 +212,43 @@
         if (globalCount != 0) {
             count += globalCount + 1;
         }
+        int phoneCount = searchAdapterHelper.getPhoneSearch().size();
+        if (phoneCount != 0) {
+            count += phoneCount;
+        }
         return count;
     }
 
     public boolean isGlobalSearch(int i) {
         int localCount = searchResult.size();
         int globalCount = searchAdapterHelper.getGlobalSearch().size();
+        int phoneCount = searchAdapterHelper.getPhoneSearch().size();
         if (i >= 0 && i < localCount) {
             return false;
-        } else if (i > localCount && i <= globalCount + localCount) {
+        } else if (i > localCount && i < localCount + phoneCount) {
+            return false;
+        } else if (i > localCount + phoneCount && i <= globalCount + phoneCount + localCount) {
             return true;
         }
         return false;
     }
 
-    public TLObject getItem(int i) {
+    public Object getItem(int i) {
         int localCount = searchResult.size();
         int globalCount = searchAdapterHelper.getGlobalSearch().size();
+        int phoneCount = searchAdapterHelper.getPhoneSearch().size();
         if (i >= 0 && i < localCount) {
             return searchResult.get(i);
-        } else if (i > localCount && i <= globalCount + localCount) {
-            return searchAdapterHelper.getGlobalSearch().get(i - localCount - 1);
+        } else {
+            i -= localCount;
+            if (i >= 0 && i < phoneCount) {
+                return searchAdapterHelper.getPhoneSearch().get(i);
+            } else {
+                i -= phoneCount;
+                if (i > 0 && i <= globalCount) {
+                    return searchAdapterHelper.getGlobalSearch().get(i - 1);
+                }
+            }
         }
         return null;
     }
@@ -247,9 +268,11 @@
                 }
                 break;
             case 1:
-            default:
                 view = new GraySectionCell(mContext);
-                ((GraySectionCell) view).setText(LocaleController.getString("GlobalSearch", R.string.GlobalSearch));
+                break;
+            case 2:
+            default:
+                view = new TextCell(mContext, 16);
                 break;
         }
         return new RecyclerListView.Holder(view);
@@ -257,8 +280,9 @@
 
     @Override
     public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
-        if (holder.getItemViewType() == 0) {
-            TLObject object = getItem(position);
+        switch (holder.getItemViewType()) {
+            case 0: {
+                TLObject object = (TLObject) getItem(position);
             if (object != null) {
                 int id = 0;
                 String un = null;
@@ -290,7 +314,7 @@
                         SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder();
                         spannableStringBuilder.append("@");
                         spannableStringBuilder.append(un);
-                        if ((index = un.toLowerCase().indexOf(foundUserName)) != -1) {
+                            if ((index = AndroidUtilities.indexOfIgnoreCase(un, foundUserName)) != -1) {
                             int len = foundUserName.length();
                             if (index == 0) {
                                 len++;
@@ -325,13 +349,39 @@
                     }*/
                 }
             }
+                break;
+            }
+            case 1: {
+                GraySectionCell cell = (GraySectionCell) holder.itemView;
+                if (getItem(position) == null) {
+                    cell.setText(LocaleController.getString("GlobalSearch", R.string.GlobalSearch));
+                } else {
+                    cell.setText(LocaleController.getString("PhoneNumberSearch", R.string.PhoneNumberSearch));
+                }
+                break;
+            }
+            case 2: {
+                String str = (String) getItem(position);
+                TextCell cell = (TextCell) holder.itemView;
+                cell.setColors(null, Theme.key_windowBackgroundWhiteBlueText2);
+                cell.setText(LocaleController.formatString("AddContactByPhone", R.string.AddContactByPhone, PhoneFormat.getInstance().format("+" + str)), false);
+                break;
+            }
         }
     }
 
     @Override
     public int getItemViewType(int i) {
-        if (i == searchResult.size()) {
+        Object item = getItem(i);
+        if (item == null) {
             return 1;
+        } else if (item instanceof String) {
+            String str = (String) item;
+            if ("section".equals(str)) {
+                return 1;
+            } else {
+                return 2;
+            }
         }
         return 0;
     }
