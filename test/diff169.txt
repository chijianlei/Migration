testdiff --git a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java
index 1dd532f..589cfd6 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java
@@ -66,7 +66,7 @@
 import java.util.Map;
 import java.util.concurrent.CountDownLatch;
 
-public class NotificationsController {
+public class NotificationsController extends BaseController {
 
     public static final String EXTRA_VOICE_REPLY = "extra_voice_reply";
     public static String OTHER_NOTIFICATIONS_CHANNEL = null;
@@ -128,7 +128,6 @@
         audioManager = (AudioManager) ApplicationLoader.applicationContext.getSystemService(Context.AUDIO_SERVICE);
     }
 
-    private int currentAccount;
     private static volatile NotificationsController[] Instance = new NotificationsController[UserConfig.MAX_ACCOUNT_COUNT];
 
     public static NotificationsController getInstance(int num) {
@@ -145,10 +144,11 @@
     }
 
     public NotificationsController(int instance) {
-        currentAccount = instance;
+        super(instance);
+        
         notificationId = currentAccount + 1;
         notificationGroup = "messages" + (currentAccount == 0 ? "" : currentAccount);
-        SharedPreferences preferences = MessagesController.getNotificationsSettings(currentAccount);
+        SharedPreferences preferences = getAccountInstance().getNotificationsSettings();
         inChatSoundEnabled = preferences.getBoolean("EnableInChatSound", true);
         showBadgeNumber = preferences.getBoolean("badgeNumber", true);
         showBadgeMuted = preferences.getBoolean("badgeNumberMuted", false);
@@ -170,7 +170,7 @@
 
         try {
             PowerManager pm = (PowerManager) ApplicationLoader.applicationContext.getSystemService(Context.POWER_SERVICE);
-            notificationDelayWakelock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "lock");
+            notificationDelayWakelock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "telegram:notification_delay_lock");
             notificationDelayWakelock.setReferenceCounted(false);
         } catch (Exception e) {
             FileLog.e(e);
@@ -250,7 +250,7 @@
             }
             dismissNotification();
             setBadge(getTotalAllUnreadCount());
-            SharedPreferences preferences = MessagesController.getNotificationsSettings(currentAccount);
+            SharedPreferences preferences = getAccountInstance().getNotificationsSettings();
             SharedPreferences.Editor editor = preferences.edit();
             editor.clear();
             editor.commit();
@@ -292,10 +292,10 @@
     }
 
     public void removeNotificationsForDialog(long did) {
-        NotificationsController.getInstance(currentAccount).processReadMessages(null, did, 0, Integer.MAX_VALUE, false);
+        processReadMessages(null, did, 0, Integer.MAX_VALUE, false);
         LongSparseArray<Integer> dialogsToUpdate = new LongSparseArray<>();
         dialogsToUpdate.put(did, 0);
-        NotificationsController.getInstance(currentAccount).processDialogsUpdateRead(dialogsToUpdate);
+        processDialogsUpdateRead(dialogsToUpdate);
     }
 
     public boolean hasMessagesToReply() {
@@ -342,7 +342,7 @@
         final ArrayList<MessageObject> popupArrayRemove = new ArrayList<>(0);
         notificationsQueue.postRunnable(() -> {
             int old_unread_count = total_unread_count;
-            SharedPreferences preferences = MessagesController.getNotificationsSettings(currentAccount);
+            SharedPreferences preferences = getAccountInstance().getNotificationsSettings();
             for (int a = 0; a < deletedMessages.size(); a++) {
                 int key = deletedMessages.keyAt(a);
                 long dialog_id = -key;
@@ -393,12 +393,12 @@
                     delayedPushMessages.clear();
                     showOrUpdateNotification(notifyCheck);
                 } else {
-                    scheduleNotificationDelay(lastOnlineFromOtherDevice > ConnectionsManager.getInstance(currentAccount).getCurrentTime());
+                    scheduleNotificationDelay(lastOnlineFromOtherDevice > getConnectionsManager().getCurrentTime());
                 }
                 final int pushDialogsCount = pushDialogs.size();
                 AndroidUtilities.runOnUIThread(() -> {
                     NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.notificationsCountUpdated, currentAccount);
-                    NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.dialogsUnreadCounterChanged, pushDialogsCount);
+                    getNotificationCenter().postNotificationName(NotificationCenter.dialogsUnreadCounterChanged, pushDialogsCount);
                 });
             }
             notifyCheck = false;
@@ -412,7 +412,7 @@
         final ArrayList<MessageObject> popupArrayRemove = new ArrayList<>(0);
         notificationsQueue.postRunnable(() -> {
             int old_unread_count = total_unread_count;
-            SharedPreferences preferences = MessagesController.getNotificationsSettings(currentAccount);
+            SharedPreferences preferences = getAccountInstance().getNotificationsSettings();
 
             for (int a = 0; a < deletedMessages.size(); a++) {
                 int key = deletedMessages.keyAt(a);
@@ -465,12 +465,12 @@
                     delayedPushMessages.clear();
                     showOrUpdateNotification(notifyCheck);
                 } else {
-                    scheduleNotificationDelay(lastOnlineFromOtherDevice > ConnectionsManager.getInstance(currentAccount).getCurrentTime());
+                    scheduleNotificationDelay(lastOnlineFromOtherDevice > getConnectionsManager().getCurrentTime());
                 }
                 final int pushDialogsCount = pushDialogs.size();
                 AndroidUtilities.runOnUIThread(() -> {
                     NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.notificationsCountUpdated, currentAccount);
-                    NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.dialogsUnreadCounterChanged, pushDialogsCount);
+                    getNotificationCenter().postNotificationName(NotificationCenter.dialogsUnreadCounterChanged, pushDialogsCount);
                 });
             }
             notifyCheck = false;
@@ -596,7 +596,7 @@
             boolean edited = false;
 
             LongSparseArray<Boolean> settingsCache = new LongSparseArray<>();
-            SharedPreferences preferences = MessagesController.getNotificationsSettings(currentAccount);
+            SharedPreferences preferences = getAccountInstance().getNotificationsSettings();
             boolean allowPinned = preferences.getBoolean("PinnedMessages", true);
             int popup = 0;
 
@@ -633,7 +633,7 @@
                             popup = addToPopupMessages(popupArrayAdd, messageObject, lower_id, dialog_id, isChannel, preferences);
                         }
                         if (isFcm && (edited = messageObject.localEdit)) {
-                            MessagesStorage.getInstance(currentAccount).putPushMessage(messageObject);
+                            getMessagesStorage().putPushMessage(messageObject);
                         }
                     }
                     continue;
@@ -642,7 +642,7 @@
                     continue;
                 }
                 if (isFcm) {
-                    MessagesStorage.getInstance(currentAccount).putPushMessage(messageObject);
+                    getMessagesStorage().putPushMessage(messageObject);
                 }
 
                 long original_dialog_id = dialog_id;
@@ -758,7 +758,7 @@
                         final int pushDialogsCount = pushDialogs.size();
                         AndroidUtilities.runOnUIThread(() -> {
                             NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.notificationsCountUpdated, currentAccount);
-                            NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.dialogsUnreadCounterChanged, pushDialogsCount);
+                            getNotificationCenter().postNotificationName(NotificationCenter.dialogsUnreadCounterChanged, pushDialogsCount);
                         });
                     }
                     notifyCheck = false;
@@ -781,7 +781,7 @@
         final ArrayList<MessageObject> popupArrayToRemove = new ArrayList<>();
         notificationsQueue.postRunnable(() -> {
             int old_unread_count = total_unread_count;
-            SharedPreferences preferences = MessagesController.getNotificationsSettings(currentAccount);
+            SharedPreferences preferences = getAccountInstance().getNotificationsSettings();
             for (int b = 0; b < dialogsToUpdate.size(); b++) {
                 long dialog_id = dialogsToUpdate.keyAt(b);
 
@@ -855,12 +855,12 @@
                     delayedPushMessages.clear();
                     showOrUpdateNotification(notifyCheck);
                 } else {
-                    scheduleNotificationDelay(lastOnlineFromOtherDevice > ConnectionsManager.getInstance(currentAccount).getCurrentTime());
+                    scheduleNotificationDelay(lastOnlineFromOtherDevice > getConnectionsManager().getCurrentTime());
                 }
                 final int pushDialogsCount = pushDialogs.size();
                 AndroidUtilities.runOnUIThread(() -> {
                     NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.notificationsCountUpdated, currentAccount);
-                    NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.dialogsUnreadCounterChanged, pushDialogsCount);
+                    getNotificationCenter().postNotificationName(NotificationCenter.dialogsUnreadCounterChanged, pushDialogsCount);
                 });
             }
             notifyCheck = false;
@@ -871,9 +871,9 @@
     }
 
     public void processLoadedUnreadMessages(final LongSparseArray<Integer> dialogs, final ArrayList<TLRPC.Message> messages, ArrayList<MessageObject> push, final ArrayList<TLRPC.User> users, final ArrayList<TLRPC.Chat> chats, final ArrayList<TLRPC.EncryptedChat> encryptedChats) {
-        MessagesController.getInstance(currentAccount).putUsers(users, true);
-        MessagesController.getInstance(currentAccount).putChats(chats, true);
-        MessagesController.getInstance(currentAccount).putEncryptedChats(encryptedChats, true);
+        getMessagesController().putUsers(users, true);
+        getMessagesController().putChats(chats, true);
+        getMessagesController().putEncryptedChats(encryptedChats, true);
 
         notificationsQueue.postRunnable(() -> {
             pushDialogs.clear();
@@ -881,7 +881,7 @@
             pushMessagesDict.clear();
             total_unread_count = 0;
             personal_count = 0;
-            SharedPreferences preferences = MessagesController.getNotificationsSettings(currentAccount);
+            SharedPreferences preferences = getAccountInstance().getNotificationsSettings();
             LongSparseArray<Boolean> settingsCache = new LongSparseArray<>();
 
             if (messages != null) {
@@ -1026,7 +1026,7 @@
                     NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.pushMessagesUpdated);
                 }
                 NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.notificationsCountUpdated, currentAccount);
-                NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.dialogsUnreadCounterChanged, pushDialogsCount);
+                getNotificationCenter().postNotificationName(NotificationCenter.dialogsUnreadCounterChanged, pushDialogsCount);
             });
             showOrUpdateNotification(SystemClock.elapsedRealtime() / 1000 < 60);
 
@@ -1101,21 +1101,26 @@
         if (preview != null) {
             preview[0] = true;
         }
+        SharedPreferences preferences = getAccountInstance().getNotificationsSettings();
+        boolean dialogPreviewEnabled = preferences.getBoolean("content_preview_" + dialog_id, true);
         if (messageObject.isFcmMessage()) {
             if (chat_id == 0 && from_id != 0) {
-                SharedPreferences preferences = MessagesController.getNotificationsSettings(currentAccount);
-                if (!preferences.getBoolean("EnablePreviewAll", true)) {
-                    if (preview != null) {
-                        preview[0] = false;
-                    }
-                    return LocaleController.formatString("NotificationMessageNoText", R.string.NotificationMessageNoText, messageObject.localName);
-                }
                 if (Build.VERSION.SDK_INT > Build.VERSION_CODES.O_MR1) {
                     userName[0] = messageObject.localName;
                 }
+                if (!dialogPreviewEnabled || !preferences.getBoolean("EnablePreviewAll", true)) {
+                    if (preview != null) {
+                        preview[0] = false;
+                    }
+                    return LocaleController.getString("Message", R.string.Message);
+                }
             } else if (chat_id != 0) {
-                SharedPreferences preferences = MessagesController.getNotificationsSettings(currentAccount);
-                if (!messageObject.localChannel && !preferences.getBoolean("EnablePreviewGroup", true) || messageObject.localChannel && !preferences.getBoolean("EnablePreviewChannel", true)) {
+                if (messageObject.messageOwner.to_id.channel_id == 0 || messageObject.isMegagroup()) {
+                    userName[0] = messageObject.localUserName;
+                } else if (Build.VERSION.SDK_INT > Build.VERSION_CODES.O_MR1) {
+                    userName[0] = messageObject.localName;
+                }
+                if (!dialogPreviewEnabled || !messageObject.localChannel && !preferences.getBoolean("EnablePreviewGroup", true) || messageObject.localChannel && !preferences.getBoolean("EnablePreviewChannel", true)) {
                     if (preview != null) {
                         preview[0] = false;
                     }
@@ -1125,11 +1130,6 @@
                         return LocaleController.formatString("NotificationMessageGroupNoText", R.string.NotificationMessageGroupNoText, messageObject.localUserName, messageObject.localName);
                     }
                 }
-                if (messageObject.messageOwner.to_id.channel_id == 0 || messageObject.isMegagroup()) {
-                    userName[0] = messageObject.localUserName;
-                } else if (Build.VERSION.SDK_INT > Build.VERSION_CODES.O_MR1) {
-                    userName[0] = messageObject.localName;
-                }
             }
             return messageObject.messageOwner.message;
         }
@@ -1139,7 +1139,7 @@
             } else {
                 from_id = -chat_id;
             }
-        } else if (from_id == UserConfig.getInstance(currentAccount).getClientUserId()) {
+        } else if (from_id == getUserConfig().getClientUserId()) {
             from_id = messageObject.messageOwner.from_id;
         }
 
@@ -1153,7 +1153,7 @@
 
         String name = null;
         if (from_id > 0) {
-            TLRPC.User user = MessagesController.getInstance(currentAccount).getUser(from_id);
+            TLRPC.User user = getMessagesController().getUser(from_id);
             if (user != null) {
                 name = UserObject.getUserName(user);
                 if (chat_id != 0) {
@@ -1167,7 +1167,7 @@
                 }
             }
         } else {
-            TLRPC.Chat chat = MessagesController.getInstance(currentAccount).getChat(-from_id);
+            TLRPC.Chat chat = getMessagesController().getChat(-from_id);
             if (chat != null) {
                 name = chat.title;
                 userName[0] = name;
@@ -1179,7 +1179,7 @@
         }
         TLRPC.Chat chat = null;
         if (chat_id != 0) {
-            chat = MessagesController.getInstance(currentAccount).getChat(chat_id);
+            chat = getMessagesController().getChat(chat_id);
             if (chat == null) {
                 return null;
             } else if (ChatObject.isChannel(chat) && !chat.megagroup) {
@@ -1194,9 +1194,8 @@
             userName[0] = null;
             return LocaleController.getString("YouHaveNewMessage", R.string.YouHaveNewMessage);
         } else {
-            SharedPreferences preferences = MessagesController.getNotificationsSettings(currentAccount);
             boolean isChannel = ChatObject.isChannel(chat) && !chat.megagroup;
-            if (chat_id == 0 && from_id != 0 && preferences.getBoolean("EnablePreviewAll", true) || chat_id != 0 && (!isChannel && preferences.getBoolean("EnablePreviewGroup", true) || isChannel && preferences.getBoolean("EnablePreviewChannel", true))) {
+            if (dialogPreviewEnabled && (chat_id == 0 && from_id != 0 && preferences.getBoolean("EnablePreviewAll", true) || chat_id != 0 && (!isChannel && preferences.getBoolean("EnablePreviewGroup", true) || isChannel && preferences.getBoolean("EnablePreviewChannel", true)))) {
                 if (messageObject.messageOwner instanceof TLRPC.TL_messageService) {
                     userName[0] = null;
                     if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionUserJoined || messageObject.messageOwner.action instanceof TLRPC.TL_messageActionContactSignUp) {
@@ -1205,7 +1204,7 @@
                         return LocaleController.formatString("NotificationContactNewPhoto", R.string.NotificationContactNewPhoto, name);
                     } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionLoginUnknownLocation) {
                         String date = LocaleController.formatString("formatDateAtTime", R.string.formatDateAtTime, LocaleController.getInstance().formatterYear.format(((long) messageObject.messageOwner.date) * 1000), LocaleController.getInstance().formatterDay.format(((long) messageObject.messageOwner.date) * 1000));
-                        return LocaleController.formatString("NotificationUnrecognizedDevice", R.string.NotificationUnrecognizedDevice, UserConfig.getInstance(currentAccount).getCurrentUser().first_name, date, messageObject.messageOwner.action.title, messageObject.messageOwner.action.address);
+                        return LocaleController.formatString("NotificationUnrecognizedDevice", R.string.NotificationUnrecognizedDevice, getUserConfig().getCurrentUser().first_name, date, messageObject.messageOwner.action.title, messageObject.messageOwner.action.address);
                     } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionGameScore || messageObject.messageOwner.action instanceof TLRPC.TL_messageActionPaymentSent) {
                         return messageObject.messageText.toString();
                     } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionPhoneCall) {
@@ -1222,10 +1221,10 @@
                             if (messageObject.messageOwner.to_id.channel_id != 0 && !chat.megagroup) {
                                 return LocaleController.formatString("ChannelAddedByNotification", R.string.ChannelAddedByNotification, name, chat.title);
                             } else {
-                                if (singleUserId == UserConfig.getInstance(currentAccount).getClientUserId()) {
+                                if (singleUserId == getUserConfig().getClientUserId()) {
                                     return LocaleController.formatString("NotificationInvitedToGroup", R.string.NotificationInvitedToGroup, name, chat.title);
                                 } else {
-                                    TLRPC.User u2 = MessagesController.getInstance(currentAccount).getUser(singleUserId);
+                                    TLRPC.User u2 = getMessagesController().getUser(singleUserId);
                                     if (u2 == null) {
                                         return null;
                                     }
@@ -1243,7 +1242,7 @@
                         } else {
                             StringBuilder names = new StringBuilder();
                             for (int a = 0; a < messageObject.messageOwner.action.users.size(); a++) {
-                                TLRPC.User user = MessagesController.getInstance(currentAccount).getUser(messageObject.messageOwner.action.users.get(a));
+                                TLRPC.User user = getMessagesController().getUser(messageObject.messageOwner.action.users.get(a));
                                 if (user != null) {
                                     String name2 = UserObject.getUserName(user);
                                     if (names.length() != 0) {
@@ -1265,12 +1264,12 @@
                             return LocaleController.formatString("NotificationEditedGroupPhoto", R.string.NotificationEditedGroupPhoto, name, chat.title);
                         }
                     } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatDeleteUser) {
-                        if (messageObject.messageOwner.action.user_id == UserConfig.getInstance(currentAccount).getClientUserId()) {
+                        if (messageObject.messageOwner.action.user_id == getUserConfig().getClientUserId()) {
                             return LocaleController.formatString("NotificationGroupKickYou", R.string.NotificationGroupKickYou, name, chat.title);
                         } else if (messageObject.messageOwner.action.user_id == from_id) {
                             return LocaleController.formatString("NotificationGroupLeftMember", R.string.NotificationGroupLeftMember, name, chat.title);
                         } else {
-                            TLRPC.User u2 = MessagesController.getInstance(currentAccount).getUser(messageObject.messageOwner.action.user_id);
+                            TLRPC.User u2 = getMessagesController().getUser(messageObject.messageOwner.action.user_id);
                             if (u2 == null) {
                                 return null;
                             }
@@ -1312,7 +1311,7 @@
                                     return LocaleController.formatString("NotificationActionPinnedVoice", R.string.NotificationActionPinnedVoice, name, chat.title);
                                 } else if (object.isRoundVideo()) {
                                     return LocaleController.formatString("NotificationActionPinnedRound", R.string.NotificationActionPinnedRound, name, chat.title);
-                                } else if (object.isSticker()) {
+                                } else if (object.isSticker() || object.isAnimatedSticker()) {
                                     String emoji = object.getStickerEmoji();
                                     if (emoji != null) {
                                         return LocaleController.formatString("NotificationActionPinnedStickerEmoji", R.string.NotificationActionPinnedStickerEmoji, name, chat.title, emoji);
@@ -1380,7 +1379,7 @@
                                     return LocaleController.formatString("NotificationActionPinnedVoiceChannel", R.string.NotificationActionPinnedVoiceChannel, chat.title);
                                 } else if (object.isRoundVideo()) {
                                     return LocaleController.formatString("NotificationActionPinnedRoundChannel", R.string.NotificationActionPinnedRoundChannel, chat.title);
-                                } else if (object.isSticker()) {
+                                } else if (object.isSticker() || object.isAnimatedSticker()) {
                                     String emoji = object.getStickerEmoji();
                                     if (emoji != null) {
                                         return LocaleController.formatString("NotificationActionPinnedStickerEmojiChannel", R.string.NotificationActionPinnedStickerEmojiChannel, chat.title, emoji);
@@ -1465,7 +1464,7 @@
                     } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaGeoLive) {
                         return LocaleController.getString("AttachLiveLocation", R.string.AttachLiveLocation);
                     } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
-                        if (messageObject.isSticker()) {
+                        if (messageObject.isSticker() || messageObject.isAnimatedSticker()) {
                             String emoji = messageObject.getStickerEmoji();
                             if (emoji != null) {
                                 return emoji + " " + LocaleController.getString("AttachSticker", R.string.AttachSticker);
@@ -1507,18 +1506,18 @@
         if (preview != null) {
             preview[0] = true;
         }
+        SharedPreferences preferences = getAccountInstance().getNotificationsSettings();
+        boolean dialogPreviewEnabled = preferences.getBoolean("content_preview_" + dialog_id, true);
         if (messageObject.isFcmMessage()) {
             if (chat_id == 0 && from_id != 0) {
-                SharedPreferences preferences = MessagesController.getNotificationsSettings(currentAccount);
-                if (!preferences.getBoolean("EnablePreviewAll", true)) {
+                if (!dialogPreviewEnabled || !preferences.getBoolean("EnablePreviewAll", true)) {
                     if (preview != null) {
                         preview[0] = false;
                     }
                     return LocaleController.formatString("NotificationMessageNoText", R.string.NotificationMessageNoText, messageObject.localName);
                 }
             } else if (chat_id != 0) {
-                SharedPreferences preferences = MessagesController.getNotificationsSettings(currentAccount);
-                if (!messageObject.localChannel && !preferences.getBoolean("EnablePreviewGroup", true) || messageObject.localChannel && !preferences.getBoolean("EnablePreviewChannel", true)) {
+                if (!dialogPreviewEnabled || !messageObject.localChannel && !preferences.getBoolean("EnablePreviewGroup", true) || messageObject.localChannel && !preferences.getBoolean("EnablePreviewChannel", true)) {
                     if (preview != null) {
                         preview[0] = false;
                     }
@@ -1538,7 +1537,7 @@
             } else {
                 from_id = -chat_id;
             }
-        } else if (from_id == UserConfig.getInstance(currentAccount).getClientUserId()) {
+        } else if (from_id == getUserConfig().getClientUserId()) {
             from_id = messageObject.messageOwner.from_id;
         }
 
@@ -1552,12 +1551,12 @@
 
         String name = null;
         if (from_id > 0) {
-            TLRPC.User user = MessagesController.getInstance(currentAccount).getUser(from_id);
+            TLRPC.User user = getMessagesController().getUser(from_id);
             if (user != null) {
                 name = UserObject.getUserName(user);
             }
         } else {
-            TLRPC.Chat chat = MessagesController.getInstance(currentAccount).getChat(-from_id);
+            TLRPC.Chat chat = getMessagesController().getChat(-from_id);
             if (chat != null) {
                 name = chat.title;
             }
@@ -1568,7 +1567,7 @@
         }
         TLRPC.Chat chat = null;
         if (chat_id != 0) {
-            chat = MessagesController.getInstance(currentAccount).getChat(chat_id);
+            chat = getMessagesController().getChat(chat_id);
             if (chat == null) {
                 return null;
             }
@@ -1579,8 +1578,7 @@
             msg = LocaleController.getString("YouHaveNewMessage", R.string.YouHaveNewMessage);
         } else {
             if (chat_id == 0 && from_id != 0) {
-                SharedPreferences preferences = MessagesController.getNotificationsSettings(currentAccount);
-                if (preferences.getBoolean("EnablePreviewAll", true)) {
+                if (dialogPreviewEnabled && preferences.getBoolean("EnablePreviewAll", true)) {
                     if (messageObject.messageOwner instanceof TLRPC.TL_messageService) {
                         if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionUserJoined || messageObject.messageOwner.action instanceof TLRPC.TL_messageActionContactSignUp) {
                             msg = LocaleController.formatString("NotificationContactJoined", R.string.NotificationContactJoined, name);
@@ -1588,7 +1586,7 @@
                             msg = LocaleController.formatString("NotificationContactNewPhoto", R.string.NotificationContactNewPhoto, name);
                         } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionLoginUnknownLocation) {
                             String date = LocaleController.formatString("formatDateAtTime", R.string.formatDateAtTime, LocaleController.getInstance().formatterYear.format(((long) messageObject.messageOwner.date) * 1000), LocaleController.getInstance().formatterDay.format(((long) messageObject.messageOwner.date) * 1000));
-                            msg = LocaleController.formatString("NotificationUnrecognizedDevice", R.string.NotificationUnrecognizedDevice, UserConfig.getInstance(currentAccount).getCurrentUser().first_name, date, messageObject.messageOwner.action.title, messageObject.messageOwner.action.address);
+                            msg = LocaleController.formatString("NotificationUnrecognizedDevice", R.string.NotificationUnrecognizedDevice, getUserConfig().getCurrentUser().first_name, date, messageObject.messageOwner.action.title, messageObject.messageOwner.action.address);
                         } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionGameScore || messageObject.messageOwner.action instanceof TLRPC.TL_messageActionPaymentSent) {
                             msg = messageObject.messageText.toString();
                         } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionPhoneCall) {
@@ -1650,7 +1648,7 @@
                         } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaGeoLive) {
                             msg = LocaleController.formatString("NotificationMessageLiveLocation", R.string.NotificationMessageLiveLocation, name);
                         } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
-                            if (messageObject.isSticker()) {
+                            if (messageObject.isSticker() || messageObject.isAnimatedSticker()) {
                                 String emoji = messageObject.getStickerEmoji();
                                 if (emoji != null) {
                                     msg = LocaleController.formatString("NotificationMessageStickerEmoji", R.string.NotificationMessageStickerEmoji, name, emoji);
@@ -1681,9 +1679,8 @@
                     msg = LocaleController.formatString("NotificationMessageNoText", R.string.NotificationMessageNoText, name);
                 }
             } else if (chat_id != 0) {
-                SharedPreferences preferences = MessagesController.getNotificationsSettings(currentAccount);
                 boolean isChannel = ChatObject.isChannel(chat) && !chat.megagroup;
-                if (!isChannel && preferences.getBoolean("EnablePreviewGroup", true) || isChannel && preferences.getBoolean("EnablePreviewChannel", true)) {
+                if (dialogPreviewEnabled && (!isChannel && preferences.getBoolean("EnablePreviewGroup", true) || isChannel && preferences.getBoolean("EnablePreviewChannel", true))) {
                     if (messageObject.messageOwner instanceof TLRPC.TL_messageService) {
                         if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatAddUser) {
                             int singleUserId = messageObject.messageOwner.action.user_id;
@@ -1694,10 +1691,10 @@
                                 if (messageObject.messageOwner.to_id.channel_id != 0 && !chat.megagroup) {
                                     msg = LocaleController.formatString("ChannelAddedByNotification", R.string.ChannelAddedByNotification, name, chat.title);
                                 } else {
-                                    if (singleUserId == UserConfig.getInstance(currentAccount).getClientUserId()) {
+                                    if (singleUserId == getUserConfig().getClientUserId()) {
                                         msg = LocaleController.formatString("NotificationInvitedToGroup", R.string.NotificationInvitedToGroup, name, chat.title);
                                     } else {
-                                        TLRPC.User u2 = MessagesController.getInstance(currentAccount).getUser(singleUserId);
+                                        TLRPC.User u2 = getMessagesController().getUser(singleUserId);
                                         if (u2 == null) {
                                             return null;
                                         }
@@ -1715,7 +1712,7 @@
                             } else {
                                 StringBuilder names = new StringBuilder();
                                 for (int a = 0; a < messageObject.messageOwner.action.users.size(); a++) {
-                                    TLRPC.User user = MessagesController.getInstance(currentAccount).getUser(messageObject.messageOwner.action.users.get(a));
+                                    TLRPC.User user = getMessagesController().getUser(messageObject.messageOwner.action.users.get(a));
                                     if (user != null) {
                                         String name2 = UserObject.getUserName(user);
                                         if (names.length() != 0) {
@@ -1737,12 +1734,12 @@
                                 msg = LocaleController.formatString("NotificationEditedGroupPhoto", R.string.NotificationEditedGroupPhoto, name, chat.title);
                             }
                         } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatDeleteUser) {
-                            if (messageObject.messageOwner.action.user_id == UserConfig.getInstance(currentAccount).getClientUserId()) {
+                            if (messageObject.messageOwner.action.user_id == getUserConfig().getClientUserId()) {
                                 msg = LocaleController.formatString("NotificationGroupKickYou", R.string.NotificationGroupKickYou, name, chat.title);
                             } else if (messageObject.messageOwner.action.user_id == from_id) {
                                 msg = LocaleController.formatString("NotificationGroupLeftMember", R.string.NotificationGroupLeftMember, name, chat.title);
                             } else {
-                                TLRPC.User u2 = MessagesController.getInstance(currentAccount).getUser(messageObject.messageOwner.action.user_id);
+                                TLRPC.User u2 = getMessagesController().getUser(messageObject.messageOwner.action.user_id);
                                 if (u2 == null) {
                                     return null;
                                 }
@@ -1784,7 +1781,7 @@
                                         msg = LocaleController.formatString("NotificationActionPinnedVoice", R.string.NotificationActionPinnedVoice, name, chat.title);
                                     } else if (object.isRoundVideo()) {
                                         msg = LocaleController.formatString("NotificationActionPinnedRound", R.string.NotificationActionPinnedRound, name, chat.title);
-                                    } else if (object.isSticker()) {
+                                    } else if (object.isSticker() || object.isAnimatedSticker()) {
                                         String emoji = object.getStickerEmoji();
                                         if (emoji != null) {
                                             msg = LocaleController.formatString("NotificationActionPinnedStickerEmoji", R.string.NotificationActionPinnedStickerEmoji, name, chat.title, emoji);
@@ -1852,7 +1849,7 @@
                                         msg = LocaleController.formatString("NotificationActionPinnedVoiceChannel", R.string.NotificationActionPinnedVoiceChannel, chat.title);
                                     } else if (object.isRoundVideo()) {
                                         msg = LocaleController.formatString("NotificationActionPinnedRoundChannel", R.string.NotificationActionPinnedRoundChannel, chat.title);
-                                    } else if (object.isSticker()) {
+                                    } else if (object.isSticker() || object.isAnimatedSticker()) {
                                         String emoji = object.getStickerEmoji();
                                         if (emoji != null) {
                                             msg = LocaleController.formatString("NotificationActionPinnedStickerEmojiChannel", R.string.NotificationActionPinnedStickerEmojiChannel, chat.title, emoji);
@@ -1938,7 +1935,7 @@
                         } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaGeoLive) {
                             msg = LocaleController.formatString("ChannelMessageLiveLocation", R.string.ChannelMessageLiveLocation, name);
                         } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
-                            if (messageObject.isSticker()) {
+                            if (messageObject.isSticker() || messageObject.isAnimatedSticker()) {
                                 String emoji = messageObject.getStickerEmoji();
                                 if (emoji != null) {
                                     msg = LocaleController.formatString("ChannelMessageStickerEmoji", R.string.ChannelMessageStickerEmoji, name, emoji);
@@ -1999,7 +1996,7 @@
                         } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaGeoLive) {
                             msg = LocaleController.formatString("NotificationMessageGroupLiveLocation", R.string.NotificationMessageGroupLiveLocation, name, chat.title);
                         } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
-                            if (messageObject.isSticker()) {
+                            if (messageObject.isSticker() || messageObject.isAnimatedSticker()) {
                                 String emoji = messageObject.getStickerEmoji();
                                 if (emoji != null) {
                                     msg = LocaleController.formatString("NotificationMessageGroupStickerEmoji", R.string.NotificationMessageGroupStickerEmoji, name, chat.title, emoji);
@@ -2041,7 +2038,7 @@
             Intent intent = new Intent(ApplicationLoader.applicationContext, NotificationRepeat.class);
             intent.putExtra("currentAccount", currentAccount);
             PendingIntent pintent = PendingIntent.getService(ApplicationLoader.applicationContext, 0, intent, 0);
-            SharedPreferences preferences = MessagesController.getNotificationsSettings(currentAccount);
+            SharedPreferences preferences = getAccountInstance().getNotificationsSettings();
             int minutes = preferences.getInt("repeat_messages", 60);
             if (minutes > 0 && personal_count > 0) {
                 alarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP, SystemClock.elapsedRealtime() + minutes * 60 * 1000, pintent);
@@ -2062,7 +2059,7 @@
         int notifyOverride = preferences.getInt("notify2_" + dialog_id, -1);
         if (notifyOverride == 3) {
             int muteUntil = preferences.getInt("notifyuntil_" + dialog_id, 0);
-            if (muteUntil >= ConnectionsManager.getInstance(currentAccount).getCurrentTime()) {
+            if (muteUntil >= getConnectionsManager().getCurrentTime()) {
                 notifyOverride = 2;
             }
         }
@@ -2098,7 +2095,7 @@
             if (WearDataLayerListenerService.isWatchConnected()) {
                 try {
                     JSONObject o = new JSONObject();
-                    o.put("id", UserConfig.getInstance(currentAccount).getClientUserId());
+                    o.put("id", getUserConfig().getClientUserId());
                     o.put("cancel_all", true);
                     WearDataLayerListenerService.sendMessageToWatch("/notify", o.toString().getBytes(), "remote_notifications");
                 } catch (JSONException ignore) {
@@ -2122,7 +2119,7 @@
         }
 
         try {
-            SharedPreferences preferences = MessagesController.getNotificationsSettings(currentAccount);
+            SharedPreferences preferences = getAccountInstance().getNotificationsSettings();
             int notifyOverride = getNotifyOverride(preferences, opened_dialog_id);
             if (notifyOverride == 2) {
                 return;
@@ -2209,7 +2206,7 @@
                 return;
             }
             try {
-                SharedPreferences preferences = MessagesController.getNotificationsSettings(currentAccount);
+                SharedPreferences preferences = getAccountInstance().getNotificationsSettings();
                 String key = "org.telegram.key" + dialogId;
                 String channelId = preferences.getString(key, null);
                 if (channelId != null) {
@@ -2229,7 +2226,7 @@
                 return;
             }
             try {
-                SharedPreferences preferences = MessagesController.getNotificationsSettings(currentAccount);
+                SharedPreferences preferences = getAccountInstance().getNotificationsSettings();
                 Map<String, ?> values = preferences.getAll();
                 SharedPreferences.Editor editor = preferences.edit();
                 for (Map.Entry<String, ?> entry : values.entrySet()) {
@@ -2250,7 +2247,7 @@
 
     @TargetApi(26)
     private String validateChannelId(long dialogId, String name, long[] vibrationPattern, int ledColor, Uri sound, int importance, long[] configVibrationPattern, Uri configSound, int configImportance) {
-        SharedPreferences preferences = MessagesController.getNotificationsSettings(currentAccount);
+        SharedPreferences preferences = getAccountInstance().getNotificationsSettings();
         String key = "org.telegram.key" + dialogId;
         String channelId = preferences.getString(key, null);
         String settings = preferences.getString(key + "_s", null);
@@ -2390,15 +2387,15 @@
     }
 
     private void showOrUpdateNotification(boolean notifyAboutLast) {
-        if (!UserConfig.getInstance(currentAccount).isClientActivated() || pushMessages.isEmpty() || !SharedConfig.showNotificationsForAllAccounts && currentAccount != UserConfig.selectedAccount) {
+        if (!getUserConfig().isClientActivated() || pushMessages.isEmpty() || !SharedConfig.showNotificationsForAllAccounts && currentAccount != UserConfig.selectedAccount) {
             dismissNotification();
             return;
         }
         try {
-            ConnectionsManager.getInstance(currentAccount).resumeNetworkMaybe();
+            getConnectionsManager().resumeNetworkMaybe();
 
             MessageObject lastMessageObject = pushMessages.get(0);
-            SharedPreferences preferences = MessagesController.getNotificationsSettings(currentAccount);
+            SharedPreferences preferences = getAccountInstance().getNotificationsSettings();
             int dismissDate = preferences.getInt("dismissDate", 0);
             if (lastMessageObject.messageOwner.date <= dismissDate) {
                 dismissNotification();
@@ -2416,14 +2413,14 @@
             int user_id = lastMessageObject.messageOwner.to_id.user_id;
             if (user_id == 0) {
                 user_id = lastMessageObject.messageOwner.from_id;
-            } else if (user_id == UserConfig.getInstance(currentAccount).getClientUserId()) {
+            } else if (user_id == getUserConfig().getClientUserId()) {
                 user_id = lastMessageObject.messageOwner.from_id;
             }
 
-            TLRPC.User user = MessagesController.getInstance(currentAccount).getUser(user_id);
+            TLRPC.User user = getMessagesController().getUser(user_id);
             TLRPC.Chat chat = null;
             if (chat_id != 0) {
-                chat = MessagesController.getInstance(currentAccount).getChat(chat_id);
+                chat = getMessagesController().getChat(chat_id);
                 isChannel = ChatObject.isChannel(chat) && !chat.megagroup;
             }
             TLRPC.FileLocation photoPath = null;
@@ -2659,9 +2656,9 @@
             String detailText;
             if (UserConfig.getActivatedAccountsCount() > 1) {
                 if (pushDialogs.size() == 1) {
-                    detailText = UserObject.getFirstName(UserConfig.getInstance(currentAccount).getCurrentUser());
+                    detailText = UserObject.getFirstName(getUserConfig().getCurrentUser());
                 } else {
-                    detailText = UserObject.getFirstName(UserConfig.getInstance(currentAccount).getCurrentUser()) + "?";
+                    detailText = UserObject.getFirstName(getUserConfig().getCurrentUser()) + "?";
                 }
             } else {
                 detailText = "";
@@ -3004,7 +3001,7 @@
             if (lowerId != 0) {
                 canReply = lowerId != 777000;
                 if (lowerId > 0) {
-                    user = MessagesController.getInstance(currentAccount).getUser(lowerId);
+                    user = getMessagesController().getUser(lowerId);
                     if (user == null) {
                         if (lastMessageObject.isFcmMessage()) {
                             name = lastMessageObject.localName;
@@ -3021,7 +3018,7 @@
                         }
                     }
                 } else {
-                    chat = MessagesController.getInstance(currentAccount).getChat(-lowerId);
+                    chat = getMessagesController().getChat(-lowerId);
                     if (chat == null) {
                         if (lastMessageObject.isFcmMessage()) {
                             isSupergroup = lastMessageObject.isMegagroup();
@@ -3045,14 +3042,14 @@
             } else {
                 canReply = false;
                 if (dialog_id != globalSecretChatId) {
-                    TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance(currentAccount).getEncryptedChat(highId);
+                    TLRPC.EncryptedChat encryptedChat = getMessagesController().getEncryptedChat(highId);
                     if (encryptedChat == null) {
                         if (BuildVars.LOGS_ENABLED) {
                             FileLog.w("not found secret chat to show dialog notification " + highId);
                         }
                         continue;
                     }
-                    user = MessagesController.getInstance(currentAccount).getUser(encryptedChat.user_id);
+                    user = getMessagesController().getUser(encryptedChat.user_id);
                     if (user == null) {
                         if (BuildVars.LOGS_ENABLED) {
                             FileLog.w("not found secret chat user to show dialog notification " + encryptedChat.user_id);
@@ -3073,10 +3070,11 @@
 
             if (photoPath != null) {
                 avatalFile = FileLoader.getPathToAttach(photoPath, true);
+                if (Build.VERSION.SDK_INT < 28) {
                 BitmapDrawable img = ImageLoader.getInstance().getImageFromMemory(photoPath, null, "50_50");
                 if (img != null) {
                     avatarBitmap = img.getBitmap();
-                } else if (Build.VERSION.SDK_INT < 28) {
+                    } else {
                     try {
                         if (avatalFile.exists()) {
                             float scaleFactor = 160.0f / AndroidUtilities.dp(50);
@@ -3089,6 +3087,7 @@
                     }
                 }
             }
+            }
 
             NotificationCompat.Action wearReplyAction = null;
 
@@ -3174,17 +3173,16 @@
                 if (person == null) {
                     Person.Builder personBuilder = new Person.Builder().setName(senderName[0] == null ? "" : senderName[0]);
                     if (preview[0] && lowerId != 0 && Build.VERSION.SDK_INT >= 28) {
-
                         File avatar = null;
                         if (lowerId > 0 || isChannel) {
                             avatar = avatalFile;
                         } else if (lowerId < 0) {
                             int fromId = messageObject.getFromId();
-                            TLRPC.User sender = MessagesController.getInstance(currentAccount).getUser(fromId);
+                            TLRPC.User sender = getMessagesController().getUser(fromId);
                             if (sender == null) {
-                                sender = MessagesStorage.getInstance(currentAccount).getUserSync(fromId);
+                                sender = getMessagesStorage().getUserSync(fromId);
                                 if (sender != null) {
-                                    MessagesController.getInstance(currentAccount).putUser(sender, true);
+                                    getMessagesController().putUser(sender, true);
                                 }
                             }
                             if (sender != null && sender.photo != null && sender.photo.photo_small != null && sender.photo.photo_small.volume_id != 0 && sender.photo.photo_small.local_id != 0) {
@@ -3199,14 +3197,14 @@
 
                 if (lowerId != 0) {
                     if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P && !((ActivityManager) ApplicationLoader.applicationContext.getSystemService(Context.ACTIVITY_SERVICE)).isLowRamDevice()) {
-                        if (messageObject.type == 1 || messageObject.isSticker()) {
+                        if (!messageObject.isSecretMedia() && (messageObject.type == 1 || messageObject.isSticker())) {
                             File attach = FileLoader.getPathToMessage(messageObject.messageOwner);
                             NotificationCompat.MessagingStyle.Message msg = new NotificationCompat.MessagingStyle.Message(message, ((long) messageObject.messageOwner.date) * 1000L, person);
                             String mimeType = messageObject.isSticker() ? "image/webp" : "image/jpeg";
                             final Uri uri;
                             if (attach.exists()) {
                                 uri = FileProvider.getUriForFile(ApplicationLoader.applicationContext, BuildConfig.APPLICATION_ID + ".provider", attach);
-                            } else if (FileLoader.getInstance(currentAccount).isLoadingFile(attach.getName())) {
+                            } else if (getFileLoader().isLoadingFile(attach.getName())) {
                                 Uri.Builder _uri = new Uri.Builder()
                                         .scheme("content")
                                         .authority(NotificationImageProvider.AUTHORITY)
@@ -3266,7 +3264,7 @@
                         jmsg.put("text", message);
                         jmsg.put("date", messageObject.messageOwner.date);
                         if (messageObject.isFromUser() && lowerId < 0) {
-                            TLRPC.User sender = MessagesController.getInstance(currentAccount).getUser(messageObject.getFromId());
+                            TLRPC.User sender = getMessagesController().getUser(messageObject.getFromId());
                             if (sender != null) {
                                 jmsg.put("fname", sender.first_name);
                                 jmsg.put("lname", sender.last_name);
@@ -3334,7 +3332,7 @@
                 summaryExtender.setDismissalId("summary_" + dismissalID);
                 notificationBuilder.extend(summaryExtender);
             }
-            wearableExtender.setBridgeTag("tgaccount" + UserConfig.getInstance(currentAccount).getClientUserId());
+            wearableExtender.setBridgeTag("tgaccount" + getUserConfig().getClientUserId());
 
             long date = ((long) messageObjects.get(0).messageOwner.date) * 1000;
 
@@ -3370,7 +3368,7 @@
             if (lowerId == 0) {
                 builder.setLocalOnly(true);
             }
-            if (avatarBitmap != null && Build.VERSION.SDK_INT < 28) {
+            if (avatarBitmap != null) {
                 builder.setLargeIcon(avatarBitmap);
             }
 
@@ -3459,7 +3457,7 @@
         if (serializedNotifications != null) {
             try {
                 JSONObject s = new JSONObject();
-                s.put("id", UserConfig.getInstance(currentAccount).getClientUserId());
+                s.put("id", getUserConfig().getClientUserId());
                 s.put("n", serializedNotifications);
                 WearDataLayerListenerService.sendMessageToWatch("/notify", s.toString().getBytes(), "remote_notifications");
             } catch (Exception ignore) {
@@ -3545,17 +3543,17 @@
     public static final int SETTING_MUTE_UNMUTE = 4;
 
     public void setDialogNotificationsSettings(long dialog_id, int setting) {
-        SharedPreferences preferences = MessagesController.getNotificationsSettings(currentAccount);
+        SharedPreferences preferences = getAccountInstance().getNotificationsSettings();
         SharedPreferences.Editor editor = preferences.edit();
         TLRPC.Dialog dialog = MessagesController.getInstance(UserConfig.selectedAccount).dialogs_dict.get(dialog_id);
         if (setting == SETTING_MUTE_UNMUTE) {
-            boolean defaultEnabled = NotificationsController.getInstance(currentAccount).isGlobalNotificationsEnabled(dialog_id);
+            boolean defaultEnabled = isGlobalNotificationsEnabled(dialog_id);
             if (defaultEnabled) {
                 editor.remove("notify2_" + dialog_id);
             } else {
                 editor.putInt("notify2_" + dialog_id, 0);
             }
-            MessagesStorage.getInstance(currentAccount).setDialogFlags(dialog_id, 0);
+            getMessagesStorage().setDialogFlags(dialog_id, 0);
             if (dialog != null) {
                 dialog.notify_settings = new TLRPC.TL_peerNotifySettings();
             }
@@ -3591,16 +3589,22 @@
     }
 
     public void updateServerNotificationsSettings(long dialog_id) {
-        NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.notificationsSettingsUpdated);
+        updateServerNotificationsSettings(dialog_id, true);
+    }
+
+    public void updateServerNotificationsSettings(long dialog_id, boolean post) {
+        if (post) {
+            getNotificationCenter().postNotificationName(NotificationCenter.notificationsSettingsUpdated);
+        }
         if ((int) dialog_id == 0) {
             return;
         }
-        SharedPreferences preferences = MessagesController.getNotificationsSettings(currentAccount);
+        SharedPreferences preferences = getAccountInstance().getNotificationsSettings();
         TLRPC.TL_account_updateNotifySettings req = new TLRPC.TL_account_updateNotifySettings();
         req.settings = new TLRPC.TL_inputPeerNotifySettings();
 
         req.settings.flags |= 1;
-        req.settings.show_previews = preferences.getBoolean("preview_" + dialog_id, true);
+        req.settings.show_previews = preferences.getBoolean("content_preview_" + dialog_id, true);
 
         req.settings.flags |= 2;
         req.settings.silent = preferences.getBoolean("silent_" + dialog_id, false);
@@ -3616,8 +3620,8 @@
         }
 
         req.peer = new TLRPC.TL_inputNotifyPeer();
-        ((TLRPC.TL_inputNotifyPeer) req.peer).peer = MessagesController.getInstance(currentAccount).getInputPeer((int) dialog_id);
-        ConnectionsManager.getInstance(currentAccount).sendRequest(req, (response, error) -> {
+        ((TLRPC.TL_inputNotifyPeer) req.peer).peer = getMessagesController().getInputPeer((int) dialog_id);
+        getConnectionsManager().sendRequest(req, (response, error) -> {
 
         });
     }
@@ -3627,7 +3631,7 @@
     public final static int TYPE_CHANNEL = 2;
 
     public void updateServerNotificationsSettings(int type) {
-        SharedPreferences preferences = MessagesController.getNotificationsSettings(currentAccount);
+        SharedPreferences preferences = getAccountInstance().getNotificationsSettings();
         TLRPC.TL_account_updateNotifySettings req = new TLRPC.TL_account_updateNotifySettings();
         req.settings = new TLRPC.TL_inputPeerNotifySettings();
         req.settings.flags = 5;
@@ -3644,7 +3648,7 @@
             req.settings.mute_until = preferences.getInt("EnableChannel2", 0);
             req.settings.show_previews = preferences.getBoolean("EnablePreviewChannel", true);
         }
-        ConnectionsManager.getInstance(currentAccount).sendRequest(req, (response, error) -> {
+        getConnectionsManager().sendRequest(req, (response, error) -> {
 
         });
     }
@@ -3653,7 +3657,7 @@
         int type;
         int lower_id = (int) did;
         if (lower_id < 0) {
-            TLRPC.Chat chat = MessagesController.getInstance(currentAccount).getChat(-lower_id);
+            TLRPC.Chat chat = getMessagesController().getChat(-lower_id);
             if (ChatObject.isChannel(chat) && !chat.megagroup) {
                 type = TYPE_CHANNEL;
             } else {
@@ -3666,12 +3670,12 @@
     }
 
     public boolean isGlobalNotificationsEnabled(int type) {
-        return MessagesController.getNotificationsSettings(currentAccount).getInt(getGlobalNotificationsKey(type), 0) < ConnectionsManager.getInstance(currentAccount).getCurrentTime();
+        return getAccountInstance().getNotificationsSettings().getInt(getGlobalNotificationsKey(type), 0) < getConnectionsManager().getCurrentTime();
     }
 
     public void setGlobalNotificationsEnabled(int type, int time) {
-        MessagesController.getNotificationsSettings(currentAccount).edit().putInt(getGlobalNotificationsKey(type), time).commit();
-        NotificationsController.getInstance(currentAccount).updateServerNotificationsSettings(type);
+        getAccountInstance().getNotificationsSettings().edit().putInt(getGlobalNotificationsKey(type), time).commit();
+        updateServerNotificationsSettings(type);
     }
 
     public String getGlobalNotificationsKey(int type) {
