testdiff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/EditTextCaption.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/EditTextCaption.java
index cb63b1a..e4374a2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/EditTextCaption.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/EditTextCaption.java
@@ -10,10 +10,8 @@
 
 import android.annotation.SuppressLint;
 import android.content.Context;
-import android.content.DialogInterface;
 import android.graphics.Canvas;
 import android.graphics.Paint;
-import android.graphics.Typeface;
 import android.os.Build;
 import android.text.Editable;
 import android.text.Layout;
@@ -35,6 +33,7 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MediaDataController;
 import org.telegram.messenger.R;
 import org.telegram.ui.ActionBar.AlertDialog;
 import org.telegram.ui.ActionBar.Theme;
@@ -52,6 +51,7 @@
     private EditTextCaptionDelegate delegate;
     private int selectionStart = -1;
     private int selectionEnd = -1;
+    private boolean allowTextEntitiesIntersection;
 
     public interface EditTextCaptionDelegate {
         void onSpansChanged();
@@ -62,7 +62,7 @@
     }
 
     public void setCaption(String value) {
-        if ((caption == null || caption.length() == 0) && (value == null || value.length() == 0) || caption != null && value != null && caption.equals(value)) {
+        if ((caption == null || caption.length() == 0) && (value == null || value.length() == 0) || caption != null && caption.equals(value)) {
             return;
         }
         caption = value;
@@ -76,16 +76,38 @@
         delegate = editTextCaptionDelegate;
     }
 
+    public void setAllowTextEntitiesIntersection(boolean value) {
+        allowTextEntitiesIntersection = value;
+    }
+
     public void makeSelectedBold() {
-        applyTextStyleToSelection(new TypefaceSpan(AndroidUtilities.getTypeface("fonts/rmedium.ttf")));
+        TextStyleSpan.TextStyleRun run = new TextStyleSpan.TextStyleRun();
+        run.flags |= TextStyleSpan.FLAG_STYLE_BOLD;
+        applyTextStyleToSelection(new TextStyleSpan(run));
     }
 
     public void makeSelectedItalic() {
-        applyTextStyleToSelection(new TypefaceSpan(AndroidUtilities.getTypeface("fonts/ritalic.ttf")));
+        TextStyleSpan.TextStyleRun run = new TextStyleSpan.TextStyleRun();
+        run.flags |= TextStyleSpan.FLAG_STYLE_ITALIC;
+        applyTextStyleToSelection(new TextStyleSpan(run));
     }
 
     public void makeSelectedMono() {
-        applyTextStyleToSelection(new TypefaceSpan(Typeface.MONOSPACE));
+        TextStyleSpan.TextStyleRun run = new TextStyleSpan.TextStyleRun();
+        run.flags |= TextStyleSpan.FLAG_STYLE_MONO;
+        applyTextStyleToSelection(new TextStyleSpan(run));
+    }
+
+    public void makeSelectedStrike() {
+        TextStyleSpan.TextStyleRun run = new TextStyleSpan.TextStyleRun();
+        run.flags |= TextStyleSpan.FLAG_STYLE_STRIKE;
+        applyTextStyleToSelection(new TextStyleSpan(run));
+    }
+
+    public void makeSelectedUnderline() {
+        TextStyleSpan.TextStyleRun run = new TextStyleSpan.TextStyleRun();
+        run.flags |= TextStyleSpan.FLAG_STYLE_UNDERLINE;
+        applyTextStyleToSelection(new TextStyleSpan(run));
     }
 
     public void makeSelectedUrl() {
@@ -126,7 +148,7 @@
 
         builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> {
             Editable editable = getText();
-            CharacterStyle spans[] = editable.getSpans(start, end, CharacterStyle.class);
+            CharacterStyle[] spans = editable.getSpans(start, end, CharacterStyle.class);
             if (spans != null && spans.length > 0) {
                 for (int a = 0; a < spans.length; a++) {
                     CharacterStyle oldSpan = spans[a];
@@ -143,7 +165,7 @@
             }
             try {
                 editable.setSpan(new URLSpanReplacement(editText.getText().toString()), start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
-            } catch (Exception ingore) {
+            } catch (Exception ignore) {
 
             }
             if (delegate != null) {
@@ -178,7 +200,7 @@
         selectionEnd = end;
     }
 
-    private void applyTextStyleToSelection(TypefaceSpan span) {
+    private void applyTextStyleToSelection(TextStyleSpan span) {
         int start;
         int end;
         if (selectionStart >= 0 && selectionEnd >= 0) {
@@ -189,26 +211,7 @@
             start = getSelectionStart();
             end = getSelectionEnd();
         }
-        Editable editable = getText();
-
-        CharacterStyle spans[] = editable.getSpans(start, end, CharacterStyle.class);
-        if (spans != null && spans.length > 0) {
-            for (int a = 0; a < spans.length; a++) {
-                CharacterStyle oldSpan = spans[a];
-                int spanStart = editable.getSpanStart(oldSpan);
-                int spanEnd = editable.getSpanEnd(oldSpan);
-                editable.removeSpan(oldSpan);
-                if (spanStart < start) {
-                    editable.setSpan(oldSpan, spanStart, start, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
-                }
-                if (spanEnd > end) {
-                    editable.setSpan(oldSpan, end, spanEnd, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
-                }
-            }
-        }
-        if (span != null) {
-            editable.setSpan(span, start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
-        }
+        MediaDataController.addStyleToText(span, start, end, getText(), allowTextEntitiesIntersection);
         if (delegate != null) {
             delegate.onSpansChanged();
         }
@@ -257,6 +260,14 @@
                     makeSelectedUrl();
                     mode.finish();
                     return true;
+                } else if (item.getItemId() == R.id.menu_strike) {
+                    makeSelectedStrike();
+                    mode.finish();
+                    return true;
+                } else if (item.getItemId() == R.id.menu_underline) {
+                    makeSelectedUnderline();
+                    mode.finish();
+                    return true;
                 }
                 try {
                     return callback.onActionItemClicked(mode, item);
