testdiff --git a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
index de1f2b3..d5a27fc 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
@@ -26,9 +26,11 @@
 import android.graphics.PorterDuff;
 import android.graphics.PorterDuffColorFilter;
 import android.graphics.drawable.Drawable;
+import android.location.LocationManager;
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
+import android.provider.Settings;
 import android.text.Editable;
 import android.text.InputType;
 import android.text.TextUtils;
@@ -48,6 +50,7 @@
 import android.widget.Toast;
 
 import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.ChatObject;
 import org.telegram.messenger.LocaleController;
@@ -107,6 +110,7 @@
     private boolean scrollUpdated;
     private boolean floatingHidden;
 
+    private boolean hasGps;
     private boolean searchWas;
     private boolean searching;
     private boolean onlyUsers;
@@ -118,6 +122,7 @@
     private boolean allowBots = true;
     private boolean needForwardCount = true;
     private boolean needFinishFragment = true;
+    private boolean resetDelegate = true;
     private int channelId;
     private int chatId;
     private String selectAlertString = null;
@@ -128,6 +133,8 @@
     private AlertDialog permissionDialog;
     private boolean askAboutContacts = true;
 
+    private boolean disableSections;
+
     private boolean checkPermission = true;
 
     private final static int search_button = 0;
@@ -150,7 +157,7 @@
         NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.closeChats);
         checkPermission = UserConfig.getInstance(currentAccount).syncContacts;
         if (arguments != null) {
-            onlyUsers = getArguments().getBoolean("onlyUsers", false);
+            onlyUsers = arguments.getBoolean("onlyUsers", false);
             destroyAfterSelect = arguments.getBoolean("destroyAfterSelect", false);
             returnAsResult = arguments.getBoolean("returnAsResult", false);
             createSecretChat = arguments.getBoolean("createSecretChat", false);
@@ -161,6 +168,8 @@
             channelId = arguments.getInt("channelId", 0);
             needFinishFragment = arguments.getBoolean("needFinishFragment", true);
             chatId = arguments.getInt("chat_id", 0);
+            disableSections = arguments.getBoolean("disableSections", false);
+            resetDelegate = arguments.getBoolean("resetDelegate", false);
         } else {
             needPhonebook = true;
         }
@@ -285,7 +294,7 @@
             sortItem.setContentDescription(LocaleController.getString("AccDescrContactSorting", R.string.AccDescrContactSorting));
         }
 
-        searchListViewAdapter = new SearchAdapter(context, ignoreUsers, allowUsernameSearch, false, false, allowBots, 0);
+        searchListViewAdapter = new SearchAdapter(context, ignoreUsers, allowUsernameSearch, false, false, allowBots, true, 0);
         int inviteViaLink;
         if (chatId != 0) {
             TLRPC.Chat chat = MessagesController.getInstance(currentAccount).getChat(chatId);
@@ -296,7 +305,12 @@
         } else {
             inviteViaLink = 0;
         }
-        listViewAdapter = new ContactsAdapter(context, onlyUsers ? 1 : 0, needPhonebook, ignoreUsers, inviteViaLink) {
+        try {
+            hasGps = ApplicationLoader.applicationContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_LOCATION_GPS);
+        } catch (Throwable e) {
+            hasGps = false;
+        }
+        listViewAdapter = new ContactsAdapter(context, onlyUsers ? 1 : 0, needPhonebook, ignoreUsers, inviteViaLink, hasGps) {
             @Override
             public void notifyDataSetChanged() {
                 super.notifyDataSetChanged();
@@ -313,6 +327,7 @@
             }
         };
         listViewAdapter.setSortType(sortItem != null ? (sortByName ? 1 : 2) : 0);
+        listViewAdapter.setDisableSections(disableSections);
 
         fragmentView = new FrameLayout(context) {
             @Override
@@ -335,7 +350,15 @@
         emptyView.showTextView();
         frameLayout.addView(emptyView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
 
-        listView = new RecyclerListView(context);
+        listView = new RecyclerListView(context) {
+            @Override
+            public void setPadding(int left, int top, int right, int bottom) {
+                super.setPadding(left, top, right, bottom);
+                if (emptyView != null) {
+                    emptyView.setPadding(left, top, right, bottom);
+                }
+            }
+        };
         listView.setSectionsType(1);
         listView.setVerticalScrollBarEnabled(false);
         listView.setFastScrollEnabled();
@@ -345,7 +368,9 @@
 
         listView.setOnItemClickListener((view, position) -> {
             if (searching && searchWas) {
-                TLRPC.User user = (TLRPC.User) searchListViewAdapter.getItem(position);
+                Object object = searchListViewAdapter.getItem(position);
+                if (object instanceof TLRPC.User) {
+                    TLRPC.User user = (TLRPC.User) object;
                 if (user == null) {
                     return;
                 }
@@ -375,6 +400,14 @@
                         }
                     }
                 }
+                } else if (object instanceof String) {
+                    String str = (String) object;
+                    if (!str.equals("section")) {
+                        NewContactActivity activity = new NewContactActivity();
+                        activity.setInitialPhoneNumber(str);
+                        presentFragment(activity);
+                    }
+                }
             } else {
                 int section = listViewAdapter.getSectionForPosition(position);
                 int row = listViewAdapter.getPositionInSectionForPosition(position);
@@ -385,6 +418,33 @@
                     if (needPhonebook) {
                         if (row == 0) {
                             presentFragment(new InviteContactsActivity());
+                        } else if (row == 1 && hasGps) {
+                            if (Build.VERSION.SDK_INT >= 23) {
+                                Activity activity = getParentActivity();
+                                if (activity != null) {
+                                    if (activity.checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
+                                        presentFragment(new ActionIntroActivity(ActionIntroActivity.ACTION_TYPE_NEARBY_LOCATION_ACCESS));
+                                        return;
+                                    }
+                                }
+                            }
+                            boolean enabled = true;
+                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
+                                LocationManager lm = (LocationManager) ApplicationLoader.applicationContext.getSystemService(Context.LOCATION_SERVICE);
+                                enabled = lm.isLocationEnabled();
+                            } else if (Build.VERSION.SDK_INT >= 19) {
+                                try {
+                                    int mode = Settings.Secure.getInt(ApplicationLoader.applicationContext.getContentResolver(), Settings.Secure.LOCATION_MODE, Settings.Secure.LOCATION_MODE_OFF);
+                                    enabled = (mode != Settings.Secure.LOCATION_MODE_OFF);
+                                } catch (Throwable e) {
+                                    FileLog.e(e);
+                                }
+                            }
+                            if (!enabled) {
+                                presentFragment(new ActionIntroActivity(ActionIntroActivity.ACTION_TYPE_NEARBY_LOCATION_ENABLED));
+                                return;
+                            }
+                            presentFragment(new PeopleNearbyActivity());
                         }
                     } else if (inviteViaLink != 0) {
                         if (row == 0) {
@@ -408,7 +468,7 @@
                                 args.putInt("step", 0);
                                 presentFragment(new ChannelCreateActivity(args));
                             } else {
-                                presentFragment(new ChannelIntroActivity());
+                                presentFragment(new ActionIntroActivity(ActionIntroActivity.ACTION_TYPE_CHANNEL_CREATE));
                                 preferences.edit().putBoolean("channel_intro", true).commit();
                             }
                         }
@@ -511,7 +571,6 @@
         });
 
         if (!createSecretChat && !returnAsResult) {
-
             floatingButtonContainer = new FrameLayout(context);
             frameLayout.addView(floatingButtonContainer, LayoutHelper.createFrame((Build.VERSION.SDK_INT >= 21 ? 56 : 60) + 20, (Build.VERSION.SDK_INT >= 21 ? 56 : 60) + 14, (LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.BOTTOM, LocaleController.isRTL ? 4 : 0, 0, LocaleController.isRTL ? 0 : 4, 0));
             floatingButtonContainer.setOnClickListener(v -> presentFragment(new NewContactActivity()));
@@ -655,8 +714,10 @@
         } else {
             if (delegate != null) {
                 delegate.didSelectContact(user, param, this);
+                if (resetDelegate) {
                 delegate = null;
             }
+            }
             if (needFinishFragment) {
                 finishFragment();
             }
@@ -691,6 +752,10 @@
         }
     }
 
+    protected RecyclerListView getListView() {
+        return listView;
+    }
+
     @Override
     public void onConfigurationChanged(Configuration newConfig) {
         super.onConfigurationChanged(newConfig);
@@ -880,7 +945,8 @@
                 new ThemeDescription(null, 0, null, null, null, cellDelegate, Theme.key_avatar_backgroundBlue),
                 new ThemeDescription(null, 0, null, null, null, cellDelegate, Theme.key_avatar_backgroundPink),
 
-                new ThemeDescription(listView, 0, new Class[]{TextCell.class}, new String[]{"textView"}, null, null, null, Theme.key_windowBackgroundWhiteBlackText),
+                new ThemeDescription(listView, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, new Class[]{TextCell.class}, new String[]{"textView"}, null, null, null, Theme.key_windowBackgroundWhiteBlackText),
+                new ThemeDescription(listView, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, new Class[]{TextCell.class}, new String[]{"textView"}, null, null, null, Theme.key_windowBackgroundWhiteBlueText2),
                 new ThemeDescription(listView, 0, new Class[]{TextCell.class}, new String[]{"imageView"}, null, null, null, Theme.key_windowBackgroundWhiteGrayIcon),
 
                 new ThemeDescription(floatingButton, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chats_actionIcon),
