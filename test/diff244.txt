testdiff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
index 1e884ff..174a646 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
@@ -26,7 +26,7 @@
 import android.graphics.drawable.Drawable;
 import android.graphics.drawable.ShapeDrawable;
 import android.os.Build;
-import androidx.annotation.NonNull;
+
 import androidx.recyclerview.widget.GridLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
 import androidx.viewpager.widget.PagerAdapter;
@@ -59,7 +59,7 @@
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ChatObject;
-import org.telegram.messenger.DataQuery;
+import org.telegram.messenger.MediaDataController;
 import org.telegram.messenger.Emoji;
 import org.telegram.messenger.EmojiData;
 import org.telegram.messenger.FileLoader;
@@ -314,7 +314,7 @@
 
         @Override
         public void gifAddedOrDeleted() {
-            recentGifs = DataQuery.getInstance(currentAccount).getRecentGifs();
+            recentGifs = MediaDataController.getInstance(currentAccount).getRecentGifs();
             if (gifAdapter != null) {
                 gifAdapter.notifyDataSetChanged();
             }
@@ -1077,7 +1077,7 @@
                 public void onFocusChange(View v, boolean hasFocus) {
                     if (hasFocus) {
                         lastSearchKeyboardLanguage = AndroidUtilities.getCurrentKeyboardLanguage();
-                        DataQuery.getInstance(currentAccount).fetchNewEmojiKeywords(lastSearchKeyboardLanguage);
+                        MediaDataController.getInstance(currentAccount).fetchNewEmojiKeywords(lastSearchKeyboardLanguage);
                     }
                 }
             });
@@ -1270,7 +1270,7 @@
                             return;
                         }
                         delegate.onGifSelected(gifSearchAdapter.results.get(position), gifSearchAdapter.bot);
-                        recentGifs = DataQuery.getInstance(currentAccount).getRecentGifs();
+                        recentGifs = MediaDataController.getInstance(currentAccount).getRecentGifs();
                         if (gifAdapter != null) {
                             gifAdapter.notifyDataSetChanged();
                         }
@@ -1286,8 +1286,8 @@
 
             stickersContainer = new FrameLayout(context);
 
-            DataQuery.getInstance(currentAccount).checkStickers(DataQuery.TYPE_IMAGE);
-            DataQuery.getInstance(currentAccount).checkFeaturedStickers();
+            MediaDataController.getInstance(currentAccount).checkStickers(MediaDataController.TYPE_IMAGE);
+            MediaDataController.getInstance(currentAccount).checkFeaturedStickers();
             stickersGridView = new RecyclerListView(context) {
 
                 boolean ignoreLayout;
@@ -1746,6 +1746,7 @@
                         field.searchEditText.setText(currentFieldText);
                         field.searchEditText.setSelection(currentFieldText.length());
                     }
+                    startStopVisibleGifs((position == 0 && positionOffset > 0) || position == 1);
                 }
 
                 @Override
@@ -2122,7 +2123,7 @@
 
         int currentItem = pager.getCurrentItem();
         if (currentItem == 2 && scrollToSet != -1) {
-            TLRPC.TL_messages_stickerSet set = DataQuery.getInstance(currentAccount).getStickerSetById(scrollToSet);
+            TLRPC.TL_messages_stickerSet set = MediaDataController.getInstance(currentAccount).getStickerSetById(scrollToSet);
             if (set != null) {
                 int pos = stickersGridAdapter.getPositionForPack(set);
                 if (pos >= 0) {
@@ -2601,7 +2602,7 @@
         int lastPosition = stickersTab.getCurrentPosition();
         stickersTab.removeTabs();
 
-        ArrayList<Long> unread = DataQuery.getInstance(currentAccount).getUnreadStickerSets();
+        ArrayList<Long> unread = MediaDataController.getInstance(currentAccount).getUnreadStickerSets();
         boolean hasStickers = false;
 
         if (trendingGridAdapter != null && trendingGridAdapter.getItemCount() != 0 && !unread.isEmpty()) {
@@ -2629,7 +2630,7 @@
         groupStickerSet = null;
         groupStickerPackPosition = -1;
         groupStickerPackNum = -10;
-        ArrayList<TLRPC.TL_messages_stickerSet> packs = DataQuery.getInstance(currentAccount).getStickerSets(DataQuery.TYPE_IMAGE);
+        ArrayList<TLRPC.TL_messages_stickerSet> packs = MediaDataController.getInstance(currentAccount).getStickerSets(MediaDataController.TYPE_IMAGE);
         for (int a = 0; a < packs.size(); a++) {
             TLRPC.TL_messages_stickerSet pack = packs.get(a);
             if (pack.set.archived || pack.documents == null || pack.documents.isEmpty()) {
@@ -2647,7 +2648,7 @@
                 groupStickersHidden = hiddenStickerSetId == info.stickerset.id;
             }
             if (info.stickerset != null) {
-                TLRPC.TL_messages_stickerSet pack = DataQuery.getInstance(currentAccount).getGroupStickerSetById(info.stickerset);
+                TLRPC.TL_messages_stickerSet pack = MediaDataController.getInstance(currentAccount).getGroupStickerSetById(info.stickerset);
                 if (pack != null && pack.documents != null && !pack.documents.isEmpty() && pack.set != null) {
                     TLRPC.TL_messages_stickerSet set = new TLRPC.TL_messages_stickerSet();
                     set.documents = pack.documents;
@@ -2705,7 +2706,7 @@
             stickersTab.onPageScrolled(lastPosition, lastPosition);
         }
         checkPanels();
-        if ((!hasStickers || trendingTabNum == 0 && DataQuery.getInstance(currentAccount).areAllTrendingStickerSetsUnread()) && trendingTabNum >= 0) {
+        if ((!hasStickers || trendingTabNum == 0 && MediaDataController.getInstance(currentAccount).areAllTrendingStickerSetsUnread()) && trendingTabNum >= 0) {
             if (scrolledToTrending == 0) {
                 showTrendingTab(true);
                 scrolledToTrending = hasStickers ? 2 : 1;
@@ -2748,9 +2749,9 @@
         if (document == null) {
             return;
         }
-        DataQuery.getInstance(currentAccount).addRecentSticker(DataQuery.TYPE_IMAGE, null, document, (int) (System.currentTimeMillis() / 1000), false);
+        MediaDataController.getInstance(currentAccount).addRecentSticker(MediaDataController.TYPE_IMAGE, null, document, (int) (System.currentTimeMillis() / 1000), false);
         boolean wasEmpty = recentStickers.isEmpty();
-        recentStickers = DataQuery.getInstance(currentAccount).getRecentStickers(DataQuery.TYPE_IMAGE);
+        recentStickers = MediaDataController.getInstance(currentAccount).getRecentStickers(MediaDataController.TYPE_IMAGE);
         if (stickersGridAdapter != null) {
             stickersGridAdapter.notifyDataSetChanged();
         }
@@ -2764,7 +2765,7 @@
             return;
         }
         boolean wasEmpty = recentGifs.isEmpty();
-        recentGifs = DataQuery.getInstance(currentAccount).getRecentGifs();
+        recentGifs = MediaDataController.getInstance(currentAccount).getRecentGifs();
         if (gifAdapter != null) {
             gifAdapter.notifyDataSetChanged();
         }
@@ -2991,7 +2992,7 @@
                 pager.setCurrentItem(2, false);
             }
             if (stickersTab != null) {
-                if (trendingTabNum == 0 && DataQuery.getInstance(currentAccount).areAllTrendingStickerSetsUnread()) {
+                if (trendingTabNum == 0 && MediaDataController.getInstance(currentAccount).areAllTrendingStickerSetsUnread()) {
                     showTrendingTab(true);
                 } else if (recentTabBum >= 0) {
                     stickersTab.selectTab(recentTabBum);
@@ -3048,9 +3049,9 @@
             }
             checkDocuments(true);
             checkDocuments(false);
-            DataQuery.getInstance(currentAccount).loadRecents(DataQuery.TYPE_IMAGE, true, true, false);
-            DataQuery.getInstance(currentAccount).loadRecents(DataQuery.TYPE_IMAGE, false, true, false);
-            DataQuery.getInstance(currentAccount).loadRecents(DataQuery.TYPE_FAVE, false, true, false);
+            MediaDataController.getInstance(currentAccount).loadRecents(MediaDataController.TYPE_IMAGE, true, true, false);
+            MediaDataController.getInstance(currentAccount).loadRecents(MediaDataController.TYPE_IMAGE, false, true, false);
+            MediaDataController.getInstance(currentAccount).loadRecents(MediaDataController.TYPE_FAVE, false, true, false);
         }
     }
 
@@ -3079,15 +3080,15 @@
 
     private void checkDocuments(boolean isGif) {
         if (isGif) {
-            recentGifs = DataQuery.getInstance(currentAccount).getRecentGifs();
+            recentGifs = MediaDataController.getInstance(currentAccount).getRecentGifs();
             if (gifAdapter != null) {
                 gifAdapter.notifyDataSetChanged();
             }
         } else {
             int previousCount = recentStickers.size();
             int previousCount2 = favouriteStickers.size();
-            recentStickers = DataQuery.getInstance(currentAccount).getRecentStickers(DataQuery.TYPE_IMAGE);
-            favouriteStickers = DataQuery.getInstance(currentAccount).getRecentStickers(DataQuery.TYPE_FAVE);
+            recentStickers = MediaDataController.getInstance(currentAccount).getRecentStickers(MediaDataController.TYPE_IMAGE);
+            favouriteStickers = MediaDataController.getInstance(currentAccount).getRecentStickers(MediaDataController.TYPE_FAVE);
             for (int a = 0; a < favouriteStickers.size(); a++) {
                 TLRPC.Document favSticker = favouriteStickers.get(a);
                 for (int b = 0; b < recentStickers.size(); b++) {
@@ -3211,12 +3212,12 @@
                             continue;
                         }
                         FeaturedStickerSetInfoCell cell = (FeaturedStickerSetInfoCell) child;
-                        ArrayList<Long> unreadStickers = DataQuery.getInstance(currentAccount).getUnreadStickerSets();
+                        ArrayList<Long> unreadStickers = MediaDataController.getInstance(currentAccount).getUnreadStickerSets();
                         TLRPC.StickerSetCovered stickerSetCovered = cell.getStickerSet();
                         boolean unread = unreadStickers != null && unreadStickers.contains(stickerSetCovered.set.id);
                         cell.setStickerSet(stickerSetCovered, unread);
                         if (unread) {
-                            DataQuery.getInstance(currentAccount).markFaturedStickersByIdAsRead(stickerSetCovered.set.id);
+                            MediaDataController.getInstance(currentAccount).markFaturedStickersByIdAsRead(stickerSetCovered.set.id);
                         }
                         boolean installing = installingStickerSets.indexOfKey(stickerSetCovered.set.id) >= 0;
                         boolean removing = removingStickerSets.indexOfKey(stickerSetCovered.set.id) >= 0;
@@ -3246,7 +3247,7 @@
     @Override
     public void didReceivedNotification(int id, int account, Object... args) {
         if (id == NotificationCenter.stickersDidLoad) {
-            if ((Integer) args[0] == DataQuery.TYPE_IMAGE) {
+            if ((Integer) args[0] == MediaDataController.TYPE_IMAGE) {
                 if (trendingGridAdapter != null) {
                     if (trendingLoaded) {
                         updateVisibleTrendingSets();
@@ -3261,12 +3262,12 @@
         } else if (id == NotificationCenter.recentDocumentsDidLoad) {
             boolean isGif = (Boolean) args[0];
             int type = (Integer) args[1];
-            if (isGif || type == DataQuery.TYPE_IMAGE || type == DataQuery.TYPE_FAVE) {
+            if (isGif || type == MediaDataController.TYPE_IMAGE || type == MediaDataController.TYPE_FAVE) {
                 checkDocuments(isGif);
             }
         } else if (id == NotificationCenter.featuredStickersDidLoad) {
             if (trendingGridAdapter != null) {
-                if (featuredStickersHash != DataQuery.getInstance(currentAccount).getFeaturesStickersHashWithoutUnread()) {
+                if (featuredStickersHash != MediaDataController.getInstance(currentAccount).getFeaturesStickersHashWithoutUnread()) {
                     trendingLoaded = false;
                 }
                 if (trendingLoaded) {
@@ -3391,13 +3392,13 @@
                     ((EmptyCell) holder.itemView).setHeight(AndroidUtilities.dp(82));
                     break;
                 case 2:
-                    ArrayList<Long> unreadStickers = DataQuery.getInstance(currentAccount).getUnreadStickerSets();
+                    ArrayList<Long> unreadStickers = MediaDataController.getInstance(currentAccount).getUnreadStickerSets();
                     TLRPC.StickerSetCovered stickerSetCovered = sets.get((Integer) cache.get(position));
                     boolean unread = unreadStickers != null && unreadStickers.contains(stickerSetCovered.set.id);
                     FeaturedStickerSetInfoCell cell = (FeaturedStickerSetInfoCell) holder.itemView;
                     cell.setStickerSet(stickerSetCovered, unread);
                     if (unread) {
-                        DataQuery.getInstance(currentAccount).markFaturedStickersByIdAsRead(stickerSetCovered.set.id);
+                        MediaDataController.getInstance(currentAccount).markFaturedStickersByIdAsRead(stickerSetCovered.set.id);
                     }
                     boolean installing = installingStickerSets.indexOfKey(stickerSetCovered.set.id) >= 0;
                     boolean removing = removingStickerSets.indexOfKey(stickerSetCovered.set.id) >= 0;
@@ -3433,7 +3434,7 @@
                     width = 1080;
                 }
             }
-            stickersPerRow = Math.max(1, width / AndroidUtilities.dp(72));
+            stickersPerRow = Math.max(5, width / AndroidUtilities.dp(72));
             trendingLayoutManager.setSpanCount(stickersPerRow);
             if (trendingLoaded) {
                 return;
@@ -3444,11 +3445,11 @@
             totalItems = 0;
             int num = 0;
 
-            ArrayList<TLRPC.StickerSetCovered> packs = DataQuery.getInstance(currentAccount).getFeaturedStickerSets();
+            ArrayList<TLRPC.StickerSetCovered> packs = MediaDataController.getInstance(currentAccount).getFeaturedStickerSets();
 
             for (int a = 0; a < packs.size(); a++) {
                 TLRPC.StickerSetCovered pack = packs.get(a);
-                if (DataQuery.getInstance(currentAccount).isStickerPackInstalled(pack.set.id) || pack.covers.isEmpty() && pack.cover == null) {
+                if (MediaDataController.getInstance(currentAccount).isStickerPackInstalled(pack.set.id) || pack.covers.isEmpty() && pack.cover == null) {
                     continue;
                 }
                 sets.add(pack);
@@ -3472,7 +3473,7 @@
             }
             if (totalItems != 0) {
                 trendingLoaded = true;
-                featuredStickersHash = DataQuery.getInstance(currentAccount).getFeaturesStickersHashWithoutUnread();
+                featuredStickersHash = MediaDataController.getInstance(currentAccount).getFeaturesStickersHashWithoutUnread();
             }
             super.notifyDataSetChanged();
         }
@@ -3884,7 +3885,7 @@
 
     private class EmojiSearchAdapter extends RecyclerListView.SelectionAdapter {
 
-        private ArrayList<DataQuery.KeywordResult> result = new ArrayList<>();
+        private ArrayList<MediaDataController.KeywordResult> result = new ArrayList<>();
         private String lastSearchEmojiString;
         private String lastSearchAlias;
         private Runnable searchRunnable;
@@ -4086,12 +4087,12 @@
                         String query = lastSearchEmojiString;
                         String[] newLanguage = AndroidUtilities.getCurrentKeyboardLanguage();
                         if (!Arrays.equals(lastSearchKeyboardLanguage, newLanguage)) {
-                            DataQuery.getInstance(currentAccount).fetchNewEmojiKeywords(newLanguage);
+                            MediaDataController.getInstance(currentAccount).fetchNewEmojiKeywords(newLanguage);
                         }
                         lastSearchKeyboardLanguage = newLanguage;
-                        DataQuery.getInstance(currentAccount).getEmojiSuggestions(lastSearchKeyboardLanguage, lastSearchEmojiString, false, new DataQuery.KeywordResultCallback() {
+                        MediaDataController.getInstance(currentAccount).getEmojiSuggestions(lastSearchKeyboardLanguage, lastSearchEmojiString, false, new MediaDataController.KeywordResultCallback() {
                             @Override
-                            public void run(ArrayList<DataQuery.KeywordResult> param, String alias) {
+                            public void run(ArrayList<MediaDataController.KeywordResult> param, String alias) {
                                 if (query.equals(lastSearchEmojiString)) {
                                     lastSearchAlias = alias;
                                     emojiSearchField.progressDrawable.stopAnimation();
@@ -4147,7 +4148,7 @@
 
         @Override
         public void customOnDraw(Canvas canvas, int position) {
-            if (position == 2 && !DataQuery.getInstance(currentAccount).getUnreadStickerSets().isEmpty() && dotPaint != null) {
+            if (position == 2 && !MediaDataController.getInstance(currentAccount).getUnreadStickerSets().isEmpty() && dotPaint != null) {
                 int x = canvas.getWidth() / 2 + AndroidUtilities.dp(4 + 5);
                 int y = canvas.getHeight() / 2 - AndroidUtilities.dp(13 - 5);
                 canvas.drawCircle(x, y, AndroidUtilities.dp(5), dotPaint);
@@ -4449,7 +4450,7 @@
                                 resultsMap.put(result.id, result);
                                 addedCount++;
                             }
-                            searchEndReached = oldCount == results.size();
+                            searchEndReached = oldCount == results.size() || TextUtils.isEmpty(nextSearchOffset);
                             if (addedCount != 0) {
                                 if (oldCount != 0) {
                                     notifyItemChanged(oldCount);
@@ -4522,7 +4523,7 @@
 
                 final ArrayList<TLRPC.Document> emojiStickersArray = new ArrayList<>(0);
                 final LongSparseArray<TLRPC.Document> emojiStickersMap = new LongSparseArray<>(0);
-                HashMap<String, ArrayList<TLRPC.Document>> allStickers = DataQuery.getInstance(currentAccount).getAllStickers();
+                HashMap<String, ArrayList<TLRPC.Document>> allStickers = MediaDataController.getInstance(currentAccount).getAllStickers();
                 if (searchQuery.length() <= 14) {
                     CharSequence emoji = searchQuery;
                     int length = emoji.length();
@@ -4552,12 +4553,12 @@
                 if (allStickers != null && !allStickers.isEmpty() && searchQuery.length() > 1) {
                     String[] newLanguage = AndroidUtilities.getCurrentKeyboardLanguage();
                     if (!Arrays.equals(lastSearchKeyboardLanguage, newLanguage)) {
-                        DataQuery.getInstance(currentAccount).fetchNewEmojiKeywords(newLanguage);
+                        MediaDataController.getInstance(currentAccount).fetchNewEmojiKeywords(newLanguage);
                     }
                     lastSearchKeyboardLanguage = newLanguage;
-                    DataQuery.getInstance(currentAccount).getEmojiSuggestions(lastSearchKeyboardLanguage, searchQuery, false, new DataQuery.KeywordResultCallback() {
+                    MediaDataController.getInstance(currentAccount).getEmojiSuggestions(lastSearchKeyboardLanguage, searchQuery, false, new MediaDataController.KeywordResultCallback() {
                         @Override
-                        public void run(ArrayList<DataQuery.KeywordResult> param, String alias) {
+                        public void run(ArrayList<MediaDataController.KeywordResult> param, String alias) {
                             if (lastId != emojiSearchId) {
                                 return;
                             }
@@ -4580,17 +4581,17 @@
                         }
                     });
                 }
-                ArrayList<TLRPC.TL_messages_stickerSet> local = DataQuery.getInstance(currentAccount).getStickerSets(DataQuery.TYPE_IMAGE);
+                ArrayList<TLRPC.TL_messages_stickerSet> local = MediaDataController.getInstance(currentAccount).getStickerSets(MediaDataController.TYPE_IMAGE);
                 int index;
                 for (int a = 0, size = local.size(); a < size; a++) {
                     TLRPC.TL_messages_stickerSet set = local.get(a);
-                    if ((index = set.set.title.toLowerCase().indexOf(searchQuery)) >= 0) {
+                    if ((index = AndroidUtilities.indexOfIgnoreCase(set.set.title, searchQuery)) >= 0) {
                         if (index == 0 || set.set.title.charAt(index - 1) == ' ') {
                             clear();
                             localPacks.add(set);
                             localPacksByName.put(set, index);
                         }
-                    } else if (set.set.short_name != null && (index = set.set.short_name.toLowerCase().indexOf(searchQuery)) >= 0) {
+                    } else if (set.set.short_name != null && (index = AndroidUtilities.indexOfIgnoreCase(set.set.short_name, searchQuery)) >= 0) {
                         if (index == 0 || set.set.short_name.charAt(index - 1) == ' ') {
                             clear();
                             localPacks.add(set);
@@ -4598,16 +4599,16 @@
                         }
                     }
                 }
-                local = DataQuery.getInstance(currentAccount).getStickerSets(DataQuery.TYPE_FEATURED);
+                local = MediaDataController.getInstance(currentAccount).getStickerSets(MediaDataController.TYPE_FEATURED);
                 for (int a = 0, size = local.size(); a < size; a++) {
                     TLRPC.TL_messages_stickerSet set = local.get(a);
-                    if ((index = set.set.title.toLowerCase().indexOf(searchQuery)) >= 0) {
+                    if ((index = AndroidUtilities.indexOfIgnoreCase(set.set.title, searchQuery)) >= 0) {
                         if (index == 0 || set.set.title.charAt(index - 1) == ' ') {
                             clear();
                             localPacks.add(set);
                             localPacksByName.put(set, index);
                         }
-                    } else if (set.set.short_name != null && (index = set.set.short_name.toLowerCase().indexOf(searchQuery)) >= 0) {
+                    } else if (set.set.short_name != null && (index = AndroidUtilities.indexOfIgnoreCase(set.set.short_name, searchQuery)) >= 0) {
                         if (index == 0 || set.set.short_name.charAt(index - 1) == ' ') {
                             clear();
                             localPacks.add(set);
@@ -4884,12 +4885,12 @@
                         }
                     }
                     cell.setDrawProgress(installing || removing);
-                    int idx = TextUtils.isEmpty(searchQuery) ? -1 : stickerSetCovered.set.title.toLowerCase().indexOf(searchQuery);
+                    int idx = TextUtils.isEmpty(searchQuery) ? -1 : AndroidUtilities.indexOfIgnoreCase(stickerSetCovered.set.title, searchQuery);
                     if (idx >= 0) {
                         cell.setStickerSet(stickerSetCovered, false, idx, searchQuery.length());
                     } else {
                         cell.setStickerSet(stickerSetCovered, false);
-                        if (!TextUtils.isEmpty(searchQuery) && stickerSetCovered.set.short_name.toLowerCase().startsWith(searchQuery)) {
+                        if (!TextUtils.isEmpty(searchQuery) && AndroidUtilities.indexOfIgnoreCase(stickerSetCovered.set.short_name, searchQuery) == 0) {
                             cell.setUrl(stickerSetCovered.set.short_name, searchQuery.length());
                         }
                     }
@@ -4939,7 +4940,7 @@
 
                                     TLRPC.Document document = documents.get(b);
                                     cache.put(num, document);
-                                    Object parent = DataQuery.getInstance(currentAccount).getStickerSetById(DataQuery.getStickerSetId(document));
+                                    Object parent = MediaDataController.getInstance(currentAccount).getStickerSetById(MediaDataController.getStickerSetId(document));
                                     if (parent != null) {
                                         cacheParent.put(num, parent);
                                     }
