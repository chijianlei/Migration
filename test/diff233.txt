testdiff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatRightsEditActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatRightsEditActivity.java
index f7b01e3..554d91e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatRightsEditActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatRightsEditActivity.java
@@ -12,14 +12,20 @@
 import android.app.TimePickerDialog;
 import android.content.Context;
 import android.content.DialogInterface;
+import android.graphics.PorterDuff;
+import android.graphics.PorterDuffColorFilter;
 import android.graphics.drawable.Drawable;
 import android.os.Build;
 import android.os.Bundle;
+import android.util.TypedValue;
+import android.view.Gravity;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.DatePicker;
 import android.widget.FrameLayout;
+import android.widget.ImageView;
 import android.widget.LinearLayout;
+import android.widget.TextView;
 import android.widget.Toast;
 
 import org.telegram.messenger.AndroidUtilities;
@@ -28,6 +34,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.R;
+import org.telegram.messenger.UserObject;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.ActionBar.ActionBar;
@@ -44,12 +51,14 @@
 import org.telegram.ui.Cells.TextDetailCell;
 import org.telegram.ui.Cells.TextInfoPrivacyCell;
 import org.telegram.ui.Cells.TextSettingsCell;
-import org.telegram.ui.Cells2.UserCell;
+import org.telegram.ui.Cells.UserCell2;
+import org.telegram.ui.Components.AlertsCreator;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.RecyclerListView;
 
 import java.util.Calendar;
 
+import androidx.recyclerview.widget.DefaultItemAnimator;
 import androidx.recyclerview.widget.LinearLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
 
@@ -85,6 +94,8 @@
     private int removeAdminRow;
     private int removeAdminShadowRow;
     private int cantEditInfoRow;
+    private int transferOwnerShadowRow;
+    private int transferOwnerRow;
 
     private int sendMessagesRow;
     private int sendMediaRow;
@@ -97,12 +108,14 @@
     private ChatRightsEditActivityDelegate delegate;
 
     private boolean isAddingNew;
+    private boolean initialIsSet;
 
     public static final int TYPE_ADMIN = 0;
     public static final int TYPE_BANNED = 1;
 
     public interface ChatRightsEditActivityDelegate {
         void didSetRights(int rights, TLRPC.TL_chatAdminRights rightsAdmin, TLRPC.TL_chatBannedRights rightsBanned);
+        void didChangeOwner(TLRPC.User user);
     }
 
     private final static int done_button = 1;
@@ -114,7 +127,6 @@
         currentUser = MessagesController.getInstance(currentAccount).getUser(userId);
         currentType = type;
         canEdit = edit;
-        boolean initialIsSet;
         currentChat = MessagesController.getInstance(currentAccount).getChat(chatId);
         if (currentChat != null) {
             isChannel = ChatObject.isChannel(currentChat) && !currentChat.megagroup;
@@ -223,51 +235,7 @@
 
             initialIsSet = rightsBanned == null || !rightsBanned.view_messages;
         }
-        rowCount += 3;
-        if (type == TYPE_ADMIN) {
-            if (isChannel) {
-                changeInfoRow = rowCount++;
-                postMessagesRow = rowCount++;
-                editMesagesRow = rowCount++;
-                deleteMessagesRow = rowCount++;
-                addUsersRow = rowCount++;
-                addAdminsRow = rowCount++;
-            } else {
-                changeInfoRow = rowCount++;
-                deleteMessagesRow = rowCount++;
-                banUsersRow = rowCount++;
-                addUsersRow = rowCount++;
-                pinMessagesRow = rowCount++;
-                addAdminsRow = rowCount++;
-            }
-        } else if (type == TYPE_BANNED) {
-            sendMessagesRow = rowCount++;
-            sendMediaRow = rowCount++;
-            sendStickersRow = rowCount++;
-            sendPollsRow = rowCount++;
-            embedLinksRow = rowCount++;
-            addUsersRow = rowCount++;
-            pinMessagesRow = rowCount++;
-            changeInfoRow = rowCount++;
-            untilSectionRow = rowCount++;
-            untilDateRow = rowCount++;
-        }
-
-        if (canEdit && initialIsSet) {
-            rightsShadowRow = rowCount++;
-            removeAdminRow = rowCount++;
-            removeAdminShadowRow = rowCount++;
-            cantEditInfoRow = -1;
-        } else {
-            removeAdminRow = -1;
-            removeAdminShadowRow = -1;
-            if (type == TYPE_ADMIN && !canEdit) {
-                rightsShadowRow = -1;
-                cantEditInfoRow = rowCount++;
-            } else {
-                rightsShadowRow = rowCount++;
-            }
-        }
+        updateRows(false);
     }
 
     @Override
@@ -303,14 +271,8 @@
         FrameLayout frameLayout = (FrameLayout) fragmentView;
 
         listView = new RecyclerListView(context);
-        LinearLayoutManager linearLayoutManager = new LinearLayoutManager(context, LinearLayoutManager.VERTICAL, false) {
-            @Override
-            public boolean supportsPredictiveItemAnimations() {
-                return false;
-            }
-        };
-        listView.setItemAnimator(null);
-        listView.setLayoutAnimation(null);
+        LinearLayoutManager linearLayoutManager = new LinearLayoutManager(context, LinearLayoutManager.VERTICAL, false);
+        ((DefaultItemAnimator) listView.getItemAnimator()).setDelayAnimations(false);
         listView.setLayoutManager(linearLayoutManager);
         listView.setAdapter(listViewAdapter = new ListAdapter(context));
         listView.setVerticalScrollbarPosition(LocaleController.isRTL ? RecyclerListView.SCROLLBAR_POSITION_LEFT : RecyclerListView.SCROLLBAR_POSITION_RIGHT);
@@ -348,6 +310,8 @@
                     delegate.didSetRights(0, adminRights, bannedRights);
                 }
                 finishFragment();
+            } else if (position == transferOwnerRow) {
+                initTransfer(null, null);
             } else if (position == untilDateRow) {
                 if (getParentActivity() == null) {
                     return;
@@ -371,7 +335,7 @@
 
                 for (int a = 0; a < buttons.length; a++) {
                     buttons[a] = new BottomSheet.BottomSheetCell(context, 0);
-                    buttons[a].setPadding(AndroidUtilities.dp(23), 0, AndroidUtilities.dp(23), 0);
+                    buttons[a].setPadding(AndroidUtilities.dp(7), 0, AndroidUtilities.dp(7), 0);
                     buttons[a].setTag(a);
                     buttons[a].setBackgroundDrawable(Theme.getSelectorDrawable(false));
                     String text;
@@ -390,7 +354,7 @@
                             break;
                         case 4:
                         default:
-                            text = LocaleController.getString("NotificationsCustom", R.string.NotificationsCustom);
+                            text = LocaleController.getString("UserRestrictionsCustom", R.string.UserRestrictionsCustom);
                             break;
                     }
                     buttons[a].setTextAndIcon(text, 0);
@@ -584,6 +548,7 @@
                         }
                     }
                 }
+                updateRows(true);
             }
         });
         return fragmentView;
@@ -602,6 +567,253 @@
                 !adminRights.change_info && !adminRights.delete_messages && !adminRights.ban_users && !adminRights.invite_users && !adminRights.pin_messages && !adminRights.add_admins;
     }
 
+    private boolean hasAllAdminRights() {
+        if (isChannel) {
+            return adminRights.change_info && adminRights.post_messages && adminRights.edit_messages && adminRights.delete_messages && adminRights.invite_users && adminRights.add_admins;
+        } else {
+            return adminRights.change_info && adminRights.delete_messages && adminRights.ban_users && adminRights.invite_users && adminRights.pin_messages && adminRights.add_admins;
+        }
+    }
+
+    private void initTransfer(TLRPC.InputCheckPasswordSRP srp, TwoStepVerificationActivity passwordFragment) {
+        if (getParentActivity() == null) {
+            return;
+        }
+        if (srp != null && !ChatObject.isChannel(currentChat)) {
+            MessagesController.getInstance(currentAccount).convertToMegaGroup(getParentActivity(), chatId, param -> {
+                chatId = param;
+                currentChat = MessagesController.getInstance(currentAccount).getChat(param);
+                initTransfer(srp, passwordFragment);
+            });
+            return;
+        }
+        TLRPC.TL_channels_editCreator req = new TLRPC.TL_channels_editCreator();
+        if (ChatObject.isChannel(currentChat)) {
+            req.channel = new TLRPC.TL_inputChannel();
+            req.channel.channel_id = currentChat.id;
+            req.channel.access_hash = currentChat.access_hash;
+        } else {
+            req.channel = new TLRPC.TL_inputChannelEmpty();
+        }
+        req.password = srp != null ? srp : new TLRPC.TL_inputCheckPasswordEmpty();
+        req.user_id = getMessagesController().getInputUser(currentUser);
+        getConnectionsManager().sendRequest(req, (response, error) -> AndroidUtilities.runOnUIThread(() -> {
+            if (error != null) {
+                if (getParentActivity() == null) {
+                    return;
+                }
+                if ("PASSWORD_HASH_INVALID".equals(error.text)) {
+                    if (srp == null) {
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        if (isChannel) {
+                            builder.setTitle(LocaleController.getString("EditAdminChannelTransfer", R.string.EditAdminChannelTransfer));
+                        } else {
+                            builder.setTitle(LocaleController.getString("EditAdminGroupTransfer", R.string.EditAdminGroupTransfer));
+                        }
+                        builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("EditAdminTransferReadyAlertText", R.string.EditAdminTransferReadyAlertText, currentChat.title, UserObject.getFirstName(currentUser))));
+                        builder.setPositiveButton(LocaleController.getString("EditAdminTransferChangeOwner", R.string.EditAdminTransferChangeOwner), (dialogInterface, i) -> {
+                            TwoStepVerificationActivity fragment = new TwoStepVerificationActivity(0);
+                            fragment.setDelegate(password -> initTransfer(password, fragment));
+                            presentFragment(fragment);
+                        });
+                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        showDialog(builder.create());
+                    }
+                } else if ("PASSWORD_MISSING".equals(error.text) || error.text.startsWith("PASSWORD_TOO_FRESH_") || error.text.startsWith("SESSION_TOO_FRESH_")) {
+                    if (passwordFragment != null) {
+                        passwordFragment.needHideProgress();
+                    }
+                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                    builder.setTitle(LocaleController.getString("EditAdminTransferAlertTitle", R.string.EditAdminTransferAlertTitle));
+
+                    LinearLayout linearLayout = new LinearLayout(getParentActivity());
+                    linearLayout.setPadding(AndroidUtilities.dp(24), AndroidUtilities.dp(2), AndroidUtilities.dp(24), 0);
+                    linearLayout.setOrientation(LinearLayout.VERTICAL);
+                    builder.setView(linearLayout);
+
+                    TextView messageTextView = new TextView(getParentActivity());
+                    messageTextView.setTextColor(Theme.getColor(Theme.key_dialogTextBlack));
+                    messageTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
+                    messageTextView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP);
+                    if (isChannel) {
+                        messageTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("EditChannelAdminTransferAlertText", R.string.EditChannelAdminTransferAlertText, UserObject.getFirstName(currentUser))));
+                    } else {
+                        messageTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("EditAdminTransferAlertText", R.string.EditAdminTransferAlertText, UserObject.getFirstName(currentUser))));
+                    }
+                    linearLayout.addView(messageTextView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+                    LinearLayout linearLayout2 = new LinearLayout(getParentActivity());
+                    linearLayout2.setOrientation(LinearLayout.HORIZONTAL);
+                    linearLayout.addView(linearLayout2, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 11, 0, 0));
+
+                    ImageView dotImageView = new ImageView(getParentActivity());
+                    dotImageView.setImageResource(R.drawable.list_circle);
+                    dotImageView.setPadding(LocaleController.isRTL ? AndroidUtilities.dp(11) : 0, AndroidUtilities.dp(9), LocaleController.isRTL ? 0 : AndroidUtilities.dp(11), 0);
+                    dotImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_dialogTextBlack), PorterDuff.Mode.MULTIPLY));
+
+                    messageTextView = new TextView(getParentActivity());
+                    messageTextView.setTextColor(Theme.getColor(Theme.key_dialogTextBlack));
+                    messageTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
+                    messageTextView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP);
+                    messageTextView.setText(AndroidUtilities.replaceTags(LocaleController.getString("EditAdminTransferAlertText1", R.string.EditAdminTransferAlertText1)));
+                    if (LocaleController.isRTL) {
+                        linearLayout2.addView(messageTextView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+                        linearLayout2.addView(dotImageView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.RIGHT));
+                    } else {
+                        linearLayout2.addView(dotImageView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+                        linearLayout2.addView(messageTextView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+                    }
+
+                    linearLayout2 = new LinearLayout(getParentActivity());
+                    linearLayout2.setOrientation(LinearLayout.HORIZONTAL);
+                    linearLayout.addView(linearLayout2, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 11, 0, 0));
+
+                    dotImageView = new ImageView(getParentActivity());
+                    dotImageView.setImageResource(R.drawable.list_circle);
+                    dotImageView.setPadding(LocaleController.isRTL ? AndroidUtilities.dp(11) : 0, AndroidUtilities.dp(9), LocaleController.isRTL ? 0 : AndroidUtilities.dp(11), 0);
+                    dotImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_dialogTextBlack), PorterDuff.Mode.MULTIPLY));
+
+                    messageTextView = new TextView(getParentActivity());
+                    messageTextView.setTextColor(Theme.getColor(Theme.key_dialogTextBlack));
+                    messageTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
+                    messageTextView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP);
+                    messageTextView.setText(AndroidUtilities.replaceTags(LocaleController.getString("EditAdminTransferAlertText2", R.string.EditAdminTransferAlertText2)));
+                    if (LocaleController.isRTL) {
+                        linearLayout2.addView(messageTextView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+                        linearLayout2.addView(dotImageView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.RIGHT));
+                    } else {
+                        linearLayout2.addView(dotImageView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+                        linearLayout2.addView(messageTextView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+                    }
+
+                    if ("PASSWORD_MISSING".equals(error.text)) {
+                        builder.setPositiveButton(LocaleController.getString("EditAdminTransferSetPassword", R.string.EditAdminTransferSetPassword), (dialogInterface, i) -> presentFragment(new TwoStepVerificationActivity(0)));
+                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                    } else {
+                        messageTextView = new TextView(getParentActivity());
+                        messageTextView.setTextColor(Theme.getColor(Theme.key_dialogTextBlack));
+                        messageTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
+                        messageTextView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP);
+                        messageTextView.setText(LocaleController.getString("EditAdminTransferAlertText3", R.string.EditAdminTransferAlertText3));
+                        linearLayout.addView(messageTextView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 11, 0, 0));
+
+                        builder.setNegativeButton(LocaleController.getString("OK", R.string.OK), null);
+                    }
+                    showDialog(builder.create());
+                } else if ("SRP_ID_INVALID".equals(error.text)) {
+                    TLRPC.TL_account_getPassword getPasswordReq = new TLRPC.TL_account_getPassword();
+                    ConnectionsManager.getInstance(currentAccount).sendRequest(getPasswordReq, (response2, error2) -> AndroidUtilities.runOnUIThread(() -> {
+                        if (error2 == null) {
+                            TLRPC.TL_account_password currentPassword = (TLRPC.TL_account_password) response2;
+                            passwordFragment.setCurrentPasswordInfo(null, currentPassword);
+                            TwoStepVerificationActivity.initPasswordNewAlgo(currentPassword);
+                            initTransfer(passwordFragment.getNewSrpPassword(), passwordFragment);
+                        }
+                    }), ConnectionsManager.RequestFlagWithoutLogin);
+                } else {
+                    if (passwordFragment != null) {
+                        passwordFragment.needHideProgress();
+                        passwordFragment.finishFragment();
+                    }
+                    AlertsCreator.showAddUserAlert(error.text, ChatRightsEditActivity.this, isChannel);
+                }
+            } else {
+                if (srp != null) {
+                    delegate.didChangeOwner(currentUser);
+                    removeSelfFromStack();
+                    passwordFragment.needHideProgress();
+                    passwordFragment.finishFragment();
+                }
+            }
+        }));
+    }
+
+    private void updateRows(boolean update) {
+        int transferOwnerShadowRowPrev = transferOwnerShadowRow;
+
+        changeInfoRow = -1;
+        postMessagesRow = -1;
+        editMesagesRow = -1;
+        deleteMessagesRow = -1;
+        addAdminsRow = -1;
+        banUsersRow = -1;
+        addUsersRow = -1;
+        pinMessagesRow = -1;
+        rightsShadowRow = -1;
+        removeAdminRow = -1;
+        removeAdminShadowRow = -1;
+        cantEditInfoRow = -1;
+        transferOwnerShadowRow = -1;
+        transferOwnerRow = -1;
+
+        sendMessagesRow = -1;
+        sendMediaRow = -1;
+        sendStickersRow = -1;
+        sendPollsRow = -1;
+        embedLinksRow = -1;
+        untilSectionRow = -1;
+        untilDateRow = -1;
+
+        rowCount = 3;
+        if (currentType == TYPE_ADMIN) {
+            if (isChannel) {
+                changeInfoRow = rowCount++;
+                postMessagesRow = rowCount++;
+                editMesagesRow = rowCount++;
+                deleteMessagesRow = rowCount++;
+                addUsersRow = rowCount++;
+                addAdminsRow = rowCount++;
+            } else {
+                changeInfoRow = rowCount++;
+                deleteMessagesRow = rowCount++;
+                banUsersRow = rowCount++;
+                addUsersRow = rowCount++;
+                pinMessagesRow = rowCount++;
+                addAdminsRow = rowCount++;
+            }
+        } else if (currentType == TYPE_BANNED) {
+            sendMessagesRow = rowCount++;
+            sendMediaRow = rowCount++;
+            sendStickersRow = rowCount++;
+            sendPollsRow = rowCount++;
+            embedLinksRow = rowCount++;
+            addUsersRow = rowCount++;
+            pinMessagesRow = rowCount++;
+            changeInfoRow = rowCount++;
+            untilSectionRow = rowCount++;
+            untilDateRow = rowCount++;
+        }
+
+        if (canEdit) {
+            if (currentChat != null && currentChat.creator && currentType == TYPE_ADMIN && hasAllAdminRights() && !currentUser.bot) {
+                transferOwnerShadowRow = rowCount++;
+                transferOwnerRow = rowCount++;
+            }
+            if (initialIsSet) {
+                rightsShadowRow = rowCount++;
+                removeAdminRow = rowCount++;
+                removeAdminShadowRow = rowCount++;
+                cantEditInfoRow = -1;
+            }
+        } else {
+            removeAdminRow = -1;
+            removeAdminShadowRow = -1;
+            if (currentType == TYPE_ADMIN && !canEdit) {
+                rightsShadowRow = -1;
+                cantEditInfoRow = rowCount++;
+            } else {
+                rightsShadowRow = rowCount++;
+            }
+        }
+        if (update) {
+            if (transferOwnerShadowRowPrev == -1 && transferOwnerShadowRow != -1) {
+                listViewAdapter.notifyItemRangeInserted(transferOwnerShadowRow, 2);
+            } else if (transferOwnerShadowRowPrev != -1 && transferOwnerShadowRow == -1) {
+                listViewAdapter.notifyItemRangeRemoved(transferOwnerShadowRowPrev, 2);
+            }
+        }
+    }
+
     private void onDonePressed() {
         if (!ChatObject.isChannel(currentChat) && (currentType == TYPE_BANNED || currentType == TYPE_ADMIN && !isDefaultAdminRights())) {
             MessagesController.getInstance(currentAccount).convertToMegaGroup(getParentActivity(), chatId, param -> {
@@ -715,7 +927,7 @@
             View view;
             switch (viewType) {
                 case 0:
-                    view = new UserCell(mContext, 4, 0);
+                    view = new UserCell2(mContext, 4, 0);
                     view.setBackgroundColor(Theme.getColor(Theme.key_windowBackgroundWhite));
                     break;
                 case 1:
@@ -750,8 +962,8 @@
         public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
             switch (holder.getItemViewType()) {
                 case 0:
-                    UserCell userCell = (UserCell) holder.itemView;
-                    userCell.setData(currentUser, null, null, 0);
+                    UserCell2 userCell2 = (UserCell2) holder.itemView;
+                    userCell2.setData(currentUser, null, null, 0);
                     break;
                 case 1:
                     TextInfoPrivacyCell privacyCell = (TextInfoPrivacyCell) holder.itemView;
@@ -769,6 +981,14 @@
                         } else if (currentType == TYPE_BANNED) {
                             actionCell.setText(LocaleController.getString("UserRestrictionsBlock", R.string.UserRestrictionsBlock), false);
                         }
+                    } else if (position == transferOwnerRow) {
+                        actionCell.setTextColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlackText));
+                        actionCell.setTag(Theme.key_windowBackgroundWhiteBlackText);
+                        if (isChannel) {
+                            actionCell.setText(LocaleController.getString("EditAdminChannelTransfer", R.string.EditAdminChannelTransfer), false);
+                        } else {
+                            actionCell.setText(LocaleController.getString("EditAdminGroupTransfer", R.string.EditAdminGroupTransfer), false);
+                        }
                     }
                     break;
                 case 3:
@@ -876,7 +1096,7 @@
         public int getItemViewType(int position) {
             if (position == 0) {
                 return 0;
-            } else if (position == 1 || position == rightsShadowRow || position == removeAdminShadowRow || position == untilSectionRow) {
+            } else if (position == 1 || position == rightsShadowRow || position == removeAdminShadowRow || position == untilSectionRow || position == transferOwnerShadowRow) {
                 return 5;
             } else if (position == 2) {
                 return 3;
@@ -902,15 +1122,15 @@
                 int count = listView.getChildCount();
                 for (int a = 0; a < count; a++) {
                     View child = listView.getChildAt(a);
-                    if (child instanceof UserCell) {
-                        ((UserCell) child).update(0);
+                    if (child instanceof UserCell2) {
+                        ((UserCell2) child).update(0);
                     }
                 }
             }
         };
 
         return new ThemeDescription[]{
-                new ThemeDescription(listView, ThemeDescription.FLAG_CELLBACKGROUNDCOLOR, new Class[]{UserCell.class, TextSettingsCell.class, TextCheckCell2.class, HeaderCell.class, TextDetailCell.class}, null, null, null, Theme.key_windowBackgroundWhite),
+                new ThemeDescription(listView, ThemeDescription.FLAG_CELLBACKGROUNDCOLOR, new Class[]{UserCell2.class, TextSettingsCell.class, TextCheckCell2.class, HeaderCell.class, TextDetailCell.class}, null, null, null, Theme.key_windowBackgroundWhite),
                 new ThemeDescription(fragmentView, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_windowBackgroundGray),
 
                 new ThemeDescription(actionBar, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_actionBarDefault),
@@ -943,10 +1163,10 @@
 
                 new ThemeDescription(listView, 0, new Class[]{HeaderCell.class}, new String[]{"textView"}, null, null, null, Theme.key_windowBackgroundWhiteBlueHeader),
 
-                new ThemeDescription(listView, 0, new Class[]{UserCell.class}, new String[]{"nameTextView"}, null, null, null, Theme.key_windowBackgroundWhiteBlackText),
-                new ThemeDescription(listView, 0, new Class[]{UserCell.class}, new String[]{"statusColor"}, null, null, cellDelegate, Theme.key_windowBackgroundWhiteGrayText),
-                new ThemeDescription(listView, 0, new Class[]{UserCell.class}, new String[]{"statusOnlineColor"}, null, null, cellDelegate, Theme.key_windowBackgroundWhiteBlueText),
-                new ThemeDescription(listView, 0, new Class[]{UserCell.class}, null, new Drawable[]{Theme.avatar_broadcastDrawable, Theme.avatar_savedDrawable}, null, Theme.key_avatar_text),
+                new ThemeDescription(listView, 0, new Class[]{UserCell2.class}, new String[]{"nameTextView"}, null, null, null, Theme.key_windowBackgroundWhiteBlackText),
+                new ThemeDescription(listView, 0, new Class[]{UserCell2.class}, new String[]{"statusColor"}, null, null, cellDelegate, Theme.key_windowBackgroundWhiteGrayText),
+                new ThemeDescription(listView, 0, new Class[]{UserCell2.class}, new String[]{"statusOnlineColor"}, null, null, cellDelegate, Theme.key_windowBackgroundWhiteBlueText),
+                new ThemeDescription(listView, 0, new Class[]{UserCell2.class}, null, new Drawable[]{Theme.avatar_broadcastDrawable, Theme.avatar_savedDrawable}, null, Theme.key_avatar_text),
                 new ThemeDescription(null, 0, null, null, null, cellDelegate, Theme.key_avatar_backgroundRed),
                 new ThemeDescription(null, 0, null, null, null, cellDelegate, Theme.key_avatar_backgroundOrange),
                 new ThemeDescription(null, 0, null, null, null, cellDelegate, Theme.key_avatar_backgroundViolet),
