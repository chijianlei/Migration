testdiff --git a/TMessagesProj/src/main/java/org/telegram/messenger/LocationController.java b/TMessagesProj/src/main/java/org/telegram/messenger/LocationController.java
index db1a293..8377501 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/LocationController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/LocationController.java
@@ -10,23 +10,40 @@
 
 import android.content.Context;
 import android.content.Intent;
+import android.location.Address;
+import android.location.Geocoder;
 import android.location.Location;
 import android.location.LocationListener;
 import android.location.LocationManager;
+import android.os.Build;
 import android.os.Bundle;
+import android.os.SystemClock;
 import android.text.TextUtils;
 import android.util.LongSparseArray;
 import android.util.SparseIntArray;
 
+import com.google.android.gms.common.ConnectionResult;
+import com.google.android.gms.common.GoogleApiAvailability;
+import com.google.android.gms.common.api.GoogleApiClient;
+import com.google.android.gms.common.api.PendingResult;
+import com.google.android.gms.common.api.Status;
+import com.google.android.gms.location.LocationRequest;
+import com.google.android.gms.location.LocationServices;
+import com.google.android.gms.location.LocationSettingsRequest;
+import com.google.android.gms.location.LocationSettingsResult;
+import com.google.android.gms.location.LocationSettingsStatusCodes;
+
 import org.telegram.SQLite.SQLiteCursor;
 import org.telegram.SQLite.SQLitePreparedStatement;
-import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.NativeByteBuffer;
 import org.telegram.tgnet.TLRPC;
 
 import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Locale;
 
-public class LocationController implements NotificationCenter.NotificationCenterDelegate {
+public class LocationController extends BaseController implements NotificationCenter.NotificationCenterDelegate, GoogleApiClient.ConnectionCallbacks, GoogleApiClient.OnConnectionFailedListener {
 
     private LongSparseArray<SharingLocationInfo> sharingLocationsMap = new LongSparseArray<>();
     private ArrayList<SharingLocationInfo> sharingLocations = new ArrayList<>();
@@ -35,6 +52,7 @@
     private GpsLocationListener gpsLocationListener = new GpsLocationListener();
     private GpsLocationListener networkLocationListener = new GpsLocationListener();
     private GpsLocationListener passiveLocationListener = new GpsLocationListener();
+    private FusedLocationListener fusedLocationListener = new FusedLocationListener();
     private Location lastKnownLocation;
     private long lastLocationSendTime;
     private boolean locationSentSinceLastGoogleMapUpdate = true;
@@ -44,16 +62,26 @@
     private SparseIntArray requests = new SparseIntArray();
     private LongSparseArray<Boolean> cacheRequests = new LongSparseArray<>();
 
+    private boolean lookingForPeopleNearby;
+
     public ArrayList<SharingLocationInfo> sharingLocationsUI = new ArrayList<>();
     private LongSparseArray<SharingLocationInfo> sharingLocationsMapUI = new LongSparseArray<>();
 
-    private final static int BACKGROUD_UPDATE_TIME = 90 * 1000;
+    private Boolean playServicesAvailable;
+    private boolean wasConnectedToPlayServices;
+    private GoogleApiClient googleApiClient;
+    private final static int PLAY_SERVICES_RESOLUTION_REQUEST = 9000;
+    private final static long UPDATE_INTERVAL = 1000, FASTEST_INTERVAL = 1000;
+    private final static int BACKGROUD_UPDATE_TIME = 30 * 1000;
     private final static int LOCATION_ACQUIRE_TIME = 10 * 1000;
     private final static int FOREGROUND_UPDATE_TIME = 20 * 1000;
-    private final static double eps = 0.0001;
 
-    private int currentAccount;
-    private static volatile LocationController Instance[] = new LocationController[UserConfig.MAX_ACCOUNT_COUNT];
+    private ArrayList<TLRPC.TL_peerLocated> cachedNearbyUsers = new ArrayList<>();
+    private ArrayList<TLRPC.TL_peerLocated> cachedNearbyChats = new ArrayList<>();
+
+    private LocationRequest locationRequest;
+
+    private static volatile LocationController[] Instance = new LocationController[UserConfig.MAX_ACCOUNT_COUNT];
 
     public static LocationController getInstance(int num) {
         LocationController localInstance = Instance[num];
@@ -85,11 +113,11 @@
             }
             if (lastKnownLocation != null && (this == networkLocationListener || this == passiveLocationListener)) {
                 if (!started && location.distanceTo(lastKnownLocation) > 20) {
-                    lastKnownLocation = location;
-                    lastLocationSendTime = System.currentTimeMillis() - BACKGROUD_UPDATE_TIME + 5000;
+                    setLastKnownLocation(location);
+                    lastLocationSendTime = SystemClock.uptimeMillis() - BACKGROUD_UPDATE_TIME + 5000;
                 }
             } else {
-                lastKnownLocation = location;
+                setLastKnownLocation(location);
             }
         }
 
@@ -109,14 +137,36 @@
         }
     }
 
-    public LocationController(final int instance) {
-        currentAccount = instance;
+    private class FusedLocationListener implements com.google.android.gms.location.LocationListener {
+
+        @Override
+        public void onLocationChanged(Location location) {
+            if (location == null) {
+                return;
+            }
+            setLastKnownLocation(location);
+        }
+    }
+
+    public LocationController(int instance) {
+        super(instance);
+
         locationManager = (LocationManager) ApplicationLoader.applicationContext.getSystemService(Context.LOCATION_SERVICE);
+        googleApiClient = new GoogleApiClient.Builder(ApplicationLoader.applicationContext).
+                addApi(LocationServices.API).
+                addConnectionCallbacks(this).
+                addOnConnectionFailedListener(this).build();
+
+        locationRequest = new LocationRequest();
+        locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
+        locationRequest.setInterval(UPDATE_INTERVAL);
+        locationRequest.setFastestInterval(FASTEST_INTERVAL);
+
         AndroidUtilities.runOnUIThread(() -> {
-            LocationController locationController = getInstance(currentAccount);
-            NotificationCenter.getInstance(currentAccount).addObserver(locationController, NotificationCenter.didReceiveNewMessages);
-            NotificationCenter.getInstance(currentAccount).addObserver(locationController, NotificationCenter.messagesDeleted);
-            NotificationCenter.getInstance(currentAccount).addObserver(locationController, NotificationCenter.replaceMessagesObjects);
+            LocationController locationController = getAccountInstance().getLocationController();
+            getNotificationCenter().addObserver(locationController, NotificationCenter.didReceiveNewMessages);
+            getNotificationCenter().addObserver(locationController, NotificationCenter.messagesDeleted);
+            getNotificationCenter().addObserver(locationController, NotificationCenter.replaceMessagesObjects);
         });
         loadSharingLocations();
     }
@@ -210,28 +260,115 @@
         }
     }
 
+    @Override
+    public void onConnected(Bundle bundle) {
+        wasConnectedToPlayServices = true;
+        try {
+            if (Build.VERSION.SDK_INT >= 21) {
+                LocationSettingsRequest.Builder builder = new LocationSettingsRequest.Builder().addLocationRequest(locationRequest);
+                PendingResult<LocationSettingsResult> result = LocationServices.SettingsApi.checkLocationSettings(googleApiClient, builder.build());
+                result.setResultCallback(locationSettingsResult -> {
+                    final Status status = locationSettingsResult.getStatus();
+                    switch (status.getStatusCode()) {
+                        case LocationSettingsStatusCodes.SUCCESS:
+                            startFusedLocationRequest(true);
+                            break;
+                        case LocationSettingsStatusCodes.RESOLUTION_REQUIRED:
+                            AndroidUtilities.runOnUIThread(() -> getNotificationCenter().postNotificationName(NotificationCenter.needShowPlayServicesAlert, status));
+                            break;
+                        case LocationSettingsStatusCodes.SETTINGS_CHANGE_UNAVAILABLE:
+                            Utilities.stageQueue.postRunnable(() -> {
+                                playServicesAvailable = false;
+                                try {
+                                    googleApiClient.disconnect();
+                                    start();
+                                } catch (Throwable ignore) {
+
+                                }
+                            });
+                            break;
+                    }
+                });
+            } else {
+                startFusedLocationRequest(true);
+            }
+        } catch (Throwable e) {
+            FileLog.e(e);
+        }
+    }
+
+    public void startFusedLocationRequest(boolean permissionsGranted) {
+        Utilities.stageQueue.postRunnable(() -> {
+            if (!permissionsGranted) {
+                playServicesAvailable = false;
+            }
+            if (lookingForPeopleNearby || !sharingLocations.isEmpty()) {
+                if (permissionsGranted) {
+                    try {
+                        setLastKnownLocation(LocationServices.FusedLocationApi.getLastLocation(googleApiClient));
+                        LocationServices.FusedLocationApi.requestLocationUpdates(googleApiClient, locationRequest, fusedLocationListener);
+                    } catch (Throwable e) {
+                        FileLog.e(e);
+                    }
+                } else {
+                    start();
+                }
+            }
+        });
+    }
+
+    @Override
+    public void onConnectionSuspended(int i) {
+
+    }
+
+    @Override
+    public void onConnectionFailed(ConnectionResult connectionResult) {
+        if (wasConnectedToPlayServices) {
+            return;
+        }
+        playServicesAvailable = false;
+        if (started) {
+            started = false;
+            start();
+        }
+    }
+
+    private boolean checkPlayServices() {
+        if (playServicesAvailable == null) {
+            GoogleApiAvailability apiAvailability = GoogleApiAvailability.getInstance();
+            int resultCode = apiAvailability.isGooglePlayServicesAvailable(ApplicationLoader.applicationContext);
+            playServicesAvailable = resultCode == ConnectionResult.SUCCESS;
+        }
+        return playServicesAvailable;
+    }
+
     private void broadcastLastKnownLocation() {
         if (lastKnownLocation == null) {
             return;
         }
         if (requests.size() != 0) {
             for (int a = 0; a < requests.size(); a++) {
-                ConnectionsManager.getInstance(currentAccount).cancelRequest(requests.keyAt(a), false);
+                getConnectionsManager().cancelRequest(requests.keyAt(a), false);
             }
             requests.clear();
         }
-        int date = ConnectionsManager.getInstance(currentAccount).getCurrentTime();
+        int date = getConnectionsManager().getCurrentTime();
+        float[] result = new float[1];
         for (int a = 0; a < sharingLocations.size(); a++) {
             final SharingLocationInfo info = sharingLocations.get(a);
             if (info.messageObject.messageOwner.media != null && info.messageObject.messageOwner.media.geo != null) {
                 int messageDate = info.messageObject.messageOwner.edit_date != 0 ? info.messageObject.messageOwner.edit_date : info.messageObject.messageOwner.date;
                 TLRPC.GeoPoint point = info.messageObject.messageOwner.media.geo;
-                if (Math.abs(date - messageDate) < 30 && Math.abs(point.lat - lastKnownLocation.getLatitude()) <= eps && Math.abs(point._long - lastKnownLocation.getLongitude()) <= eps) {
+                if (Math.abs(date - messageDate) < 10) {
+                    Location.distanceBetween(point.lat, point._long, lastKnownLocation.getLatitude(), lastKnownLocation.getLongitude(), result);
+                    if (result[0] < 1.0f) {
                     continue;
                 }
             }
+            }
             TLRPC.TL_messages_editMessage req = new TLRPC.TL_messages_editMessage();
-            req.peer = MessagesController.getInstance(currentAccount).getInputPeer((int) info.did);
+            req.peer = getMessagesController().getInputPeer((int) info.did);
             req.id = info.mid;
             req.flags |= 16384;
             req.media = new TLRPC.TL_inputMediaGeoLive();
@@ -240,7 +377,7 @@
             req.media.geo_point.lat = AndroidUtilities.fixLocationCoord(lastKnownLocation.getLatitude());
             req.media.geo_point._long = AndroidUtilities.fixLocationCoord(lastKnownLocation.getLongitude());
             final int[] reqId = new int[1];
-            reqId[0] = ConnectionsManager.getInstance(currentAccount).sendRequest(req, (response, error) -> {
+            reqId[0] = getConnectionsManager().sendRequest(req, (response, error) -> {
                 if (error != null) {
                     if (error.text.equals("MESSAGE_ID_INVALID")) {
                         sharingLocations.remove(info);
@@ -273,11 +410,11 @@
                 if (updated) {
                     saveSharingLocation(info, 0);
                 }
-                MessagesController.getInstance(currentAccount).processUpdates(updates, false);
+                getMessagesController().processUpdates(updates, false);
             });
             requests.put(reqId[0], 0);
         }
-        ConnectionsManager.getInstance(currentAccount).resumeNetworkMaybe();
+        getConnectionsManager().resumeNetworkMaybe();
         stop(false);
     }
 
@@ -287,7 +424,7 @@
         }
         for (int a = 0; a < sharingLocations.size(); a++) {
             final SharingLocationInfo info = sharingLocations.get(a);
-            int currentTime = ConnectionsManager.getInstance(currentAccount).getCurrentTime();
+            int currentTime = getConnectionsManager().getCurrentTime();
             if (info.stopTime <= currentTime) {
                 sharingLocations.remove(a);
                 sharingLocationsMap.remove(info.did);
@@ -304,15 +441,15 @@
             }
         }
         if (!started) {
-            if (Math.abs(lastLocationSendTime - System.currentTimeMillis()) > BACKGROUD_UPDATE_TIME) {
-                lastLocationStartTime = System.currentTimeMillis();
+            if (Math.abs(lastLocationSendTime - SystemClock.uptimeMillis()) > BACKGROUD_UPDATE_TIME) {
+                lastLocationStartTime = SystemClock.uptimeMillis();
                 start();
             }
         } else {
-            if (lastLocationByGoogleMaps || Math.abs(lastLocationStartTime - System.currentTimeMillis()) > LOCATION_ACQUIRE_TIME) {
+            if (lastLocationByGoogleMaps || Math.abs(lastLocationStartTime - SystemClock.uptimeMillis()) > LOCATION_ACQUIRE_TIME) {
                 lastLocationByGoogleMaps = false;
                 locationSentSinceLastGoogleMapUpdate = true;
-                lastLocationSendTime = System.currentTimeMillis();
+                lastLocationSendTime = SystemClock.uptimeMillis();
                 broadcastLastKnownLocation();
             }
         }
@@ -323,23 +460,45 @@
         sharingLocationsMapUI.clear();
         locationsCache.clear();
         cacheRequests.clear();
+        cachedNearbyUsers.clear();
+        cachedNearbyChats.clear();
         stopService();
         Utilities.stageQueue.postRunnable(() -> {
             requests.clear();
             sharingLocationsMap.clear();
             sharingLocations.clear();
-            lastKnownLocation = null;
+            setLastKnownLocation(null);
             stop(true);
         });
     }
 
+    private void setLastKnownLocation(Location location) {
+        lastKnownLocation = location;
+        if (lastKnownLocation != null) {
+            AndroidUtilities.runOnUIThread(() -> NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.newLocationAvailable));
+        }
+    }
+
+    public void setCachedNearbyUsersAndChats(ArrayList<TLRPC.TL_peerLocated> u, ArrayList<TLRPC.TL_peerLocated> c) {
+        cachedNearbyUsers = new ArrayList<>(u);
+        cachedNearbyChats = new ArrayList<>(c);
+    }
+
+    public ArrayList<TLRPC.TL_peerLocated> getCachedNearbyUsers() {
+        return cachedNearbyUsers;
+    }
+
+    public ArrayList<TLRPC.TL_peerLocated> getCachedNearbyChats() {
+        return cachedNearbyChats;
+    }
+
     protected void addSharingLocation(long did, int mid, int period, TLRPC.Message message) {
         final SharingLocationInfo info = new SharingLocationInfo();
         info.did = did;
         info.mid = mid;
         info.period = period;
         info.messageObject = new MessageObject(currentAccount, message, false);
-        info.stopTime = ConnectionsManager.getInstance(currentAccount).getCurrentTime() + period;
+        info.stopTime = getConnectionsManager().getCurrentTime() + period;
         final SharingLocationInfo old = sharingLocationsMap.get(did);
         sharingLocationsMap.put(did, info);
         if (old != null) {
@@ -347,7 +506,7 @@
         }
         sharingLocations.add(info);
         saveSharingLocation(info, 0);
-        lastLocationSendTime = System.currentTimeMillis() - BACKGROUD_UPDATE_TIME + 5000;
+        lastLocationSendTime = SystemClock.uptimeMillis() - BACKGROUD_UPDATE_TIME + 5000;
         AndroidUtilities.runOnUIThread(() -> {
             if (old != null) {
                 sharingLocationsUI.remove(old);
@@ -368,14 +527,14 @@
     }
 
     private void loadSharingLocations() {
-        MessagesStorage.getInstance(currentAccount).getStorageQueue().postRunnable(() -> {
+        getMessagesStorage().getStorageQueue().postRunnable(() -> {
             final ArrayList<SharingLocationInfo> result = new ArrayList<>();
             final ArrayList<TLRPC.User> users = new ArrayList<>();
             final ArrayList<TLRPC.Chat> chats = new ArrayList<>();
             try {
                 ArrayList<Integer> usersToLoad = new ArrayList<>();
                 ArrayList<Integer> chatsToLoad = new ArrayList<>();
-                SQLiteCursor cursor = MessagesStorage.getInstance(currentAccount).getDatabase().queryFinalized("SELECT uid, mid, date, period, message FROM sharing_locations WHERE 1");
+                SQLiteCursor cursor = getMessagesStorage().getDatabase().queryFinalized("SELECT uid, mid, date, period, message FROM sharing_locations WHERE 1");
                 while (cursor.next()) {
                     SharingLocationInfo info = new SharingLocationInfo();
                     info.did = cursor.longValue(0);
@@ -409,18 +568,18 @@
                 }
                 cursor.dispose();
                 if (!chatsToLoad.isEmpty()) {
-                    MessagesStorage.getInstance(currentAccount).getChatsInternal(TextUtils.join(",", chatsToLoad), chats);
+                    getMessagesStorage().getChatsInternal(TextUtils.join(",", chatsToLoad), chats);
                 }
                 if (!usersToLoad.isEmpty()) {
-                    MessagesStorage.getInstance(currentAccount).getUsersInternal(TextUtils.join(",", usersToLoad), users);
+                    getMessagesStorage().getUsersInternal(TextUtils.join(",", usersToLoad), users);
                 }
             } catch (Exception e) {
                 FileLog.e(e);
             }
             if (!result.isEmpty()) {
                 AndroidUtilities.runOnUIThread(() -> {
-                    MessagesController.getInstance(currentAccount).putUsers(users, true);
-                    MessagesController.getInstance(currentAccount).putChats(chats, true);
+                    getMessagesController().putUsers(users, true);
+                    getMessagesController().putChats(chats, true);
                     Utilities.stageQueue.postRunnable(() -> {
                         sharingLocations.addAll(result);
                         for (int a = 0; a < sharingLocations.size(); a++) {
@@ -443,20 +602,20 @@
     }
 
     private void saveSharingLocation(final SharingLocationInfo info, final int remove) {
-        MessagesStorage.getInstance(currentAccount).getStorageQueue().postRunnable(() -> {
+        getMessagesStorage().getStorageQueue().postRunnable(() -> {
             try {
                 if (remove == 2) {
-                    MessagesStorage.getInstance(currentAccount).getDatabase().executeFast("DELETE FROM sharing_locations WHERE 1").stepThis().dispose();
+                    getMessagesStorage().getDatabase().executeFast("DELETE FROM sharing_locations WHERE 1").stepThis().dispose();
                 } else if (remove == 1) {
                     if (info == null) {
                         return;
                     }
-                    MessagesStorage.getInstance(currentAccount).getDatabase().executeFast("DELETE FROM sharing_locations WHERE uid = " + info.did).stepThis().dispose();
+                    getMessagesStorage().getDatabase().executeFast("DELETE FROM sharing_locations WHERE uid = " + info.did).stepThis().dispose();
                 } else {
                     if (info == null) {
                         return;
                     }
-                    SQLitePreparedStatement state = MessagesStorage.getInstance(currentAccount).getDatabase().executeFast("REPLACE INTO sharing_locations VALUES(?, ?, ?, ?, ?)");
+                    SQLitePreparedStatement state = getMessagesStorage().getDatabase().executeFast("REPLACE INTO sharing_locations VALUES(?, ?, ?, ?, ?)");
                     state.requery();
 
                     NativeByteBuffer data = new NativeByteBuffer(info.messageObject.messageOwner.getObjectSize());
@@ -484,17 +643,17 @@
             sharingLocationsMap.remove(did);
             if (info != null) {
                 TLRPC.TL_messages_editMessage req = new TLRPC.TL_messages_editMessage();
-                req.peer = MessagesController.getInstance(currentAccount).getInputPeer((int) info.did);
+                req.peer = getMessagesController().getInputPeer((int) info.did);
                 req.id = info.mid;
                 req.flags |= 16384;
                 req.media = new TLRPC.TL_inputMediaGeoLive();
                 req.media.stopped = true;
                 req.media.geo_point = new TLRPC.TL_inputGeoPointEmpty();
-                ConnectionsManager.getInstance(currentAccount).sendRequest(req, (response, error) -> {
+                getConnectionsManager().sendRequest(req, (response, error) -> {
                     if (error != null) {
                         return;
                     }
-                    MessagesController.getInstance(currentAccount).processUpdates((TLRPC.Updates) response, false);
+                    getMessagesController().processUpdates((TLRPC.Updates) response, false);
                 });
                 sharingLocations.remove(info);
                 saveSharingLocation(info, 1);
@@ -510,7 +669,6 @@
                     stop(true);
                 }
             }
-
         });
     }
 
@@ -535,17 +693,17 @@
             for (int a = 0; a < sharingLocations.size(); a++) {
                 SharingLocationInfo info = sharingLocations.get(a);
                 TLRPC.TL_messages_editMessage req = new TLRPC.TL_messages_editMessage();
-                req.peer = MessagesController.getInstance(currentAccount).getInputPeer((int) info.did);
+                req.peer = getMessagesController().getInputPeer((int) info.did);
                 req.id = info.mid;
                 req.flags |= 16384;
                 req.media = new TLRPC.TL_inputMediaGeoLive();
                 req.media.stopped = true;
                 req.media.geo_point = new TLRPC.TL_inputGeoPointEmpty();
-                ConnectionsManager.getInstance(currentAccount).sendRequest(req, (response, error) -> {
+                getConnectionsManager().sendRequest(req, (response, error) -> {
                     if (error != null) {
                         return;
                     }
-                    MessagesController.getInstance(currentAccount).processUpdates((TLRPC.Updates) response, false);
+                    getMessagesController().processUpdates((TLRPC.Updates) response, false);
                 });
             }
             sharingLocations.clear();
@@ -567,21 +725,31 @@
         }
         lastLocationByGoogleMaps = true;
         if (first || lastKnownLocation != null && lastKnownLocation.distanceTo(location) >= 20) {
-            lastLocationSendTime = System.currentTimeMillis() - BACKGROUD_UPDATE_TIME;
+            lastLocationSendTime = SystemClock.uptimeMillis() - BACKGROUD_UPDATE_TIME;
             locationSentSinceLastGoogleMapUpdate = false;
         } else if (locationSentSinceLastGoogleMapUpdate) {
-            lastLocationSendTime = System.currentTimeMillis() - BACKGROUD_UPDATE_TIME + FOREGROUND_UPDATE_TIME;
+            lastLocationSendTime = SystemClock.uptimeMillis() - BACKGROUD_UPDATE_TIME + FOREGROUND_UPDATE_TIME;
             locationSentSinceLastGoogleMapUpdate = false;
         }
-        lastKnownLocation = location;
+        setLastKnownLocation(location);
     }
 
     private void start() {
         if (started) {
             return;
         }
-        lastLocationStartTime = System.currentTimeMillis();
+        lastLocationStartTime = SystemClock.uptimeMillis();
         started = true;
+        boolean ok = false;
+        if (checkPlayServices()) {
+            try {
+                googleApiClient.connect();
+                ok = true;
+            } catch (Throwable e) {
+                FileLog.e(e);
+            }
+        }
+        if (!ok) {
         try {
             locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 1, 0, gpsLocationListener);
         } catch (Exception e) {
@@ -599,18 +767,30 @@
         }
         if (lastKnownLocation == null) {
             try {
-                lastKnownLocation = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
+                    setLastKnownLocation(locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER));
                 if (lastKnownLocation == null) {
-                    lastKnownLocation = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
+                        setLastKnownLocation(locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER));
                 }
             } catch (Exception e) {
                 FileLog.e(e);
             }
         }
     }
+    }
 
     private void stop(boolean empty) {
+        if (lookingForPeopleNearby) {
+            return;
+        }
         started = false;
+        if (checkPlayServices()) {
+            try {
+                LocationServices.FusedLocationApi.removeLocationUpdates(googleApiClient, fusedLocationListener);
+                googleApiClient.disconnect();
+            } catch (Throwable e) {
+                FileLog.e(e);
+            }
+        }
         locationManager.removeUpdates(gpsLocationListener);
         if (empty) {
             locationManager.removeUpdates(networkLocationListener);
@@ -618,15 +798,30 @@
         }
     }
 
+    public void startLocationLookupForPeopleNearby(boolean stop) {
+        Utilities.stageQueue.postRunnable(() -> {
+            lookingForPeopleNearby = !stop;
+            if (lookingForPeopleNearby) {
+                start();
+            } else if (sharingLocations.isEmpty()) {
+                stop(true);
+            }
+        });
+    }
+
+    public Location getLastKnownLocation() {
+        return lastKnownLocation;
+    }
+
     public void loadLiveLocations(final long did) {
         if (cacheRequests.indexOfKey(did) >= 0) {
             return;
         }
         cacheRequests.put(did, true);
         TLRPC.TL_messages_getRecentLocations req = new TLRPC.TL_messages_getRecentLocations();
-        req.peer = MessagesController.getInstance(currentAccount).getInputPeer((int) did);
+        req.peer = getMessagesController().getInputPeer((int) did);
         req.limit = 100;
-        ConnectionsManager.getInstance(currentAccount).sendRequest(req, (response, error) -> {
+        getConnectionsManager().sendRequest(req, (response, error) -> {
             if (error != null) {
                 return;
             }
@@ -639,9 +834,9 @@
                         a--;
                     }
                 }
-                MessagesStorage.getInstance(currentAccount).putUsersAndChats(res.users, res.chats, true, true);
-                MessagesController.getInstance(currentAccount).putUsers(res.users, false);
-                MessagesController.getInstance(currentAccount).putChats(res.chats, false);
+                getMessagesStorage().putUsersAndChats(res.users, res.chats, true, true);
+                getMessagesController().putUsers(res.users, false);
+                getMessagesController().putChats(res.chats, false);
                 locationsCache.put(did, res.messages);
                 NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.liveLocationsCacheChanged, did, currentAccount);
             });
@@ -655,4 +850,134 @@
         }
         return count;
     }
+
+    public interface LocationFetchCallback {
+        void onLocationAddressAvailable(String address, String displayAddress, Location location);
+    }
+
+    private static HashMap<LocationFetchCallback, Runnable> callbacks = new HashMap<>();
+    public static void fetchLocationAddress(Location location, LocationFetchCallback callback) {
+        if (callback == null) {
+            return;
+        }
+        Runnable fetchLocationRunnable = callbacks.get(callback);
+        if (fetchLocationRunnable != null) {
+            Utilities.globalQueue.cancelRunnable(fetchLocationRunnable);
+            callbacks.remove(callback);
+        }
+        if (location == null) {
+            if (callback != null) {
+                callback.onLocationAddressAvailable(null, null, null);
+            }
+            return;
+        }
+
+        Utilities.globalQueue.postRunnable(fetchLocationRunnable = () -> {
+            String name;
+            String displayName;
+            try {
+                Geocoder gcd = new Geocoder(ApplicationLoader.applicationContext, LocaleController.getInstance().getSystemDefaultLocale());
+                List<Address> addresses = gcd.getFromLocation(location.getLatitude(), location.getLongitude(), 1);
+                if (addresses.size() > 0) {
+                    Address address = addresses.get(0);
+                    boolean hasAny = false;
+                    String arg;
+
+                    StringBuilder nameBuilder = new StringBuilder();
+                    StringBuilder displayNameBuilder = new StringBuilder();
+
+                    arg = address.getSubThoroughfare();
+                    if (!TextUtils.isEmpty(arg)) {
+                        nameBuilder.append(arg);
+                        hasAny = true;
+                    }
+                    arg = address.getThoroughfare();
+                    if (!TextUtils.isEmpty(arg)) {
+                        if (nameBuilder.length() > 0) {
+                            nameBuilder.append(", ");
+                        }
+                        nameBuilder.append(arg);
+                        hasAny = true;
+                    }
+                    if (!hasAny) {
+                        arg = address.getAdminArea();
+                        if (!TextUtils.isEmpty(arg)) {
+                            if (nameBuilder.length() > 0) {
+                                nameBuilder.append(", ");
+                            }
+                            nameBuilder.append(arg);
+                        }
+                        arg = address.getSubAdminArea();
+                        if (!TextUtils.isEmpty(arg)) {
+                            if (nameBuilder.length() > 0) {
+                                nameBuilder.append(", ");
+                            }
+                            nameBuilder.append(arg);
+                        }
+                    }
+                    arg = address.getLocality();
+                    if (!TextUtils.isEmpty(arg)) {
+                        if (nameBuilder.length() > 0) {
+                            nameBuilder.append(", ");
+                        }
+                        nameBuilder.append(arg);
+                    }
+                    arg = address.getCountryName();
+                    if (!TextUtils.isEmpty(arg)) {
+                        if (nameBuilder.length() > 0) {
+                            nameBuilder.append(", ");
+                        }
+                        nameBuilder.append(arg);
+                    }
+
+                    arg = address.getCountryName();
+                    if (!TextUtils.isEmpty(arg)) {
+                        if (displayNameBuilder.length() > 0) {
+                            displayNameBuilder.append(", ");
+                        }
+                        displayNameBuilder.append(arg);
+                    }
+                    arg = address.getLocality();
+                    if (!TextUtils.isEmpty(arg)) {
+                        if (displayNameBuilder.length() > 0) {
+                            displayNameBuilder.append(", ");
+                        }
+                        displayNameBuilder.append(arg);
+                    }
+                    if (!hasAny) {
+                        arg = address.getAdminArea();
+                        if (!TextUtils.isEmpty(arg)) {
+                            if (displayNameBuilder.length() > 0) {
+                                displayNameBuilder.append(", ");
+                            }
+                            displayNameBuilder.append(arg);
+                        }
+                        arg = address.getSubAdminArea();
+                        if (!TextUtils.isEmpty(arg)) {
+                            if (displayNameBuilder.length() > 0) {
+                                displayNameBuilder.append(", ");
+                            }
+                            displayNameBuilder.append(arg);
+                        }
+                    }
+
+                    name = nameBuilder.toString();
+                    displayName = displayNameBuilder.toString();
+                } else {
+                    name = displayName = String.format(Locale.US, "Unknown address (%f,%f)", location.getLatitude(), location.getLongitude());
+                }
+            } catch (Exception ignore) {
+                name = displayName = String.format(Locale.US, "Unknown address (%f,%f)", location.getLatitude(), location.getLongitude());
+            }
+            final String nameFinal = name;
+            final String displayNameFinal = displayName;
+            AndroidUtilities.runOnUIThread(() -> {
+                callbacks.remove(callback);
+                if (callback != null) {
+                    callback.onLocationAddressAvailable(nameFinal, displayNameFinal, location);
+                }
+            });
+        }, 300);
+        callbacks.put(callback, fetchLocationRunnable);
+    }
 }
