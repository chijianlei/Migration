testdiff --git a/TMessagesProj/src/main/java/org/telegram/tgnet/TLRPC.java b/TMessagesProj/src/main/java/org/telegram/tgnet/TLRPC.java
index 168d89d..8eeb45c 100644
--- a/TMessagesProj/src/main/java/org/telegram/tgnet/TLRPC.java
+++ b/TMessagesProj/src/main/java/org/telegram/tgnet/TLRPC.java
@@ -61,7 +61,7 @@
 	public static final int MESSAGE_FLAG_EDITED             = 0x00008000;
 	public static final int MESSAGE_FLAG_MEGAGROUP          = 0x80000000;
 
-    public static final int LAYER = 100;
+    public static final int LAYER = 103;
 
     public static class TL_chatBannedRights extends TLObject {
         public static int constructor = 0x9f120418;
@@ -2567,29 +2567,82 @@
 		}
 	}
 
-	public static class TL_contacts_link extends TLObject {
+    public static abstract class ContactLink_layer101 extends TLObject {
+
+        public static ContactLink_layer101 TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
+            ContactLink_layer101 result = null;
+            switch (constructor) {
+                case 0xfeedd3ad:
+                    result = new TL_contactLinkNone();
+                    break;
+                case 0xd502c2d0:
+                    result = new TL_contactLinkContact();
+                    break;
+                case 0x5f4f9247:
+                    result = new TL_contactLinkUnknown();
+                    break;
+            }
+            if (result == null && exception) {
+                throw new RuntimeException(String.format("can't parse magic %x in ContactLink", constructor));
+            }
+            if (result != null) {
+                result.readParams(stream, exception);
+            }
+            return result;
+        }
+    }
+
+    public static class TL_contactLinkNone extends ContactLink_layer101 {
+        public static int constructor = 0xfeedd3ad;
+
+
+        public void serializeToStream(AbstractSerializedData stream) {
+            stream.writeInt32(constructor);
+        }
+    }
+
+    public static class TL_contactLinkContact extends ContactLink_layer101 {
+        public static int constructor = 0xd502c2d0;
+
+
+        public void serializeToStream(AbstractSerializedData stream) {
+            stream.writeInt32(constructor);
+        }
+    }
+
+    public static class TL_contactLinkUnknown extends ContactLink_layer101 {
+        public static int constructor = 0x5f4f9247;
+
+
+        public void serializeToStream(AbstractSerializedData stream) {
+            stream.writeInt32(constructor);
+        }
+    }
+
+
+    public static class TL_contacts_link_layer101 extends TLObject {
 		public static int constructor = 0x3ace484c;
 
-		public ContactLink my_link;
-		public ContactLink foreign_link;
+        public ContactLink_layer101 my_link;
+        public ContactLink_layer101 foreign_link;
 		public User user;
 
-		public static TL_contacts_link TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
-			if (TL_contacts_link.constructor != constructor) {
+        public static TL_contacts_link_layer101 TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
+            if (TL_contacts_link_layer101.constructor != constructor) {
 				if (exception) {
 					throw new RuntimeException(String.format("can't parse magic %x in TL_contacts_link", constructor));
 				} else {
 					return null;
 				}
 			}
-			TL_contacts_link result = new TL_contacts_link();
+            TL_contacts_link_layer101 result = new TL_contacts_link_layer101();
 			result.readParams(stream, exception);
 			return result;
 		}
 
 		public void readParams(AbstractSerializedData stream, boolean exception) {
-			my_link = ContactLink.TLdeserialize(stream, stream.readInt32(exception), exception);
-			foreign_link = ContactLink.TLdeserialize(stream, stream.readInt32(exception), exception);
+            my_link = ContactLink_layer101.TLdeserialize(stream, stream.readInt32(exception), exception);
+            foreign_link = ContactLink_layer101.TLdeserialize(stream, stream.readInt32(exception), exception);
 			user = User.TLdeserialize(stream, stream.readInt32(exception), exception);
 		}
 
@@ -4661,6 +4714,11 @@
 
 		public int flags;
 		public boolean report_spam;
+        public boolean add_contact;
+        public boolean block_contact;
+        public boolean share_contact;
+        public boolean need_contacts_exception;
+        public boolean report_geo;
 
 		public static TL_peerSettings TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
 			if (TL_peerSettings.constructor != constructor) {
@@ -4678,11 +4736,21 @@
 		public void readParams(AbstractSerializedData stream, boolean exception) {
 			flags = stream.readInt32(exception);
 			report_spam = (flags & 1) != 0;
+            add_contact = (flags & 2) != 0;
+            block_contact = (flags & 4) != 0;
+            share_contact = (flags & 8) != 0;
+            need_contacts_exception = (flags & 16) != 0;
+            report_geo = (flags & 32) != 0;
 		}
 
 		public void serializeToStream(AbstractSerializedData stream) {
 			stream.writeInt32(constructor);
 			flags = report_spam ? (flags | 1) : (flags &~ 1);
+            flags = add_contact ? (flags | 2) : (flags &~ 2);
+            flags = block_contact ? (flags | 4) : (flags &~ 4);
+            flags = share_contact ? (flags | 8) : (flags &~ 8);
+            flags = need_contacts_exception ? (flags | 16) : (flags &~ 16);
+            flags = report_geo ? (flags | 32) : (flags &~ 32);
 			stream.writeInt32(flags);
 		}
 	}
@@ -7705,12 +7773,14 @@
         public boolean can_set_stickers;
         public boolean hidden_prehistory;
         public boolean can_view_stats;
+        public boolean can_set_location;
         public int banned_count;
         public int online_count;
         public StickerSet stickerset;
         public int available_min_id;
         public int call_msg_id;
         public int linked_chat_id;
+        public ChannelLocation location;
         public int pts;
 
         public static ChatFull TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
@@ -7725,9 +7795,12 @@
                 case 0x2e02a614:
                     result = new TL_chatFull_layer87();
                     break;
-                case 0x9882e516:
+                case 0x10916653:
                     result = new TL_channelFull();
                     break;
+                case 0x9882e516:
+                    result = new TL_channelFull_layer101();
+                    break;
                 case 0x17f45fcf:
                     result = new TL_channelFull_layer71();
                     break;
@@ -7773,6 +7846,149 @@
     }
 
     public static class TL_channelFull extends ChatFull {
+        public static int constructor = 0x10916653;
+
+
+        public void readParams(AbstractSerializedData stream, boolean exception) {
+            flags = stream.readInt32(exception);
+            can_view_participants = (flags & 8) != 0;
+            can_set_username = (flags & 64) != 0;
+            can_set_stickers = (flags & 128) != 0;
+            hidden_prehistory = (flags & 1024) != 0;
+            can_view_stats = (flags & 4096) != 0;
+            can_set_location = (flags & 65536) != 0;
+            id = stream.readInt32(exception);
+            about = stream.readString(exception);
+            if ((flags & 1) != 0) {
+                participants_count = stream.readInt32(exception);
+            }
+            if ((flags & 2) != 0) {
+                admins_count = stream.readInt32(exception);
+            }
+            if ((flags & 4) != 0) {
+                kicked_count = stream.readInt32(exception);
+            }
+            if ((flags & 4) != 0) {
+                banned_count = stream.readInt32(exception);
+            }
+            if ((flags & 8192) != 0) {
+                online_count = stream.readInt32(exception);
+            }
+            read_inbox_max_id = stream.readInt32(exception);
+            read_outbox_max_id = stream.readInt32(exception);
+            unread_count = stream.readInt32(exception);
+            chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
+            notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
+            exported_invite = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
+            int magic = stream.readInt32(exception);
+            if (magic != 0x1cb5c415) {
+                if (exception) {
+                    throw new RuntimeException(String.format("wrong Vector magic, got %x", magic));
+                }
+                return;
+            }
+            int count = stream.readInt32(exception);
+            for (int a = 0; a < count; a++) {
+                BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
+                if (object == null) {
+                    return;
+                }
+                bot_info.add(object);
+            }
+            if ((flags & 16) != 0) {
+                migrated_from_chat_id = stream.readInt32(exception);
+            }
+            if ((flags & 16) != 0) {
+                migrated_from_max_id = stream.readInt32(exception);
+            }
+            if ((flags & 32) != 0) {
+                pinned_msg_id = stream.readInt32(exception);
+            }
+            if ((flags & 256) != 0) {
+                stickerset = StickerSet.TLdeserialize(stream, stream.readInt32(exception), exception);
+            }
+            if ((flags & 512) != 0) {
+                available_min_id = stream.readInt32(exception);
+            }
+            if ((flags & 2048) != 0) {
+                folder_id = stream.readInt32(exception);
+            }
+            if ((flags & 16384) != 0) {
+                linked_chat_id = stream.readInt32(exception);
+            }
+            if ((flags & 32768) != 0) {
+                location = ChannelLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
+            }
+            pts = stream.readInt32(exception);
+        }
+
+        public void serializeToStream(AbstractSerializedData stream) {
+            stream.writeInt32(constructor);
+            flags = can_view_participants ? (flags | 8) : (flags &~ 8);
+            flags = can_set_username ? (flags | 64) : (flags &~ 64);
+            flags = can_set_stickers ? (flags | 128) : (flags &~ 128);
+            flags = hidden_prehistory ? (flags | 1024) : (flags &~ 1024);
+            flags = can_view_stats ? (flags | 4096) : (flags &~ 4096);
+            flags = can_set_location ? (flags | 65536) : (flags &~ 65536);
+            stream.writeInt32(flags);
+            stream.writeInt32(id);
+            stream.writeString(about);
+            if ((flags & 1) != 0) {
+                stream.writeInt32(participants_count);
+            }
+            if ((flags & 2) != 0) {
+                stream.writeInt32(admins_count);
+            }
+            if ((flags & 4) != 0) {
+                stream.writeInt32(kicked_count);
+            }
+            if ((flags & 4) != 0) {
+                stream.writeInt32(banned_count);
+            }
+            if ((flags & 8192) != 0) {
+                stream.writeInt32(online_count);
+            }
+            stream.writeInt32(read_inbox_max_id);
+            stream.writeInt32(read_outbox_max_id);
+            stream.writeInt32(unread_count);
+            chat_photo.serializeToStream(stream);
+            notify_settings.serializeToStream(stream);
+            exported_invite.serializeToStream(stream);
+            stream.writeInt32(0x1cb5c415);
+            int count = bot_info.size();
+            stream.writeInt32(count);
+            for (int a = 0; a < count; a++) {
+                bot_info.get(a).serializeToStream(stream);
+            }
+            if ((flags & 16) != 0) {
+                stream.writeInt32(migrated_from_chat_id);
+            }
+            if ((flags & 16) != 0) {
+                stream.writeInt32(migrated_from_max_id);
+            }
+            if ((flags & 32) != 0) {
+                stream.writeInt32(pinned_msg_id);
+            }
+            if ((flags & 256) != 0) {
+                stickerset.serializeToStream(stream);
+            }
+            if ((flags & 512) != 0) {
+                stream.writeInt32(available_min_id);
+            }
+            if ((flags & 2048) != 0) {
+                stream.writeInt32(folder_id);
+            }
+            if ((flags & 16384) != 0) {
+                stream.writeInt32(linked_chat_id);
+            }
+            if ((flags & 32768) != 0) {
+                location.serializeToStream(stream);
+            }
+            stream.writeInt32(pts);
+        }
+    }
+
+    public static class TL_channelFull_layer101 extends TL_channelFull {
         public static int constructor = 0x9882e516;
 
 
@@ -13888,6 +14104,9 @@
         public static ReportReason TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
             ReportReason result = null;
             switch (constructor) {
+                case 0xdbd4feed:
+                    result = new TL_inputReportReasonGeoIrrelevant();
+                    break;
                 case 0xe1746d0a:
                     result = new TL_inputReportReasonOther();
                     break;
@@ -13917,6 +14136,15 @@
         }
     }
 
+    public static class TL_inputReportReasonGeoIrrelevant extends ReportReason {
+        public static int constructor = 0xdbd4feed;
+
+
+        public void serializeToStream(AbstractSerializedData stream) {
+            stream.writeInt32(constructor);
+        }
+    }
+
     public static class TL_inputReportReasonOther extends ReportReason {
         public static int constructor = 0xe1746d0a;
 
@@ -15893,58 +16121,6 @@
         }
     }
 
-	public static abstract class ContactLink extends TLObject {
-
-		public static ContactLink TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
-			ContactLink result = null;
-			switch (constructor) {
-				case 0xfeedd3ad:
-					result = new TL_contactLinkNone();
-					break;
-				case 0xd502c2d0:
-					result = new TL_contactLinkContact();
-					break;
-				case 0x5f4f9247:
-					result = new TL_contactLinkUnknown();
-					break;
-			}
-			if (result == null && exception) {
-				throw new RuntimeException(String.format("can't parse magic %x in ContactLink", constructor));
-			}
-			if (result != null) {
-				result.readParams(stream, exception);
-			}
-			return result;
-		}
-	}
-
-	public static class TL_contactLinkNone extends ContactLink {
-		public static int constructor = 0xfeedd3ad;
-
-
-		public void serializeToStream(AbstractSerializedData stream) {
-			stream.writeInt32(constructor);
-		}
-	}
-
-	public static class TL_contactLinkContact extends ContactLink {
-		public static int constructor = 0xd502c2d0;
-
-
-		public void serializeToStream(AbstractSerializedData stream) {
-			stream.writeInt32(constructor);
-		}
-	}
-
-	public static class TL_contactLinkUnknown extends ContactLink {
-		public static int constructor = 0x5f4f9247;
-
-
-		public void serializeToStream(AbstractSerializedData stream) {
-			stream.writeInt32(constructor);
-		}
-	}
-
 	public static abstract class PageBlock extends TLObject {
 		public boolean first; //custom
 		public boolean bottom; //custom
@@ -18242,6 +18418,9 @@
                 case 0x6e6fe51c:
                     result = new TL_updateDialogPinned();
                     break;
+                case 0x6a7e7366:
+                    result = new TL_updatePeerSettings();
+                    break;
                 case 0x12b9417b:
                     result = new TL_updateUserPhone();
                     break;
@@ -18290,6 +18469,9 @@
                 case 0xe511996d:
                     result = new TL_updateFavedStickers();
                     break;
+                case 0xb4afcfb0:
+                    result = new TL_updatePeerLocated();
+                    break;
                 case 0xea4b0e5c:
                     result = new TL_updateChatParticipantAdd();
                     break;
@@ -18353,9 +18535,6 @@
                 case 0x9c974fdf:
                     result = new TL_updateReadHistoryInbox();
                     break;
-                case 0x9d2e67c5:
-                    result = new TL_updateContactLink();
-                    break;
                 case 0x9375341e:
                     result = new TL_updateSavedGifs();
                     break;
@@ -18569,6 +18748,24 @@
         }
     }
 
+    public static class TL_updatePeerSettings extends Update {
+        public static int constructor = 0x6a7e7366;
+
+        public Peer peer;
+        public TL_peerSettings settings;
+
+        public void readParams(AbstractSerializedData stream, boolean exception) {
+            peer = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
+            settings = TL_peerSettings.TLdeserialize(stream, stream.readInt32(exception), exception);
+        }
+
+        public void serializeToStream(AbstractSerializedData stream) {
+            stream.writeInt32(constructor);
+            peer.serializeToStream(stream);
+            settings.serializeToStream(stream);
+        }
+    }
+
     public static class TL_updateUserPhone extends Update {
         public static int constructor = 0x12b9417b;
 
@@ -18879,6 +19076,40 @@
         }
     }
 
+    public static class TL_updatePeerLocated extends Update {
+        public static int constructor = 0xb4afcfb0;
+
+        public ArrayList<TL_peerLocated> peers = new ArrayList<>();
+
+        public void readParams(AbstractSerializedData stream, boolean exception) {
+            int magic = stream.readInt32(exception);
+            if (magic != 0x1cb5c415) {
+                if (exception) {
+                    throw new RuntimeException(String.format("wrong Vector magic, got %x", magic));
+                }
+                return;
+            }
+            int count = stream.readInt32(exception);
+            for (int a = 0; a < count; a++) {
+                TL_peerLocated object = TL_peerLocated.TLdeserialize(stream, stream.readInt32(exception), exception);
+                if (object == null) {
+                    return;
+                }
+                peers.add(object);
+            }
+        }
+
+        public void serializeToStream(AbstractSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt32(0x1cb5c415);
+            int count = peers.size();
+            stream.writeInt32(count);
+            for (int a = 0; a < count; a++) {
+                peers.get(a).serializeToStream(stream);
+            }
+        }
+    }
+
     public static class TL_updateChatParticipantAdd extends Update {
         public static int constructor = 0xea4b0e5c;
 
@@ -19413,27 +19644,6 @@
         }
     }
 
-    public static class TL_updateContactLink extends Update {
-        public static int constructor = 0x9d2e67c5;
-
-        public int user_id;
-        public ContactLink my_link;
-        public ContactLink foreign_link;
-
-        public void readParams(AbstractSerializedData stream, boolean exception) {
-            user_id = stream.readInt32(exception);
-            my_link = ContactLink.TLdeserialize(stream, stream.readInt32(exception), exception);
-            foreign_link = ContactLink.TLdeserialize(stream, stream.readInt32(exception), exception);
-        }
-
-        public void serializeToStream(AbstractSerializedData stream) {
-            stream.writeInt32(constructor);
-            stream.writeInt32(user_id);
-            my_link.serializeToStream(stream);
-            foreign_link.serializeToStream(stream);
-        }
-    }
-
     public static class TL_updateSavedGifs extends Update {
         public static int constructor = 0x9375341e;
 
@@ -20909,6 +21119,55 @@
 		}
 	}
 
+    public static abstract class ChannelLocation extends TLObject {
+
+        public static ChannelLocation TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
+            ChannelLocation result = null;
+            switch (constructor) {
+                case 0xbfb5ad8b:
+                    result = new TL_channelLocationEmpty();
+                    break;
+                case 0x209b82db:
+                    result = new TL_channelLocation();
+                    break;
+            }
+            if (result == null && exception) {
+                throw new RuntimeException(String.format("can't parse magic %x in ChannelLocation", constructor));
+            }
+            if (result != null) {
+                result.readParams(stream, exception);
+            }
+            return result;
+        }
+    }
+
+    public static class TL_channelLocationEmpty extends ChannelLocation {
+        public static int constructor = 0xbfb5ad8b;
+
+
+        public void serializeToStream(AbstractSerializedData stream) {
+            stream.writeInt32(constructor);
+        }
+    }
+
+    public static class TL_channelLocation extends ChannelLocation {
+        public static int constructor = 0x209b82db;
+
+        public GeoPoint geo_point;
+        public String address;
+
+        public void readParams(AbstractSerializedData stream, boolean exception) {
+            geo_point = GeoPoint.TLdeserialize(stream, stream.readInt32(exception), exception);
+            address = stream.readString(exception);
+        }
+
+        public void serializeToStream(AbstractSerializedData stream) {
+            stream.writeInt32(constructor);
+            geo_point.serializeToStream(stream);
+            stream.writeString(address);
+        }
+    }
+
     public static abstract class Photo extends TLObject {
 
         public int flags;
@@ -25155,6 +25414,9 @@
 				case 0x709b2405:
 					result = new TL_channelAdminLogEventActionEditMessage();
 					break;
+                case 0xe6b76ae:
+                    result = new TL_channelAdminLogEventActionChangeLocation();
+                    break;
 				case 0xd5676710:
 					result = new TL_channelAdminLogEventActionParticipantToggleAdmin();
 					break;
@@ -25285,6 +25547,24 @@
 		}
 	}
 
+    public static class TL_channelAdminLogEventActionChangeLocation extends ChannelAdminLogEventAction {
+        public static int constructor = 0xe6b76ae;
+
+        public ChannelLocation prev_value;
+        public ChannelLocation new_value;
+
+        public void readParams(AbstractSerializedData stream, boolean exception) {
+            prev_value = ChannelLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
+            new_value = ChannelLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
+        }
+
+        public void serializeToStream(AbstractSerializedData stream) {
+            stream.writeInt32(constructor);
+            prev_value.serializeToStream(stream);
+            new_value.serializeToStream(stream);
+        }
+    }
+
 	public static class TL_channelAdminLogEventActionParticipantToggleAdmin extends ChannelAdminLogEventAction {
 		public static int constructor = 0xd5676710;
 
@@ -25564,6 +25844,40 @@
 		}
 	}
 
+    public static class TL_peerLocated extends TLObject {
+        public static int constructor = 0xca461b5d;
+
+        public Peer peer;
+        public int expires;
+        public int distance;
+
+        public static TL_peerLocated TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
+            if (TL_peerLocated.constructor != constructor) {
+                if (exception) {
+                    throw new RuntimeException(String.format("can't parse magic %x in TL_peerLocated", constructor));
+                } else {
+                    return null;
+                }
+            }
+            TL_peerLocated result = new TL_peerLocated();
+            result.readParams(stream, exception);
+            return result;
+        }
+
+        public void readParams(AbstractSerializedData stream, boolean exception) {
+            peer = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
+            expires = stream.readInt32(exception);
+            distance = stream.readInt32(exception);
+        }
+
+        public void serializeToStream(AbstractSerializedData stream) {
+            stream.writeInt32(constructor);
+            peer.serializeToStream(stream);
+            stream.writeInt32(expires);
+            stream.writeInt32(distance);
+        }
+    }
+
     public static class TL_autoDownloadSettings extends TLObject {
         public static int constructor = 0xd246fd47;
 
@@ -25708,6 +26022,7 @@
 		public boolean kicked;
 		public boolean deactivated;
 		public boolean left;
+        public boolean has_geo;
 		public ChatPhoto photo;
 		public int participants_count;
 		public int version;
@@ -26229,6 +26544,7 @@
             min = (flags & 4096) != 0;
             scam = (flags & 524288) != 0;
             has_link = (flags & 1048576) != 0;
+            has_geo = (flags & 2097152) != 0;
             id = stream.readInt32(exception);
             if ((flags & 8192) != 0) {
                 access_hash = stream.readInt64(exception);
@@ -26269,6 +26585,7 @@
             flags = min ? (flags | 4096) : (flags &~ 4096);
             flags = scam ? (flags | 524288) : (flags &~ 524288);
             flags = has_link ? (flags | 1048576) : (flags &~ 1048576);
+            flags = has_geo ? (flags | 2097152) : (flags &~ 2097152);
             stream.writeInt32(flags);
             stream.writeInt32(id);
             if ((flags & 8192) != 0) {
@@ -26595,6 +26912,7 @@
         public boolean installed;
         public boolean archived;
         public boolean official;
+        public boolean animated;
         public boolean masks;
         public long id;
         public long access_hash;
@@ -26746,6 +27064,7 @@
             archived = (flags & 2) != 0;
             official = (flags & 4) != 0;
             masks = (flags & 8) != 0;
+            animated = (flags & 32) != 0;
             if ((flags & 1) != 0) {
                 installed_date = stream.readInt32(exception);
             }
@@ -26768,6 +27087,7 @@
             flags = archived ? (flags | 2) : (flags &~ 2);
             flags = official ? (flags | 4) : (flags &~ 4);
             flags = masks ? (flags | 8) : (flags &~ 8);
+            flags = animated ? (flags | 32) : (flags &~ 32);
             stream.writeInt32(flags);
             if ((flags & 1) != 0) {
                 stream.writeInt32(installed_date);
@@ -28165,23 +28485,27 @@
         public boolean can_pin_message;
         public User user;
         public String about;
-        public TL_contacts_link link;
+        public TL_contacts_link_layer101 link;
         public Photo profile_photo;
         public PeerNotifySettings notify_settings;
         public BotInfo bot_info;
         public int pinned_msg_id;
         public int common_chats_count;
         public int folder_id;
+        public TL_peerSettings settings;
 
         public static UserFull TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
             UserFull result = null;
             switch (constructor) {
                 case 0x745559cc:
-                    result = new TL_userFull();
+                    result = new TL_userFull_layer101();
                     break;
                 case 0x8ea4a881:
                     result = new TL_userFull_layer98();
                     break;
+                case 0xedf17c12:
+                    result = new TL_userFull();
+                    break;
             }
             if (result == null && exception) {
                 throw new RuntimeException(String.format("can't parse magic %x in UserFull", constructor));
@@ -28193,7 +28517,7 @@
         }
     }
 
-    public static class TL_userFull extends UserFull {
+    public static class TL_userFull_layer101 extends TL_userFull {
         public static int constructor = 0x745559cc;
 
 
@@ -28207,7 +28531,7 @@
             if ((flags & 2) != 0) {
                 about = stream.readString(exception);
             }
-            link = TL_contacts_link.TLdeserialize(stream, stream.readInt32(exception), exception);
+            link = TL_contacts_link_layer101.TLdeserialize(stream, stream.readInt32(exception), exception);
             if ((flags & 4) != 0) {
                 profile_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
             }
@@ -28267,7 +28591,7 @@
             if ((flags & 2) != 0) {
                 about = stream.readString(exception);
             }
-            link = TL_contacts_link.TLdeserialize(stream, stream.readInt32(exception), exception);
+            link = TL_contacts_link_layer101.TLdeserialize(stream, stream.readInt32(exception), exception);
             if ((flags & 4) != 0) {
                 profile_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
             }
@@ -28307,6 +28631,66 @@
         }
     }
 
+    public static class TL_userFull extends UserFull {
+        public static int constructor = 0xedf17c12;
+
+
+        public void readParams(AbstractSerializedData stream, boolean exception) {
+            flags = stream.readInt32(exception);
+            blocked = (flags & 1) != 0;
+            phone_calls_available = (flags & 16) != 0;
+            phone_calls_private = (flags & 32) != 0;
+            can_pin_message = (flags & 128) != 0;
+            user = User.TLdeserialize(stream, stream.readInt32(exception), exception);
+            if ((flags & 2) != 0) {
+                about = stream.readString(exception);
+            }
+            settings = TL_peerSettings.TLdeserialize(stream, stream.readInt32(exception), exception);
+            if ((flags & 4) != 0) {
+                profile_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
+            }
+            notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
+            if ((flags & 8) != 0) {
+                bot_info = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
+            }
+            if ((flags & 64) != 0) {
+                pinned_msg_id = stream.readInt32(exception);
+            }
+            common_chats_count = stream.readInt32(exception);
+            if ((flags & 2048) != 0) {
+                folder_id = stream.readInt32(exception);
+            }
+        }
+
+        public void serializeToStream(AbstractSerializedData stream) {
+            stream.writeInt32(constructor);
+            flags = blocked ? (flags | 1) : (flags &~ 1);
+            flags = phone_calls_available ? (flags | 16) : (flags &~ 16);
+            flags = phone_calls_private ? (flags | 32) : (flags &~ 32);
+            flags = can_pin_message ? (flags | 128) : (flags &~ 128);
+            stream.writeInt32(flags);
+            user.serializeToStream(stream);
+            if ((flags & 2) != 0) {
+                stream.writeString(about);
+            }
+            settings.serializeToStream(stream);
+            if ((flags & 4) != 0) {
+                profile_photo.serializeToStream(stream);
+            }
+            notify_settings.serializeToStream(stream);
+            if ((flags & 8) != 0) {
+                bot_info.serializeToStream(stream);
+            }
+            if ((flags & 64) != 0) {
+                stream.writeInt32(pinned_msg_id);
+            }
+            stream.writeInt32(common_chats_count);
+            if ((flags & 2048) != 0) {
+                stream.writeInt32(folder_id);
+            }
+        }
+    }
+
 	public static abstract class Updates extends TLObject {
 		public ArrayList<Update> updates = new ArrayList<>();
 		public ArrayList<User> users = new ArrayList<>();
@@ -30618,8 +31002,10 @@
 	}
 
 	public static class TL_account_registerDevice extends TLObject {
-		public static int constructor = 0x5cbea590;
+        public static int constructor = 0x68976c6f;
 
+        public int flags;
+        public boolean no_muted;
 		public int token_type;
 		public String token;
 		public boolean app_sandbox;
@@ -30632,6 +31018,8 @@
 
 		public void serializeToStream(AbstractSerializedData stream) {
 			stream.writeInt32(constructor);
+            flags = no_muted ? (flags | 1) : (flags &~ 1);
+            stream.writeInt32(flags);
 			stream.writeInt32(token_type);
 			stream.writeString(token);
 			stream.writeBool(app_sandbox);
@@ -30889,28 +31277,13 @@
 		}
 	}
 
-	public static class TL_contacts_deleteContact extends TLObject {
-		public static int constructor = 0x8e953744;
-
-		public InputUser id;
-
-		public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
-			return TL_contacts_link.TLdeserialize(stream, constructor, exception);
-		}
-
-		public void serializeToStream(AbstractSerializedData stream) {
-			stream.writeInt32(constructor);
-			id.serializeToStream(stream);
-		}
-	}
-
 	public static class TL_contacts_deleteContacts extends TLObject {
-		public static int constructor = 0x59ab389e;
+        public static int constructor = 0x96a0e00;
 
 		public ArrayList<InputUser> id = new ArrayList<>();
 
 		public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
-			return Bool.TLdeserialize(stream, constructor, exception);
+            return Updates.TLdeserialize(stream, constructor, exception);
 		}
 
 		public void serializeToStream(AbstractSerializedData stream) {
@@ -31057,6 +31430,61 @@
 		}
 	}
 
+    public static class TL_contacts_addContact extends TLObject {
+        public static int constructor = 0xe8f463d0;
+
+        public int flags;
+        public boolean add_phone_privacy_exception;
+        public InputUser id;
+        public String first_name;
+        public String last_name;
+        public String phone;
+
+        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
+            return Updates.TLdeserialize(stream, constructor, exception);
+        }
+
+        public void serializeToStream(AbstractSerializedData stream) {
+            stream.writeInt32(constructor);
+            flags = add_phone_privacy_exception ? (flags | 1) : (flags &~ 1);
+            stream.writeInt32(flags);
+            id.serializeToStream(stream);
+            stream.writeString(first_name);
+            stream.writeString(last_name);
+            stream.writeString(phone);
+        }
+    }
+
+    public static class TL_contacts_acceptContact extends TLObject {
+        public static int constructor = 0xf831a20f;
+
+        public InputUser id;
+
+        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
+            return Updates.TLdeserialize(stream, constructor, exception);
+        }
+
+        public void serializeToStream(AbstractSerializedData stream) {
+            stream.writeInt32(constructor);
+            id.serializeToStream(stream);
+        }
+    }
+
+    public static class TL_contacts_getLocated extends TLObject {
+        public static int constructor = 0xa356056;
+
+        public InputGeoPoint geo_point;
+
+        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
+            return Updates.TLdeserialize(stream, constructor, exception);
+        }
+
+        public void serializeToStream(AbstractSerializedData stream) {
+            stream.writeInt32(constructor);
+            geo_point.serializeToStream(stream);
+        }
+    }
+
 	public static class TL_messages_getMessages extends TLObject {
 		public static int constructor = 0x4222fa74;
 
@@ -31341,19 +31769,6 @@
         }
     }
 
-    public static class TL_channels_getBroadcastsForDiscussion extends TLObject {
-        public static int constructor = 0x1a87f304;
-
-
-        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
-            return messages_Chats.TLdeserialize(stream, constructor, exception);
-        }
-
-        public void serializeToStream(AbstractSerializedData stream) {
-            stream.writeInt32(constructor);
-        }
-    }
-
     public static class TL_channels_setDiscussionGroup extends TLObject {
         public static int constructor = 0x40582bb2;
 
@@ -31371,6 +31786,44 @@
         }
     }
 
+    public static class TL_channels_editCreator extends TLObject {
+        public static int constructor = 0x8f38cd1f;
+
+        public InputChannel channel;
+        public InputUser user_id;
+        public InputCheckPasswordSRP password;
+
+        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
+            return Updates.TLdeserialize(stream, constructor, exception);
+        }
+
+        public void serializeToStream(AbstractSerializedData stream) {
+            stream.writeInt32(constructor);
+            channel.serializeToStream(stream);
+            user_id.serializeToStream(stream);
+            password.serializeToStream(stream);
+        }
+    }
+
+    public static class TL_channels_editLocation extends TLObject {
+        public static int constructor = 0x58e63f6d;
+
+        public InputChannel channel;
+        public InputGeoPoint geo_point;
+        public String address;
+
+        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
+            return Bool.TLdeserialize(stream, constructor, exception);
+        }
+
+        public void serializeToStream(AbstractSerializedData stream) {
+            stream.writeInt32(constructor);
+            channel.serializeToStream(stream);
+            geo_point.serializeToStream(stream);
+            stream.writeString(address);
+        }
+    }
+
 	public static class TL_messages_editChatAdmin extends TLObject {
 		public static int constructor = 0xa9e69f2e;
 
@@ -31406,8 +31859,10 @@
 	}
 
     public static class TL_messages_searchGlobal extends TLObject {
-        public static int constructor = 0xf79c611;
+        public static int constructor = 0xbf7225a4;
 
+        public int flags;
+        public int folder_id;
         public String q;
         public int offset_rate;
         public InputPeer offset_peer;
@@ -31420,6 +31875,10 @@
 
         public void serializeToStream(AbstractSerializedData stream) {
             stream.writeInt32(constructor);
+            stream.writeInt32(flags);
+            if ((flags & 1) != 0) {
+                stream.writeInt32(folder_id);
+            }
             stream.writeString(q);
             stream.writeInt32(offset_rate);
             offset_peer.serializeToStream(stream);
@@ -31670,21 +32129,6 @@
 		}
 	}
 
-	public static class TL_messages_hideReportSpam extends TLObject {
-		public static int constructor = 0xa8f1709b;
-
-		public InputPeer peer;
-
-		public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
-			return Bool.TLdeserialize(stream, constructor, exception);
-		}
-
-		public void serializeToStream(AbstractSerializedData stream) {
-			stream.writeInt32(constructor);
-			peer.serializeToStream(stream);
-		}
-	}
-
 	public static class TL_messages_getPeerSettings extends TLObject {
 		public static int constructor = 0x3672e09c;
 
@@ -34502,6 +34946,21 @@
         }
     }
 
+    public static class TL_messages_hidePeerSettingsBar extends TLObject {
+        public static int constructor = 0x4facb138;
+
+        public InputPeer peer;
+
+        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
+            return Bool.TLdeserialize(stream, constructor, exception);
+        }
+
+        public void serializeToStream(AbstractSerializedData stream) {
+            stream.writeInt32(constructor);
+            peer.serializeToStream(stream);
+        }
+    }
+
 	public static class TL_help_getAppChangelog extends TLObject {
 		public static int constructor = 0x9010ef6f;
 
@@ -34905,13 +35364,15 @@
     }
 
 	public static class TL_channels_createChannel extends TLObject {
-		public static int constructor = 0xf4893d7f;
+        public static int constructor = 0x3d5fb10f;
 
 		public int flags;
 		public boolean broadcast;
 		public boolean megagroup;
 		public String title;
 		public String about;
+        public InputGeoPoint geo_point;
+        public String address;
 
 		public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
 			return Updates.TLdeserialize(stream, constructor, exception);
@@ -34924,6 +35385,12 @@
 			stream.writeInt32(flags);
 			stream.writeString(title);
 			stream.writeString(about);
+            if ((flags & 4) != 0) {
+                geo_point.serializeToStream(stream);
+            }
+            if ((flags & 4) != 0) {
+                stream.writeString(address);
+            }
 		}
 	}
 
@@ -35116,15 +35583,21 @@
 	}
 
 	public static class TL_channels_getAdminedPublicChannels extends TLObject {
-		public static int constructor = 0x8d8d82d7;
+        public static int constructor = 0xf8b036af;
 
+        public int flags;
+        public boolean by_location;
+        public boolean check_limit;
 
 		public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
-			return TL_messages_chats.TLdeserialize(stream, constructor, exception);
+            return messages_Chats.TLdeserialize(stream, constructor, exception);
 		}
 
 		public void serializeToStream(AbstractSerializedData stream) {
 			stream.writeInt32(constructor);
+            flags = by_location ? (flags | 1) : (flags &~ 1);
+            flags = check_limit ? (flags | 2) : (flags &~ 2);
+            stream.writeInt32(flags);
 		}
 	}
 
@@ -38237,7 +38710,7 @@
 	public static class TL_chatChannelParticipant extends ChatParticipant {
 		public static int constructor = 0xc8d7493e;
 
-		public TLRPC.ChannelParticipant channelParticipant;
+		public ChannelParticipant channelParticipant;
 	}
 	//ChatParticipant end
 
