testdiff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index 0e5bb04..6cc5195 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -96,14 +96,12 @@
 import org.telegram.messenger.BuildConfig;
 import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.ChatObject;
-import org.telegram.messenger.DataQuery;
-import org.telegram.messenger.DownloadController;
+import org.telegram.messenger.MediaDataController;
 import org.telegram.messenger.Emoji;
 import org.telegram.messenger.ImageLocation;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MediaController;
 import org.telegram.messenger.MessagesStorage;
-import org.telegram.messenger.NotificationsController;
 import org.telegram.messenger.SecretChatHelper;
 import org.telegram.messenger.SendMessagesHelper;
 import org.telegram.messenger.SharedConfig;
@@ -123,7 +121,6 @@
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.R;
-import org.telegram.messenger.UserConfig;
 import org.telegram.ui.ActionBar.ActionBarLayout;
 import org.telegram.ui.ActionBar.ActionBarPopupWindow;
 import org.telegram.ui.ActionBar.AlertDialog;
@@ -177,6 +174,7 @@
 import org.telegram.ui.Components.SizeNotifierFrameLayout;
 import org.telegram.ui.Components.StickersAlert;
 import org.telegram.ui.ActionBar.Theme;
+import org.telegram.ui.Components.TextStyleSpan;
 import org.telegram.ui.Components.TypefaceSpan;
 import org.telegram.ui.Components.URLSpanBotCommand;
 import org.telegram.ui.Components.URLSpanMono;
@@ -203,7 +201,7 @@
     protected TLRPC.Chat currentChat;
     protected TLRPC.User currentUser;
     protected TLRPC.EncryptedChat currentEncryptedChat;
-    private boolean userBlocked = false;
+    private boolean userBlocked;
 
     private ArrayList<ChatMessageCell> chatMessageCellsCache = new ArrayList<>();
 
@@ -264,11 +262,10 @@
     private ExtendedGridLayoutManager mentionGridLayoutManager;
     private AnimatorSet mentionListAnimation;
     private ChatAttachAlert chatAttachAlert;
-    private LinearLayout reportSpamView;
+    private FrameLayout topChatPanelView;
     private AnimatorSet reportSpamViewAnimator;
     private TextView addToContactsButton;
     private TextView reportSpamButton;
-    private FrameLayout reportSpamContainer;
     private ImageView closeReportSpam;
     private FragmentContextView fragmentContextView;
     private View replyLineView;
@@ -356,6 +353,7 @@
     private boolean allowContextBotPanelSecond = true;
     private AnimatorSet runningAnimation;
 
+    private MessageObject selectedObjectToEditCaption;
     private MessageObject selectedObject;
     private MessageObject.GroupedMessages selectedObjectGroup;
     private ArrayList<MessageObject> forwardingMessages;
@@ -428,6 +426,7 @@
     private int last_message_id = 0;
     private long mergeDialogId;
 
+    private boolean showScrollToMessageError;
     private int startLoadFromMessageId;
     private int startLoadFromMessageOffset = Integer.MAX_VALUE;
     private boolean needSelectFromMessageId;
@@ -601,7 +600,7 @@
                     if (view instanceof ChatActionCell && currentChat != null) {
                         object.dialogId = -currentChat.id;
                     }
-                    if (pinnedMessageView != null && pinnedMessageView.getTag() == null || reportSpamView != null && reportSpamView.getTag() == null) {
+                    if (pinnedMessageView != null && pinnedMessageView.getTag() == null || topChatPanelView != null && topChatPanelView.getTag() == null) {
                         object.clipTopAddition = AndroidUtilities.dp(48);
                     }
                     object.clipTopAddition += chatListViewClipTop;
@@ -690,6 +689,8 @@
     private final static int text_mono = 52;
     private final static int text_link = 53;
     private final static int text_regular = 54;
+    private final static int text_strike = 55;
+    private final static int text_underline = 56;
 
     private final static int search = 40;
 
@@ -754,10 +755,10 @@
         scrollToTopOnResume = arguments.getBoolean("scrollToTopOnResume", false);
 
         if (chatId != 0) {
-            currentChat = MessagesController.getInstance(currentAccount).getChat(chatId);
+            currentChat = getMessagesController().getChat(chatId);
             if (currentChat == null) {
                 final CountDownLatch countDownLatch = new CountDownLatch(1);
-                final MessagesStorage messagesStorage = MessagesStorage.getInstance(currentAccount);
+                final MessagesStorage messagesStorage = getMessagesStorage();
                 messagesStorage.getStorageQueue().postRunnable(() -> {
                     currentChat = messagesStorage.getChat(chatId);
                     countDownLatch.countDown();
@@ -768,7 +769,7 @@
                     FileLog.e(e);
                 }
                 if (currentChat != null) {
-                    MessagesController.getInstance(currentAccount).putChat(currentChat, true);
+                    getMessagesController().putChat(currentChat, true);
                 } else {
                     return false;
                 }
@@ -780,12 +781,12 @@
                 dialog_id = AndroidUtilities.makeBroadcastId(chatId);
             }
             if (ChatObject.isChannel(currentChat)) {
-                MessagesController.getInstance(currentAccount).startShortPoll(currentChat, false);
+                getMessagesController().startShortPoll(currentChat, false);
             }
         } else if (userId != 0) {
-            currentUser = MessagesController.getInstance(currentAccount).getUser(userId);
+            currentUser = getMessagesController().getUser(userId);
             if (currentUser == null) {
-                final MessagesStorage messagesStorage = MessagesStorage.getInstance(currentAccount);
+                final MessagesStorage messagesStorage = getMessagesStorage();
                 final CountDownLatch countDownLatch = new CountDownLatch(1);
                 messagesStorage.getStorageQueue().postRunnable(() -> {
                     currentUser = messagesStorage.getUser(userId);
@@ -797,7 +798,7 @@
                     FileLog.e(e);
                 }
                 if (currentUser != null) {
-                    MessagesController.getInstance(currentAccount).putUser(currentUser, true);
+                    getMessagesController().putUser(currentUser, true);
                 } else {
                     return false;
                 }
@@ -805,11 +806,11 @@
             dialog_id = userId;
             botUser = arguments.getString("botUser");
             if (inlineQuery != null) {
-                MessagesController.getInstance(currentAccount).sendBotStart(currentUser, inlineQuery);
+                getMessagesController().sendBotStart(currentUser, inlineQuery);
             }
         } else if (encId != 0) {
-            currentEncryptedChat = MessagesController.getInstance(currentAccount).getEncryptedChat(encId);
-            final MessagesStorage messagesStorage = MessagesStorage.getInstance(currentAccount);
+            currentEncryptedChat = getMessagesController().getEncryptedChat(encId);
+            final MessagesStorage messagesStorage = getMessagesStorage();
             if (currentEncryptedChat == null) {
                 final CountDownLatch countDownLatch = new CountDownLatch(1);
                 messagesStorage.getStorageQueue().postRunnable(() -> {
@@ -822,12 +823,12 @@
                     FileLog.e(e);
                 }
                 if (currentEncryptedChat != null) {
-                    MessagesController.getInstance(currentAccount).putEncryptedChat(currentEncryptedChat, true);
+                    getMessagesController().putEncryptedChat(currentEncryptedChat, true);
                 } else {
                     return false;
                 }
             }
-            currentUser = MessagesController.getInstance(currentAccount).getUser(currentEncryptedChat.user_id);
+            currentUser = getMessagesController().getUser(currentEncryptedChat.user_id);
             if (currentUser == null) {
                 final CountDownLatch countDownLatch = new CountDownLatch(1);
                 messagesStorage.getStorageQueue().postRunnable(() -> {
@@ -840,7 +841,7 @@
                     FileLog.e(e);
                 }
                 if (currentUser != null) {
-                    MessagesController.getInstance(currentAccount).putUser(currentUser, true);
+                    getMessagesController().putUser(currentUser, true);
                 } else {
                     return false;
                 }
@@ -856,66 +857,66 @@
             MediaController.getInstance().startMediaObserver();
         }
 
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.messagesDidLoad);
+        getNotificationCenter().addObserver(this, NotificationCenter.messagesDidLoad);
         NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.emojiDidLoad);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.didUpdateConnectionState);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.updateInterfaces);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.didReceiveNewMessages);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.closeChats);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.messagesRead);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.messagesDeleted);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.historyCleared);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.messageReceivedByServer);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.messageReceivedByAck);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.messageSendError);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.chatInfoDidLoad);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.contactsDidLoad);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.encryptedChatUpdated);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.messagesReadEncrypted);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.removeAllMessagesFromDialog);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.messagePlayingProgressDidChanged);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.messagePlayingDidReset);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.messagePlayingGoingToStop);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.messagePlayingPlayStateChanged);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.screenshotTook);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.blockedUsersDidLoad);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.fileNewChunkAvailable);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.didCreatedNewDeleteTask);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.messagePlayingDidStart);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.updateMessageMedia);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.replaceMessagesObjects);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.notificationsSettingsUpdated);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.replyMessagesDidLoad);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.didReceivedWebpages);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.didReceivedWebpagesInUpdates);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.messagesReadContent);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.botInfoDidLoad);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.botKeyboardDidLoad);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.chatSearchResultsAvailable);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.chatSearchResultsLoading);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.didUpdatedMessagesViews);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.chatInfoCantLoad);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.pinnedMessageDidLoad);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.peerSettingsDidLoad);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.newDraftReceived);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.userInfoDidLoad);
+        getNotificationCenter().addObserver(this, NotificationCenter.didUpdateConnectionState);
+        getNotificationCenter().addObserver(this, NotificationCenter.updateInterfaces);
+        getNotificationCenter().addObserver(this, NotificationCenter.didReceiveNewMessages);
+        getNotificationCenter().addObserver(this, NotificationCenter.closeChats);
+        getNotificationCenter().addObserver(this, NotificationCenter.messagesRead);
+        getNotificationCenter().addObserver(this, NotificationCenter.messagesDeleted);
+        getNotificationCenter().addObserver(this, NotificationCenter.historyCleared);
+        getNotificationCenter().addObserver(this, NotificationCenter.messageReceivedByServer);
+        getNotificationCenter().addObserver(this, NotificationCenter.messageReceivedByAck);
+        getNotificationCenter().addObserver(this, NotificationCenter.messageSendError);
+        getNotificationCenter().addObserver(this, NotificationCenter.chatInfoDidLoad);
+        getNotificationCenter().addObserver(this, NotificationCenter.contactsDidLoad);
+        getNotificationCenter().addObserver(this, NotificationCenter.encryptedChatUpdated);
+        getNotificationCenter().addObserver(this, NotificationCenter.messagesReadEncrypted);
+        getNotificationCenter().addObserver(this, NotificationCenter.removeAllMessagesFromDialog);
+        getNotificationCenter().addObserver(this, NotificationCenter.messagePlayingProgressDidChanged);
+        getNotificationCenter().addObserver(this, NotificationCenter.messagePlayingDidReset);
+        getNotificationCenter().addObserver(this, NotificationCenter.messagePlayingGoingToStop);
+        getNotificationCenter().addObserver(this, NotificationCenter.messagePlayingPlayStateChanged);
+        getNotificationCenter().addObserver(this, NotificationCenter.screenshotTook);
+        getNotificationCenter().addObserver(this, NotificationCenter.blockedUsersDidLoad);
+        getNotificationCenter().addObserver(this, NotificationCenter.fileNewChunkAvailable);
+        getNotificationCenter().addObserver(this, NotificationCenter.didCreatedNewDeleteTask);
+        getNotificationCenter().addObserver(this, NotificationCenter.messagePlayingDidStart);
+        getNotificationCenter().addObserver(this, NotificationCenter.updateMessageMedia);
+        getNotificationCenter().addObserver(this, NotificationCenter.replaceMessagesObjects);
+        getNotificationCenter().addObserver(this, NotificationCenter.notificationsSettingsUpdated);
+        getNotificationCenter().addObserver(this, NotificationCenter.replyMessagesDidLoad);
+        getNotificationCenter().addObserver(this, NotificationCenter.didReceivedWebpages);
+        getNotificationCenter().addObserver(this, NotificationCenter.didReceivedWebpagesInUpdates);
+        getNotificationCenter().addObserver(this, NotificationCenter.messagesReadContent);
+        getNotificationCenter().addObserver(this, NotificationCenter.botInfoDidLoad);
+        getNotificationCenter().addObserver(this, NotificationCenter.botKeyboardDidLoad);
+        getNotificationCenter().addObserver(this, NotificationCenter.chatSearchResultsAvailable);
+        getNotificationCenter().addObserver(this, NotificationCenter.chatSearchResultsLoading);
+        getNotificationCenter().addObserver(this, NotificationCenter.didUpdatedMessagesViews);
+        getNotificationCenter().addObserver(this, NotificationCenter.chatInfoCantLoad);
+        getNotificationCenter().addObserver(this, NotificationCenter.pinnedMessageDidLoad);
+        getNotificationCenter().addObserver(this, NotificationCenter.peerSettingsDidLoad);
+        getNotificationCenter().addObserver(this, NotificationCenter.newDraftReceived);
+        getNotificationCenter().addObserver(this, NotificationCenter.userInfoDidLoad);
         NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.didSetNewWallpapper);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.channelRightsUpdated);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.updateMentionsCount);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.audioRecordTooShort);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.didUpdatePollResults);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.chatOnlineCountDidLoad);
-        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.videoLoadingStateChanged);
+        getNotificationCenter().addObserver(this, NotificationCenter.channelRightsUpdated);
+        getNotificationCenter().addObserver(this, NotificationCenter.updateMentionsCount);
+        getNotificationCenter().addObserver(this, NotificationCenter.audioRecordTooShort);
+        getNotificationCenter().addObserver(this, NotificationCenter.didUpdatePollResults);
+        getNotificationCenter().addObserver(this, NotificationCenter.chatOnlineCountDidLoad);
+        getNotificationCenter().addObserver(this, NotificationCenter.videoLoadingStateChanged);
 
         super.onFragmentCreate();
 
         if (currentEncryptedChat == null && !isBroadcast) {
-            DataQuery.getInstance(currentAccount).loadBotKeyboard(dialog_id);
+            getMediaDataController().loadBotKeyboard(dialog_id);
         }
 
         loading = true;
-        MessagesController.getInstance(currentAccount).loadPeerSettings(currentUser, currentChat);
-        MessagesController.getInstance(currentAccount).setLastCreatedDialogId(dialog_id, true);
+        getMessagesController().loadPeerSettings(currentUser, currentChat);
+        getMessagesController().setLastCreatedDialogId(dialog_id, true);
 
         if (startLoadFromMessageId == 0) {
             SharedPreferences sharedPreferences = MessagesController.getNotificationsSettings(currentAccount);
@@ -927,6 +928,7 @@
                 startLoadFromMessageId = messageId;
             }
         } else {
+            showScrollToMessageError = true;
             needSelectFromMessageId = true;
         }
 
@@ -934,13 +936,13 @@
             waitingForLoad.add(lastLoadIndex);
             if (migrated_to != 0) {
                 mergeDialogId = migrated_to;
-                MessagesController.getInstance(currentAccount).loadMessages(mergeDialogId, loadingFromOldPosition ? 50 : (AndroidUtilities.isTablet() ? 30 : 20), startLoadFromMessageId, 0, true, 0, classGuid, 3, 0, ChatObject.isChannel(currentChat), lastLoadIndex++);
+                getMessagesController().loadMessages(mergeDialogId, loadingFromOldPosition ? 50 : (AndroidUtilities.isTablet() ? 30 : 20), startLoadFromMessageId, 0, true, 0, classGuid, 3, 0, ChatObject.isChannel(currentChat), lastLoadIndex++);
             } else {
-                MessagesController.getInstance(currentAccount).loadMessages(dialog_id, loadingFromOldPosition ? 50 : (AndroidUtilities.isTablet() ? 30 : 20), startLoadFromMessageId, 0, true, 0, classGuid, 3, 0, ChatObject.isChannel(currentChat), lastLoadIndex++);
+                getMessagesController().loadMessages(dialog_id, loadingFromOldPosition ? 50 : (AndroidUtilities.isTablet() ? 30 : 20), startLoadFromMessageId, 0, true, 0, classGuid, 3, 0, ChatObject.isChannel(currentChat), lastLoadIndex++);
             }
         } else {
             waitingForLoad.add(lastLoadIndex);
-            MessagesController.getInstance(currentAccount).loadMessages(dialog_id, AndroidUtilities.isTablet() ? 30 : 20, 0, 0, true, 0, classGuid, 2, 0, ChatObject.isChannel(currentChat), lastLoadIndex++);
+            getMessagesController().loadMessages(dialog_id, AndroidUtilities.isTablet() ? 30 : 20, 0, 0, true, 0, classGuid, 2, 0, ChatObject.isChannel(currentChat), lastLoadIndex++);
         }
 
         if (currentChat != null) {
@@ -948,7 +950,7 @@
             if (isBroadcast) {
                 countDownLatch = new CountDownLatch(1);
             }
-            MessagesController.getInstance(currentAccount).loadChatInfo(currentChat.id, countDownLatch, true);
+            getMessagesController().loadChatInfo(currentChat.id, countDownLatch, true);
             chatInfo = getMessagesController().getChatFull(currentChat.id);
             if (isBroadcast && countDownLatch != null) {
                 try {
@@ -958,31 +960,31 @@
                 }
             }
         } else if (currentUser != null) {
-            MessagesController.getInstance(currentAccount).loadUserInfo(currentUser, true, classGuid);
+            getMessagesController().loadUserInfo(currentUser, true, classGuid);
         }
 
         if (userId != 0 && currentUser.bot) {
-            DataQuery.getInstance(currentAccount).loadBotInfo(userId, true, classGuid);
+            getMediaDataController().loadBotInfo(userId, true, classGuid);
         } else if (chatInfo instanceof TLRPC.TL_chatFull) {
             for (int a = 0; a < chatInfo.participants.participants.size(); a++) {
                 TLRPC.ChatParticipant participant = chatInfo.participants.participants.get(a);
-                TLRPC.User user = MessagesController.getInstance(currentAccount).getUser(participant.user_id);
+                TLRPC.User user = getMessagesController().getUser(participant.user_id);
                 if (user != null && user.bot) {
-                    DataQuery.getInstance(currentAccount).loadBotInfo(user.id, true, classGuid);
+                    getMediaDataController().loadBotInfo(user.id, true, classGuid);
                 }
             }
         }
 
         if (currentUser != null) {
-            userBlocked = MessagesController.getInstance(currentAccount).blockedUsers.indexOfKey(currentUser.id) >= 0;
+            userBlocked = getMessagesController().blockedUsers.indexOfKey(currentUser.id) >= 0;
         }
 
         if (AndroidUtilities.isTablet()) {
-            NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.openedChatChanged, dialog_id, false);
+            getNotificationCenter().postNotificationName(NotificationCenter.openedChatChanged, dialog_id, false);
         }
 
         if (currentEncryptedChat != null && AndroidUtilities.getMyLayerVersion(currentEncryptedChat.layer) != SecretChatHelper.CURRENT_SECRET_CHAT_LAYER) {
-            SecretChatHelper.getInstance(currentAccount).sendNotifyLayerMessage(currentEncryptedChat, null);
+            getSecretChatHelper().sendNotifyLayerMessage(currentEncryptedChat, null);
         }
 
         return true;
@@ -1003,60 +1005,60 @@
         if (undoView != null) {
             undoView.hide(true, 0);
         }
-        MessagesController.getInstance(currentAccount).setLastCreatedDialogId(dialog_id, false);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.messagesDidLoad);
+        getMessagesController().setLastCreatedDialogId(dialog_id, false);
+        getNotificationCenter().removeObserver(this, NotificationCenter.messagesDidLoad);
         NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.emojiDidLoad);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.didUpdateConnectionState);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.updateInterfaces);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.didReceiveNewMessages);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.closeChats);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.messagesRead);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.messagesDeleted);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.historyCleared);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.messageReceivedByServer);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.messageReceivedByAck);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.messageSendError);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.chatInfoDidLoad);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.encryptedChatUpdated);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.messagesReadEncrypted);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.removeAllMessagesFromDialog);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.contactsDidLoad);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.messagePlayingProgressDidChanged);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.messagePlayingDidReset);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.screenshotTook);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.blockedUsersDidLoad);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.fileNewChunkAvailable);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.didCreatedNewDeleteTask);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.messagePlayingDidStart);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.messagePlayingGoingToStop);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.updateMessageMedia);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.replaceMessagesObjects);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.notificationsSettingsUpdated);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.replyMessagesDidLoad);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.didReceivedWebpages);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.didReceivedWebpagesInUpdates);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.messagesReadContent);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.botInfoDidLoad);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.botKeyboardDidLoad);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.chatSearchResultsAvailable);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.chatSearchResultsLoading);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.messagePlayingPlayStateChanged);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.didUpdatedMessagesViews);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.chatInfoCantLoad);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.pinnedMessageDidLoad);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.peerSettingsDidLoad);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.newDraftReceived);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.userInfoDidLoad);
+        getNotificationCenter().removeObserver(this, NotificationCenter.didUpdateConnectionState);
+        getNotificationCenter().removeObserver(this, NotificationCenter.updateInterfaces);
+        getNotificationCenter().removeObserver(this, NotificationCenter.didReceiveNewMessages);
+        getNotificationCenter().removeObserver(this, NotificationCenter.closeChats);
+        getNotificationCenter().removeObserver(this, NotificationCenter.messagesRead);
+        getNotificationCenter().removeObserver(this, NotificationCenter.messagesDeleted);
+        getNotificationCenter().removeObserver(this, NotificationCenter.historyCleared);
+        getNotificationCenter().removeObserver(this, NotificationCenter.messageReceivedByServer);
+        getNotificationCenter().removeObserver(this, NotificationCenter.messageReceivedByAck);
+        getNotificationCenter().removeObserver(this, NotificationCenter.messageSendError);
+        getNotificationCenter().removeObserver(this, NotificationCenter.chatInfoDidLoad);
+        getNotificationCenter().removeObserver(this, NotificationCenter.encryptedChatUpdated);
+        getNotificationCenter().removeObserver(this, NotificationCenter.messagesReadEncrypted);
+        getNotificationCenter().removeObserver(this, NotificationCenter.removeAllMessagesFromDialog);
+        getNotificationCenter().removeObserver(this, NotificationCenter.contactsDidLoad);
+        getNotificationCenter().removeObserver(this, NotificationCenter.messagePlayingProgressDidChanged);
+        getNotificationCenter().removeObserver(this, NotificationCenter.messagePlayingDidReset);
+        getNotificationCenter().removeObserver(this, NotificationCenter.screenshotTook);
+        getNotificationCenter().removeObserver(this, NotificationCenter.blockedUsersDidLoad);
+        getNotificationCenter().removeObserver(this, NotificationCenter.fileNewChunkAvailable);
+        getNotificationCenter().removeObserver(this, NotificationCenter.didCreatedNewDeleteTask);
+        getNotificationCenter().removeObserver(this, NotificationCenter.messagePlayingDidStart);
+        getNotificationCenter().removeObserver(this, NotificationCenter.messagePlayingGoingToStop);
+        getNotificationCenter().removeObserver(this, NotificationCenter.updateMessageMedia);
+        getNotificationCenter().removeObserver(this, NotificationCenter.replaceMessagesObjects);
+        getNotificationCenter().removeObserver(this, NotificationCenter.notificationsSettingsUpdated);
+        getNotificationCenter().removeObserver(this, NotificationCenter.replyMessagesDidLoad);
+        getNotificationCenter().removeObserver(this, NotificationCenter.didReceivedWebpages);
+        getNotificationCenter().removeObserver(this, NotificationCenter.didReceivedWebpagesInUpdates);
+        getNotificationCenter().removeObserver(this, NotificationCenter.messagesReadContent);
+        getNotificationCenter().removeObserver(this, NotificationCenter.botInfoDidLoad);
+        getNotificationCenter().removeObserver(this, NotificationCenter.botKeyboardDidLoad);
+        getNotificationCenter().removeObserver(this, NotificationCenter.chatSearchResultsAvailable);
+        getNotificationCenter().removeObserver(this, NotificationCenter.chatSearchResultsLoading);
+        getNotificationCenter().removeObserver(this, NotificationCenter.messagePlayingPlayStateChanged);
+        getNotificationCenter().removeObserver(this, NotificationCenter.didUpdatedMessagesViews);
+        getNotificationCenter().removeObserver(this, NotificationCenter.chatInfoCantLoad);
+        getNotificationCenter().removeObserver(this, NotificationCenter.pinnedMessageDidLoad);
+        getNotificationCenter().removeObserver(this, NotificationCenter.peerSettingsDidLoad);
+        getNotificationCenter().removeObserver(this, NotificationCenter.newDraftReceived);
+        getNotificationCenter().removeObserver(this, NotificationCenter.userInfoDidLoad);
         NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.didSetNewWallpapper);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.channelRightsUpdated);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.updateMentionsCount);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.audioRecordTooShort);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.didUpdatePollResults);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.chatOnlineCountDidLoad);
-        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.videoLoadingStateChanged);
+        getNotificationCenter().removeObserver(this, NotificationCenter.channelRightsUpdated);
+        getNotificationCenter().removeObserver(this, NotificationCenter.updateMentionsCount);
+        getNotificationCenter().removeObserver(this, NotificationCenter.audioRecordTooShort);
+        getNotificationCenter().removeObserver(this, NotificationCenter.didUpdatePollResults);
+        getNotificationCenter().removeObserver(this, NotificationCenter.chatOnlineCountDidLoad);
+        getNotificationCenter().removeObserver(this, NotificationCenter.videoLoadingStateChanged);
 
         if (AndroidUtilities.isTablet()) {
-            NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.openedChatChanged, dialog_id, true);
+            getNotificationCenter().postNotificationName(NotificationCenter.openedChatChanged, dialog_id, true);
         }
         if (currentUser != null) {
             MediaController.getInstance().stopMediaObserver();
@@ -1071,7 +1073,7 @@
             }
         }
         if (currentUser != null) {
-            MessagesController.getInstance(currentAccount).cancelLoadFullUser(currentUser.id);
+            getMessagesController().cancelLoadFullUser(currentUser.id);
         }
         AndroidUtilities.removeAdjustResize(getParentActivity(), classGuid);
         if (stickersAdapter != null) {
@@ -1082,7 +1084,7 @@
         }
         AndroidUtilities.unlockOrientation(getParentActivity());
         if (ChatObject.isChannel(currentChat)) {
-            MessagesController.getInstance(currentAccount).startShortPoll(currentChat, true);
+            getMessagesController().startShortPoll(currentChat, true);
         }
     }
 
@@ -1199,15 +1201,16 @@
 
                     AlertsCreator.createClearOrDeleteDialogAlert(ChatActivity.this, id == clear_history, currentChat, currentUser, currentEncryptedChat != null, (param) -> {
                         if (id == clear_history && ChatObject.isChannel(currentChat) && (!currentChat.megagroup || !TextUtils.isEmpty(currentChat.username))) {
-                            MessagesController.getInstance(currentAccount).deleteDialog(dialog_id, 2, param);
+                            getMessagesController().deleteDialog(dialog_id, 2, param);
                         } else {
                             if (id != clear_history) {
-                                NotificationCenter.getInstance(currentAccount).removeObserver(ChatActivity.this, NotificationCenter.closeChats);
-                                NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.closeChats);
+                                getNotificationCenter().removeObserver(ChatActivity.this, NotificationCenter.closeChats);
+                                getNotificationCenter().postNotificationName(NotificationCenter.closeChats);
                                 finishFragment();
-                                NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.needDeleteDialog, dialog_id, currentUser, currentChat, param);
+                                getNotificationCenter().postNotificationName(NotificationCenter.needDeleteDialog, dialog_id, currentUser, currentChat, param);
                             } else {
                                 clearingHistory = true;
+                                undoView.setAdditionalTranslationY(0);
                                 undoView.showWithAction(dialog_id, id == clear_history ? UndoView.ACTION_CLEAR : UndoView.ACTION_DELETE, () -> {
                                     if (id == clear_history) {
                                         if (chatInfo != null && chatInfo.pinned_msg_id != 0) {
@@ -1219,19 +1222,19 @@
                                             preferences.edit().putInt("pin_" + dialog_id, userInfo.pinned_msg_id).commit();
                                             updatePinnedMessageView(true);
                                         }
-                                        MessagesController.getInstance(currentAccount).deleteDialog(dialog_id, 1, param);
+                                        getMessagesController().deleteDialog(dialog_id, 1, param);
                                         clearingHistory = false;
                                         clearHistory(false);
                                         chatAdapter.notifyDataSetChanged();
                                     } else {
                                         if (isChat) {
                                             if (ChatObject.isNotInChat(currentChat)) {
-                                                MessagesController.getInstance(currentAccount).deleteDialog(dialog_id, 0, param);
+                                                getMessagesController().deleteDialog(dialog_id, 0, param);
                                             } else {
-                                                MessagesController.getInstance(currentAccount).deleteUserFromChat((int) -dialog_id, MessagesController.getInstance(currentAccount).getUser(UserConfig.getInstance(currentAccount).getClientUserId()), null);
+                                                getMessagesController().deleteUserFromChat((int) -dialog_id, getMessagesController().getUser(getUserConfig().getClientUserId()), null);
                                             }
                                         } else {
-                                            MessagesController.getInstance(currentAccount).deleteDialog(dialog_id, 0, param);
+                                            getMessagesController().deleteDialog(dialog_id, 0, param);
                                         }
                                         finishFragment();
                                     }
@@ -1247,19 +1250,19 @@
                     if (currentUser == null || getParentActivity() == null) {
                         return;
                     }
-                    if (currentUser.phone != null && currentUser.phone.length() != 0) {
+                    if (addToContactsButton.getTag() != null) {
+                        shareMyContact((Integer) addToContactsButton.getTag(), null);
+                    } else {
                         Bundle args = new Bundle();
                         args.putInt("user_id", currentUser.id);
                         args.putBoolean("addContact", true);
                         presentFragment(new ContactAddActivity(args));
-                    } else {
-                        shareMyContact(replyingMessageObject);
                     }
                 } else if (id == mute) {
                     toggleMute(false);
                 } else if (id == add_shortcut) {
                     try {
-                        DataQuery.getInstance(currentAccount).installShortcut(currentUser.id);
+                        getMediaDataController().installShortcut(currentUser.id);
                     } catch (Exception e) {
                         FileLog.e(e);
                     }
@@ -1269,7 +1272,7 @@
                     for (int a = 0; a < 2; a++) {
                         for (int b = 0; b < selectedMessagesCanStarIds[a].size(); b++) {
                             MessageObject msg = selectedMessagesCanStarIds[a].valueAt(b);
-                            DataQuery.getInstance(currentAccount).addRecentSticker(DataQuery.TYPE_FAVE, msg, msg.getDocument(), (int) (System.currentTimeMillis() / 1000), !hasUnfavedSelected);
+                            getMediaDataController().addRecentSticker(MediaDataController.TYPE_FAVE, msg, msg.getDocument(), (int) (System.currentTimeMillis() / 1000), !hasUnfavedSelected);
                         }
                     }
                     for (int a = 1; a >= 0; a--) {
@@ -1304,14 +1307,14 @@
                     }
                     openAttachMenu();
                 } else if (id == bot_help) {
-                    SendMessagesHelper.getInstance(currentAccount).sendMessage("/help", dialog_id, null, null, false, null, null, null);
+                    getSendMessagesHelper().sendMessage("/help", dialog_id, null, null, false, null, null, null);
                 } else if (id == bot_settings) {
-                    SendMessagesHelper.getInstance(currentAccount).sendMessage("/settings", dialog_id, null, null, false, null, null, null);
+                    getSendMessagesHelper().sendMessage("/settings", dialog_id, null, null, false, null, null, null);
                 } else if (id == search) {
                     openSearchWithText(null);
                 } else if(id == call) {
                     if (currentUser != null && getParentActivity() != null) {
-                        VoIPHelper.startCall(currentUser, getParentActivity(), MessagesController.getInstance(currentAccount).getUserFull(currentUser.id));
+                        VoIPHelper.startCall(currentUser, getParentActivity(), getMessagesController().getUserFull(currentUser.id));
                     }
                 } else if (id == text_bold) {
                     if (chatActivityEnterView != null) {
@@ -1328,6 +1331,16 @@
                         chatActivityEnterView.getEditField().setSelectionOverride(editTextStart, editTextEnd);
                         chatActivityEnterView.getEditField().makeSelectedMono();
                     }
+                } else if (id == text_strike) {
+                    if (chatActivityEnterView != null) {
+                        chatActivityEnterView.getEditField().setSelectionOverride(editTextStart, editTextEnd);
+                        chatActivityEnterView.getEditField().makeSelectedStrike();
+                    }
+                } else if (id == text_underline) {
+                    if (chatActivityEnterView != null) {
+                        chatActivityEnterView.getEditField().setSelectionOverride(editTextStart, editTextEnd);
+                        chatActivityEnterView.getEditField().makeSelectedUnderline();
+                    }
                 } else if (id == text_link) {
                     if (chatActivityEnterView != null) {
                         chatActivityEnterView.getEditField().setSelectionOverride(editTextStart, editTextEnd);
@@ -1425,7 +1438,7 @@
                 public void onSearchPressed(EditText editText) {
                     searchWas = true;
                     updateSearchButtons(0, 0, -1);
-                    DataQuery.getInstance(currentAccount).searchMessagesInChat(editText.getText().toString(), dialog_id, mergeDialogId, classGuid, 0, searchingUserMessages);
+                    getMediaDataController().searchMessagesInChat(editText.getText().toString(), dialog_id, mergeDialogId, classGuid, 0, searchingUserMessages);
                 }
 
                 @Override
@@ -1467,7 +1480,7 @@
         headerItem.setContentDescription(LocaleController.getString("AccDescrMoreOptions", R.string.AccDescrMoreOptions));
         if (currentUser != null) {
             headerItem.addSubItem(call, R.drawable.msg_callback, LocaleController.getString("Call", R.string.Call));
-            TLRPC.UserFull userFull = MessagesController.getInstance(currentAccount).getUserFull(currentUser.id);
+            TLRPC.UserFull userFull = getMessagesController().getUserFull(currentUser.id);
             if (userFull != null && userFull.phone_calls_available) {
                 headerItem.showSubItem(call);
             } else {
@@ -1487,6 +1500,18 @@
         stringBuilder = new SpannableStringBuilder(LocaleController.getString("Mono", R.string.Mono));
         stringBuilder.setSpan(new TypefaceSpan(Typeface.MONOSPACE), 0, stringBuilder.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
         editTextItem.addSubItem(text_mono, stringBuilder);
+        if (currentEncryptedChat != null && AndroidUtilities.getPeerLayerVersion(currentEncryptedChat.layer) >= 101) {
+            stringBuilder = new SpannableStringBuilder(LocaleController.getString("Strike", R.string.Strike));
+            TextStyleSpan.TextStyleRun run = new TextStyleSpan.TextStyleRun();
+            run.flags |= TextStyleSpan.FLAG_STYLE_STRIKE;
+            stringBuilder.setSpan(new TextStyleSpan(run), 0, stringBuilder.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+            editTextItem.addSubItem(text_strike, stringBuilder);
+            stringBuilder = new SpannableStringBuilder(LocaleController.getString("Underline", R.string.Underline));
+            run = new TextStyleSpan.TextStyleRun();
+            run.flags |= TextStyleSpan.FLAG_STYLE_UNDERLINE;
+            stringBuilder.setSpan(new TextStyleSpan(run), 0, stringBuilder.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+            editTextItem.addSubItem(text_underline, stringBuilder);
+        }
         editTextItem.addSubItem(text_link, LocaleController.getString("CreateLink", R.string.CreateLink));
         editTextItem.addSubItem(text_regular, LocaleController.getString("Regular", R.string.Regular));
 
@@ -1860,7 +1885,7 @@
                     if (child == chatListView) {
                         /*globalIgnoreLayout = true;
                         int additionalPadding = inputFieldHeight - AndroidUtilities.dp(51);
-                        if (pinnedMessageView != null && pinnedMessageView.getTag() == null || reportSpamView != null && reportSpamView.getTag() == null) {
+                        if (pinnedMessageView != null && pinnedMessageView.getTag() == null || topChatPanelView != null && topChatPanelView.getTag() == null) {
                             chatListView.setPadding(0, AndroidUtilities.dp(52) + additionalPadding, 0, AndroidUtilities.dp(3));
                         } else {
                             chatListView.setPadding(0, AndroidUtilities.dp(4) + additionalPadding, 0, AndroidUtilities.dp(3));
@@ -2118,7 +2143,7 @@
             }
         } else {
             bigEmptyView = new ChatBigEmptyView(context, ChatBigEmptyView.EMPTY_VIEW_TYPE_SECRET);
-            if (currentEncryptedChat.admin_id == UserConfig.getInstance(currentAccount).getClientUserId()) {
+            if (currentEncryptedChat.admin_id == getUserConfig().getClientUserId()) {
                 bigEmptyView.setStatusText(LocaleController.formatString("EncryptedPlaceholderTitleOutgoing", R.string.EncryptedPlaceholderTitleOutgoing, UserObject.getFirstName(currentUser)));
             } else {
                 bigEmptyView.setStatusText(LocaleController.formatString("EncryptedPlaceholderTitleIncoming", R.string.EncryptedPlaceholderTitleIncoming, UserObject.getFirstName(currentUser)));
@@ -2854,6 +2879,16 @@
 
             @Override
             public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
+                if (newState == RecyclerView.SCROLL_STATE_IDLE) {
+                    scrollingFloatingDate = false;
+                    scrollingChatListView = false;
+                    checkTextureViewPosition = false;
+                    hideFloatingDateView(true);
+                    checkAutoDownloadMessages(scrollUp);
+                    if (SharedConfig.getDevicePerfomanceClass() == SharedConfig.PERFORMANCE_CLASS_LOW) {
+                        NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.startAllHeavyOperations, 512);
+                    }
+                } else {
                 if (newState == RecyclerView.SCROLL_STATE_SETTLING) {
                     wasManualScroll = true;
                     scrollingChatListView = true;
@@ -2862,12 +2897,10 @@
                     scrollingFloatingDate = true;
                     checkTextureViewPosition = true;
                     scrollingChatListView = true;
-                } else if (newState == RecyclerView.SCROLL_STATE_IDLE) {
-                    scrollingFloatingDate = false;
-                    scrollingChatListView = false;
-                    checkTextureViewPosition = false;
-                    hideFloatingDateView(true);
-                    checkAutoDownloadMessages(scrollUp);
+                    }
+                    if (SharedConfig.getDevicePerfomanceClass() == SharedConfig.PERFORMANCE_CLASS_LOW) {
+                        NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.stopAllHeavyOperations, 512);
+                    }
                 }
             }
 
@@ -3033,7 +3066,7 @@
                     AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                     builder.setTitle(LocaleController.getString("UnpinMessageAlertTitle", R.string.UnpinMessageAlertTitle));
                     builder.setMessage(LocaleController.getString("UnpinMessageAlert", R.string.UnpinMessageAlert));
-                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> MessagesController.getInstance(currentAccount).pinMessage(currentChat, currentUser, 0, false));
+                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> getMessagesController().pinMessage(currentChat, currentUser, 0, false));
                     builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                     showDialog(builder.create());
                 } else {
@@ -3048,13 +3081,73 @@
             });
         }
 
-        reportSpamView = new LinearLayout(context);
-        reportSpamView.setTag(1);
-        reportSpamView.setTranslationY(-AndroidUtilities.dp(50));
-        reportSpamView.setVisibility(View.GONE);
-        reportSpamView.setBackgroundResource(R.drawable.blockpanel);
-        reportSpamView.getBackground().setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_topPanelBackground), PorterDuff.Mode.MULTIPLY));
-        contentView.addView(reportSpamView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 50, Gravity.TOP | Gravity.LEFT));
+        topChatPanelView = new FrameLayout(context) {
+
+            private boolean ignoreLayout;
+
+            @Override
+            protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+                int width = MeasureSpec.getSize(widthMeasureSpec);
+                if (addToContactsButton != null && addToContactsButton.getVisibility() == VISIBLE && reportSpamButton != null && reportSpamButton.getVisibility() == VISIBLE) {
+                    width = (width - AndroidUtilities.dp(31)) / 2;
+                }
+                ignoreLayout = true;
+                if (reportSpamButton != null && reportSpamButton.getVisibility() == VISIBLE) {
+                    FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) reportSpamButton.getLayoutParams();
+                    layoutParams.width = width;
+                    if (addToContactsButton != null && addToContactsButton.getVisibility() == VISIBLE) {
+                        reportSpamButton.setPadding(AndroidUtilities.dp(4), 0, AndroidUtilities.dp(19), 0);
+                        layoutParams.leftMargin = width;
+                    } else {
+                        reportSpamButton.setPadding(AndroidUtilities.dp(48), 0, AndroidUtilities.dp(48), 0);
+                        layoutParams.leftMargin = 0;
+                    }
+                }
+                if (addToContactsButton != null && addToContactsButton.getVisibility() == VISIBLE) {
+                    FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) addToContactsButton.getLayoutParams();
+                    layoutParams.width = width;
+                    if (reportSpamButton != null && reportSpamButton.getVisibility() == VISIBLE) {
+                        addToContactsButton.setPadding(AndroidUtilities.dp(11), 0, AndroidUtilities.dp(4), 0);
+                    } else {
+                        addToContactsButton.setPadding(AndroidUtilities.dp(48), 0, AndroidUtilities.dp(48), 0);
+                        layoutParams.leftMargin = 0;
+                    }
+                }
+                ignoreLayout = false;
+                super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+            }
+
+            @Override
+            public void requestLayout() {
+                if (ignoreLayout) {
+                    return;
+                }
+                super.requestLayout();
+            }
+        };
+        topChatPanelView.setTag(1);
+        topChatPanelView.setTranslationY(-AndroidUtilities.dp(50));
+        topChatPanelView.setVisibility(View.GONE);
+        topChatPanelView.setBackgroundResource(R.drawable.blockpanel);
+        topChatPanelView.getBackground().setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_topPanelBackground), PorterDuff.Mode.MULTIPLY));
+        contentView.addView(topChatPanelView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 50, Gravity.TOP | Gravity.LEFT));
+
+        reportSpamButton = new TextView(context);
+        reportSpamButton.setTextColor(Theme.getColor(Theme.key_chat_reportSpam));
+        reportSpamButton.setTag(Theme.key_chat_reportSpam);
+        reportSpamButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
+        reportSpamButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        reportSpamButton.setSingleLine(true);
+        reportSpamButton.setMaxLines(1);
+        reportSpamButton.setGravity(Gravity.CENTER);
+        topChatPanelView.addView(reportSpamButton, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.LEFT | Gravity.TOP, 0, 0, 0, AndroidUtilities.dp(1)));
+        reportSpamButton.setOnClickListener(v2 -> AlertsCreator.showBlockReportSpamAlert(ChatActivity.this, dialog_id, currentUser, currentChat, currentEncryptedChat, reportSpamButton.getTag(R.id.object_tag) != null, chatInfo, param -> {
+            if (param == 0) {
+                updateTopPanel(true);
+            } else {
+                finishFragment();
+            }
+        }));
 
         addToContactsButton = new TextView(context);
         addToContactsButton.setTextColor(Theme.getColor(Theme.key_chat_addContact));
@@ -3065,74 +3158,31 @@
         addToContactsButton.setMaxLines(1);
         addToContactsButton.setPadding(AndroidUtilities.dp(4), 0, AndroidUtilities.dp(4), 0);
         addToContactsButton.setGravity(Gravity.CENTER);
-        addToContactsButton.setText(LocaleController.getString("AddContactChat", R.string.AddContactChat));
-        reportSpamView.addView(addToContactsButton, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, 0.5f, Gravity.LEFT | Gravity.TOP, 0, 0, 0, AndroidUtilities.dp(1)));
+        topChatPanelView.addView(addToContactsButton, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.LEFT | Gravity.TOP, 0, 0, 0, AndroidUtilities.dp(1)));
         addToContactsButton.setOnClickListener(v -> {
+            if (addToContactsButton.getTag() != null) {
+                shareMyContact(1, null);
+            } else {
             Bundle args = new Bundle();
             args.putInt("user_id", currentUser.id);
             args.putBoolean("addContact", true);
-            presentFragment(new ContactAddActivity(args));
+                ContactAddActivity activity = new ContactAddActivity(args);
+                activity.setDelegate(() -> {
+                    undoView.setAdditionalTranslationY(AndroidUtilities.dp(51));
+                    undoView.showWithAction(dialog_id, UndoView.ACTION_CONTACT_ADDED, currentUser);
         });
-
-        reportSpamContainer = new FrameLayout(context);
-        reportSpamView.addView(reportSpamContainer, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, 1.0f, Gravity.LEFT | Gravity.TOP, 0, 0, 0, AndroidUtilities.dp(1)));
-
-        reportSpamButton = new TextView(context);
-        reportSpamButton.setTextColor(Theme.getColor(Theme.key_chat_reportSpam));
-        reportSpamButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-        reportSpamButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-        reportSpamButton.setSingleLine(true);
-        reportSpamButton.setMaxLines(1);
-        if (currentChat != null) {
-            reportSpamButton.setText(LocaleController.getString("ReportSpamAndLeave", R.string.ReportSpamAndLeave));
-        } else {
-            reportSpamButton.setText(LocaleController.getString("ReportSpam", R.string.ReportSpam));
+                presentFragment(activity);
         }
-        reportSpamButton.setGravity(Gravity.CENTER);
-        reportSpamButton.setPadding(AndroidUtilities.dp(50), 0, AndroidUtilities.dp(50), 0);
-        reportSpamContainer.addView(reportSpamButton, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.LEFT | Gravity.TOP));
-        reportSpamButton.setOnClickListener(v -> {
-            if (getParentActivity() == null) {
-                return;
-            }
-            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-            if (ChatObject.isChannel(currentChat) && !currentChat.megagroup) {
-                builder.setMessage(LocaleController.getString("ReportSpamAlertChannel", R.string.ReportSpamAlertChannel));
-            } else if (currentChat != null) {
-                builder.setMessage(LocaleController.getString("ReportSpamAlertGroup", R.string.ReportSpamAlertGroup));
-            } else {
-                builder.setMessage(LocaleController.getString("ReportSpamAlert", R.string.ReportSpamAlert));
-            }
-            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> {
-                if (currentUser != null) {
-                    MessagesController.getInstance(currentAccount).blockUser(currentUser.id);
-                }
-                MessagesController.getInstance(currentAccount).reportSpam(dialog_id, currentUser, currentChat, currentEncryptedChat);
-                updateSpamView();
-                if (currentChat != null) {
-                    if (ChatObject.isNotInChat(currentChat)) {
-                        MessagesController.getInstance(currentAccount).deleteDialog(dialog_id, 0);
-                    } else {
-                        MessagesController.getInstance(currentAccount).deleteUserFromChat((int) -dialog_id, MessagesController.getInstance(currentAccount).getUser(UserConfig.getInstance(currentAccount).getClientUserId()), null);
-                    }
-                } else {
-                    MessagesController.getInstance(currentAccount).deleteDialog(dialog_id, 0);
-                }
-                finishFragment();
-            });
-            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-            showDialog(builder.create());
         });
 
         closeReportSpam = new ImageView(context);
         closeReportSpam.setImageResource(R.drawable.miniplayer_close);
         closeReportSpam.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_topPanelClose), PorterDuff.Mode.MULTIPLY));
         closeReportSpam.setScaleType(ImageView.ScaleType.CENTER);
-        reportSpamContainer.addView(closeReportSpam, LayoutHelper.createFrame(48, 48, Gravity.RIGHT | Gravity.TOP));
+        topChatPanelView.addView(closeReportSpam, LayoutHelper.createFrame(48, 48, Gravity.RIGHT | Gravity.TOP));
         closeReportSpam.setOnClickListener(v -> {
-            MessagesController.getInstance(currentAccount).hideReportSpam(dialog_id, currentUser, currentChat);
-            updateSpamView();
+            getMessagesController().hidePeerSettingsBar(dialog_id, currentUser, currentChat);
+            updateTopPanel(true);
         });
 
         alertView = new FrameLayout(context);
@@ -3183,7 +3233,7 @@
             private void loadLastUnreadMention() {
                 wasManualScroll = true;
                 if (hasAllMentionsLocal) {
-                    MessagesStorage.getInstance(currentAccount).getUnreadMention(dialog_id, param -> {
+                    getMessagesStorage().getUnreadMention(dialog_id, param -> {
                         if (param == 0) {
                             hasAllMentionsLocal = false;
                             loadLastUnreadMention();
@@ -3192,12 +3242,12 @@
                         }
                     });
                 } else {
-                    final MessagesStorage messagesStorage = MessagesStorage.getInstance(currentAccount);
+                    final MessagesStorage messagesStorage = getMessagesStorage();
                     TLRPC.TL_messages_getUnreadMentions req = new TLRPC.TL_messages_getUnreadMentions();
-                    req.peer = MessagesController.getInstance(currentAccount).getInputPeer((int) dialog_id);
+                    req.peer = getMessagesController().getInputPeer((int) dialog_id);
                     req.limit = 1;
                     req.add_offset = newMentionsCount - 1;
-                    ConnectionsManager.getInstance(currentAccount).sendRequest(req, (response, error) -> AndroidUtilities.runOnUIThread(() -> {
+                    getConnectionsManager().sendRequest(req, (response, error) -> AndroidUtilities.runOnUIThread(() -> {
                         TLRPC.messages_Messages res = (TLRPC.messages_Messages) response;
                         if (error != null || res.messages.isEmpty()) {
                             if (res != null) {
@@ -3245,7 +3295,7 @@
                 }
             }
             newMentionsCount = 0;
-            MessagesController.getInstance(currentAccount).markMentionsAsRead(dialog_id);
+            getMessagesController().markMentionsAsRead(dialog_id);
             hasAllMentionsLocal = true;
             showMentionDownButton(false, true);
             return true;
@@ -3645,7 +3695,7 @@
                         mentionsAdapter.searchUsernameOrHashtag(null, 0, null, false);
                         searchItem.setSearchFieldHint(null);
                         searchItem.clearSearchText();
-                        DataQuery.getInstance(currentAccount).searchMessagesInChat("", dialog_id, mergeDialogId, classGuid, 0, searchingUserMessages);
+                        getMediaDataController().searchMessagesInChat("", dialog_id, mergeDialogId, classGuid, 0, searchingUserMessages);
                     } else {
                         TLRPC.User user = (TLRPC.User) object;
                         if (user != null) {
@@ -3661,7 +3711,7 @@
                     }
                 } else if (object instanceof String) {
                     if (mentionsAdapter.isBotCommands()) {
-                        SendMessagesHelper.getInstance(currentAccount).sendMessage((String) object, dialog_id, replyingMessageObject, null, false, null, null, null);
+                        getSendMessagesHelper().sendMessage((String) object, dialog_id, replyingMessageObject, null, false, null, null, null);
                         chatActivityEnterView.setFieldText("");
                         hideFieldPanel(false);
                     } else {
@@ -3683,8 +3733,8 @@
                     }
                 } else if (object instanceof TLRPC.TL_inlineBotSwitchPM) {
                     processInlineBotContextPM((TLRPC.TL_inlineBotSwitchPM) object);
-                } else if (object instanceof DataQuery.KeywordResult) {
-                    String code = ((DataQuery.KeywordResult) object).emoji;
+                } else if (object instanceof MediaDataController.KeywordResult) {
+                    String code = ((MediaDataController.KeywordResult) object).emoji;
                     chatActivityEnterView.addEmojiToRecent(code);
                     chatActivityEnterView.replaceWithText(start, len, code, true);
                 }
@@ -3954,7 +4004,7 @@
 
             @Override
             public void needSendTyping() {
-                MessagesController.getInstance(currentAccount).sendTyping(dialog_id, 0, classGuid);
+                getMessagesController().sendTyping(dialog_id, 0, classGuid);
             }
 
             @Override
@@ -3990,7 +4040,7 @@
                     }
                     chatActivityEnterView.setAllowStickersAndGifs(currentEncryptedChat == null || AndroidUtilities.getPeerLayerVersion(currentEncryptedChat.layer) >= 23, currentEncryptedChat == null || AndroidUtilities.getPeerLayerVersion(currentEncryptedChat.layer) >= 46);
                     if (editingMessageObjectReqId != 0) {
-                        ConnectionsManager.getInstance(currentAccount).cancelRequest(editingMessageObjectReqId, true);
+                        getConnectionsManager().cancelRequest(editingMessageObjectReqId, true);
                         editingMessageObjectReqId = 0;
                     }
                     updatePinnedMessageView(true);
@@ -4272,7 +4322,7 @@
         searchUpButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), PorterDuff.Mode.MULTIPLY));
         searchUpButton.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.getColor(Theme.key_actionBarActionModeDefaultSelector), 1));
         searchContainer.addView(searchUpButton, LayoutHelper.createFrame(48, 48, Gravity.RIGHT | Gravity.TOP, 0, 0, 48, 0));
-        searchUpButton.setOnClickListener(view -> DataQuery.getInstance(currentAccount).searchMessagesInChat(null, dialog_id, mergeDialogId, classGuid, 1, searchingUserMessages));
+        searchUpButton.setOnClickListener(view -> getMediaDataController().searchMessagesInChat(null, dialog_id, mergeDialogId, classGuid, 1, searchingUserMessages));
         searchUpButton.setContentDescription(LocaleController.getString("AccDescrSearchNext", R.string.AccDescrSearchNext));
 
         searchDownButton = new ImageView(context);
@@ -4281,7 +4331,7 @@
         searchDownButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), PorterDuff.Mode.MULTIPLY));
         searchDownButton.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.getColor(Theme.key_actionBarActionModeDefaultSelector), 1));
         searchContainer.addView(searchDownButton, LayoutHelper.createFrame(48, 48, Gravity.RIGHT | Gravity.TOP, 0, 0, 0, 0));
-        searchDownButton.setOnClickListener(view -> DataQuery.getInstance(currentAccount).searchMessagesInChat(null, dialog_id, mergeDialogId, classGuid, 2, searchingUserMessages));
+        searchDownButton.setOnClickListener(view -> getMediaDataController().searchMessagesInChat(null, dialog_id, mergeDialogId, classGuid, 2, searchingUserMessages));
         searchDownButton.setContentDescription(LocaleController.getString("AccDescrSearchPrev", R.string.AccDescrSearchPrev));
 
         if (currentChat != null && (!ChatObject.isChannel(currentChat) || currentChat.megagroup)) {
@@ -4329,7 +4379,7 @@
                     int date = (int) (calendar1.getTime().getTime() / 1000);
                     clearChatData();
                     waitingForLoad.add(lastLoadIndex);
-                    MessagesController.getInstance(currentAccount).loadMessages(dialog_id, 30, 0, date, true, 0, classGuid, 4, 0, ChatObject.isChannel(currentChat), lastLoadIndex++);
+                    getMessagesController().loadMessages(dialog_id, 30, 0, date, true, 0, classGuid, 4, 0, ChatObject.isChannel(currentChat), lastLoadIndex++);
                 }, year, monthOfYear, dayOfMonth);
                 final DatePicker datePicker = dialog.getDatePicker();
                 datePicker.setMinDate(1375315200000L);
@@ -4433,25 +4483,25 @@
                 if (currentUser.bot) {
                     String botUserLast = botUser;
                     botUser = null;
-                    MessagesController.getInstance(currentAccount).unblockUser(currentUser.id);
+                    getMessagesController().unblockUser(currentUser.id);
                     if (botUserLast != null && botUserLast.length() != 0) {
-                        MessagesController.getInstance(currentAccount).sendBotStart(currentUser, botUserLast);
+                        getMessagesController().sendBotStart(currentUser, botUserLast);
                     } else {
-                        SendMessagesHelper.getInstance(currentAccount).sendMessage("/start", dialog_id, null, null, false, null, null, null);
+                        getSendMessagesHelper().sendMessage("/start", dialog_id, null, null, false, null, null, null);
                     }
                 } else {
                     AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                     builder.setMessage(LocaleController.getString("AreYouSureUnblockContact", R.string.AreYouSureUnblockContact));
-                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> MessagesController.getInstance(currentAccount).unblockUser(currentUser.id));
+                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> getMessagesController().unblockUser(currentUser.id));
                     builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                     builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                     showDialog(builder.create());
                 }
             } else if (currentUser != null && currentUser.bot && botUser != null) {
                 if (botUser.length() != 0) {
-                    MessagesController.getInstance(currentAccount).sendBotStart(currentUser, botUser);
+                    getMessagesController().sendBotStart(currentUser, botUser);
                 } else {
-                    SendMessagesHelper.getInstance(currentAccount).sendMessage("/start", dialog_id, null, null, false, null, null, null);
+                    getSendMessagesHelper().sendMessage("/start", dialog_id, null, null, false, null, null, null);
                 }
                 botUser = null;
                 updateBottomOverlay();
@@ -4459,17 +4509,23 @@
                 if (ChatObject.isChannel(currentChat) && !(currentChat instanceof TLRPC.TL_channelForbidden)) {
                     if (ChatObject.isNotInChat(currentChat)) {
                         showBottomOverlayProgress(true, true);
-                        MessagesController.getInstance(currentAccount).addUserToChat(currentChat.id, UserConfig.getInstance(currentAccount).getCurrentUser(), null, 0, null, ChatActivity.this, null);
+                        getMessagesController().addUserToChat(currentChat.id, getUserConfig().getCurrentUser(), null, 0, null, ChatActivity.this, null);
                         NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.closeSearchByActiveAction);
+
+                        if (hasReportSpam() && reportSpamButton.getTag(R.id.object_tag) != null) {
+                            SharedPreferences preferences = MessagesController.getNotificationsSettings(currentAccount);
+                            preferences.edit().putInt("dialog_bar_vis3" + dialog_id, 3).commit();
+                            getNotificationCenter().postNotificationName(NotificationCenter.peerSettingsDidLoad, dialog_id);
+                        }
                     } else {
                         toggleMute(true);
                     }
                 } else {
                     AlertsCreator.createClearOrDeleteDialogAlert(ChatActivity.this, false, currentChat, currentUser, currentEncryptedChat != null, (param) -> {
-                        NotificationCenter.getInstance(currentAccount).removeObserver(ChatActivity.this, NotificationCenter.closeChats);
-                        NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.closeChats);
+                        getNotificationCenter().removeObserver(ChatActivity.this, NotificationCenter.closeChats);
+                        getNotificationCenter().postNotificationName(NotificationCenter.closeChats);
                         finishFragment();
-                        NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.needDeleteDialog, dialog_id, currentUser, currentChat, param);
+                        getNotificationCenter().postNotificationName(NotificationCenter.needDeleteDialog, dialog_id, currentUser, currentChat, param);
                     });
                 }
             }
@@ -4488,7 +4544,7 @@
             }
             Bundle args = new Bundle();
             args.putInt("chat_id", chatInfo.linked_chat_id);
-            if (!MessagesController.getInstance(currentAccount).checkCanOpenChat(args, ChatActivity.this)) {
+            if (!getMessagesController().checkCanOpenChat(args, ChatActivity.this)) {
                 return;
             }
             presentFragment(new ChatActivity(args));
@@ -4566,10 +4622,9 @@
         }
 
         checkBotKeyboard();
-        updateContactStatus();
         updateBottomOverlay();
         updateSecretStatus();
-        updateSpamView();
+        updateTopPanel(false);
         updatePinnedMessageView(true);
 
         try {
@@ -4783,10 +4838,10 @@
         params.put("query_id", "" + result.query_id);
         params.put("bot", "" + uid);
         params.put("bot_name", mentionsAdapter.getContextBotName());
-        SendMessagesHelper.prepareSendingBotContextResult(result, params, dialog_id, replyingMessageObject);
+        SendMessagesHelper.prepareSendingBotContextResult(getAccountInstance(), result, params, dialog_id, replyingMessageObject);
         chatActivityEnterView.setFieldText("");
         hideFieldPanel(false);
-        DataQuery.getInstance(currentAccount).increaseInlineRaiting(uid);
+        getMediaDataController().increaseInlineRaiting(uid);
     }
 
     private void mentionListViewUpdateLayout() {
@@ -4841,7 +4896,7 @@
         } else if (chatInfo instanceof TLRPC.TL_chatFull) {
             for (int a = 0; a < chatInfo.participants.participants.size(); a++) {
                 TLRPC.ChatParticipant participant = chatInfo.participants.participants.get(a);
-                TLRPC.User user = MessagesController.getInstance(currentAccount).getUser(participant.user_id);
+                TLRPC.User user = getMessagesController().getUser(participant.user_id);
                 if (user != null && user.bot) {
                     URLSpanBotCommand.enabled = true;
                     break;
@@ -4880,7 +4935,7 @@
         } else if ((int) dialog_id != 0) {
             clearChatData();
             waitingForLoad.add(lastLoadIndex);
-            MessagesController.getInstance(currentAccount).loadMessages(dialog_id, 30, 0, date, true, 0, classGuid, 4, 0, ChatObject.isChannel(currentChat), lastLoadIndex++);
+            getMessagesController().loadMessages(dialog_id, 30, 0, date, true, 0, classGuid, 4, 0, ChatObject.isChannel(currentChat), lastLoadIndex++);
             floatingDateView.setAlpha(0.0f);
             floatingDateView.setTag(null);
         }
@@ -4897,13 +4952,13 @@
         chatActivityEnterView.setFieldText("");
         if (dialog_id == user.id) {
             inlineReturn = dialog_id;
-            MessagesController.getInstance(currentAccount).sendBotStart(currentUser, object.start_param);
+            getMessagesController().sendBotStart(currentUser, object.start_param);
         } else {
             Bundle args = new Bundle();
             args.putInt("user_id", user.id);
             args.putString("inline_query", object.start_param);
             args.putLong("inline_return", dialog_id);
-            if (!MessagesController.getInstance(currentAccount).checkCanOpenChat(args, ChatActivity.this)) {
+            if (!getMessagesController().checkCanOpenChat(args, ChatActivity.this)) {
                 return;
             }
             presentFragment(new ChatActivity(args));
@@ -4955,10 +5010,10 @@
                                 photoEntry.reset();
                             }
                             fillEditingMediaWithCaption(photos.get(0).caption, photos.get(0).entities);
-                            SendMessagesHelper.prepareSendingMedia(photos, dialog_id, replyingMessageObject, null, button == 4, SharedConfig.groupPhotosEnabled, editingMessageObject);
+                            SendMessagesHelper.prepareSendingMedia(getAccountInstance(), photos, dialog_id, replyingMessageObject, null, button == 4, SharedConfig.groupPhotosEnabled, editingMessageObject);
 
                             hideFieldPanel(false);
-                            DataQuery.getInstance(currentAccount).cleanDraft(dialog_id, true);
+                            getMediaDataController().cleanDraft(dialog_id, true);
                         }
                         return;
                     } else if (chatAttachAlert != null) {
@@ -4998,9 +5053,13 @@
         return dialog_id;
     }
 
+    public boolean hasReportSpam() {
+        return topChatPanelView != null && topChatPanelView.getTag() == null && reportSpamButton.getVisibility() != View.GONE;
+    }
+
     public void setBotUser(String value) {
         if (inlineReturn != 0) {
-            MessagesController.getInstance(currentAccount).sendBotStart(currentUser, value);
+            getMessagesController().sendBotStart(currentUser, value);
         } else {
             botUser = value;
             updateBottomOverlay();
@@ -5033,19 +5092,24 @@
         }
         stickersListView.setPadding(AndroidUtilities.dp(18), 0, AndroidUtilities.dp(18), 0);
         stickersListView.setAdapter(stickersAdapter = new StickersAdapter(getParentActivity(), show -> {
-            if (show && stickersPanel.getTag() != null || !show && stickersPanel.getTag() == null) {
-                return;
-            }
             if (show) {
-                stickersListView.setPadding(AndroidUtilities.dp(18), stickersAdapter.isShowingKeywords() ? AndroidUtilities.dp(24) : 0, AndroidUtilities.dp(18), 0);
+                int newPadding = stickersAdapter.isShowingKeywords() ? AndroidUtilities.dp(24) : 0;
+                if (newPadding != stickersListView.getPaddingTop() || stickersPanel.getTag() == null) {
+                    stickersListView.setPadding(AndroidUtilities.dp(18), newPadding, AndroidUtilities.dp(18), 0);
                 stickersListView.scrollToPosition(0);
-                stickersPanel.setVisibility(allowStickersPanel ? View.VISIBLE : View.INVISIBLE);
-                stickersPanel.setTag(1);
 
                 boolean isRtl = chatActivityEnterView.isRtlText();
                 FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) stickersPanelArrow.getLayoutParams();
                 layoutParams.gravity = Gravity.BOTTOM | (isRtl ? Gravity.RIGHT : Gravity.LEFT);
                 stickersPanelArrow.requestLayout();
+                }
+            }
+            if (show && stickersPanel.getTag() != null || !show && stickersPanel.getTag() == null) {
+                return;
+            }
+            if (show) {
+                stickersPanel.setVisibility(allowStickersPanel ? View.VISIBLE : View.INVISIBLE);
+                stickersPanel.setTag(1);
             } else {
                 stickersPanel.setTag(null);
             }
@@ -5092,7 +5156,7 @@
             Object parent = stickersAdapter.getItemParent(position);
             if (item instanceof TLRPC.TL_document) {
                 TLRPC.TL_document document = (TLRPC.TL_document) item;
-                SendMessagesHelper.getInstance(currentAccount).sendSticker(document, dialog_id, replyingMessageObject, parent);
+                getSendMessagesHelper().sendSticker(document, dialog_id, replyingMessageObject, parent);
                 hideFieldPanel(false);
                 chatActivityEnterView.addStickerToRecent(document);
                 chatActivityEnterView.setFieldText("");
@@ -5100,28 +5164,39 @@
                 String emoji = (String) item;
                 SpannableString string = new SpannableString(emoji);
                 Emoji.replaceEmoji(string, chatActivityEnterView.getEditField().getPaint().getFontMetricsInt(), AndroidUtilities.dp(20), false);
-                stickersAdapter.loadStikersForEmoji("", false);
+                //stickersAdapter.loadStikersForEmoji("", false);
                 chatActivityEnterView.setFieldText(string, false);
             }
         });
     }
 
-    public void shareMyContact(final MessageObject messageObject) {
+    public void shareMyContact(int type, MessageObject messageObject) {
         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
         builder.setTitle(LocaleController.getString("ShareYouPhoneNumberTitle", R.string.ShareYouPhoneNumberTitle));
         if (currentUser != null) {
             if (currentUser.bot) {
                 builder.setMessage(LocaleController.getString("AreYouSureShareMyContactInfoBot", R.string.AreYouSureShareMyContactInfoBot));
             } else {
-                builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("AreYouSureShareMyContactInfoUser", R.string.AreYouSureShareMyContactInfoUser, PhoneFormat.getInstance().format("+" + UserConfig.getInstance(currentAccount).getCurrentUser().phone), ContactsController.formatName(currentUser.first_name, currentUser.last_name))));
+                builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("AreYouSureShareMyContactInfoUser", R.string.AreYouSureShareMyContactInfoUser, PhoneFormat.getInstance().format("+" + getUserConfig().getCurrentUser().phone), ContactsController.formatName(currentUser.first_name, currentUser.last_name))));
             }
         } else {
             builder.setMessage(LocaleController.getString("AreYouSureShareMyContactInfo", R.string.AreYouSureShareMyContactInfo));
         }
-        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> {
-            SendMessagesHelper.getInstance(currentAccount).sendMessage(UserConfig.getInstance(currentAccount).getCurrentUser(), dialog_id, messageObject, null, null);
+        builder.setPositiveButton(LocaleController.getString("ShareContact", R.string.ShareContact), (dialogInterface, i) -> {
+            if (type == 1) {
+                TLRPC.TL_contacts_acceptContact req = new TLRPC.TL_contacts_acceptContact();
+                req.id = getMessagesController().getInputUser(currentUser);
+                getConnectionsManager().sendRequest(req, (response, error) -> {
+                    if (error != null) {
+                        return;
+                    }
+                    getMessagesController().processUpdates((TLRPC.Updates) response, false);
+                });
+            } else {
+                SendMessagesHelper.getInstance(currentAccount).sendMessage(getUserConfig().getCurrentUser(), dialog_id, messageObject, null, null);
             moveScrollToLastMessage();
             hideFieldPanel(false);
+            }
         });
         builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
         showDialog(builder.create());
@@ -5533,14 +5608,14 @@
                 continue;
             }
             int canDownload;
-            if (!MessageObject.isStickerDocument(document) && !MessageObject.isGifDocument(document) && !MessageObject.isRoundVideoDocument(document)
-                    && (canDownload = DownloadController.getInstance(currentAccount).canDownloadMedia(object.messageOwner)) != 0) {
+            if (!MessageObject.isStickerDocument(document) && !MessageObject.isAnimatedStickerDocument(document) && !MessageObject.isGifDocument(document) && !MessageObject.isRoundVideoDocument(document)
+                    && (canDownload = getDownloadController().canDownloadMedia(object.messageOwner)) != 0) {
                 if (canDownload == 2) {
                     if (currentEncryptedChat == null && !object.shouldEncryptPhotoOrVideo() && object.canStreamVideo()) {
-                        FileLoader.getInstance(currentAccount).loadFile(document, object, 0, 10);
+                        getFileLoader().loadFile(document, object, 0, 10);
                     }
                 } else {
-                    FileLoader.getInstance(currentAccount).loadFile(document, object, 0, MessageObject.isVideoDocument(document) && object.shouldEncryptPhotoOrVideo() ? 2 : 0);
+                    getFileLoader().loadFile(document, object, 0, MessageObject.isVideoDocument(document) && object.shouldEncryptPhotoOrVideo() ? 2 : 0);
                     cell.updateButtonState(false, true, false);
                 }
             }
@@ -5584,7 +5659,7 @@
             return;
         }
         TLRPC.Message message = object.messageOwner;
-        int canDownload = DownloadController.getInstance(currentAccount).canDownloadMedia(message);
+        int canDownload = getDownloadController().canDownloadMedia(message);
         if (canDownload == 0) {
             return;
         }
@@ -5595,13 +5670,13 @@
         }
         if (canDownload == 2 || canDownload == 1 && object.isVideo()) {
             if (document != null && currentEncryptedChat == null && !object.shouldEncryptPhotoOrVideo() && object.canStreamVideo()) {
-                FileLoader.getInstance(currentAccount).loadFile(document, object, 0, 10);
+                getFileLoader().loadFile(document, object, 0, 10);
             }
         } else {
             if (document != null) {
-                FileLoader.getInstance(currentAccount).loadFile(document, object, 0, MessageObject.isVideoDocument(document) && object.shouldEncryptPhotoOrVideo() ? 2 : 0);
+                getFileLoader().loadFile(document, object, 0, MessageObject.isVideoDocument(document) && object.shouldEncryptPhotoOrVideo() ? 2 : 0);
             } else {
-                FileLoader.getInstance(currentAccount).loadFile(ImageLocation.getForObject(photo, object.photoThumbsObject), object, null, 0, object.shouldEncryptPhotoOrVideo() ? 2 : 0);
+                getFileLoader().loadFile(ImageLocation.getForObject(photo, object.photoThumbsObject), object, null, 0, object.shouldEncryptPhotoOrVideo() ? 2 : 0);
             }
         }
     }
@@ -5691,24 +5766,24 @@
                 loading = true;
                 waitingForLoad.add(lastLoadIndex);
                 if (messagesByDays.size() != 0) {
-                    MessagesController.getInstance(currentAccount).loadMessages(dialog_id, 50, maxMessageId[0], 0, !cacheEndReached[0], minDate[0], classGuid, 0, 0, ChatObject.isChannel(currentChat), lastLoadIndex++);
+                    getMessagesController().loadMessages(dialog_id, 50, maxMessageId[0], 0, !cacheEndReached[0], minDate[0], classGuid, 0, 0, ChatObject.isChannel(currentChat), lastLoadIndex++);
                 } else {
-                    MessagesController.getInstance(currentAccount).loadMessages(dialog_id, 50, 0, 0, !cacheEndReached[0], minDate[0], classGuid, 0, 0, ChatObject.isChannel(currentChat), lastLoadIndex++);
+                    getMessagesController().loadMessages(dialog_id, 50, 0, 0, !cacheEndReached[0], minDate[0], classGuid, 0, 0, ChatObject.isChannel(currentChat), lastLoadIndex++);
                 }
             } else if (mergeDialogId != 0 && !endReached[1]) {
                 loading = true;
                 waitingForLoad.add(lastLoadIndex);
-                MessagesController.getInstance(currentAccount).loadMessages(mergeDialogId, 50, maxMessageId[1], 0, !cacheEndReached[1], minDate[1], classGuid, 0, 0, ChatObject.isChannel(currentChat), lastLoadIndex++);
+                getMessagesController().loadMessages(mergeDialogId, 50, maxMessageId[1], 0, !cacheEndReached[1], minDate[1], classGuid, 0, 0, ChatObject.isChannel(currentChat), lastLoadIndex++);
             }
         }
         if (visibleItemCount > 0 && !loadingForward && firstVisibleItem <= 10) {
             if (mergeDialogId != 0 && !forwardEndReached[1]) {
                 waitingForLoad.add(lastLoadIndex);
-                MessagesController.getInstance(currentAccount).loadMessages(mergeDialogId, 50, minMessageId[1], 0, true, maxDate[1], classGuid, 1, 0, ChatObject.isChannel(currentChat), lastLoadIndex++);
+                getMessagesController().loadMessages(mergeDialogId, 50, minMessageId[1], 0, true, maxDate[1], classGuid, 1, 0, ChatObject.isChannel(currentChat), lastLoadIndex++);
                 loadingForward = true;
             } else if (!forwardEndReached[0]) {
                 waitingForLoad.add(lastLoadIndex);
-                MessagesController.getInstance(currentAccount).loadMessages(dialog_id, 50, minMessageId[0], 0, true, maxDate[0], classGuid, 1, 0, ChatObject.isChannel(currentChat), lastLoadIndex++);
+                getMessagesController().loadMessages(dialog_id, 50, minMessageId[0], 0, true, maxDate[0], classGuid, 1, 0, ChatObject.isChannel(currentChat), lastLoadIndex++);
                 loadingForward = true;
             }
         }
@@ -5761,9 +5836,9 @@
                         return;
                     }
                     fillEditingMediaWithCaption(photos.get(0).caption, photos.get(0).entities);
-                    SendMessagesHelper.prepareSendingMedia(photos, dialog_id, replyingMessageObject, null, false, SharedConfig.groupPhotosEnabled, editingMessageObject);
+                    SendMessagesHelper.prepareSendingMedia(getAccountInstance(), photos, dialog_id, replyingMessageObject, null, false, SharedConfig.groupPhotosEnabled, editingMessageObject);
                     hideFieldPanel(false);
-                    DataQuery.getInstance(currentAccount).cleanDraft(dialog_id, true);
+                    getMediaDataController().cleanDraft(dialog_id, true);
                 }
 
                 @Override
@@ -5837,9 +5912,9 @@
                 public void didSelectFiles(DocumentSelectActivity activity, ArrayList<String> files) {
                     activity.finishFragment();
                     fillEditingMediaWithCaption(null, null);
-                    SendMessagesHelper.prepareSendingDocuments(files, files, null, null, null, dialog_id, replyingMessageObject, null, editingMessageObject);
+                    SendMessagesHelper.prepareSendingDocuments(getAccountInstance(), files, files, null, null, null, dialog_id, replyingMessageObject, null, editingMessageObject);
                     hideFieldPanel(false);
-                    DataQuery.getInstance(currentAccount).cleanDraft(dialog_id, true);
+                    getMediaDataController().cleanDraft(dialog_id, true);
                 }
 
                 @Override
@@ -5862,9 +5937,9 @@
                     fragment.setDelegate(audios -> {
                         parentFragment.removeSelfFromStack();
                         fillEditingMediaWithCaption(null, null);
-                        SendMessagesHelper.prepareSendingAudioDocuments(audios, dialog_id, replyingMessageObject, editingMessageObject);
+                        SendMessagesHelper.prepareSendingAudioDocuments(getAccountInstance(), audios, dialog_id, replyingMessageObject, editingMessageObject);
                         hideFieldPanel(false);
-                        DataQuery.getInstance(currentAccount).cleanDraft(dialog_id, true);
+                        getMediaDataController().cleanDraft(dialog_id, true);
                     });
                     presentFragment(fragment);
                 }
@@ -5878,9 +5953,9 @@
             AudioSelectActivity fragment = new AudioSelectActivity();
             fragment.setDelegate(audios -> {
                 fillEditingMediaWithCaption(null, null);
-                SendMessagesHelper.prepareSendingAudioDocuments(audios, dialog_id, replyingMessageObject, editingMessageObject);
+                SendMessagesHelper.prepareSendingAudioDocuments(getAccountInstance(), audios, dialog_id, replyingMessageObject, editingMessageObject);
                 hideFieldPanel(false);
-                DataQuery.getInstance(currentAccount).cleanDraft(dialog_id, true);
+                getMediaDataController().cleanDraft(dialog_id, true);
             });
             presentFragment(fragment);
         } else if (which == attach_contact) {
@@ -5892,9 +5967,9 @@
             }
             PhonebookSelectActivity activity = new PhonebookSelectActivity();
             activity.setDelegate(user -> {
-                SendMessagesHelper.getInstance(currentAccount).sendMessage(user, dialog_id, replyingMessageObject, null, null);
+                getSendMessagesHelper().sendMessage(user, dialog_id, replyingMessageObject, null, null);
                 hideFieldPanel(false);
-                DataQuery.getInstance(currentAccount).cleanDraft(dialog_id, true);
+                getMediaDataController().cleanDraft(dialog_id, true);
             });
             presentFragment(activity);
         } else if (which == attach_poll) {
@@ -5903,9 +5978,9 @@
             }
             PollCreateActivity pollCreateActivity = new PollCreateActivity();
             pollCreateActivity.setDelegate(poll -> {
-                SendMessagesHelper.getInstance(currentAccount).sendMessage(poll, dialog_id, replyingMessageObject, null, null);
+                getSendMessagesHelper().sendMessage(poll, dialog_id, replyingMessageObject, null, null);
                 hideFieldPanel(false);
-                DataQuery.getInstance(currentAccount).cleanDraft(dialog_id, true);
+                getMediaDataController().cleanDraft(dialog_id, true);
             });
             presentFragment(pollCreateActivity);
         }
@@ -5917,7 +5992,7 @@
     }
 
     private void searchLinks(final CharSequence charSequence, final boolean force) {
-        if (currentEncryptedChat != null && (MessagesController.getInstance(currentAccount).secretWebpagePreview == 0 || AndroidUtilities.getPeerLayerVersion(currentEncryptedChat.layer) < 46)) {
+        if (currentEncryptedChat != null && (getMessagesController().secretWebpagePreview == 0 || AndroidUtilities.getPeerLayerVersion(currentEncryptedChat.layer) < 46)) {
             return;
         }
         if (force && foundWebPage != null) {
@@ -5943,10 +6018,10 @@
             foundUrls = null;
             showFieldPanelForWebPage(false, foundWebPage, false);
         }
-        final MessagesController messagesController = MessagesController.getInstance(currentAccount);
+        final MessagesController messagesController = getMessagesController();
         Utilities.searchQueue.postRunnable(() -> {
             if (linkSearchRequestId != 0) {
-                ConnectionsManager.getInstance(currentAccount).cancelRequest(linkSearchRequestId, true);
+                getConnectionsManager().cancelRequest(linkSearchRequestId, true);
                 linkSearchRequestId = 0;
             }
             ArrayList<CharSequence> urls = null;
@@ -6018,7 +6093,7 @@
                     builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                     builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialog, which) -> {
                         messagesController.secretWebpagePreview = 1;
-                        MessagesController.getGlobalMainSettings().edit().putInt("secretWebpage2", MessagesController.getInstance(currentAccount).secretWebpagePreview).commit();
+                        MessagesController.getGlobalMainSettings().edit().putInt("secretWebpage2", getMessagesController().secretWebpagePreview).commit();
                         foundUrls = null;
                         searchLinks(charSequence, force);
                     });
@@ -6038,7 +6113,7 @@
             } else {
                 req.message = textToCheck.toString();
             }
-            linkSearchRequestId = ConnectionsManager.getInstance(currentAccount).sendRequest(req, (response, error) -> AndroidUtilities.runOnUIThread(() -> {
+            linkSearchRequestId = getConnectionsManager().sendRequest(req, (response, error) -> AndroidUtilities.runOnUIThread(() -> {
                 linkSearchRequestId = 0;
                 if (error == null) {
                     if (response instanceof TLRPC.TL_messageMediaWebPage) {
@@ -6066,7 +6141,7 @@
                 }
             }));
 
-            ConnectionsManager.getInstance(currentAccount).bindRequestToGuid(linkSearchRequestId, classGuid);
+            getConnectionsManager().bindRequestToGuid(linkSearchRequestId, classGuid);
         });
     }
 
@@ -6075,10 +6150,10 @@
             return;
         }
         if (!fromMyName) {
-            AlertsCreator.showSendMediaAlert(SendMessagesHelper.getInstance(currentAccount).sendMessage(arrayList, dialog_id), this);
+            AlertsCreator.showSendMediaAlert(getSendMessagesHelper().sendMessage(arrayList, dialog_id), this);
         } else {
             for (MessageObject object : arrayList) {
-                SendMessagesHelper.getInstance(currentAccount).processForwardFromMyName(object, dialog_id);
+                getSendMessagesHelper().processForwardFromMyName(object, dialog_id);
             }
         }
     }
@@ -6193,7 +6268,7 @@
                 chatActivityEnterView.setForceShowSendButton(false, false);
                 String name;
                 if (messageObjectToReply.isFromUser()) {
-                    TLRPC.User user = MessagesController.getInstance(currentAccount).getUser(messageObjectToReply.messageOwner.from_id);
+                    TLRPC.User user = getMessagesController().getUser(messageObjectToReply.messageOwner.from_id);
                     if (user == null) {
                         return;
                     }
@@ -6201,9 +6276,9 @@
                 } else {
                     TLRPC.Chat chat;
                     if (ChatObject.isChannel(currentChat) && currentChat.megagroup && messageObjectToReply.isForwardedChannelPost()) {
-                        chat = MessagesController.getInstance(currentAccount).getChat(messageObjectToReply.messageOwner.fwd_from.channel_id);
+                        chat = getMessagesController().getChat(messageObjectToReply.messageOwner.fwd_from.channel_id);
                     } else {
-                        chat = MessagesController.getInstance(currentAccount).getChat(messageObjectToReply.messageOwner.to_id.channel_id);
+                        chat = getMessagesController().getChat(messageObjectToReply.messageOwner.to_id.channel_id);
                     }
                     if (chat == null) {
                         return;
@@ -6280,9 +6355,9 @@
                     TLRPC.Chat chat = null;
                     TLRPC.User user = null;
                     if (uid > 0) {
-                        user = MessagesController.getInstance(currentAccount).getUser(uid);
+                        user = getMessagesController().getUser(uid);
                     } else {
-                        chat = MessagesController.getInstance(currentAccount).getChat(-uid);
+                        chat = getMessagesController().getChat(-uid);
                     }
                     if (user == null && chat == null) {
                         continue;
@@ -6352,7 +6427,7 @@
                         replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedRound", messageObjectsToForward.size()));
                     } else if (type == 14) {
                         replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedMusic", messageObjectsToForward.size()));
-                    } else if (type == 13) {
+                    } else if (type == MessageObject.TYPE_STICKER || type == MessageObject.TYPE_ANIMATED_STICKER) {
                         replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedSticker", messageObjectsToForward.size()));
                     } else if (type == 17) {
                         replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedPoll", messageObjectsToForward.size()));
@@ -6435,7 +6510,7 @@
             if (photoSize == thumbPhotoSize) {
                 thumbPhotoSize = null;
             }
-            if (photoSize == null || photoSize instanceof TLRPC.TL_photoSizeEmpty || photoSize.location instanceof TLRPC.TL_fileLocationUnavailable || thumbMediaMessageObject.type == 13 || thumbMediaMessageObject != null && thumbMediaMessageObject.isSecretMedia()) {
+            if (photoSize == null || photoSize instanceof TLRPC.TL_photoSizeEmpty || photoSize.location instanceof TLRPC.TL_fileLocationUnavailable || thumbMediaMessageObject.isAnyKindOfSticker() || thumbMediaMessageObject != null && thumbMediaMessageObject.isSecretMedia()) {
                 replyImageView.setImageBitmap(null);
                 replyImageLocation = null;
                 replyImageLocationObject = null;
@@ -6482,6 +6557,7 @@
             chatActivityEnterView.hideTopView(animated);
             chatActivityEnterView.setReplyingMessageObject(null);
             chatActivityEnterView.setEditingMessageObject(null, false);
+            topViewWasVisible = 0;
             replyingMessageObject = null;
             editingMessageObject = null;
             forwardingMessages = null;
@@ -6501,11 +6577,11 @@
             return false;
         }
         if (currentEncryptedChat != null) {
-            MessagesController.getInstance(currentAccount).markMessageAsRead(dialog_id, messageObject.messageOwner.random_id, messageObject.messageOwner.ttl);
+            getMessagesController().markMessageAsRead(dialog_id, messageObject.messageOwner.random_id, messageObject.messageOwner.ttl);
         } else {
-            MessagesController.getInstance(currentAccount).markMessageAsRead(messageObject.getId(), ChatObject.isChannel(currentChat) ? currentChat.id : 0, null, messageObject.messageOwner.ttl, 0);
+            getMessagesController().markMessageAsRead(messageObject.getId(), ChatObject.isChannel(currentChat) ? currentChat.id : 0, null, messageObject.messageOwner.ttl, 0);
         }
-        messageObject.messageOwner.destroyTime = messageObject.messageOwner.ttl + ConnectionsManager.getInstance(currentAccount).getCurrentTime();
+        messageObject.messageOwner.destroyTime = messageObject.messageOwner.ttl + getConnectionsManager().getCurrentTime();
         return true;
     }
 
@@ -6538,6 +6614,7 @@
         loadingForward = false;
         waitingForReplyMessageLoad = false;
         startLoadFromMessageId = 0;
+        showScrollToMessageError = false;
         last_message_id = 0;
         unreadMessageObject = null;
         createUnreadMessageAfterId = 0;
@@ -6558,7 +6635,7 @@
         } else {
             clearChatData();
             waitingForLoad.add(lastLoadIndex);
-            MessagesController.getInstance(currentAccount).loadMessages(dialog_id, 30, 0, 0, true, 0, classGuid, 0, 0, ChatObject.isChannel(currentChat), lastLoadIndex++);
+            getMessagesController().loadMessages(dialog_id, 30, 0, 0, true, 0, classGuid, 0, 0, ChatObject.isChannel(currentChat), lastLoadIndex++);
         }
     }
 
@@ -6715,7 +6792,7 @@
                 }
             }
         }
-        MessagesController.getInstance(currentAccount).addToPollsQueue(dialog_id, pollsToCheck);
+        getMessagesController().addToPollsQueue(dialog_id, pollsToCheck);
         if (videoPlayerContainer != null) {
             if (!foundTextureViewMessage) {
                 MessageObject messageObject = MediaController.getInstance().getPlayingMessageObject();
@@ -6810,7 +6887,7 @@
                 } else {
                     inlineUpdate1();
                 }
-                MessagesController.getInstance(currentAccount).markDialogAsRead(dialog_id, maxPositiveUnreadId, maxNegativeUnreadId, maxUnreadDate, false, counterDicrement, maxPositiveUnreadId == minMessageId[0] || maxNegativeUnreadId == minMessageId[0]);
+                getMessagesController().markDialogAsRead(dialog_id, maxPositiveUnreadId, maxNegativeUnreadId, maxUnreadDate, false, counterDicrement, maxPositiveUnreadId == minMessageId[0] || maxNegativeUnreadId == minMessageId[0]);
                 firstUnreadSent = true;
             } else if (!firstUnreadSent) {
                 if (chatLayoutManager.findFirstVisibleItemPosition() == 0) {
@@ -6820,7 +6897,7 @@
                     } else {
                         inlineUpdate2();
                     }
-                    MessagesController.getInstance(currentAccount).markDialogAsRead(dialog_id, minMessageId[0], minMessageId[0], maxDate[0], false, 0, true);
+                    getMessagesController().markDialogAsRead(dialog_id, minMessageId[0], minMessageId[0], maxDate[0], false, 0, true);
                     firstUnreadSent = true;
                 }
             }
@@ -6854,7 +6931,7 @@
     }
 
     private void toggleMute(boolean instant) {
-        boolean muted = MessagesController.getInstance(currentAccount).isDialogMuted(dialog_id);
+        boolean muted = getMessagesController().isDialogMuted(dialog_id);
         if (!muted) {
             if (instant) {
                 long flags;
@@ -6862,15 +6939,15 @@
                 SharedPreferences.Editor editor = preferences.edit();
                 editor.putInt("notify2_" + dialog_id, 2);
                 flags = 1;
-                MessagesStorage.getInstance(currentAccount).setDialogFlags(dialog_id, flags);
+                getMessagesStorage().setDialogFlags(dialog_id, flags);
                 editor.commit();
-                TLRPC.Dialog dialog = MessagesController.getInstance(currentAccount).dialogs_dict.get(dialog_id);
+                TLRPC.Dialog dialog = getMessagesController().dialogs_dict.get(dialog_id);
                 if (dialog != null) {
                     dialog.notify_settings = new TLRPC.TL_peerNotifySettings();
                     dialog.notify_settings.mute_until = Integer.MAX_VALUE;
                 }
-                NotificationsController.getInstance(currentAccount).updateServerNotificationsSettings(dialog_id);
-                NotificationsController.getInstance(currentAccount).removeNotificationsForDialog(dialog_id);
+                getNotificationsController().updateServerNotificationsSettings(dialog_id);
+                getNotificationsController().removeNotificationsForDialog(dialog_id);
             } else {
                 showDialog(AlertsCreator.createMuteAlert(getParentActivity(), dialog_id));
             }
@@ -6878,13 +6955,13 @@
             SharedPreferences preferences = MessagesController.getNotificationsSettings(currentAccount);
             SharedPreferences.Editor editor = preferences.edit();
             editor.putInt("notify2_" + dialog_id, 0);
-            MessagesStorage.getInstance(currentAccount).setDialogFlags(dialog_id, 0);
+            getMessagesStorage().setDialogFlags(dialog_id, 0);
             editor.commit();
-            TLRPC.Dialog dialog = MessagesController.getInstance(currentAccount).dialogs_dict.get(dialog_id);
+            TLRPC.Dialog dialog = getMessagesController().dialogs_dict.get(dialog_id);
             if (dialog != null) {
                 dialog.notify_settings = new TLRPC.TL_peerNotifySettings();
             }
-            NotificationsController.getInstance(currentAccount).updateServerNotificationsSettings(dialog_id);
+            getNotificationsController().updateServerNotificationsSettings(dialog_id);
         }
     }
 
@@ -7004,7 +7081,7 @@
         }
 
         if (query) {
-            if (currentEncryptedChat != null && !MessagesStorage.getInstance(currentAccount).checkMessageId(dialog_id, startLoadFromMessageId)) {
+            if (currentEncryptedChat != null && !getMessagesStorage().checkMessageId(dialog_id, startLoadFromMessageId)) {
                 return;
             }
             /*clearChatData();
@@ -7019,11 +7096,12 @@
             removeSelectedMessageHighlight();
             scrollToMessagePosition = -10000;
             startLoadFromMessageId = id;
+            showScrollToMessageError = true;
             if (id == createUnreadMessageAfterId) {
                 createUnreadMessageAfterIdLoading = true;
             }
             waitingForLoad.add(lastLoadIndex);
-            MessagesController.getInstance(currentAccount).loadMessages(loadIndex == 0 ? dialog_id : mergeDialogId, AndroidUtilities.isTablet() ? 30 : 20, startLoadFromMessageId, 0, true, 0, classGuid, 3, 0, ChatObject.isChannel(currentChat), lastLoadIndex++);
+            getMessagesController().loadMessages(loadIndex == 0 ? dialog_id : mergeDialogId, AndroidUtilities.isTablet() ? 30 : 20, startLoadFromMessageId, 0, true, 0, classGuid, 3, 0, ChatObject.isChannel(currentChat), lastLoadIndex++);
             //emptyViewContainer.setVisibility(View.INVISIBLE);
         } else {
             showFloatingDateView(false);
@@ -7199,7 +7277,7 @@
                 bottomOverlayText.setText(LocaleController.getString("EncryptionRejected", R.string.EncryptionRejected));
                 bottomOverlay.setVisibility(View.VISIBLE);
                 chatActivityEnterView.setFieldText("");
-                DataQuery.getInstance(currentAccount).cleanDraft(dialog_id, false);
+                getMediaDataController().cleanDraft(dialog_id, false);
                 hideKeyboard = true;
             } else if (currentEncryptedChat instanceof TLRPC.TL_encryptedChat) {
                 bottomOverlay.setVisibility(View.INVISIBLE);
@@ -7254,7 +7332,7 @@
             processSelectedAttach(attach_video);
         } else if (requestCode == 101 && currentUser != null) {
             if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
-                VoIPHelper.startCall(currentUser, getParentActivity(), MessagesController.getInstance(currentAccount).getUserFull(currentUser.id));
+                VoIPHelper.startCall(currentUser, getParentActivity(), getMessagesController().getUserFull(currentUser.id));
             } else {
                 VoIPHelper.permissionDenied(getParentActivity(), null);
             }
@@ -7314,14 +7392,14 @@
                 } else {
                     if (messageObject.isVoice()) {
                         return 2;
-                    } else if (messageObject.isSticker()) {
+                    } else if (messageObject.isSticker() || messageObject.isAnimatedSticker()) {
                         TLRPC.InputStickerSet inputStickerSet = messageObject.getInputStickerSet();
                         if (inputStickerSet instanceof TLRPC.TL_inputStickerSetID) {
-                            if (!DataQuery.getInstance(currentAccount).isStickerPackInstalled(inputStickerSet.id)) {
+                            if (!getMediaDataController().isStickerPackInstalled(inputStickerSet.id)) {
                                 return 7;
                             }
                         } else if (inputStickerSet instanceof TLRPC.TL_inputStickerSetShortName) {
-                            if (!DataQuery.getInstance(currentAccount).isStickerPackInstalled(inputStickerSet.short_name)) {
+                            if (!getMediaDataController().isStickerPackInstalled(inputStickerSet.short_name)) {
                                 return 7;
                             }
                         }
@@ -7384,10 +7462,10 @@
             } else {
                 if (messageObject.isVoice()) {
                     return 2;
-                } else if (messageObject.isSticker()) {
+                } else if (messageObject.isSticker() || messageObject.isAnimatedSticker()) {
                     TLRPC.InputStickerSet inputStickerSet = messageObject.getInputStickerSet();
                     if (inputStickerSet instanceof TLRPC.TL_inputStickerSetShortName) {
-                        if (!DataQuery.getInstance(currentAccount).isStickerPackInstalled(inputStickerSet.short_name)) {
+                        if (!getMediaDataController().isStickerPackInstalled(inputStickerSet.short_name)) {
                             return 7;
                         }
                     }
@@ -7465,7 +7543,7 @@
                 if (messageObject.type == 0 || messageObject.caption != null) {
                     selectedMessagesCanCopyIds[index].remove(messageObject.getId());
                 }
-                if (messageObject.isSticker()) {
+                if (messageObject.isSticker() || messageObject.isAnimatedSticker()) {
                     selectedMessagesCanStarIds[index].remove(messageObject.getId());
                 }
                 if (messageObject.canEditMessage(currentChat)) {
@@ -7485,7 +7563,7 @@
                 if (messageObject.type == 0 || messageObject.caption != null) {
                     selectedMessagesCanCopyIds[index].put(messageObject.getId(), messageObject);
                 }
-                if (messageObject.isSticker()) {
+                if (messageObject.isSticker() || messageObject.isAnimatedSticker()) {
                     selectedMessagesCanStarIds[index].put(messageObject.getId(), messageObject);
                 }
                 if (messageObject.canEditMessage(currentChat)) {
@@ -7548,7 +7626,7 @@
                 int copyVisible = copyItem.getVisibility();
                 int starVisible = starItem.getVisibility();
                 copyItem.setVisibility(selectedMessagesCanCopyIds[0].size() + selectedMessagesCanCopyIds[1].size() != 0 ? View.VISIBLE : View.GONE);
-                starItem.setVisibility(DataQuery.getInstance(currentAccount).canAddStickerToFavorites() && (selectedMessagesCanStarIds[0].size() + selectedMessagesCanStarIds[1].size()) == selectedCount ? View.VISIBLE : View.GONE);
+                starItem.setVisibility(getMediaDataController().canAddStickerToFavorites() && (selectedMessagesCanStarIds[0].size() + selectedMessagesCanStarIds[1].size()) == selectedCount ? View.VISIBLE : View.GONE);
                 int newCopyVisible = copyItem.getVisibility();
                 int newStarVisible = starItem.getVisibility();
                 actionBar.createActionMode().getItem(delete).setVisibility(cantDeleteMessagesCount == 0 ? View.VISIBLE : View.GONE);
@@ -7556,7 +7634,7 @@
                 for (int a = 0; a < 2; a++) {
                     for (int b = 0; b < selectedMessagesCanStarIds[a].size(); b++) {
                         MessageObject msg = selectedMessagesCanStarIds[a].valueAt(b);
-                        if (!DataQuery.getInstance(currentAccount).isStickerInFavorites(msg.getDocument())) {
+                        if (!getMediaDataController().isStickerInFavorites(msg.getDocument())) {
                             hasUnfavedSelected = true;
                             break;
                         }
@@ -7731,7 +7809,7 @@
         } else if (currentUser != null) {
             if (currentUser.self) {
                 avatarContainer.setTitle(LocaleController.getString("SavedMessages", R.string.SavedMessages));
-            } else if (!MessagesController.isSupportUser(currentUser) && ContactsController.getInstance(currentAccount).contactsDict.get(currentUser.id) == null && (ContactsController.getInstance(currentAccount).contactsDict.size() != 0 || !ContactsController.getInstance(currentAccount).isLoadingContacts())) {
+            } else if (!MessagesController.isSupportUser(currentUser) && getContactsController().contactsDict.get(currentUser.id) == null && (getContactsController().contactsDict.size() != 0 || !getContactsController().isLoadingContacts())) {
                 if (!TextUtils.isEmpty(currentUser.phone)) {
                     avatarContainer.setTitle(PhoneFormat.getInstance().format("+" + currentUser.phone));
                 } else {
@@ -7782,7 +7860,7 @@
         if (avatarContainer == null) {
             return;
         }
-        Drawable rightIcon = MessagesController.getInstance(currentAccount).isDialogMuted(dialog_id) ? Theme.chat_muteIconDrawable : null;
+        Drawable rightIcon = getMessagesController().isDialogMuted(dialog_id) ? Theme.chat_muteIconDrawable : null;
         avatarContainer.setTitleIcons(currentEncryptedChat != null ? Theme.chat_lockIconDrawable : null, rightIcon);
         if (muteItem != null) {
             if (rightIcon != null) {
@@ -7795,13 +7873,13 @@
 
     private void checkAndUpdateAvatar() {
         if (currentUser != null) {
-            TLRPC.User user = MessagesController.getInstance(currentAccount).getUser(currentUser.id);
+            TLRPC.User user = getMessagesController().getUser(currentUser.id);
             if (user == null) {
                 return;
             }
             currentUser = user;
         } else if (currentChat != null) {
-            TLRPC.Chat chat = MessagesController.getInstance(currentAccount).getChat(currentChat.id);
+            TLRPC.Chat chat = getMessagesController().getChat(currentChat.id);
             if (chat == null) {
                 return;
             }
@@ -7838,9 +7916,9 @@
             }, this);
         } else {
             fillEditingMediaWithCaption(caption, null);
-            SendMessagesHelper.prepareSendingVideo(videoPath, 0, 0, 0, 0, null, dialog_id, replyingMessageObject, null, null, 0, editingMessageObject);
+            SendMessagesHelper.prepareSendingVideo(getAccountInstance(), videoPath, 0, 0, 0, 0, null, dialog_id, replyingMessageObject, null, null, 0, editingMessageObject);
             hideFieldPanel(false);
-            DataQuery.getInstance(currentAccount).cleanDraft(dialog_id, true);
+            getMediaDataController().cleanDraft(dialog_id, true);
         }
     }
 
@@ -7896,7 +7974,7 @@
             return;
         }
         fillEditingMediaWithCaption(null, null);
-        SendMessagesHelper.prepareSendingDocument(tempPath, originalPath, null, null, null, dialog_id, replyingMessageObject, null, editingMessageObject);
+        SendMessagesHelper.prepareSendingDocument(getAccountInstance(), tempPath, originalPath, null, null, null, dialog_id, replyingMessageObject, null, editingMessageObject);
         hideFieldPanel(false);
     }
 
@@ -7932,10 +8010,10 @@
                     }
                 } else {
                     fillEditingMediaWithCaption(null, null);
-                    SendMessagesHelper.prepareSendingPhoto(null, uri, dialog_id, replyingMessageObject, null, null, null, null, 0, editingMessageObject);
+                    SendMessagesHelper.prepareSendingPhoto(getAccountInstance(), null, uri, dialog_id, replyingMessageObject, null, null, null, null, 0, editingMessageObject);
                 }
                 hideFieldPanel(false);
-                DataQuery.getInstance(currentAccount).cleanDraft(dialog_id, true);
+                getMediaDataController().cleanDraft(dialog_id, true);
             } else if (requestCode == 21) {
                 if (data == null) {
                     showAttachmentError();
@@ -7952,7 +8030,7 @@
                     showAttachmentError();
                 }
                 hideFieldPanel(false);
-                DataQuery.getInstance(currentAccount).cleanDraft(dialog_id, true);
+                getMediaDataController().cleanDraft(dialog_id, true);
             }
         }
     }
@@ -7994,12 +8072,12 @@
             if (guid == classGuid) {
             	setItemAnimationsEnabled(false);
                 if (!openAnimationEnded) {
-                    NotificationCenter.getInstance(currentAccount).setAllowedNotificationsDutingAnimation(new int[]{NotificationCenter.chatInfoDidLoad, NotificationCenter.dialogsNeedReload,
+                    getNotificationCenter().setAllowedNotificationsDutingAnimation(new int[]{NotificationCenter.chatInfoDidLoad, NotificationCenter.dialogsNeedReload,
                             NotificationCenter.closeChats, NotificationCenter.botKeyboardDidLoad, NotificationCenter.userInfoDidLoad, NotificationCenter.needDeleteDialog/*, NotificationCenter.botInfoDidLoad*/});
                 }
                 int queryLoadIndex = (Integer) args[11];
                 int index = waitingForLoad.indexOf(queryLoadIndex);
-                int currentUserId = UserConfig.getInstance(currentAccount).getClientUserId();
+                int currentUserId = getUserConfig().getClientUserId();
                 if (index == -1) {
                     return;
                 } else {
@@ -8132,7 +8210,7 @@
                     Collections.reverse(messArr);
                 }
                 if (currentEncryptedChat == null) {
-                    DataQuery.getInstance(currentAccount).loadReplyMessagesForMessages(messArr, dialog_id);
+                    getMediaDataController().loadReplyMessagesForMessages(messArr, dialog_id);
                 }
                 int approximateHeightSum = 0;
                 if ((load_type == 2 || load_type == 1) && messArr.isEmpty() && !isCache) {
@@ -8156,6 +8234,7 @@
                 }
                 for (int a = 0; a < messArr.size(); a++) {
                     MessageObject obj = messArr.get(a);
+                    int messageId = obj.getId();
 
                     approximateHeightSum += obj.getApproximateHeight();
                     if (currentUser != null) {
@@ -8166,7 +8245,7 @@
                             obj.setIsRead();
                         }
                     }
-                    if (messagesDict[loadIndex].indexOfKey(obj.getId()) >= 0) {
+                    if (messagesDict[loadIndex].indexOfKey(messageId) >= 0) {
                         continue;
                     }
                     addToPolls(obj, null);
@@ -8179,16 +8258,16 @@
                         obj.audioProgressSec = player.audioProgressSec;
                         obj.audioPlayerDuration = player.audioPlayerDuration;
                     }
-                    if (loadIndex == 0 && ChatObject.isChannel(currentChat) && obj.getId() == 1) {
+                    if (loadIndex == 0 && ChatObject.isChannel(currentChat) && messageId == 1) {
                         endReached[loadIndex] = true;
                         cacheEndReached[loadIndex] = true;
                     }
-                    if (obj.getId() > 0) {
-                        maxMessageId[loadIndex] = Math.min(obj.getId(), maxMessageId[loadIndex]);
-                        minMessageId[loadIndex] = Math.max(obj.getId(), minMessageId[loadIndex]);
+                    if (messageId > 0) {
+                        maxMessageId[loadIndex] = Math.min(messageId, maxMessageId[loadIndex]);
+                        minMessageId[loadIndex] = Math.max(messageId, minMessageId[loadIndex]);
                     } else if (currentEncryptedChat != null) {
-                        maxMessageId[loadIndex] = Math.max(obj.getId(), maxMessageId[loadIndex]);
-                        minMessageId[loadIndex] = Math.min(obj.getId(), minMessageId[loadIndex]);
+                        maxMessageId[loadIndex] = Math.max(messageId, maxMessageId[loadIndex]);
+                        minMessageId[loadIndex] = Math.min(messageId, minMessageId[loadIndex]);
                     }
                     if (obj.messageOwner.date != 0) {
                         maxDate[loadIndex] = Math.max(maxDate[loadIndex], obj.messageOwner.date);
@@ -8197,7 +8276,7 @@
                         }
                     }
 
-                    if (obj.getId() == last_message_id) {
+                    if (messageId == last_message_id) {
                         forwardEndReached[loadIndex] = true;
                     }
 
@@ -8213,13 +8292,13 @@
                         continue;
                     }
 
-                    if (needAnimateToMessage != null && needAnimateToMessage.getId() == obj.getId() && obj.getId() < 0 && obj.type == 5) {
+                    if (needAnimateToMessage != null && needAnimateToMessage.getId() == messageId && messageId < 0 && obj.type == 5) {
                         obj = needAnimateToMessage;
                         animatingMessageObjects.add(obj);
                         needAnimateToMessage = null;
                     }
 
-                    messagesDict[loadIndex].put(obj.getId(), obj);
+                    messagesDict[loadIndex].put(messageId, obj);
                     ArrayList<MessageObject> dayArray = messagesByDays.get(obj.dateKey);
 
                     if (dayArray == null) {
@@ -8314,7 +8393,7 @@
                             prevObj = null;
                         }
                     }
-                    if (load_type == 2 && obj.getId() == first_unread_id) {
+                    if (load_type == 2 && messageId == first_unread_id) {
                         if (approximateHeightSum > AndroidUtilities.displaySize.y / 2 || !forwardEndReached[0]) {
                             TLRPC.Message dateMsg = new TLRPC.TL_message();
                             dateMsg.message = "";
@@ -8328,10 +8407,13 @@
                             scrollToMessagePosition = -10000;
                             newRowsCount++;
                         }
-                    } else if ((load_type == 3 || load_type == 4) && obj.getId() == startLoadFromMessageId) {
+                    } else if ((load_type == 3 || load_type == 4) && (startLoadFromMessageId < 0 && messageId == startLoadFromMessageId || startLoadFromMessageId > 0 && messageId > 0 && messageId <= startLoadFromMessageId)) {
                         removeSelectedMessageHighlight();
-                        if (needSelectFromMessageId) {
-                            highlightMessageId = obj.getId();
+                        if (needSelectFromMessageId && messageId == startLoadFromMessageId) {
+                            highlightMessageId = messageId;
+                        }
+                        if (showScrollToMessageError && messageId != startLoadFromMessageId) {
+                            AlertsCreator.showSimpleToast(ChatActivity.this, LocaleController.getString("MessageNotFound", R.string.MessageNotFound));
                         }
                         scrollToMessage = obj;
                         startLoadFromMessageId = 0;
@@ -8340,7 +8422,7 @@
                         }
                     }
                     if (load_type != 2 && unreadMessageObject == null && createUnreadMessageAfterId != 0 &&
-                            (currentEncryptedChat == null && !obj.isOut() && obj.getId() >= createUnreadMessageAfterId || currentEncryptedChat != null && !obj.isOut() && obj.getId() <= createUnreadMessageAfterId) &&
+                            (currentEncryptedChat == null && !obj.isOut() && messageId >= createUnreadMessageAfterId || currentEncryptedChat != null && !obj.isOut() && messageId <= createUnreadMessageAfterId) &&
                             (load_type == 1 || prevObj != null || prevObj == null && createUnreadLoading && a == messArr.size() - 1)) {
                         TLRPC.Message dateMsg = new TLRPC.TL_message();
                         dateMsg.message = "";
@@ -8604,7 +8686,7 @@
                     }
                 }
                 if (newRowsCount == 0 && mergeDialogId != 0 && loadIndex == 0) {
-                    NotificationCenter.getInstance(currentAccount).setAllowedNotificationsDutingAnimation(new int[]{NotificationCenter.chatInfoDidLoad, NotificationCenter.dialogsNeedReload,
+                    getNotificationCenter().setAllowedNotificationsDutingAnimation(new int[]{NotificationCenter.chatInfoDidLoad, NotificationCenter.dialogsNeedReload,
                             NotificationCenter.closeChats, NotificationCenter.messagesDidLoad, NotificationCenter.botKeyboardDidLoad, NotificationCenter.userInfoDidLoad, NotificationCenter.needDeleteDialog/*, NotificationCenter.botInfoDidLoad*/});
                 }
                 if (showDateAfter) {
@@ -8651,12 +8733,12 @@
             int updateMask = (Integer) args[0];
             if ((updateMask & MessagesController.UPDATE_MASK_NAME) != 0 || (updateMask & MessagesController.UPDATE_MASK_CHAT_NAME) != 0) {
                 if (currentChat != null) {
-                    TLRPC.Chat chat = MessagesController.getInstance(currentAccount).getChat(currentChat.id);
+                    TLRPC.Chat chat = getMessagesController().getChat(currentChat.id);
                     if (chat != null) {
                         currentChat = chat;
                     }
                 } else if (currentUser != null) {
-                    TLRPC.User user = MessagesController.getInstance(currentAccount).getUser(currentUser.id);
+                    TLRPC.User user = getMessagesController().getUser(currentUser.id);
                     if (user != null) {
                         currentUser = user;
                     }
@@ -8678,7 +8760,7 @@
                 updateSubtitle = true;
             }
             if ((updateMask & MessagesController.UPDATE_MASK_CHAT) != 0 && currentChat != null) {
-                TLRPC.Chat chat = MessagesController.getInstance(currentAccount).getChat(currentChat.id);
+                TLRPC.Chat chat = getMessagesController().getChat(currentChat.id);
                 if (chat == null) {
                     return;
                 }
@@ -8698,12 +8780,12 @@
                 avatarContainer.updateSubtitle();
             }
             if ((updateMask & MessagesController.UPDATE_MASK_USER_PHONE) != 0) {
-                updateContactStatus();
+                updateTopPanel(true);
             }
         } else if (id == NotificationCenter.didReceiveNewMessages) {
             long did = (Long) args[0];
             if (did == dialog_id) {
-                int currentUserId = UserConfig.getInstance(currentAccount).getClientUserId();
+                int currentUserId = getUserConfig().getClientUserId();
                 boolean updateChat = false;
                 boolean hasFromMe = false;
                 ArrayList<MessageObject> arr = (ArrayList<MessageObject>) args[1];
@@ -8732,7 +8814,7 @@
                     if (currentChat != null) {
                         if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatDeleteUser && messageObject.messageOwner.action.user_id == currentUserId ||
                                 messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatAddUser && messageObject.messageOwner.action.users.contains(currentUserId)) {
-                            TLRPC.Chat newChat = MessagesController.getInstance(currentAccount).getChat(currentChat.id);
+                            TLRPC.Chat newChat = getMessagesController().getChat(currentChat.id);
                             if (newChat != null) {
                                 currentChat = newChat;
                                 checkActionBarMenu();
@@ -8781,6 +8863,7 @@
 
                     for (int a = 0; a < arr.size(); a++) {
                         MessageObject obj = arr.get(a);
+                        int messageId = obj.getId();
                         if (currentUser != null && (currentUser.bot && obj.isOut() || currentUser.id == currentUserId)) {
                             obj.setIsRead();
                         }
@@ -8801,7 +8884,7 @@
                             scrollToLastMessage(false);
                             return;
                         }
-                        if (obj.type < 0 || messagesDict[0].indexOfKey(obj.getId()) >= 0) {
+                        if (obj.type < 0 || messagesDict[0].indexOfKey(messageId) >= 0) {
                             continue;
                         }
                         if (currentChat != null && currentChat.creator && (action instanceof TLRPC.TL_messageActionChatCreate || action instanceof TLRPC.TL_messageActionChatEditPhoto && messages.size() < 4)) {
@@ -8813,12 +8896,12 @@
                         addToPolls(obj, null);
                         obj.checkLayout();
                         currentMaxDate = Math.max(currentMaxDate, obj.messageOwner.date);
-                        if (obj.getId() > 0) {
-                            currentMinMsgId = Math.max(obj.getId(), currentMinMsgId);
-                            last_message_id = Math.max(last_message_id, obj.getId());
+                        if (messageId > 0) {
+                            currentMinMsgId = Math.max(messageId, currentMinMsgId);
+                            last_message_id = Math.max(last_message_id, messageId);
                         } else if (currentEncryptedChat != null) {
-                            currentMinMsgId = Math.min(obj.getId(), currentMinMsgId);
-                            last_message_id = Math.min(last_message_id, obj.getId());
+                            currentMinMsgId = Math.min(messageId, currentMinMsgId);
+                            last_message_id = Math.min(last_message_id, messageId);
                         }
 
                         if (obj.messageOwner.mentioned && obj.isContentUnread()) {
@@ -8852,6 +8935,7 @@
                     for (int a = 0; a < arr.size(); a++) {
                         int placeToPaste = -1;
                         MessageObject obj = arr.get(a);
+                        int messageId = obj.getId();
                         if (isSecretChat()) {
                             checkSecretMessageForLocation(obj);
                         }
@@ -8862,7 +8946,7 @@
                         if (avatarContainer != null && currentEncryptedChat != null && action instanceof TLRPC.TL_messageEncryptedAction && action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL) {
                             avatarContainer.setTime(((TLRPC.TL_decryptedMessageActionSetMessageTTL) action.encryptedAction).ttl_seconds);
                         }
-                        if (obj.type < 0 || messagesDict[0].indexOfKey(obj.getId()) >= 0) {
+                        if (obj.type < 0 || messagesDict[0].indexOfKey(messageId) >= 0) {
                             continue;
                         }
                         if (currentChat != null && currentChat.creator && (action instanceof TLRPC.TL_messageActionChatCreate || action instanceof TLRPC.TL_messageActionChatEditPhoto && messages.size() < 4)) {
@@ -8965,15 +9049,15 @@
                             hasFromMe = true;
                         }
 
-                        if (obj.getId() > 0) {
-                            maxMessageId[0] = Math.min(obj.getId(), maxMessageId[0]);
-                            minMessageId[0] = Math.max(obj.getId(), minMessageId[0]);
+                        if (messageId > 0) {
+                            maxMessageId[0] = Math.min(messageId, maxMessageId[0]);
+                            minMessageId[0] = Math.max(messageId, minMessageId[0]);
                         } else if (currentEncryptedChat != null) {
-                            maxMessageId[0] = Math.max(obj.getId(), maxMessageId[0]);
-                            minMessageId[0] = Math.min(obj.getId(), minMessageId[0]);
+                            maxMessageId[0] = Math.max(messageId, maxMessageId[0]);
+                            minMessageId[0] = Math.min(messageId, minMessageId[0]);
                         }
                         maxDate[0] = Math.max(maxDate[0], obj.messageOwner.date);
-                        messagesDict[0].put(obj.getId(), obj);
+                        messagesDict[0].put(messageId, obj);
                         ArrayList<MessageObject> dayArray = messagesByDays.get(obj.dateKey);
                         if (placeToPaste > messages.size()) {
                             placeToPaste = messages.size();
@@ -9038,7 +9122,7 @@
                         }
                     }
                     if (webpagesToReload != null) {
-                        MessagesController.getInstance(currentAccount).reloadWebPages(dialog_id, webpagesToReload);
+                        getMessagesController().reloadWebPages(dialog_id, webpagesToReload);
                     }
                     if (newGroups != null) {
                         for (int a = 0; a < newGroups.size(); a++) {
@@ -9112,7 +9196,7 @@
                     checkAndUpdateAvatar();
                 }
                 if (reloadMegagroup) {
-                    MessagesController.getInstance(currentAccount).loadFullChat(currentChat.id, 0, true);
+                    getMessagesController().loadFullChat(currentChat.id, 0, true);
                 }
             }
         } else if (id == NotificationCenter.closeChats) {
@@ -9213,12 +9297,12 @@
                 if (chatInfo != null && chatInfo.pinned_msg_id == mid) {
                     pinnedMessageObject = null;
                     chatInfo.pinned_msg_id = 0;
-                    MessagesStorage.getInstance(currentAccount).updateChatPinnedMessage(chatInfo.id, 0);
+                    getMessagesStorage().updateChatPinnedMessage(chatInfo.id, 0);
                     updatePinnedMessageView(true);
                 } else if (userInfo != null && userInfo.pinned_msg_id == mid) {
                     pinnedMessageObject = null;
                     userInfo.pinned_msg_id = 0;
-                    MessagesStorage.getInstance(currentAccount).updateUserPinnedMessage(chatInfo.id, 0);
+                    getMessagesStorage().updateUserPinnedMessage(chatInfo.id, 0);
                     updatePinnedMessageView(true);
                 }
                 messages.remove(b);
@@ -9256,7 +9340,7 @@
                     maxDate[0] = maxDate[1] = Integer.MIN_VALUE;
                     minDate[0] = minDate[1] = 0;
                     waitingForLoad.add(lastLoadIndex);
-                    MessagesController.getInstance(currentAccount).loadMessages(dialog_id, 30, 0, 0, !cacheEndReached[0], minDate[0], classGuid, 0, 0, ChatObject.isChannel(currentChat), lastLoadIndex++);
+                    getMessagesController().loadMessages(dialog_id, 30, 0, 0, !cacheEndReached[0], minDate[0], classGuid, 0, 0, ChatObject.isChannel(currentChat), lastLoadIndex++);
                     loading = true;
                 } else {
                     if (botButtons != null) {
@@ -9307,7 +9391,7 @@
                     } else if (userInfo != null) {
                         userInfo.pinned_msg_id = 0;
                     }
-                    MessagesStorage.getInstance(currentAccount).updateChatPinnedMessage(channelId, 0);
+                    getMessagesStorage().updateChatPinnedMessage(channelId, 0);
                     updatePinnedMessageView(true);
                 }
                 if (obj != null) {
@@ -9388,7 +9472,7 @@
                     maxDate[0] = maxDate[1] = Integer.MIN_VALUE;
                     minDate[0] = minDate[1] = 0;
                     waitingForLoad.add(lastLoadIndex);
-                    MessagesController.getInstance(currentAccount).loadMessages(dialog_id, 30, 0, 0, !cacheEndReached[0], minDate[0], classGuid, 0, 0, ChatObject.isChannel(currentChat), lastLoadIndex++);
+                    getMessagesController().loadMessages(dialog_id, 30, 0, 0, !cacheEndReached[0], minDate[0], classGuid, 0, 0, ChatObject.isChannel(currentChat), lastLoadIndex++);
                     loading = true;
                 } else {
                     if (botButtons != null) {
@@ -9521,7 +9605,7 @@
                 ArrayList<MessageObject> messArr = new ArrayList<>();
                 messArr.add(obj);
                 if (currentEncryptedChat == null) {
-                    DataQuery.getInstance(currentAccount).loadReplyMessagesForMessages(messArr, dialog_id);
+                    getMediaDataController().loadReplyMessagesForMessages(messArr, dialog_id);
                 }
                 if (chatAdapter != null) {
                     chatAdapter.updateRowWithMessageObject(obj, true);
@@ -9531,7 +9615,7 @@
                         moveScrollToLastMessage();
                     }
                 }
-                NotificationsController.getInstance(currentAccount).playOutChatSound();
+                getNotificationsController().playOutChatSound();
             }
         } else if (id == NotificationCenter.messageReceivedByAck) {
             Integer msgId = (Integer) args[0];
@@ -9561,7 +9645,7 @@
                             }
                         }
                         if (lastDate == 0 || Math.abs(System.currentTimeMillis() / 1000 - lastDate) > 60 * 60) {
-                            MessagesController.getInstance(currentAccount).loadChannelParticipants(currentChat.id);
+                            getMessagesController().loadChannelParticipants(currentChat.id);
                         }
                     }
                     if (chatFull.participants == null && chatInfo != null) {
@@ -9586,7 +9670,7 @@
                     avatarContainer.updateSubtitle();
                 }
                 if (isBroadcast) {
-                    SendMessagesHelper.getInstance(currentAccount).setCurrentChatInfo(chatInfo);
+                    getSendMessagesHelper().setCurrentChatInfo(chatInfo);
                 }
                 if (chatInfo instanceof TLRPC.TL_chatFull) {
                     hasBotsCommands = false;
@@ -9595,11 +9679,11 @@
                     URLSpanBotCommand.enabled = false;
                     for (int a = 0; a < chatInfo.participants.participants.size(); a++) {
                         TLRPC.ChatParticipant participant = chatInfo.participants.participants.get(a);
-                        TLRPC.User user = MessagesController.getInstance(currentAccount).getUser(participant.user_id);
+                        TLRPC.User user = getMessagesController().getUser(participant.user_id);
                         if (user != null && user.bot) {
                             URLSpanBotCommand.enabled = true;
                             botsCount++;
-                            DataQuery.getInstance(currentAccount).loadBotInfo(user.id, true, classGuid);
+                            getMediaDataController().loadBotInfo(user.id, true, classGuid);
                         }
                     }
                     if (chatListView != null) {
@@ -9673,10 +9757,7 @@
                 }
             }
         } else if (id == NotificationCenter.contactsDidLoad) {
-            updateContactStatus();
-            if (currentEncryptedChat != null) {
-                updateSpamView();
-            }
+            updateTopPanel(true);
             if (avatarContainer != null) {
                 avatarContainer.updateSubtitle();
             }
@@ -9684,7 +9765,7 @@
             TLRPC.EncryptedChat chat = (TLRPC.EncryptedChat) args[0];
             if (currentEncryptedChat != null && chat.id == currentEncryptedChat.id) {
                 currentEncryptedChat = chat;
-                updateContactStatus();
+                updateTopPanel(true);
                 updateSecretStatus();
                 initStickers();
                 if (chatActivityEnterView != null) {
@@ -9721,7 +9802,7 @@
         } else if (id == NotificationCenter.blockedUsersDidLoad) {
             if (currentUser != null) {
                 boolean oldValue = userBlocked;
-                userBlocked = MessagesController.getInstance(currentAccount).blockedUsers.indexOfKey(currentUser.id) >= 0;
+                userBlocked = getMessagesController().blockedUsers.indexOfKey(currentUser.id) >= 0;
                 if (oldValue != userBlocked) {
                     updateBottomOverlay();
                 }
@@ -9848,7 +9929,7 @@
                                             FileLog.e(e);
                                         }
                                     }
-                                    animation.seekTo(messageObject.audioProgressMs, !FileLoader.getInstance(currentAccount).isLoadingVideo(messageObject.getDocument(), true));
+                                    animation.seekTo(messageObject.audioProgressMs, !getFileLoader().isLoadingVideo(messageObject.getDocument(), true));
                                 }
                                 break;
                             }
@@ -10284,8 +10365,8 @@
             }
         } else if (id == NotificationCenter.peerSettingsDidLoad) {
             long did = (Long) args[0];
-            if (did == dialog_id) {
-                updateSpamView();
+            if (did == dialog_id || currentUser != null && currentUser.id == did) {
+                updateTopPanel(!paused);
             }
         } else if (id == NotificationCenter.newDraftReceived) {
             long did = (Long) args[0];
@@ -10433,7 +10514,7 @@
             startLoadFromMessageId = 0;
             needSelectFromMessageId = false;
             waitingForLoad.add(lastLoadIndex);
-            MessagesController.getInstance(currentAccount).loadMessages(dialog_id, AndroidUtilities.isTablet() ? 30 : 20, 0, 0, true, 0, classGuid, 2, 0, ChatObject.isChannel(currentChat), lastLoadIndex++);
+            getMessagesController().loadMessages(dialog_id, AndroidUtilities.isTablet() ? 30 : 20, 0, 0, true, 0, classGuid, 2, 0, ChatObject.isChannel(currentChat), lastLoadIndex++);
         } else {
             if (progressView != null) {
                 progressView.setVisibility(View.INVISIBLE);
@@ -10459,7 +10540,7 @@
             inlineReturn = 0;
             chatActivityEnterView.setFieldText(query);
         } else {
-            DataQuery.getInstance(currentAccount).saveDraft(inlineReturn, query, null, null, false);
+            getMediaDataController().saveDraft(inlineReturn, query, null, null, false);
             if (parentLayout.fragmentsStack.size() > 1) {
                 BaseFragment prevFragment = parentLayout.fragmentsStack.get(parentLayout.fragmentsStack.size() - 2);
                 if (prevFragment instanceof ChatActivity && ((ChatActivity) prevFragment).dialog_id == inlineReturn) {
@@ -10479,9 +10560,9 @@
                     }
                     /*ActionBarLayout parentLayout = ChatActivity.this.parentLayout;
                     if (lastFragment != null) {
-                        NotificationCenter.getInstance(currentAccount).removeObserver(lastFragment, NotificationCenter.closeChats);
+                        getNotificationCenter().removeObserver(lastFragment, NotificationCenter.closeChats);
                     }
-                    NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.closeChats);*/
+                    getNotificationCenter().postNotificationName(NotificationCenter.closeChats);*/
                     presentFragment(new ChatActivity(bundle), true);
                 }
             }
@@ -10530,15 +10611,15 @@
         } else {
             AndroidUtilities.runOnUIThread(() -> {
                 if (lastFragment != null) {
-                    NotificationCenter.getInstance(currentAccount).removeObserver(lastFragment, NotificationCenter.closeChats);
+                    getNotificationCenter().removeObserver(lastFragment, NotificationCenter.closeChats);
                 }
-                NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.closeChats);
+                getNotificationCenter().postNotificationName(NotificationCenter.closeChats);
                 final Bundle bundle = new Bundle();
                 bundle.putInt("chat_id", obj.messageOwner.action.channel_id);
                 actionBarLayout.presentFragment(new ChatActivity(bundle), true);
             });
         }
-        AndroidUtilities.runOnUIThread(() -> MessagesController.getInstance(currentAccount).loadFullChat(channelId, 0, true), 1000);
+        AndroidUtilities.runOnUIThread(() -> getMessagesController().loadFullChat(channelId, 0, true), 1000);
     }
 
     private void addToPolls(MessageObject obj, MessageObject old) {
@@ -10586,17 +10667,21 @@
 
     @Override
     public void onTransitionAnimationStart(boolean isOpen, boolean backward) {
-        NotificationCenter.getInstance(currentAccount).setAllowedNotificationsDutingAnimation(new int[]{NotificationCenter.chatInfoDidLoad, NotificationCenter.dialogsNeedReload,
-                NotificationCenter.closeChats, NotificationCenter.messagesDidLoad, NotificationCenter.botKeyboardDidLoad, NotificationCenter.userInfoDidLoad, NotificationCenter.needDeleteDialog/*, NotificationCenter.botInfoDidLoad*/});
-        NotificationCenter.getInstance(currentAccount).setAnimationInProgress(true);
         if (isOpen) {
+            getNotificationCenter().setAllowedNotificationsDutingAnimation(new int[]{NotificationCenter.chatInfoDidLoad, NotificationCenter.dialogsNeedReload,
+                    NotificationCenter.closeChats, NotificationCenter.messagesDidLoad, NotificationCenter.botKeyboardDidLoad, NotificationCenter.userInfoDidLoad, NotificationCenter.needDeleteDialog/*, NotificationCenter.botInfoDidLoad*/});
             openAnimationEnded = false;
+        } else {
+            if (chatActivityEnterView != null) {
+                chatActivityEnterView.onBeginHide();
         }
     }
+        getNotificationCenter().setAnimationInProgress(true);
+    }
 
     @Override
     public void onTransitionAnimationEnd(boolean isOpen, boolean backward) {
-        NotificationCenter.getInstance(currentAccount).setAnimationInProgress(false);
+        getNotificationCenter().setAnimationInProgress(false);
         if (isOpen) {
             openAnimationEnded = true;
             if (Build.VERSION.SDK_INT >= 21) {
@@ -10636,7 +10721,7 @@
     @Override
     protected void onDialogDismiss(Dialog dialog) {
         if (closeChatDialog != null && dialog == closeChatDialog) {
-            MessagesController.getInstance(currentAccount).deleteDialog(dialog_id, 0);
+            getMessagesController().deleteDialog(dialog_id, 0);
             if (parentLayout != null && !parentLayout.fragmentsStack.isEmpty() && parentLayout.fragmentsStack.get(parentLayout.fragmentsStack.size() - 1) != this) {
                 BaseFragment fragment = parentLayout.fragmentsStack.get(parentLayout.fragmentsStack.size() - 1);
                 removeSelfFromStack();
@@ -10670,8 +10755,20 @@
         stringBuilder = new SpannableStringBuilder(LocaleController.getString("Mono", R.string.Mono));
         stringBuilder.setSpan(new TypefaceSpan(Typeface.MONOSPACE), 0, stringBuilder.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
         menu.add(R.id.menu_groupbolditalic, R.id.menu_mono, 8, stringBuilder);
-        menu.add(R.id.menu_groupbolditalic, R.id.menu_link, 9, LocaleController.getString("CreateLink", R.string.CreateLink));
-        menu.add(R.id.menu_groupbolditalic, R.id.menu_regular, 10, LocaleController.getString("Regular", R.string.Regular));
+        if (currentEncryptedChat != null && AndroidUtilities.getPeerLayerVersion(currentEncryptedChat.layer) >= 101) {
+            stringBuilder = new SpannableStringBuilder(LocaleController.getString("Strike", R.string.Strike));
+            TextStyleSpan.TextStyleRun run = new TextStyleSpan.TextStyleRun();
+            run.flags |= TextStyleSpan.FLAG_STYLE_STRIKE;
+            stringBuilder.setSpan(new TextStyleSpan(run), 0, stringBuilder.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+            menu.add(R.id.menu_groupbolditalic, R.id.menu_strike, 9, stringBuilder);
+            stringBuilder = new SpannableStringBuilder(LocaleController.getString("Underline", R.string.Underline));
+            run = new TextStyleSpan.TextStyleRun();
+            run.flags |= TextStyleSpan.FLAG_STYLE_UNDERLINE;
+            stringBuilder.setSpan(new TextStyleSpan(run), 0, stringBuilder.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+            menu.add(R.id.menu_groupbolditalic, R.id.menu_underline, 10, stringBuilder);
+        }
+        menu.add(R.id.menu_groupbolditalic, R.id.menu_link, 11, LocaleController.getString("CreateLink", R.string.CreateLink));
+        menu.add(R.id.menu_groupbolditalic, R.id.menu_regular, 12, LocaleController.getString("Regular", R.string.Regular));
         return true;
     }
 
@@ -10682,14 +10779,14 @@
         if (currentChat != null) {
             if (ChatObject.isChannel(currentChat) && !(currentChat instanceof TLRPC.TL_channelForbidden)) {
                 if (ChatObject.isNotInChat(currentChat)) {
-                    if (MessagesController.getInstance(currentAccount).isJoiningChannel(currentChat.id)) {
+                    if (getMessagesController().isJoiningChannel(currentChat.id)) {
                         showBottomOverlayProgress(true, false);
                     } else {
                         bottomOverlayChatText.setText(LocaleController.getString("ChannelJoin", R.string.ChannelJoin));
                         showBottomOverlayProgress(false, false);
                     }
                 } else {
-                    if (!MessagesController.getInstance(currentAccount).isDialogMuted(dialog_id)) {
+                    if (!getMessagesController().isDialogMuted(dialog_id)) {
                         bottomOverlayChatText.setText(LocaleController.getString("ChannelMute", R.string.ChannelMute));
                     } else {
                         bottomOverlayChatText.setText(LocaleController.getString("ChannelUnmute", R.string.ChannelUnmute));
@@ -10991,7 +11088,7 @@
                 if (photoSize == thumbPhotoSize) {
                     thumbPhotoSize = null;
                 }
-                if (photoSize == null || photoSize instanceof TLRPC.TL_photoSizeEmpty || photoSize.location instanceof TLRPC.TL_fileLocationUnavailable || pinnedMessageObject.type == 13) {
+                if (photoSize == null || photoSize instanceof TLRPC.TL_photoSizeEmpty || photoSize.location instanceof TLRPC.TL_fileLocationUnavailable || pinnedMessageObject.isAnyKindOfSticker()) {
                     pinnedMessageImageView.setImageBitmap(null);
                     pinnedImageLocation = null;
                     pinnedImageLocationObject = null;
@@ -11053,73 +11150,109 @@
                 hidePinnedMessageView(animated);
                 if (loadingPinnedMessage != pinned_msg_id) {
                     loadingPinnedMessage = pinned_msg_id;
-                    DataQuery.getInstance(currentAccount).loadPinnedMessage(dialog_id, ChatObject.isChannel(currentChat) ? currentChat.id : 0, pinned_msg_id, true);
+                    getMediaDataController().loadPinnedMessage(dialog_id, ChatObject.isChannel(currentChat) ? currentChat.id : 0, pinned_msg_id, true);
                 }
             }
         }
         checkListViewPaddings();
     }
 
-    private void updateSpamView() {
-        if (reportSpamView == null) {
-            if (BuildVars.LOGS_ENABLED) {
-                FileLog.d("no spam view found");
-            }
+    private void updateTopPanel(boolean animated) {
+        if (topChatPanelView == null) {
             return;
         }
+
         SharedPreferences preferences = MessagesController.getNotificationsSettings(currentAccount);
         boolean show;
+        long did = dialog_id;
         if (currentEncryptedChat != null) {
-            show = !(currentEncryptedChat.admin_id == UserConfig.getInstance(currentAccount).getClientUserId() || ContactsController.getInstance(currentAccount).isLoadingContacts()) && ContactsController.getInstance(currentAccount).contactsDict.get(currentUser.id) == null;
-            if (show && preferences.getInt("spam3_" + dialog_id, 0) == 1) {
+            show = !(currentEncryptedChat.admin_id == getUserConfig().getClientUserId() || getContactsController().isLoadingContacts()) && getContactsController().contactsDict.get(currentUser.id) == null;
+            did = currentUser.id;
+            int vis = preferences.getInt("dialog_bar_vis3" + did, 0);
+            if (show && (vis == 1 || vis == 3)) {
                 show = false;
             }
         } else {
-            show = preferences.getInt("spam3_" + dialog_id, 0) == 2;
+            show = preferences.getInt("dialog_bar_vis3" + did, 0) == 2;
         }
-        if (!show) {
-            if (reportSpamView.getTag() == null) {
-                if (BuildVars.LOGS_ENABLED) {
-                    FileLog.d("hide spam button");
-                }
-                reportSpamView.setTag(1);
+        boolean showShare = preferences.getBoolean("dialog_bar_share" + did, false);
+        boolean showReport = preferences.getBoolean("dialog_bar_report" + did, false);
+        boolean showBlock = preferences.getBoolean("dialog_bar_block" + did, false);
+        boolean showAdd = preferences.getBoolean("dialog_bar_add" + did, false);
+        boolean showGeo = preferences.getBoolean("dialog_bar_location" + did, false);
 
-                if (reportSpamViewAnimator != null) {
-                    reportSpamViewAnimator.cancel();
-                }
-                reportSpamViewAnimator = new AnimatorSet();
-                reportSpamViewAnimator.playTogether(ObjectAnimator.ofFloat(reportSpamView, View.TRANSLATION_Y, -AndroidUtilities.dp(50)));
-                reportSpamViewAnimator.setDuration(200);
-                reportSpamViewAnimator.addListener(new AnimatorListenerAdapter() {
-                    @Override
-                    public void onAnimationEnd(Animator animation) {
-                        if (reportSpamViewAnimator != null && reportSpamViewAnimator.equals(animation)) {
-                            reportSpamView.setVisibility(View.GONE);
-                            reportSpamViewAnimator = null;
-                        }
-                    }
-
-                    @Override
-                    public void onAnimationCancel(Animator animation) {
-                        if (reportSpamViewAnimator != null && reportSpamViewAnimator.equals(animation)) {
-                            reportSpamViewAnimator = null;
-                        }
-                    }
-                });
-                reportSpamViewAnimator.start();
-            }
+        if (showReport || showBlock || showGeo) {
+            reportSpamButton.setVisibility(View.VISIBLE);
         } else {
-            if (reportSpamView.getTag() != null) {
+            reportSpamButton.setVisibility(View.GONE);
+        }
+
+        TLRPC.User user = currentUser != null ? getMessagesController().getUser(currentUser.id) : null;
+        if (user != null) {
+            if (!user.contact && showAdd) {
+                addContactItem.setVisibility(View.VISIBLE);
+                addToContactsButton.setVisibility(View.VISIBLE);
+                addContactItem.setText(LocaleController.getString("AddToContacts", R.string.AddToContacts));
+                if (reportSpamButton.getVisibility() == View.VISIBLE) {
+                    addToContactsButton.setText(LocaleController.getString("AddContactChat", R.string.AddContactChat));
+                } else {
+                    addToContactsButton.setText(LocaleController.formatString("AddContactFullChat", R.string.AddContactFullChat, UserObject.getFirstName(user)).toUpperCase());
+                }
+                addToContactsButton.setTag(null);
+                addToContactsButton.setVisibility(View.VISIBLE);
+            } else if (showShare) {
+                addContactItem.setVisibility(View.VISIBLE);
+                addToContactsButton.setVisibility(View.VISIBLE);
+                addContactItem.setText(LocaleController.getString("ShareMyContactInfo", R.string.ShareMyContactInfo));
+                addToContactsButton.setText(LocaleController.getString("ShareMyPhone", R.string.ShareMyPhone).toUpperCase());
+                addToContactsButton.setTag(1);
+                addToContactsButton.setVisibility(View.VISIBLE);
+            } else {
+                if (!user.contact && !show) {
+                    addContactItem.setVisibility(View.VISIBLE);
+                    addContactItem.setText(LocaleController.getString("ShareMyContactInfo", R.string.ShareMyContactInfo));
+                    addToContactsButton.setTag(2);
+                } else {
+                    addContactItem.setVisibility(View.GONE);
+                }
+                addToContactsButton.setVisibility(View.GONE);
+            }
+            reportSpamButton.setText(LocaleController.getString("ReportSpamUser", R.string.ReportSpamUser));
+        } else {
+            if (showGeo) {
+                reportSpamButton.setText(LocaleController.getString("ReportSpamLocation", R.string.ReportSpamLocation));
+                reportSpamButton.setTag(R.id.object_tag, 1);
+                reportSpamButton.setTextColor(Theme.getColor(Theme.key_chat_addContact));
+                reportSpamButton.setTag(Theme.key_chat_addContact);
+            } else {
+                reportSpamButton.setText(LocaleController.getString("ReportSpamAndLeave", R.string.ReportSpamAndLeave));
+                reportSpamButton.setTag(R.id.object_tag, null);
+                reportSpamButton.setTextColor(Theme.getColor(Theme.key_chat_reportSpam));
+                reportSpamButton.setTag(Theme.key_chat_reportSpam);
+            }
+            if (addContactItem != null) {
+                addContactItem.setVisibility(View.GONE);
+            }
+            addToContactsButton.setVisibility(View.GONE);
+        }
+        if (userBlocked || addToContactsButton.getVisibility() == View.GONE && reportSpamButton.getVisibility() == View.GONE) {
+            show = false;
+        }
+
+        if (show) {
+            if (topChatPanelView.getTag() != null) {
                 if (BuildVars.LOGS_ENABLED) {
                     FileLog.d("show spam button");
                 }
-                reportSpamView.setTag(null);
-                reportSpamView.setVisibility(View.VISIBLE);
+                topChatPanelView.setTag(null);
+                topChatPanelView.setVisibility(View.VISIBLE);
                 if (reportSpamViewAnimator != null) {
                     reportSpamViewAnimator.cancel();
+                    reportSpamViewAnimator = null;
                 }
+                if (animated) {
                 reportSpamViewAnimator = new AnimatorSet();
-                reportSpamViewAnimator.playTogether(ObjectAnimator.ofFloat(reportSpamView, View.TRANSLATION_Y, 0));
+                    reportSpamViewAnimator.playTogether(ObjectAnimator.ofFloat(topChatPanelView, View.TRANSLATION_Y, 0));
                 reportSpamViewAnimator.setDuration(200);
                 reportSpamViewAnimator.addListener(new AnimatorListenerAdapter() {
                     @Override
@@ -11137,40 +11270,44 @@
                     }
                 });
                 reportSpamViewAnimator.start();
+                } else {
+                    topChatPanelView.setTranslationY(0);
             }
         }
-        checkListViewPaddings();
+        } else {
+            if (topChatPanelView.getTag() == null) {
+                if (BuildVars.LOGS_ENABLED) {
+                    FileLog.d("hide spam button");
+                }
+                topChatPanelView.setTag(1);
+
+                if (reportSpamViewAnimator != null) {
+                    reportSpamViewAnimator.cancel();
+                    reportSpamViewAnimator = null;
+                }
+                if (animated) {
+                    reportSpamViewAnimator = new AnimatorSet();
+                    reportSpamViewAnimator.playTogether(ObjectAnimator.ofFloat(topChatPanelView, View.TRANSLATION_Y, -AndroidUtilities.dp(50)));
+                    reportSpamViewAnimator.setDuration(200);
+                    reportSpamViewAnimator.addListener(new AnimatorListenerAdapter() {
+                        @Override
+                        public void onAnimationEnd(Animator animation) {
+                            if (reportSpamViewAnimator != null && reportSpamViewAnimator.equals(animation)) {
+                                topChatPanelView.setVisibility(View.GONE);
+                                reportSpamViewAnimator = null;
+                            }
     }
 
-    private void updateContactStatus() {
-        if (addContactItem == null) {
-            return;
+                        @Override
+                        public void onAnimationCancel(Animator animation) {
+                            if (reportSpamViewAnimator != null && reportSpamViewAnimator.equals(animation)) {
+                                reportSpamViewAnimator = null;
         }
-        if (currentUser == null) {
-            addContactItem.setVisibility(View.GONE);
-        } else {
-            TLRPC.User user = MessagesController.getInstance(currentAccount).getUser(currentUser.id);
-            if (user != null) {
-                currentUser = user;
             }
-            if (currentEncryptedChat != null && !(currentEncryptedChat instanceof TLRPC.TL_encryptedChat)
-                    || MessagesController.isSupportUser(currentUser)
-                    || UserObject.isDeleted(currentUser)
-                    || ContactsController.getInstance(currentAccount).isLoadingContacts()
-                    || (!TextUtils.isEmpty(currentUser.phone) && ContactsController.getInstance(currentAccount).contactsDict.get(currentUser.id) != null && (ContactsController.getInstance(currentAccount).contactsDict.size() != 0 || !ContactsController.getInstance(currentAccount).isLoadingContacts()))) {
-                addContactItem.setVisibility(View.GONE);
+                    });
+                    reportSpamViewAnimator.start();
             } else {
-                addContactItem.setVisibility(View.VISIBLE);
-                if (!TextUtils.isEmpty(currentUser.phone)) {
-                    addContactItem.setText(LocaleController.getString("AddToContacts", R.string.AddToContacts));
-                    reportSpamButton.setPadding(AndroidUtilities.dp(4), 0, AndroidUtilities.dp(50), 0);
-                    addToContactsButton.setVisibility(View.VISIBLE);
-                    reportSpamContainer.setLayoutParams(LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, 0.5f, Gravity.LEFT | Gravity.TOP, 0, 0, 0, AndroidUtilities.dp(1)));
-                } else {
-                    addContactItem.setText(LocaleController.getString("ShareMyContactInfo", R.string.ShareMyContactInfo));
-                    addToContactsButton.setVisibility(View.GONE);
-                    reportSpamButton.setPadding(AndroidUtilities.dp(50), 0, AndroidUtilities.dp(50), 0);
-                    reportSpamContainer.setLayoutParams(LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, 1.0f, Gravity.LEFT | Gravity.TOP, 0, 0, 0, AndroidUtilities.dp(1)));
+                    topChatPanelView.setTranslationY(-AndroidUtilities.dp(50));
                 }
             }
         }
@@ -11196,13 +11333,13 @@
                 View firstVisView = chatLayoutManager.findViewByPosition(firstVisPos);
                 top = ((firstVisView == null) ? 0 : chatListView.getMeasuredHeight() - firstVisView.getBottom() - chatListView.getPaddingBottom());
             }
-            if (chatListView.getPaddingTop() != AndroidUtilities.dp(52) && (pinnedMessageView != null && pinnedMessageView.getTag() == null || reportSpamView != null && reportSpamView.getTag() == null)) {
+            if (chatListView.getPaddingTop() != AndroidUtilities.dp(52) && (pinnedMessageView != null && pinnedMessageView.getTag() == null || topChatPanelView != null && topChatPanelView.getTag() == null)) {
                 chatListView.setPadding(0, AndroidUtilities.dp(52), 0, AndroidUtilities.dp(3));
                 FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) floatingDateView.getLayoutParams();
                 layoutParams.topMargin = AndroidUtilities.dp(52);
                 floatingDateView.setLayoutParams(layoutParams);
                 chatListView.setTopGlowOffset(AndroidUtilities.dp(48));
-            } else if (chatListView.getPaddingTop() != AndroidUtilities.dp(4) && (pinnedMessageView == null || pinnedMessageView.getTag() != null) && (reportSpamView == null || reportSpamView.getTag() != null)) {
+            } else if (chatListView.getPaddingTop() != AndroidUtilities.dp(4) && (pinnedMessageView == null || pinnedMessageView.getTag() != null) && (topChatPanelView == null || topChatPanelView.getTag() != null)) {
                 chatListView.setPadding(0, AndroidUtilities.dp(4), 0, AndroidUtilities.dp(3));
                 FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) floatingDateView.getLayoutParams();
                 layoutParams.topMargin = AndroidUtilities.dp(4);
@@ -11295,7 +11432,7 @@
                         } else {
                             mentiondownButtonCounter.setText(String.format("%d", newMentionsCount));
                         }
-                        MessagesController.getInstance(currentAccount).markMentionMessageAsRead(message.getId(), ChatObject.isChannel(currentChat) ? currentChat.id : 0, dialog_id);
+                        getMessagesController().markMentionMessageAsRead(message.getId(), ChatObject.isChannel(currentChat) ? currentChat.id : 0, dialog_id);
                         message.setContentIsRead();
                     }
                     if (view instanceof ChatMessageCell) {
@@ -11324,7 +11461,7 @@
         }
 
         if (firstOpen) {
-            if (MessagesController.getInstance(currentAccount).isProxyDialog(dialog_id, true)) {
+            if (getMessagesController().isProxyDialog(dialog_id, true)) {
                 SharedPreferences preferences = MessagesController.getGlobalNotificationsSettings();
                 if (preferences.getLong("proxychannel", 0) != dialog_id) {
                     preferences.edit().putLong("proxychannel", dialog_id).commit();
@@ -11345,8 +11482,8 @@
             pinnedMessageImageView.setImage(ImageLocation.getForObject(pinnedImageLocation, pinnedImageLocationObject), "50_50", ImageLocation.getForObject(pinnedImageThumbLocation, pinnedImageLocationObject), "50_50_b", null, pinnedImageSize, pinnedImageCacheType, pinnedMessageObject);
         }
 
-        NotificationsController.getInstance(currentAccount).setOpenedDialogId(dialog_id);
-        MessagesController.getInstance(currentAccount).setLastVisibleDialogId(dialog_id, true);
+        getNotificationsController().setOpenedDialogId(dialog_id);
+        getMessagesController().setLastVisibleDialogId(dialog_id, true);
         if (scrollToTopOnResume) {
             if (scrollToTopUnReadOnResume && scrollToMessage != null) {
                 if (chatListView != null) {
@@ -11423,12 +11560,12 @@
         if (scrimPopupWindow != null) {
             scrimPopupWindow.dismiss();
         }
-        MessagesController.getInstance(currentAccount).markDialogAsReadNow(dialog_id);
+        getMessagesController().markDialogAsReadNow(dialog_id);
         MediaController.getInstance().stopRaiseToEarSensors(this, true);
         paused = true;
         wasPaused = true;
-        NotificationsController.getInstance(currentAccount).setOpenedDialogId(0);
-        MessagesController.getInstance(currentAccount).setLastVisibleDialogId(dialog_id, false);
+        getNotificationsController().setOpenedDialogId(0);
+        getMessagesController().setLastVisibleDialogId(dialog_id, false);
         CharSequence draftMessage = null;
         MessageObject replyMessage = null;
         boolean searchWebpage = true;
@@ -11452,10 +11589,10 @@
             contentView.onPause();
         }
         CharSequence[] message = new CharSequence[] {draftMessage};
-        ArrayList<TLRPC.MessageEntity> entities = DataQuery.getInstance(currentAccount).getEntities(message);
-        DataQuery.getInstance(currentAccount).saveDraft(dialog_id, message[0], entities, replyMessage != null ? replyMessage.messageOwner : null, !searchWebpage);
+        ArrayList<TLRPC.MessageEntity> entities = getMediaDataController().getEntities(message);
+        getMediaDataController().saveDraft(dialog_id, message[0], entities, replyMessage != null ? replyMessage.messageOwner : null, !searchWebpage);
 
-        MessagesController.getInstance(currentAccount).cancelTyping(0, dialog_id);
+        getMessagesController().cancelTyping(0, dialog_id);
 
         if (!pausedOnLastMessage) {
             SharedPreferences.Editor editor = MessagesController.getNotificationsSettings(currentAccount).edit();
@@ -11533,16 +11670,15 @@
         if (chatActivityEnterView == null) {
             return;
         }
-        TLRPC.DraftMessage draftMessage = DataQuery.getInstance(currentAccount).getDraft(dialog_id);
-        TLRPC.Message draftReplyMessage = draftMessage != null && draftMessage.reply_to_msg_id != 0 ? DataQuery.getInstance(currentAccount).getDraftMessage(dialog_id) : null;
+        TLRPC.DraftMessage draftMessage = getMediaDataController().getDraft(dialog_id);
+        TLRPC.Message draftReplyMessage = draftMessage != null && draftMessage.reply_to_msg_id != 0 ? getMediaDataController().getDraftMessage(dialog_id) : null;
         if (chatActivityEnterView.getFieldText() == null) {
             if (draftMessage != null) {
                 chatActivityEnterView.setWebPage(null, !draftMessage.no_webpage);
                 CharSequence message;
                 if (!draftMessage.entities.isEmpty()) {
                     SpannableStringBuilder stringBuilder = SpannableStringBuilder.valueOf(draftMessage.message);
-                    DataQuery.sortEntities(draftMessage.entities);
-                    int addToOffset = 0;
+                    MediaDataController.sortEntities(draftMessage.entities);
                     for (int a = 0; a < draftMessage.entities.size(); a++) {
                         TLRPC.MessageEntity entity = draftMessage.entities.get(a);
                         if (entity instanceof TLRPC.TL_inputMessageEntityMentionName || entity instanceof TLRPC.TL_messageEntityMentionName) {
@@ -11552,24 +11688,32 @@
                             } else {
                                 user_id = ((TLRPC.TL_messageEntityMentionName) entity).user_id;
                             }
-                            if (entity.offset + addToOffset + entity.length < stringBuilder.length() && stringBuilder.charAt(entity.offset + addToOffset + entity.length) == ' ') {
+                            if (entity.offset + entity.length < stringBuilder.length() && stringBuilder.charAt(entity.offset + entity.length) == ' ') {
                                 entity.length++;
                             }
-                            stringBuilder.setSpan(new URLSpanUserMention("" + user_id, 1), entity.offset + addToOffset, entity.offset + addToOffset + entity.length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
-                        } else if (entity instanceof TLRPC.TL_messageEntityCode) {
-                            stringBuilder.insert(entity.offset + entity.length + addToOffset, "`");
-                            stringBuilder.insert(entity.offset + addToOffset, "`");
-                            addToOffset += 2;
-                        } else if (entity instanceof TLRPC.TL_messageEntityPre) {
-                            stringBuilder.insert(entity.offset + entity.length + addToOffset, "```");
-                            stringBuilder.insert(entity.offset + addToOffset, "```");
-                            addToOffset += 6;
+                            stringBuilder.setSpan(new URLSpanUserMention("" + user_id, 1), entity.offset, entity.offset + entity.length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+                        } else if (entity instanceof TLRPC.TL_messageEntityCode || entity instanceof TLRPC.TL_messageEntityPre) {
+                            TextStyleSpan.TextStyleRun run = new TextStyleSpan.TextStyleRun();
+                            run.flags |= TextStyleSpan.FLAG_STYLE_MONO;
+                            MediaDataController.addStyleToText(new TextStyleSpan(run), entity.offset, entity.offset + entity.length, stringBuilder, true);
                         } else if (entity instanceof TLRPC.TL_messageEntityBold) {
-                            stringBuilder.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface("fonts/rmedium.ttf")), entity.offset + addToOffset, entity.offset + entity.length + addToOffset, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+                            TextStyleSpan.TextStyleRun run = new TextStyleSpan.TextStyleRun();
+                            run.flags |= TextStyleSpan.FLAG_STYLE_BOLD;
+                            MediaDataController.addStyleToText(new TextStyleSpan(run), entity.offset, entity.offset + entity.length, stringBuilder, true);
                         } else if (entity instanceof TLRPC.TL_messageEntityItalic) {
-                            stringBuilder.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface("fonts/ritalic.ttf")), entity.offset + addToOffset, entity.offset + entity.length + addToOffset, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+                            TextStyleSpan.TextStyleRun run = new TextStyleSpan.TextStyleRun();
+                            run.flags |= TextStyleSpan.FLAG_STYLE_ITALIC;
+                            MediaDataController.addStyleToText(new TextStyleSpan(run), entity.offset, entity.offset + entity.length, stringBuilder, true);
+                        } else if (entity instanceof TLRPC.TL_messageEntityStrike) {
+                            TextStyleSpan.TextStyleRun run = new TextStyleSpan.TextStyleRun();
+                            run.flags |= TextStyleSpan.FLAG_STYLE_STRIKE;
+                            MediaDataController.addStyleToText(new TextStyleSpan(run), entity.offset, entity.offset + entity.length, stringBuilder, true);
+                        } else if (entity instanceof TLRPC.TL_messageEntityUnderline) {
+                            TextStyleSpan.TextStyleRun run = new TextStyleSpan.TextStyleRun();
+                            run.flags |= TextStyleSpan.FLAG_STYLE_UNDERLINE;
+                            MediaDataController.addStyleToText(new TextStyleSpan(run), entity.offset, entity.offset + entity.length, stringBuilder, true);
                         } else if (entity instanceof TLRPC.TL_messageEntityTextUrl) {
-                            stringBuilder.setSpan(new URLSpanReplacement(entity.url), entity.offset + addToOffset, entity.offset + entity.length + addToOffset, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+                            stringBuilder.setSpan(new URLSpanReplacement(entity.url), entity.offset, entity.offset + entity.length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
                         }
                     }
                     message = stringBuilder;
@@ -11592,7 +11736,7 @@
             hideFieldPanel(true);
         }
         if (replyingMessageObject == null && draftReplyMessage != null) {
-            replyingMessageObject = new MessageObject(currentAccount, draftReplyMessage, MessagesController.getInstance(currentAccount).getUsers(), false);
+            replyingMessageObject = new MessageObject(currentAccount, draftReplyMessage, getMessagesController().getUsers(), false);
             showFieldPanelForReply(replyingMessageObject);
         }
     }
@@ -11790,7 +11934,7 @@
                 MessageObject message = MediaController.getInstance().getPlayingMessageObject();
                 if (message != null && message.isVideo()) {
                     PhotoViewer.getInstance().setParentActivity(getParentActivity());
-                    FileLoader.getInstance(currentAccount).setLoadingVideoForPlayer(message.getDocument(), false);
+                    getFileLoader().setLoadingVideoForPlayer(message.getDocument(), false);
                     MediaController.getInstance().cleanupPlayer(true, true, false, true);
 
                     if (PhotoViewer.getInstance().openPhoto(message, message.type != 0 ? dialog_id : 0, message.type != 0 ? mergeDialogId : 0, photoViewerProvider, false)) {
@@ -11869,6 +12013,7 @@
         selectedObjectGroup = null;
         forwardingMessage = null;
         forwardingMessageGroup = null;
+        selectedObjectToEditCaption = null;
         for (int a = 1; a >= 0; a--) {
             selectedMessagesCanCopyIds[a].clear();
             selectedMessagesCanStarIds[a].clear();
@@ -11899,7 +12044,20 @@
         }
         allowPin = allowPin && message.getId() > 0 && (message.messageOwner.action == null || message.messageOwner.action instanceof TLRPC.TL_messageActionEmpty);
         boolean allowUnpin = message.getDialogId() != mergeDialogId && allowPin && (chatInfo != null && chatInfo.pinned_msg_id == message.getId() || userInfo != null && userInfo.pinned_msg_id == message.getId());
-        boolean allowEdit = groupedMessages == null && message.canEditMessage(currentChat) && !chatActivityEnterView.hasAudioToSend() && message.getDialogId() != mergeDialogId;
+        boolean allowEdit = message.canEditMessage(currentChat) && !chatActivityEnterView.hasAudioToSend() && message.getDialogId() != mergeDialogId;
+        if (allowEdit && groupedMessages != null) {
+            int captionsCount = 0;
+            for (int a = 0, N = groupedMessages.messages.size(); a < N; a++) {
+                MessageObject messageObject = groupedMessages.messages.get(a);
+                if (a == 0 || !TextUtils.isEmpty(messageObject.caption)) {
+                    selectedObjectToEditCaption = messageObject;
+                    if (!TextUtils.isEmpty(messageObject.caption)) {
+                        captionsCount++;
+                    }
+                }
+            }
+            allowEdit = captionsCount < 2;
+        }
         if (currentEncryptedChat != null && AndroidUtilities.getPeerLayerVersion(currentEncryptedChat.layer) < 46 ||
                 type == 1 && (message.getDialogId() == mergeDialogId || message.needDrawBluredPreview()) ||
                 message.messageOwner.action instanceof TLRPC.TL_messageActionSecureValuesSent ||
@@ -12115,8 +12273,8 @@
                                 items.add(LocaleController.getString("AddToStickers", R.string.AddToStickers));
                                 options.add(9);
                                 icons.add(R.drawable.msg_sticker);
-                                if (!DataQuery.getInstance(currentAccount).isStickerInFavorites(selectedObject.getDocument())) {
-                                    if (DataQuery.getInstance(currentAccount).canAddStickerToFavorites()) {
+                                if (!getMediaDataController().isStickerInFavorites(selectedObject.getDocument())) {
+                                    if (getMediaDataController().canAddStickerToFavorites()) {
                                         items.add(LocaleController.getString("AddToFavorites", R.string.AddToFavorites));
                                         options.add(20);
                                         icons.add(R.drawable.msg_fave);
@@ -12128,8 +12286,8 @@
                                 }
                             }
                         } else if (type == 8) {
-                            TLRPC.User user = MessagesController.getInstance(currentAccount).getUser(selectedObject.messageOwner.media.user_id);
-                            if (user != null && user.id != UserConfig.getInstance(currentAccount).getClientUserId() && ContactsController.getInstance(currentAccount).contactsDict.get(user.id) == null) {
+                            TLRPC.User user = getMessagesController().getUser(selectedObject.messageOwner.media.user_id);
+                            if (user != null && user.id != getUserConfig().getClientUserId() && getContactsController().contactsDict.get(user.id) == null) {
                                 items.add(LocaleController.getString("AddContactTitle", R.string.AddContactTitle));
                                 options.add(15);
                                 icons.add(R.drawable.msg_addcontact);
@@ -12143,7 +12301,7 @@
                                 icons.add(R.drawable.msg_callback);
                             }
                         } else if (type == 9) {
-                            if (!DataQuery.getInstance(currentAccount).isStickerInFavorites(selectedObject.getDocument())) {
+                            if (!getMediaDataController().isStickerInFavorites(selectedObject.getDocument())) {
                                 items.add(LocaleController.getString("AddToFavorites", R.string.AddToFavorites));
                                 options.add(20);
                                 icons.add(R.drawable.msg_fave);
@@ -12233,8 +12391,8 @@
                             options.add(9);
                             icons.add(R.drawable.msg_sticker);
                         } else if (type == 8) {
-                            TLRPC.User user = MessagesController.getInstance(currentAccount).getUser(selectedObject.messageOwner.media.user_id);
-                            if (user != null && user.id != UserConfig.getInstance(currentAccount).getClientUserId() && ContactsController.getInstance(currentAccount).contactsDict.get(user.id) == null) {
+                            TLRPC.User user = getMessagesController().getUser(selectedObject.messageOwner.media.user_id);
+                            if (user != null && user.id != getUserConfig().getClientUserId() && getContactsController().contactsDict.get(user.id) == null) {
                                 items.add(LocaleController.getString("AddContactTitle", R.string.AddContactTitle));
                                 options.add(15);
                                 icons.add(R.drawable.msg_addcontact);
@@ -12530,9 +12688,9 @@
         updateVisibleRows();
 
         TLRPC.TL_messages_getMessageEditData req = new TLRPC.TL_messages_getMessageEditData();
-        req.peer = MessagesController.getInstance(currentAccount).getInputPeer((int) dialog_id);
+        req.peer = getMessagesController().getInputPeer((int) dialog_id);
         req.id = messageObject.getId();
-        editingMessageObjectReqId = ConnectionsManager.getInstance(currentAccount).sendRequest(req, (response, error) -> AndroidUtilities.runOnUIThread(() -> {
+        editingMessageObjectReqId = getConnectionsManager().sendRequest(req, (response, error) -> AndroidUtilities.runOnUIThread(() -> {
             editingMessageObjectReqId = 0;
             if (response == null) {
                 AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
@@ -12558,12 +12716,12 @@
         if (name) {
             if (previousUid != messageObject.messageOwner.from_id) {
                 if (messageObject.messageOwner.from_id > 0) {
-                    TLRPC.User user = MessagesController.getInstance(currentAccount).getUser(messageObject.messageOwner.from_id);
+                    TLRPC.User user = getMessagesController().getUser(messageObject.messageOwner.from_id);
                     if (user != null) {
                         str = ContactsController.formatName(user.first_name, user.last_name) + ":\n";
                     }
                 } else if (messageObject.messageOwner.from_id < 0) {
-                    TLRPC.Chat chat = MessagesController.getInstance(currentAccount).getChat(-messageObject.messageOwner.from_id);
+                    TLRPC.Chat chat = getMessagesController().getChat(-messageObject.messageOwner.from_id);
                     if (chat != null) {
                         str = chat.title + ":\n";
                     }
@@ -12603,7 +12761,7 @@
                 if (selectedObjectGroup != null) {
                     boolean success = true;
                     for (int a = 0; a < selectedObjectGroup.messages.size(); a++) {
-                        if (!SendMessagesHelper.getInstance(currentAccount).retrySendMessage(selectedObjectGroup.messages.get(a), false)) {
+                        if (!getSendMessagesHelper().retrySendMessage(selectedObjectGroup.messages.get(a), false)) {
                             success = false;
                         }
                     }
@@ -12611,7 +12769,7 @@
                         moveScrollToLastMessage();
                     }
                 } else {
-                    if (SendMessagesHelper.getInstance(currentAccount).retrySendMessage(selectedObject, false)) {
+                    if (getSendMessagesHelper().retrySendMessage(selectedObject, false)) {
                         updateVisibleRows();
                         moveScrollToLastMessage();
                     }
@@ -12621,6 +12779,7 @@
             case 1: {
                 if (getParentActivity() == null) {
                     selectedObject = null;
+                    selectedObjectToEditCaption = null;
                     selectedObjectGroup = null;
                     return;
                 }
@@ -12647,6 +12806,7 @@
                     getParentActivity().requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 4);
                     selectedObject = null;
                     selectedObjectGroup = null;
+                    selectedObjectToEditCaption = null;
                     return;
                 }
                 if (selectedObjectGroup != null) {
@@ -12697,6 +12857,7 @@
                             if (getParentActivity() == null) {
                                 selectedObject = null;
                                 selectedObjectGroup = null;
+                                selectedObjectToEditCaption = null;
                                 return;
                             }
                             AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
@@ -12712,6 +12873,7 @@
                             if (getParentActivity() == null) {
                                 selectedObject = null;
                                 selectedObjectGroup = null;
+                                selectedObjectToEditCaption = null;
                                 return;
                             }
                             AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
@@ -12770,6 +12932,7 @@
                     getParentActivity().requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 4);
                     selectedObject = null;
                     selectedObjectGroup = null;
+                    selectedObjectToEditCaption = null;
                     return;
                 }
                 MediaController.saveFile(path, getParentActivity(), 0, null, null);
@@ -12788,6 +12951,7 @@
                     getParentActivity().requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 4);
                     selectedObject = null;
                     selectedObjectGroup = null;
+                    selectedObjectToEditCaption = null;
                     return;
                 }
                 String fileName = FileLoader.getDocumentFileName(selectedObject.getDocument());
@@ -12809,15 +12973,20 @@
             }
             case 11: {
                 TLRPC.Document document = selectedObject.getDocument();
-                MessagesController.getInstance(currentAccount).saveGif(selectedObject, document);
+                getMessagesController().saveGif(selectedObject, document);
                 showGifHint();
                 chatActivityEnterView.addRecentGif(document);
                 break;
             }
             case 12: {
+                if (selectedObjectToEditCaption != null) {
+                    startEditingMessageObject(selectedObjectToEditCaption);
+                } else {
                 startEditingMessageObject(selectedObject);
+                }
                 selectedObject = null;
                 selectedObjectGroup = null;
+                selectedObjectToEditCaption = null;
                 break;
             }
             case 13: {
@@ -12835,7 +13004,7 @@
                     FrameLayout frameLayout = new FrameLayout(getParentActivity());
                     CheckBoxCell cell = new CheckBoxCell(getParentActivity(), 1);
                     cell.setBackgroundDrawable(Theme.getSelectorDrawable(false));
-                    cell.setText(LocaleController.getString("PinNotify", R.string.PinNotify), "", true, false);
+                    cell.setText(LocaleController.formatString("PinNotify", R.string.PinNotify), "", true, false);
                     cell.setPadding(LocaleController.isRTL ? AndroidUtilities.dp(8) : 0, 0, LocaleController.isRTL ? 0 : AndroidUtilities.dp(8), 0);
                     frameLayout.addView(cell, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 48, Gravity.TOP | Gravity.LEFT, 8, 0, 8, 0));
                     cell.setOnClickListener(v -> {
@@ -12848,7 +13017,7 @@
                     builder.setMessage(LocaleController.getString("PinMessageAlertChannel", R.string.PinMessageAlertChannel));
                     checks = new boolean[]{false};
                 }
-                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> MessagesController.getInstance(currentAccount).pinMessage(currentChat, currentUser, mid, checks[0]));
+                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> getMessagesController().pinMessage(currentChat, currentUser, mid, checks[0]));
                 builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                 showDialog(builder.create());
                 break;
@@ -12857,7 +13026,7 @@
                 AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                 builder.setTitle(LocaleController.getString("UnpinMessageAlertTitle", R.string.UnpinMessageAlertTitle));
                 builder.setMessage(LocaleController.getString("UnpinMessageAlert", R.string.UnpinMessageAlert));
-                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> MessagesController.getInstance(currentAccount).pinMessage(currentChat, currentUser, 0, false));
+                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> getMessagesController().pinMessage(currentChat, currentUser, 0, false));
                 builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                 showDialog(builder.create());
                 break;
@@ -12890,7 +13059,7 @@
             }
             case 18: {
                 if (currentUser != null) {
-                    VoIPHelper.startCall(currentUser, getParentActivity(), MessagesController.getInstance(currentAccount).getUserFull(currentUser.id));
+                    VoIPHelper.startCall(currentUser, getParentActivity(), getMessagesController().getUserFull(currentUser.id));
                 }
                 break;
             }
@@ -12899,18 +13068,18 @@
                 break;
             }
             case 20: {
-                DataQuery.getInstance(currentAccount).addRecentSticker(DataQuery.TYPE_FAVE, selectedObject, selectedObject.getDocument(), (int) (System.currentTimeMillis() / 1000), false);
+                getMediaDataController().addRecentSticker(MediaDataController.TYPE_FAVE, selectedObject, selectedObject.getDocument(), (int) (System.currentTimeMillis() / 1000), false);
                 break;
             }
             case 21: {
-                DataQuery.getInstance(currentAccount).addRecentSticker(DataQuery.TYPE_FAVE, selectedObject, selectedObject.getDocument(), (int) (System.currentTimeMillis() / 1000), true);
+                getMediaDataController().addRecentSticker(MediaDataController.TYPE_FAVE, selectedObject, selectedObject.getDocument(), (int) (System.currentTimeMillis() / 1000), true);
                 break;
             }
             case 22: {
                 TLRPC.TL_channels_exportMessageLink req = new TLRPC.TL_channels_exportMessageLink();
                 req.id = selectedObject.getId();
                 req.channel = MessagesController.getInputChannel(currentChat);
-                ConnectionsManager.getInstance(currentAccount).sendRequest(req, (response, error) -> AndroidUtilities.runOnUIThread(() -> {
+                getConnectionsManager().sendRequest(req, (response, error) -> AndroidUtilities.runOnUIThread(() -> {
                     if (response != null) {
                         TLRPC.TL_exportedMessageLink exportedMessageLink = (TLRPC.TL_exportedMessageLink) response;
                         try {
@@ -12936,17 +13105,17 @@
             }
             case 24: {
                 if (selectedObject.isEditing() || selectedObject.isSending() && selectedObjectGroup == null) {
-                    SendMessagesHelper.getInstance(currentAccount).cancelSendingMessage(selectedObject);
+                    getSendMessagesHelper().cancelSendingMessage(selectedObject);
                 } else if (selectedObject.isSending() && selectedObjectGroup != null) {
                     for (int a = 0; a < selectedObjectGroup.messages.size(); a++) {
-                        SendMessagesHelper.getInstance(currentAccount).cancelSendingMessage(new ArrayList<>(selectedObjectGroup.messages));
+                        getSendMessagesHelper().cancelSendingMessage(new ArrayList<>(selectedObjectGroup.messages));
                     }
                 }
                 break;
             }
             case 25: {
                 final AlertDialog[] progressDialog = new AlertDialog[]{new AlertDialog(getParentActivity(), 3)};
-                int requestId = SendMessagesHelper.getInstance(currentAccount).sendVote(selectedObject, null, () -> {
+                int requestId = getSendMessagesHelper().sendVote(selectedObject, null, () -> {
                     try {
                         progressDialog[0].dismiss();
                     } catch (Throwable ignore) {
@@ -12959,7 +13128,7 @@
                         if (progressDialog[0] == null) {
                             return;
                         }
-                        progressDialog[0].setOnCancelListener(dialog -> ConnectionsManager.getInstance(currentAccount).cancelRequest(requestId, true));
+                        progressDialog[0].setOnCancelListener(dialog -> getConnectionsManager().cancelRequest(requestId, true));
                         showDialog(progressDialog[0]);
                     }, 500);
                 }
@@ -12981,10 +13150,10 @@
                     poll.poll.answers = mediaPoll.poll.answers;
                     poll.poll.closed = true;
                     req.media = poll;
-                    req.peer = MessagesController.getInstance(currentAccount).getInputPeer((int) dialog_id);
+                    req.peer = getMessagesController().getInputPeer((int) dialog_id);
                     req.id = object.getId();
                     req.flags |= 16384;
-                    int requestId = ConnectionsManager.getInstance(currentAccount).sendRequest(req, (response, error) -> {
+                    int requestId = getConnectionsManager().sendRequest(req, (response, error) -> {
                         AndroidUtilities.runOnUIThread(() -> {
                             try {
                                 progressDialog[0].dismiss();
@@ -12994,7 +13163,7 @@
                             progressDialog[0] = null;
                         });
                         if (error == null) {
-                            MessagesController.getInstance(currentAccount).processUpdates((TLRPC.Updates) response, false);
+                            getMessagesController().processUpdates((TLRPC.Updates) response, false);
                         } else {
                             AndroidUtilities.runOnUIThread(() -> AlertsCreator.processError(currentAccount, error, ChatActivity.this, req));
                         }
@@ -13003,7 +13172,7 @@
                         if (progressDialog[0] == null) {
                             return;
                         }
-                        progressDialog[0].setOnCancelListener(dialog -> ConnectionsManager.getInstance(currentAccount).cancelRequest(requestId, true));
+                        progressDialog[0].setOnCancelListener(dialog -> getConnectionsManager().cancelRequest(requestId, true));
                         showDialog(progressDialog[0]);
                     }, 500);
                 });
@@ -13014,6 +13183,7 @@
         }
         selectedObject = null;
         selectedObjectGroup = null;
+        selectedObjectToEditCaption = null;
     }
 
     @Override
@@ -13052,13 +13222,13 @@
             updatePinnedMessageView(true);
         }
 
-        if (dids.size() > 1 || dids.get(0) == UserConfig.getInstance(currentAccount).getClientUserId() || message != null) {
+        if (dids.size() > 1 || dids.get(0) == getUserConfig().getClientUserId() || message != null) {
             for (int a = 0; a < dids.size(); a++) {
                 long did = dids.get(a);
                 if (message != null) {
-                    SendMessagesHelper.getInstance(currentAccount).sendMessage(message.toString(), did, null, null, true, null, null, null);
+                    getSendMessagesHelper().sendMessage(message.toString(), did, null, null, true, null, null, null);
                 }
-                SendMessagesHelper.getInstance(currentAccount).sendMessage(fmessages, did);
+                getSendMessagesHelper().sendMessage(fmessages, did);
             }
             fragment.finishFragment();
         } else {
@@ -13078,7 +13248,7 @@
                     args.putInt("enc_id", high_part);
                 }
                 if (lower_part != 0) {
-                    if (!MessagesController.getInstance(currentAccount).checkCanOpenChat(args, fragment)) {
+                    if (!getMessagesController().checkCanOpenChat(args, fragment)) {
                         return;
                     }
                 }
@@ -13196,8 +13366,8 @@
                 if (highlightMessageId != Integer.MAX_VALUE) {
                     startMessageUnselect();
                 }
-                if (searchContainer != null && searchContainer.getVisibility() == View.VISIBLE && DataQuery.getInstance(currentAccount).isMessageFound(messageObject.getId(), messageObject.getDialogId() == mergeDialogId) && DataQuery.getInstance(currentAccount).getLastSearchQuery() != null) {
-                    cell.setHighlightedText(DataQuery.getInstance(currentAccount).getLastSearchQuery());
+                if (searchContainer != null && searchContainer.getVisibility() == View.VISIBLE && getMediaDataController().isMessageFound(messageObject.getId(), messageObject.getDialogId() == mergeDialogId) && getMediaDataController().getLastSearchQuery() != null) {
+                    cell.setHighlightedText(getMediaDataController().getLastSearchQuery());
                 } else {
                     cell.setHighlightedText(null);
                 }
@@ -13224,7 +13394,7 @@
         if (currentUser != null && currentUser.self) {
             return;
         }
-        int dt = messageObject.canEditMessageAnytime(currentChat) ? 6 * 60 : MessagesController.getInstance(currentAccount).maxEditTime + 5 * 60 - Math.abs(ConnectionsManager.getInstance(currentAccount).getCurrentTime() - messageObject.messageOwner.date);
+        int dt = messageObject.canEditMessageAnytime(currentChat) ? 6 * 60 : getMessagesController().maxEditTime + 5 * 60 - Math.abs(getConnectionsManager().getCurrentTime() - messageObject.messageOwner.date);
         if (dt > 0) {
             if (dt <= 5 * 60) {
                 replyObjectTextView.setText(LocaleController.formatString("TimeToEdit", R.string.TimeToEdit, String.format("%d:%02d", dt / 60, dt % 60)));
@@ -13288,18 +13458,18 @@
         searchItem.openSearch(openSearchKeyboard);
         if (text != null) {
             searchItem.setSearchFieldText(text, false);
-            DataQuery.getInstance(currentAccount).searchMessagesInChat(text, dialog_id, mergeDialogId, classGuid, 0, searchingUserMessages);
+            getMediaDataController().searchMessagesInChat(text, dialog_id, mergeDialogId, classGuid, 0, searchingUserMessages);
         }
         updatePinnedMessageView(true);
     }
 
     @Override
     public void didSelectLocation(TLRPC.MessageMedia location, int live) {
-        SendMessagesHelper.getInstance(currentAccount).sendMessage(location, dialog_id, replyingMessageObject, null, null);
+        getSendMessagesHelper().sendMessage(location, dialog_id, replyingMessageObject, null, null);
         moveScrollToLastMessage();
         if (live == 1) {
             hideFieldPanel(false);
-            DataQuery.getInstance(currentAccount).cleanDraft(dialog_id, true);
+            getMediaDataController().cleanDraft(dialog_id, true);
         }
         if (paused) {
             scrollToTopOnResume = true;
@@ -13345,27 +13515,27 @@
         fillEditingMediaWithCaption(photoEntry.caption, photoEntry.entities);
         if (photoEntry.isVideo) {
             if (videoEditedInfo != null) {
-                SendMessagesHelper.prepareSendingVideo(photoEntry.path, videoEditedInfo.estimatedSize, videoEditedInfo.estimatedDuration, videoEditedInfo.resultWidth, videoEditedInfo.resultHeight, videoEditedInfo, dialog_id, replyingMessageObject, photoEntry.caption, photoEntry.entities, photoEntry.ttl, editingMessageObject);
+                SendMessagesHelper.prepareSendingVideo(getAccountInstance(), photoEntry.path, videoEditedInfo.estimatedSize, videoEditedInfo.estimatedDuration, videoEditedInfo.resultWidth, videoEditedInfo.resultHeight, videoEditedInfo, dialog_id, replyingMessageObject, photoEntry.caption, photoEntry.entities, photoEntry.ttl, editingMessageObject);
             } else {
-                SendMessagesHelper.prepareSendingVideo(photoEntry.path, 0, 0, 0, 0, null, dialog_id, replyingMessageObject, photoEntry.caption, photoEntry.entities, photoEntry.ttl, editingMessageObject);
+                SendMessagesHelper.prepareSendingVideo(getAccountInstance(), photoEntry.path, 0, 0, 0, 0, null, dialog_id, replyingMessageObject, photoEntry.caption, photoEntry.entities, photoEntry.ttl, editingMessageObject);
             }
             hideFieldPanel(false);
-            DataQuery.getInstance(currentAccount).cleanDraft(dialog_id, true);
+            getMediaDataController().cleanDraft(dialog_id, true);
         } else {
             if (photoEntry.imagePath != null) {
-                SendMessagesHelper.prepareSendingPhoto(photoEntry.imagePath, null, dialog_id, replyingMessageObject, photoEntry.caption, photoEntry.entities, photoEntry.stickers, null, photoEntry.ttl, editingMessageObject);
+                SendMessagesHelper.prepareSendingPhoto(getAccountInstance(), photoEntry.imagePath, null, dialog_id, replyingMessageObject, photoEntry.caption, photoEntry.entities, photoEntry.stickers, null, photoEntry.ttl, editingMessageObject);
                 hideFieldPanel(false);
-                DataQuery.getInstance(currentAccount).cleanDraft(dialog_id, true);
+                getMediaDataController().cleanDraft(dialog_id, true);
             } else if (photoEntry.path != null) {
-                SendMessagesHelper.prepareSendingPhoto(photoEntry.path, null, dialog_id, replyingMessageObject, photoEntry.caption, photoEntry.entities, photoEntry.stickers, null, photoEntry.ttl, editingMessageObject);
+                SendMessagesHelper.prepareSendingPhoto(getAccountInstance(), photoEntry.path, null, dialog_id, replyingMessageObject, photoEntry.caption, photoEntry.entities, photoEntry.stickers, null, photoEntry.ttl, editingMessageObject);
                 hideFieldPanel(false);
-                DataQuery.getInstance(currentAccount).cleanDraft(dialog_id, true);
+                getMediaDataController().cleanDraft(dialog_id, true);
             }
         }
     }
 
     public void showOpenGameAlert(final TLRPC.TL_game game, final MessageObject messageObject, final String urlStr, boolean ask, final int uid) {
-        TLRPC.User user = MessagesController.getInstance(currentAccount).getUser(uid);
+        TLRPC.User user = getMessagesController().getUser(uid);
         if (ask) {
             AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
             builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
@@ -13501,7 +13671,7 @@
                     if (progressDialog[0] == null) {
                         return;
                     }
-                    progressDialog[0].setOnCancelListener(dialog -> ConnectionsManager.getInstance(currentAccount).cancelRequest(requestId, true));
+                    progressDialog[0].setOnCancelListener(dialog -> getConnectionsManager().cancelRequest(requestId, true));
                     showDialog(progressDialog[0]);
                 }, 500);
             }
@@ -13674,7 +13844,7 @@
                                 args.putInt("user_id", messageObject.messageOwner.fwd_from.saved_from_peer.user_id);
                             }
                             args.putInt("message_id", messageObject.messageOwner.fwd_from.saved_from_msg_id);
-                            if (MessagesController.getInstance(currentAccount).checkCanOpenChat(args, ChatActivity.this)) {
+                            if (getMessagesController().checkCanOpenChat(args, ChatActivity.this)) {
                                 presentFragment(new ChatActivity(args));
                             }
                         } else {
@@ -13733,7 +13903,7 @@
                             if (postId != 0) {
                                 args.putInt("message_id", postId);
                             }
-                            if (MessagesController.getInstance(currentAccount).checkCanOpenChat(args, ChatActivity.this, cell.getMessageObject())) {
+                            if (getMessagesController().checkCanOpenChat(args, ChatActivity.this, cell.getMessageObject())) {
                                 presentFragment(new ChatActivity(args));
                             }
                         }
@@ -13748,7 +13918,7 @@
                     public void didPressOther(ChatMessageCell cell, float otherX, float otherY) {
                         if (cell.getMessageObject().type == 16) {
                             if (currentUser != null) {
-                                VoIPHelper.startCall(currentUser, getParentActivity(), MessagesController.getInstance(currentAccount).getUserFull(currentUser.id));
+                                VoIPHelper.startCall(currentUser, getParentActivity(), getMessagesController().getUserFull(currentUser.id));
                             }
                         } else {
                             createMenu(cell, true, false, otherX, otherY, false);
@@ -13761,7 +13931,7 @@
                             processRowSelect(cell, true, touchX, touchY);
                             return;
                         }
-                        if (user != null && user.id != UserConfig.getInstance(currentAccount).getClientUserId()) {
+                        if (user != null && user.id != getUserConfig().getClientUserId()) {
                             Bundle args = new Bundle();
                             args.putInt("user_id", user.id);
                             ProfileActivity fragment = new ProfileActivity(args);
@@ -13783,14 +13953,14 @@
 
                     @Override
                     public void didPressVoteButton(ChatMessageCell cell, TLRPC.TL_pollAnswer button) {
-                        SendMessagesHelper.getInstance(currentAccount).sendVote(cell.getMessageObject(), button, null);
+                        getSendMessagesHelper().sendVote(cell.getMessageObject(), button, null);
                     }
 
                     @Override
                     public void didPressCancelSendButton(ChatMessageCell cell) {
                         MessageObject message = cell.getMessageObject();
                         if (message.messageOwner.send_state != 0) {
-                            SendMessagesHelper.getInstance(currentAccount).cancelSendingMessage(message);
+                            getSendMessagesHelper().cancelSendingMessage(message);
                         }
                     }
 
@@ -13813,7 +13983,7 @@
                             ((URLSpanMono) url).copyToClipboard();
                             Toast.makeText(getParentActivity(), LocaleController.getString("TextCopied", R.string.TextCopied), Toast.LENGTH_SHORT).show();
                         } else if (url instanceof URLSpanUserMention) {
-                            TLRPC.User user = MessagesController.getInstance(currentAccount).getUser(Utilities.parseInt(((URLSpanUserMention) url).getURL()));
+                            TLRPC.User user = getMessagesController().getUser(Utilities.parseInt(((URLSpanUserMention) url).getURL()));
                             if (user != null) {
                                 MessagesController.openChatOrProfileWith(user, null, ChatActivity.this, 0, false);
                             }
@@ -13838,7 +14008,7 @@
                                     fragment.setUserInfo(userInfo);
                                     presentFragment(fragment);
                                 } else {
-                                    MessagesController.getInstance(currentAccount).openByUserName(username, ChatActivity.this, 0);
+                                    getMessagesController().openByUserName(username, ChatActivity.this, 0);
                                 }
                             } else if (str.startsWith("#") || str.startsWith("$")) {
                                 if (ChatObject.isChannel(currentChat)) {
@@ -13944,7 +14114,7 @@
                             }
                             SecretMediaViewer.getInstance().setParentActivity(getParentActivity());
                             SecretMediaViewer.getInstance().openMedia(message, photoViewerProvider);
-                        } else if (message.type == 13) {
+                        } else if (message.type == MessageObject.TYPE_STICKER || message.type == MessageObject.TYPE_ANIMATED_STICKER) {
                             showDialog(new StickersAlert(getParentActivity(), ChatActivity.this, message.getInputStickerSet(), null, bottomOverlayChat.getVisibility() != View.VISIBLE && (currentChat == null || ChatObject.canSendStickers(currentChat)) ? chatActivityEnterView : null));
                         } else if (message.isVideo() || message.type == 1 || message.type == 0 && !message.isWebpageDocument() || message.isGif()) {
                             if (message.isVideo()) {
@@ -13953,7 +14123,7 @@
                             PhotoViewer.getInstance().setParentActivity(getParentActivity());
                             MessageObject playingObject = MediaController.getInstance().getPlayingMessageObject();
                             if (playingObject != null && playingObject.isVideo()) {
-                                FileLoader.getInstance(currentAccount).setLoadingVideoForPlayer(playingObject.getDocument(), false);
+                                getFileLoader().setLoadingVideoForPlayer(playingObject.getDocument(), false);
                                 if (playingObject.equals(message)) {
                                     AnimatedFileDrawable animation = cell.getPhotoImage().getAnimation();
                                     if (animation != null && videoTextureView != null && videoPlayerContainer.getTag() != null) {
@@ -14093,7 +14263,7 @@
                     @Override
                     public boolean isChatAdminCell(int uid) {
                         if (ChatObject.isChannel(currentChat) && currentChat.megagroup) {
-                            return MessagesController.getInstance(currentAccount).isChannelAdmin(currentChat.id, uid);
+                            return getMessagesController().isChannelAdmin(currentChat.id, uid);
                         }
                         return false;
                     }
@@ -14126,10 +14296,10 @@
                         if (uid < 0) {
                             Bundle args = new Bundle();
                             args.putInt("chat_id", -uid);
-                            if (MessagesController.getInstance(currentAccount).checkCanOpenChat(args, ChatActivity.this)) {
+                            if (getMessagesController().checkCanOpenChat(args, ChatActivity.this)) {
                                 presentFragment(new ChatActivity(args));
                             }
-                        } else if (uid != UserConfig.getInstance(currentAccount).getClientUserId()) {
+                        } else if (uid != getUserConfig().getClientUserId()) {
                             Bundle args = new Bundle();
                             args.putInt("user_id", uid);
                             if (currentEncryptedChat != null && uid == currentUser.id) {
@@ -14164,7 +14334,7 @@
                 view = new BotHelpCell(mContext);
                 ((BotHelpCell) view).setDelegate(url -> {
                     if (url.startsWith("@")) {
-                        MessagesController.getInstance(currentAccount).openByUserName(url.substring(1), ChatActivity.this, 0);
+                        getMessagesController().openByUserName(url.substring(1), ChatActivity.this, 0);
                     } else if (url.startsWith("#") || url.startsWith("$")) {
                         DialogsActivity fragment = new DialogsActivity(null);
                         fragment.setSearchString(url);
@@ -14389,8 +14559,8 @@
                 }
                 messageCell.setCheckPressed(!disableSelection, disableSelection && selected);
 
-                if (searchContainer != null && searchContainer.getVisibility() == View.VISIBLE && DataQuery.getInstance(currentAccount).isMessageFound(message.getId(), message.getDialogId() == mergeDialogId) && DataQuery.getInstance(currentAccount).getLastSearchQuery() != null) {
-                    messageCell.setHighlightedText(DataQuery.getInstance(currentAccount).getLastSearchQuery());
+                if (searchContainer != null && searchContainer.getVisibility() == View.VISIBLE && getMediaDataController().isMessageFound(message.getId(), message.getDialogId() == mergeDialogId) && getMediaDataController().getLastSearchQuery() != null) {
+                    messageCell.setHighlightedText(getMediaDataController().getLastSearchQuery());
                 } else {
                     messageCell.setHighlightedText(null);
                 }
@@ -14436,7 +14606,7 @@
                             } else {
                                 mentiondownButtonCounter.setText(String.format("%d", newMentionsCount));
                             }
-                            MessagesController.getInstance(currentAccount).markMentionMessageAsRead(message.getId(), ChatObject.isChannel(currentChat) ? currentChat.id : 0, dialog_id);
+                            getMessagesController().markMentionMessageAsRead(message.getId(), ChatObject.isChannel(currentChat) ? currentChat.id : 0, dialog_id);
                             message.setContentIsRead();
                         }
                     }
@@ -14906,11 +15076,12 @@
                 new ThemeDescription(alertTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_topPanelMessage),
                 new ThemeDescription(closePinned, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_topPanelClose),
                 new ThemeDescription(closeReportSpam, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_topPanelClose),
-                new ThemeDescription(reportSpamView, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_chat_topPanelBackground),
+                new ThemeDescription(topChatPanelView, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_chat_topPanelBackground),
                 new ThemeDescription(alertView, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_chat_topPanelBackground),
                 new ThemeDescription(pinnedMessageView, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_chat_topPanelBackground),
                 new ThemeDescription(addToContactsButton, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_addContact),
-                new ThemeDescription(reportSpamButton, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_reportSpam),
+                new ThemeDescription(reportSpamButton, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, null, null, null, null, Theme.key_chat_reportSpam),
+                new ThemeDescription(reportSpamButton, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, null, null, null, null, Theme.key_chat_addContact),
 
                 new ThemeDescription(replyLineView, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_chat_replyPanelLine),
                 new ThemeDescription(replyNameTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_replyPanelName),
