testdiff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ImageReceiver.java b/TMessagesProj/src/main/java/org/telegram/messenger/ImageReceiver.java
index 23b0734..9ab6f5c 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ImageReceiver.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ImageReceiver.java
@@ -22,10 +22,9 @@
 import android.graphics.drawable.Drawable;
 import android.view.View;
 
-import com.airbnb.lottie.LottieDrawable;
-
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.Components.AnimatedFileDrawable;
+import org.telegram.ui.Components.RLottieDrawable;
 import org.telegram.ui.Components.RecyclableDrawable;
 
 public class ImageReceiver implements NotificationCenter.NotificationCenterDelegate {
@@ -74,7 +73,7 @@
                 return;
             }
             boolean canDelete = ImageLoader.getInstance().decrementUseCount(key);
-            if (!ImageLoader.getInstance().isInCache(key)) {
+            if (!ImageLoader.getInstance().isInMemCache(key, false)) {
                 if (canDelete) {
                     bitmap.recycle();
                 }
@@ -113,6 +112,9 @@
     private static PorterDuffColorFilter selectedGroupColorFilter = new PorterDuffColorFilter(0xffbbbbbb, PorterDuff.Mode.MULTIPLY);
     private boolean forceLoding;
 
+    private int currentLayerNum;
+    private int currentOpenedLayerFlags;
+
     private SetImageBackup setImageBackup;
 
     private ImageLocation strippedLocation;
@@ -143,6 +145,8 @@
 
     private String currentExt;
 
+    private int currentGuid;
+
     private int currentSize;
     private int currentCacheType;
     private boolean allowStartAnimation = true;
@@ -464,6 +468,10 @@
         return imageOrientation;
     }
 
+    public void setLayerNum(int value) {
+        currentLayerNum = value;
+    }
+
     public void setImageBitmap(Bitmap bitmap) {
         setImageBitmap(bitmap != null ? new BitmapDrawable(null, bitmap) : null);
     }
@@ -521,10 +529,19 @@
                 fileDrawable.start();
             }
             fileDrawable.setAllowDecodeSingleFrame(allowDecodeSingleFrame);
+        } else if (bitmap instanceof RLottieDrawable) {
+            RLottieDrawable fileDrawable = (RLottieDrawable) bitmap;
+            fileDrawable.addParentView(parentView);
+            if (currentOpenedLayerFlags == 0) {
+                fileDrawable.start();
+            }
+            fileDrawable.setAllowDecodeSingleFrame(true);
         }
         staticThumbDrawable = bitmap;
         if (roundRadius != 0 && bitmap instanceof BitmapDrawable) {
-            if (bitmap instanceof AnimatedFileDrawable) {
+            if (bitmap instanceof RLottieDrawable) {
+
+            } else if (bitmap instanceof AnimatedFileDrawable) {
                 ((AnimatedFileDrawable) bitmap).setRoundRadius(roundRadius);
             } else {
                 Bitmap object = ((BitmapDrawable) bitmap).getBitmap();
@@ -604,15 +621,34 @@
             setImageBackup.parentObject = currentParentObject;
         }
         NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.didReplacedPhotoInMemCache);
+        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.stopAllHeavyOperations);
+        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.startAllHeavyOperations);
+
         clearImage();
     }
 
     public boolean onAttachedToWindow() {
+        currentOpenedLayerFlags = NotificationCenter.getGlobalInstance().getCurrentHeavyOperationFlags();
+        currentOpenedLayerFlags &=~ currentLayerNum;
         NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.didReplacedPhotoInMemCache);
+        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.stopAllHeavyOperations);
+        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.startAllHeavyOperations);
         if (setImageBackup != null && (setImageBackup.imageLocation != null || setImageBackup.thumbLocation != null || setImageBackup.mediaLocation != null || setImageBackup.thumb != null)) {
             setImage(setImageBackup.mediaLocation, setImageBackup.mediaFilter, setImageBackup.imageLocation, setImageBackup.imageFilter, setImageBackup.thumbLocation, setImageBackup.thumbFilter, setImageBackup.thumb, setImageBackup.size, setImageBackup.ext, setImageBackup.parentObject, setImageBackup.cacheType);
+            if (currentOpenedLayerFlags == 0) {
+                RLottieDrawable lottieDrawable = getLottieAnimation();
+                if (lottieDrawable != null) {
+                    lottieDrawable.start();
+                }
+            }
             return true;
         }
+        if (currentOpenedLayerFlags == 0) {
+            RLottieDrawable lottieDrawable = getLottieAnimation();
+            if (lottieDrawable != null) {
+                lottieDrawable.start();
+            }
+        }
         return false;
     }
 
@@ -657,7 +693,7 @@
             }
             int bitmapW;
             int bitmapH;
-            if (bitmapDrawable instanceof AnimatedFileDrawable) {
+            if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {
                 if (orientation % 360 == 90 || orientation % 360 == 270) {
                     bitmapW = bitmapDrawable.getIntrinsicHeight();
                     bitmapH = bitmapDrawable.getIntrinsicWidth();
@@ -836,39 +872,12 @@
             drawRegion.set(imageX, imageY, imageX + imageW, imageY + imageH);
             drawable.setBounds((int) drawRegion.left, (int) drawRegion.top, (int) drawRegion.right, (int) drawRegion.bottom);
             if (isVisible) {
-                if (drawable instanceof LottieDrawable) {
-                    canvas.save();
-                    float tx = imageX;
-                    float ty = imageY;
-                    int bitmapWidth = getBitmapWidth();
-                    int bitmapHeight = getBitmapHeight();
-                    float scale;
-                    if (bitmapWidth > imageW || bitmapHeight > imageH) {
-                        scale = Math.min(imageW / (float) bitmapWidth, imageH / (float) bitmapHeight);
-                        bitmapWidth *= scale;
-                        bitmapHeight *= scale;
-                        canvas.scale(scale, scale);
-                    } else {
-                        scale = 1.0f;
-                    }
-                    canvas.translate((imageX + (imageW - bitmapWidth) / 2) / scale, (imageY + (imageH - bitmapHeight) / 2) / scale);
-                    if (parentView != null) {
-                        if (invalidateAll) {
-                            parentView.invalidate();
-                        } else {
-                            parentView.invalidate(imageX, imageY, imageX + imageW, imageY + imageH);
-                        }
-                    }
-                }
                 try {
                     drawable.setAlpha(alpha);
                     drawable.draw(canvas);
                 } catch (Exception e) {
                     FileLog.e(e);
                 }
-                if (drawable instanceof LottieDrawable) {
-                    canvas.restore();
-                }
             }
         }
     }
@@ -922,7 +931,11 @@
         try {
             Drawable drawable = null;
             AnimatedFileDrawable animation = getAnimation();
-            boolean animationNotReady = animation != null && !animation.hasBitmap();
+            RLottieDrawable lottieDrawable = getLottieAnimation();
+            boolean animationNotReady = animation != null && !animation.hasBitmap() || lottieDrawable != null && !lottieDrawable.hasBitmap();
+            if (lottieDrawable != null) {
+                lottieDrawable.setCurrentParentView(parentView);
+            }
             int orientation = 0;
             BitmapShader shaderToUse = null;
             if (!forcePreview && currentMediaDrawable != null && !animationNotReady) {
@@ -1029,13 +1042,16 @@
 
     public Bitmap getBitmap() {
         AnimatedFileDrawable animation = getAnimation();
-        if (animation != null && animation.hasBitmap()) {
+        RLottieDrawable lottieDrawable = getLottieAnimation();
+        if (lottieDrawable != null && lottieDrawable.hasBitmap()) {
+            return lottieDrawable.getAnimatedBitmap();
+        } else if (animation != null && animation.hasBitmap()) {
             return animation.getAnimatedBitmap();
-        } else if (currentMediaDrawable instanceof BitmapDrawable && !(currentMediaDrawable instanceof AnimatedFileDrawable)) {
+        } else if (currentMediaDrawable instanceof BitmapDrawable && !(currentMediaDrawable instanceof AnimatedFileDrawable) && !(currentMediaDrawable instanceof RLottieDrawable)) {
             return ((BitmapDrawable) currentMediaDrawable).getBitmap();
-        } else if (currentImageDrawable instanceof BitmapDrawable && !(currentImageDrawable instanceof AnimatedFileDrawable)) {
+        } else if (currentImageDrawable instanceof BitmapDrawable && !(currentImageDrawable instanceof AnimatedFileDrawable) && !(currentMediaDrawable instanceof RLottieDrawable)) {
             return ((BitmapDrawable) currentImageDrawable).getBitmap();
-        } else if (currentThumbDrawable instanceof BitmapDrawable && !(currentThumbDrawable instanceof AnimatedFileDrawable)) {
+        } else if (currentThumbDrawable instanceof BitmapDrawable && !(currentThumbDrawable instanceof AnimatedFileDrawable) && !(currentMediaDrawable instanceof RLottieDrawable)) {
             return ((BitmapDrawable) currentThumbDrawable).getBitmap();
         } else if (staticThumbDrawable instanceof BitmapDrawable) {
             return ((BitmapDrawable) staticThumbDrawable).getBitmap();
@@ -1047,15 +1063,18 @@
         Bitmap bitmap = null;
         String key = null;
         AnimatedFileDrawable animation = getAnimation();
-        if (animation != null && animation.hasBitmap()) {
+        RLottieDrawable lottieDrawable = getLottieAnimation();
+        if (lottieDrawable != null && lottieDrawable.hasBitmap()) {
+            bitmap = lottieDrawable.getAnimatedBitmap();
+        } else if (animation != null && animation.hasBitmap()) {
             bitmap = animation.getAnimatedBitmap();
-        } else if (currentMediaDrawable instanceof BitmapDrawable && !(currentMediaDrawable instanceof AnimatedFileDrawable)) {
+        } else if (currentMediaDrawable instanceof BitmapDrawable && !(currentMediaDrawable instanceof AnimatedFileDrawable) && !(currentMediaDrawable instanceof RLottieDrawable)) {
             bitmap = ((BitmapDrawable) currentMediaDrawable).getBitmap();
             key = currentMediaKey;
-        } else if (currentImageDrawable instanceof BitmapDrawable && !(currentImageDrawable instanceof AnimatedFileDrawable)) {
+        } else if (currentImageDrawable instanceof BitmapDrawable && !(currentImageDrawable instanceof AnimatedFileDrawable) && !(currentMediaDrawable instanceof RLottieDrawable)) {
             bitmap = ((BitmapDrawable) currentImageDrawable).getBitmap();
             key = currentImageKey;
-        } else if (currentThumbDrawable instanceof BitmapDrawable && !(currentThumbDrawable instanceof AnimatedFileDrawable)) {
+        } else if (currentThumbDrawable instanceof BitmapDrawable && !(currentThumbDrawable instanceof AnimatedFileDrawable) && !(currentMediaDrawable instanceof RLottieDrawable)) {
             bitmap = ((BitmapDrawable) currentThumbDrawable).getBitmap();
             key = currentThumbKey;
         } else if (staticThumbDrawable instanceof BitmapDrawable) {
@@ -1093,13 +1112,14 @@
 
     public int getBitmapWidth() {
         Drawable drawable = getDrawable();
-        if (drawable instanceof LottieDrawable) {
-            return drawable.getIntrinsicWidth();
-        }
         AnimatedFileDrawable animation = getAnimation();
         if (animation != null) {
             return imageOrientation % 360 == 0 || imageOrientation % 360 == 180 ? animation.getIntrinsicWidth() : animation.getIntrinsicHeight();
         }
+        RLottieDrawable lottieDrawable = getLottieAnimation();
+        if (lottieDrawable != null) {
+            return lottieDrawable.getIntrinsicWidth();
+        }
         Bitmap bitmap = getBitmap();
         if (bitmap == null) {
             if (staticThumbDrawable != null) {
@@ -1112,13 +1132,14 @@
 
     public int getBitmapHeight() {
         Drawable drawable = getDrawable();
-        if (drawable instanceof LottieDrawable) {
-            return drawable.getIntrinsicHeight();
-        }
         AnimatedFileDrawable animation = getAnimation();
         if (animation != null) {
             return imageOrientation % 360 == 0 || imageOrientation % 360 == 180 ? animation.getIntrinsicHeight() : animation.getIntrinsicWidth();
         }
+        RLottieDrawable lottieDrawable = getLottieAnimation();
+        if (lottieDrawable != null) {
+            return lottieDrawable.getIntrinsicHeight();
+        }
         Bitmap bitmap = getBitmap();
         if (bitmap == null) {
             if (staticThumbDrawable != null) {
@@ -1258,6 +1279,10 @@
         return drawRegion;
     }
 
+    public int getNewGuid() {
+        return ++currentGuid;
+    }
+
     public String getImageKey() {
         return currentImageKey;
     }
@@ -1416,6 +1441,20 @@
         return null;
     }
 
+    public RLottieDrawable getLottieAnimation() {
+        RLottieDrawable animatedFileDrawable;
+        if (currentMediaDrawable instanceof RLottieDrawable) {
+            return (RLottieDrawable) currentMediaDrawable;
+        } else if (currentImageDrawable instanceof RLottieDrawable) {
+            return (RLottieDrawable) currentImageDrawable;
+        } else if (currentThumbDrawable instanceof RLottieDrawable) {
+            return (RLottieDrawable) currentThumbDrawable;
+        } else if (staticThumbDrawable instanceof RLottieDrawable) {
+            return (RLottieDrawable) staticThumbDrawable;
+        }
+        return null;
+    }
+
     protected int getTag(int type) {
         if (type == TYPE_THUMB) {
             return thumbTag;
@@ -1444,15 +1483,15 @@
         return param;
     }
 
-    protected boolean setImageBitmapByKey(Drawable drawable, String key, int type, boolean memCache) {
-        if (drawable == null || key == null) {
+    protected boolean setImageBitmapByKey(Drawable drawable, String key, int type, boolean memCache, int guid) {
+        if (drawable == null || key == null || currentGuid != guid) {
             return false;
         }
         if (type == TYPE_IMAGE) {
             if (!key.equals(currentImageKey)) {
                 return false;
             }
-            if (!(drawable instanceof AnimatedFileDrawable) && !(drawable instanceof LottieDrawable)) {
+            if (!(drawable instanceof AnimatedFileDrawable)) {
                 ImageLoader.getInstance().incrementUseCount(currentImageKey);
             }
             currentImageDrawable = drawable;
@@ -1460,7 +1499,9 @@
                 imageOrientation = ((ExtendedBitmapDrawable) drawable).getOrientation();
             }
             if (roundRadius != 0 && drawable instanceof BitmapDrawable) {
-                if (drawable instanceof AnimatedFileDrawable) {
+                if (drawable instanceof RLottieDrawable) {
+
+                } else if (drawable instanceof AnimatedFileDrawable) {
                     AnimatedFileDrawable animatedFileDrawable = (AnimatedFileDrawable) drawable;
                     animatedFileDrawable.setRoundRadius(roundRadius);
                 } else {
@@ -1475,6 +1516,8 @@
                 boolean allowCorssfade = true;
                 if (currentMediaDrawable instanceof AnimatedFileDrawable && ((AnimatedFileDrawable) currentMediaDrawable).hasBitmap()) {
                     allowCorssfade = false;
+                } else if (currentImageDrawable instanceof RLottieDrawable) {
+                    allowCorssfade = false;
                 }
                 if (allowCorssfade && (currentThumbDrawable == null && staticThumbDrawable == null || currentAlpha == 1.0f || forceCrossfade)) {
                     currentAlpha = 0.0f;
@@ -1488,12 +1531,14 @@
             if (!key.equals(currentMediaKey)) {
                 return false;
             }
-            if (!(drawable instanceof AnimatedFileDrawable) && !(drawable instanceof LottieDrawable)) {
+            if (!(drawable instanceof AnimatedFileDrawable)) {
                 ImageLoader.getInstance().incrementUseCount(currentMediaKey);
             }
             currentMediaDrawable = drawable;
             if (roundRadius != 0 && drawable instanceof BitmapDrawable) {
-                if (drawable instanceof AnimatedFileDrawable) {
+                if (drawable instanceof RLottieDrawable) {
+
+                } else if (drawable instanceof AnimatedFileDrawable) {
                     AnimatedFileDrawable animatedFileDrawable = (AnimatedFileDrawable) drawable;
                     animatedFileDrawable.setRoundRadius(roundRadius);
                 } else {
@@ -1505,6 +1550,7 @@
             }
 
             if (currentImageDrawable == null) {
+                boolean allowCorssfade = true;
                 if (!memCache && !forcePreview || forceCrossfade) {
                     if (currentThumbDrawable == null && staticThumbDrawable == null || currentAlpha == 1.0f || forceCrossfade) {
                         currentAlpha = 0.0f;
@@ -1539,7 +1585,9 @@
             }
 
             if (roundRadius != 0 && drawable instanceof BitmapDrawable) {
-                if (drawable instanceof AnimatedFileDrawable) {
+                if (drawable instanceof RLottieDrawable) {
+
+                } else if (drawable instanceof AnimatedFileDrawable) {
                     AnimatedFileDrawable animatedFileDrawable = (AnimatedFileDrawable) drawable;
                     animatedFileDrawable.setRoundRadius(roundRadius);
                 } else {
@@ -1570,6 +1618,13 @@
                 fileDrawable.start();
             }
             fileDrawable.setAllowDecodeSingleFrame(allowDecodeSingleFrame);
+        } else if (drawable instanceof RLottieDrawable) {
+            RLottieDrawable fileDrawable = (RLottieDrawable) drawable;
+            fileDrawable.addParentView(parentView);
+            if (currentOpenedLayerFlags == 0) {
+                fileDrawable.start();
+            }
+            fileDrawable.setAllowDecodeSingleFrame(true);
         }
         if (parentView != null) {
             if (invalidateAll) {
@@ -1606,15 +1661,27 @@
                 key = replacedKey;
             }
         }
+        if (image instanceof RLottieDrawable) {
+            RLottieDrawable lottieDrawable = (RLottieDrawable) image;
+            lottieDrawable.removeParentView(parentView);
+        }
         String replacedKey = ImageLoader.getInstance().getReplacedKey(key);
         if (key != null && (newKey == null || !newKey.equals(key)) && image != null) {
-            if (image instanceof AnimatedFileDrawable) {
+            if (image instanceof RLottieDrawable) {
+                RLottieDrawable fileDrawable = (RLottieDrawable) image;
+                boolean canDelete = ImageLoader.getInstance().decrementUseCount(key);
+                if (!ImageLoader.getInstance().isInMemCache(key, true)) {
+                    if (canDelete) {
+                        fileDrawable.recycle();
+                    }
+                }
+            } else if (image instanceof AnimatedFileDrawable) {
                 AnimatedFileDrawable fileDrawable = (AnimatedFileDrawable) image;
                 fileDrawable.recycle();
             } else if (image instanceof BitmapDrawable) {
                 Bitmap bitmap = ((BitmapDrawable) image).getBitmap();
                 boolean canDelete = ImageLoader.getInstance().decrementUseCount(key);
-                if (!ImageLoader.getInstance().isInCache(key)) {
+                if (!ImageLoader.getInstance().isInMemCache(key, false)) {
                     if (canDelete) {
                         bitmap.recycle();
                     }
@@ -1661,6 +1728,30 @@
                     setImageBackup.thumbLocation = (ImageLocation) args[2];
                 }
             }
+        } else if (id == NotificationCenter.stopAllHeavyOperations) {
+            Integer layer = (Integer) args[0];
+            if (currentLayerNum >= layer) {
+                return;
+            }
+            currentOpenedLayerFlags |= layer;
+            if (currentOpenedLayerFlags != 0) {
+                RLottieDrawable lottieDrawable = getLottieAnimation();
+                if (lottieDrawable != null) {
+                    lottieDrawable.stop();
+                }
+            }
+        } else if (id == NotificationCenter.startAllHeavyOperations) {
+            Integer layer = (Integer) args[0];
+            if (currentLayerNum >= layer || currentOpenedLayerFlags == 0) {
+                return;
+            }
+            currentOpenedLayerFlags &=~ layer;
+            if (currentOpenedLayerFlags == 0) {
+                RLottieDrawable lottieDrawable = getLottieAnimation();
+                if (lottieDrawable != null) {
+                    lottieDrawable.start();
+                }
+            }
         }
     }
 }
