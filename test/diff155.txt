testdiff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ImageLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/ImageLoader.java
index 5f7b06a..8b31a46 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ImageLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ImageLoader.java
@@ -29,9 +29,6 @@
 import android.text.TextUtils;
 import android.util.SparseArray;
 
-import com.airbnb.lottie.LottieCompositionFactory;
-import com.airbnb.lottie.LottieDrawable;
-
 import org.json.JSONArray;
 import org.json.JSONObject;
 import org.telegram.messenger.secretmedia.EncryptedFileInputStream;
@@ -39,6 +36,7 @@
 import org.telegram.tgnet.TLObject;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.Components.AnimatedFileDrawable;
+import org.telegram.ui.Components.RLottieDrawable;
 
 import java.io.ByteArrayOutputStream;
 import java.io.File;
@@ -67,7 +65,7 @@
 
     private HashMap<String, Integer> bitmapUseCounts = new HashMap<>();
     private LruCache<BitmapDrawable> memCache;
-    private LruCache<LottieDrawable> lottieMemCache;
+    private LruCache<RLottieDrawable> lottieMemCache;
     private HashMap<String, CacheImage> imageLoadingByUrl = new HashMap<>();
     private HashMap<String, CacheImage> imageLoadingByKeys = new HashMap<>();
     private SparseArray<CacheImage> imageLoadingByTag = new SparseArray<>();
@@ -112,6 +110,7 @@
         private TLRPC.Document parentDocument;
         private String filter;
         private ArrayList<ImageReceiver> imageReceiverArray = new ArrayList<>();
+        private ArrayList<Integer> imageReceiverGuidsArray = new ArrayList<>();
         private boolean big;
     }
 
@@ -698,6 +697,7 @@
                 }
                 final BitmapDrawable bitmapDrawable = new BitmapDrawable(originalBitmap);
                 final ArrayList<ImageReceiver> finalImageReceiverArray = new ArrayList<>(info.imageReceiverArray);
+                final ArrayList<Integer> finalImageReceiverGuidsArray = new ArrayList<>(info.imageReceiverGuidsArray);
                 AndroidUtilities.runOnUIThread(() -> {
                     removeTask();
 
@@ -708,7 +708,7 @@
 
                     for (int a = 0; a < finalImageReceiverArray.size(); a++) {
                         ImageReceiver imgView = finalImageReceiverArray.get(a);
-                        imgView.setImageBitmapByKey(bitmapDrawable, kf, ImageReceiver.TYPE_IMAGE, false);
+                        imgView.setImageBitmapByKey(bitmapDrawable, kf, ImageReceiver.TYPE_IMAGE, false, finalImageReceiverGuidsArray.get(a));
                     }
 
                     memCache.put(kf, bitmapDrawable);
@@ -773,18 +773,26 @@
                         return;
                     }
                 }
-                LottieDrawable lottieDrawable = new LottieDrawable();
-                try {
-                    FileInputStream is = new FileInputStream(cacheImage.finalFilePath);
-                    lottieDrawable.setComposition(LottieCompositionFactory.fromJsonInputStreamSync(is, cacheImage.finalFilePath.toString()).getValue());
-                    is.close();
-                } catch (Throwable e) {
-                    FileLog.e(e);
+                int w = Math.min(512, AndroidUtilities.dp(170.6f));
+                int h = Math.min(512, AndroidUtilities.dp(170.6f));
+                boolean precache = false;
+                boolean limitFps = false;
+                if (cacheImage.filter != null) {
+                    String[] args = cacheImage.filter.split("_");
+                    if (args.length >= 2) {
+                        float w_filter = Float.parseFloat(args[0]);
+                        float h_filter = Float.parseFloat(args[1]);
+                        w = Math.min(512, (int) (w_filter * AndroidUtilities.density));
+                        h = Math.min(512, (int) (h_filter * AndroidUtilities.density));
+                        if (w_filter <= 90 && h_filter <= 90) {
+                            w = Math.min(w, 160);
+                            h = Math.min(h, 160);
+                            limitFps = true;
+                            precache = SharedConfig.getDevicePerfomanceClass() != SharedConfig.PERFORMANCE_CLASS_HIGH;
                 }
-                lottieDrawable.setRepeatMode(LottieDrawable.RESTART);
-                lottieDrawable.setRepeatCount(LottieDrawable.INFINITE);
-                lottieDrawable.start();
-                Thread.interrupted();
+                    }
+                }
+                RLottieDrawable lottieDrawable = new RLottieDrawable(cacheImage.finalFilePath, w, h, precache, limitFps);
                 onPostExecute(lottieDrawable);
             } else if (cacheImage.animatedFile) {
                 synchronized (sync) {
@@ -1258,12 +1266,18 @@
             AndroidUtilities.runOnUIThread(() -> {
                 Drawable toSet = null;
                 String decrementKey = null;
-                if (drawable instanceof LottieDrawable) {
-                    LottieDrawable lottieDrawable = (LottieDrawable) drawable;
+                if (drawable instanceof RLottieDrawable) {
+                    RLottieDrawable lottieDrawable = (RLottieDrawable) drawable;
                     toSet = lottieMemCache.get(cacheImage.key);
                     if (toSet == null) {
                         lottieMemCache.put(cacheImage.key, lottieDrawable);
                         toSet = lottieDrawable;
+                    } else {
+                        lottieDrawable.recycle();
+                    }
+                    if (toSet != null) {
+                        incrementUseCount(cacheImage.key);
+                        decrementKey = cacheImage.key;
                     }
                 } else if (drawable instanceof AnimatedFileDrawable) {
                     toSet = drawable;
@@ -1327,22 +1341,24 @@
         protected CacheOutTask cacheTask;
 
         protected ArrayList<ImageReceiver> imageReceiverArray = new ArrayList<>();
+        protected ArrayList<Integer> imageReceiverGuidsArray = new ArrayList<>();
         protected ArrayList<String> keys = new ArrayList<>();
         protected ArrayList<String> filters = new ArrayList<>();
         protected ArrayList<Integer> imageTypes = new ArrayList<>();
 
-        public void addImageReceiver(ImageReceiver imageReceiver, String key, String filter, int type) {
+        public void addImageReceiver(ImageReceiver imageReceiver, String key, String filter, int type, int guid) {
             if (imageReceiverArray.contains(imageReceiver)) {
                 return;
             }
             imageReceiverArray.add(imageReceiver);
+            imageReceiverGuidsArray.add(guid);
             keys.add(key);
             filters.add(filter);
             imageTypes.add(type);
             imageLoadingByTag.put(imageReceiver.getTag(type), this);
         }
 
-        public void replaceImageReceiver(ImageReceiver imageReceiver, String key, String filter, int type) {
+        public void replaceImageReceiver(ImageReceiver imageReceiver, String key, String filter, int type, int guid) {
             int index = imageReceiverArray.indexOf(imageReceiver);
             if (index == -1) {
                 return;
@@ -1353,6 +1369,7 @@
                     return;
                 }
             }
+            imageReceiverGuidsArray.set(index, guid);
             keys.set(index, key);
             filters.set(index, filter);
         }
@@ -1363,6 +1380,7 @@
                 ImageReceiver obj = imageReceiverArray.get(a);
                 if (obj == null || obj == imageReceiver) {
                     imageReceiverArray.remove(a);
+                    imageReceiverGuidsArray.remove(a);
                     keys.remove(a);
                     filters.remove(a);
                     currentImageType = imageTypes.remove(a);
@@ -1421,6 +1439,7 @@
         public void setImageAndClear(final Drawable image, String decrementKey) {
             if (image != null) {
                 final ArrayList<ImageReceiver> finalImageReceiverArray = new ArrayList<>(imageReceiverArray);
+                final ArrayList<Integer> finalImageReceiverGuidsArray = new ArrayList<>(imageReceiverGuidsArray);
                 AndroidUtilities.runOnUIThread(() -> {
                     if (image instanceof AnimatedFileDrawable) {
                         boolean imageSet = false;
@@ -1428,7 +1447,7 @@
                         for (int a = 0; a < finalImageReceiverArray.size(); a++) {
                             ImageReceiver imgView = finalImageReceiverArray.get(a);
                             AnimatedFileDrawable toSet = (a == 0 ? fileDrawable : fileDrawable.makeCopy());
-                            if (imgView.setImageBitmapByKey(toSet, key, imageType, false)) {
+                            if (imgView.setImageBitmapByKey(toSet, key, imageType, false, finalImageReceiverGuidsArray.get(a))) {
                                 if (toSet == fileDrawable) {
                                     imageSet = true;
                                 }
@@ -1444,7 +1463,7 @@
                     } else {
                         for (int a = 0; a < finalImageReceiverArray.size(); a++) {
                             ImageReceiver imgView = finalImageReceiverArray.get(a);
-                            imgView.setImageBitmapByKey(image, key, imageTypes.get(a), false);
+                            imgView.setImageBitmapByKey(image, key, imageTypes.get(a), false, finalImageReceiverGuidsArray.get(a));
                         }
                     }
                     if (decrementKey != null) {
@@ -1457,6 +1476,7 @@
                 imageLoadingByTag.remove(imageReceiver.getTag(imageType));
             }
             imageReceiverArray.clear();
+            imageReceiverGuidsArray.clear();
             if (url != null) {
                 imageLoadingByUrl.remove(url);
             }
@@ -1514,10 +1534,18 @@
             }
         };
 
-        lottieMemCache = new LruCache<LottieDrawable>(5) {
+        lottieMemCache = new LruCache<RLottieDrawable>(512 * 512 * 2 * 4 * 5) {
             @Override
-            protected int sizeOf(String key, LottieDrawable value) {
-                return 1;
+            protected int sizeOf(String key, RLottieDrawable value) {
+                return value.getIntrinsicWidth() * value.getIntrinsicHeight() * 4 * 2;
+            }
+
+            @Override
+            protected void entryRemoved(boolean evicted, String key, final RLottieDrawable oldValue, RLottieDrawable newValue) {
+                final Integer count = bitmapUseCounts.get(key);
+                if (count == null || count == 0) {
+                    oldValue.recycle();
+                }
             }
         };
 
@@ -1868,9 +1896,13 @@
         memCache.remove(key);
     }
 
-    public boolean isInCache(String key) {
+    public boolean isInMemCache(String key, boolean animated) {
+        if (animated) {
+            return lottieMemCache.get(key) != null;
+        } else {
         return memCache.get(key) != null;
     }
+    }
 
     public void clearMemory() {
         memCache.evictAll();
@@ -1882,7 +1914,11 @@
         if (location != null) {
             ThumbGenerateInfo info = waitingForQualityThumb.get(location);
             if (info != null) {
-                info.imageReceiverArray.remove(imageReceiver);
+                int index = info.imageReceiverArray.indexOf(imageReceiver);
+                if (index >= 0) {
+                    info.imageReceiverArray.remove(index);
+                    info.imageReceiverGuidsArray.remove(index);
+                }
                 if (info.imageReceiverArray.isEmpty()) {
                     waitingForQualityThumb.remove(location);
                 }
@@ -2012,7 +2048,7 @@
         imageLoadQueue.postRunnable(() -> forceLoadingImages.remove(key));
     }
 
-    private void createLoadOperationForImageReceiver(final ImageReceiver imageReceiver, final String key, final String url, final String ext, final ImageLocation imageLocation, final String filter, final int size, final int cacheType, final int imageType, final int thumb) {
+    private void createLoadOperationForImageReceiver(final ImageReceiver imageReceiver, final String key, final String url, final String ext, final ImageLocation imageLocation, final String filter, final int size, final int cacheType, final int imageType, final int thumb, int guid) {
         if (imageReceiver == null || url == null || key == null || imageLocation == null) {
             return;
         }
@@ -2043,7 +2079,7 @@
                         added = true;
                     } else if (alreadyLoadingImage == alreadyLoadingUrl) {
                         if (alreadyLoadingCache == null) {
-                            alreadyLoadingImage.replaceImageReceiver(imageReceiver, key, filter, imageType);
+                            alreadyLoadingImage.replaceImageReceiver(imageReceiver, key, filter, imageType, guid);
                         }
                         added = true;
                     } else {
@@ -2052,11 +2088,11 @@
                 }
 
                 if (!added && alreadyLoadingCache != null) {
-                    alreadyLoadingCache.addImageReceiver(imageReceiver, key, filter, imageType);
+                    alreadyLoadingCache.addImageReceiver(imageReceiver, key, filter, imageType, guid);
                     added = true;
                 }
                 if (!added && alreadyLoadingUrl != null) {
-                    alreadyLoadingUrl.addImageReceiver(imageReceiver, key, filter, imageType);
+                    alreadyLoadingUrl.addImageReceiver(imageReceiver, key, filter, imageType, guid);
                     added = true;
                 }
             }
@@ -2152,6 +2188,7 @@
                             }
                             if (!info.imageReceiverArray.contains(imageReceiver)) {
                                 info.imageReceiverArray.add(imageReceiver);
+                                info.imageReceiverGuidsArray.add(guid);
                             }
                             waitingForQualityThumbByTag.put(finalTag, location);
                             if (attachPath.exists() && shouldGenerateQualityThumb) {
@@ -2230,10 +2267,13 @@
                     img.ext = ext;
                     img.currentAccount = currentAccount;
                     img.parentObject = parentObject;
+                    if (imageLocation.lottieAnimation) {
+                        img.lottieFile = true;
+                    }
                     if (cacheType == 2) {
                         img.encryptionKeyPath = new File(FileLoader.getInternalCacheDir(), url + ".enc.key");
                     }
-                    img.addImageReceiver(imageReceiver, key, filter, imageType);
+                    img.addImageReceiver(imageReceiver, key, filter, imageType, guid);
                     if (onlyCache || cacheFileExists || cacheFile.exists()) {
                         img.finalFilePath = cacheFile;
                         img.imageLocation = imageLocation;
@@ -2293,17 +2333,21 @@
 
         boolean imageSet = false;
         String mediaKey = imageReceiver.getMediaKey();
+        int guid = imageReceiver.getNewGuid();
         if (mediaKey != null) {
             ImageLocation mediaLocation = imageReceiver.getMediaLocation();
             Drawable drawable;
-            if (MessageObject.isAnimatedStickerDocument(mediaLocation.document)) {
+            if (mediaLocation != null && (MessageObject.isAnimatedStickerDocument(mediaLocation.document) || mediaLocation.lottieAnimation)) {
                 drawable = lottieMemCache.get(mediaKey);
             } else {
                 drawable = memCache.get(mediaKey);
+                if (drawable != null) {
+                    memCache.moveToFront(mediaKey);
+                }
             }
             if (drawable != null) {
                 cancelLoadingForImageReceiver(imageReceiver, true);
-                imageReceiver.setImageBitmapByKey(drawable, mediaKey, ImageReceiver.TYPE_MEDIA, true);
+                imageReceiver.setImageBitmapByKey(drawable, mediaKey, ImageReceiver.TYPE_MEDIA, true, guid);
                 imageSet = true;
                 if (!imageReceiver.isForcePreview()) {
                     return;
@@ -2314,14 +2358,17 @@
         if (!imageSet && imageKey != null) {
             ImageLocation imageLocation = imageReceiver.getImageLocation();
             Drawable drawable;
-            if (imageLocation != null && MessageObject.isAnimatedStickerDocument(imageLocation.document)) {
+            if (imageLocation != null && (MessageObject.isAnimatedStickerDocument(imageLocation.document) || imageLocation.lottieAnimation)) {
                 drawable = lottieMemCache.get(imageKey);
             } else {
                 drawable = memCache.get(imageKey);
+                if (drawable != null) {
+                    memCache.moveToFront(imageKey);
+                }
             }
             if (drawable != null) {
                 cancelLoadingForImageReceiver(imageReceiver, true);
-                imageReceiver.setImageBitmapByKey(drawable, imageKey, ImageReceiver.TYPE_IMAGE, true);
+                imageReceiver.setImageBitmapByKey(drawable, imageKey, ImageReceiver.TYPE_IMAGE, true, guid);
                 imageSet = true;
                 if (!imageReceiver.isForcePreview() && mediaKey == null) {
                     return;
@@ -2331,9 +2378,18 @@
         boolean thumbSet = false;
         String thumbKey = imageReceiver.getThumbKey();
         if (thumbKey != null) {
-            BitmapDrawable bitmapDrawable = memCache.get(thumbKey);
-            if (bitmapDrawable != null) {
-                imageReceiver.setImageBitmapByKey(bitmapDrawable, thumbKey, ImageReceiver.TYPE_THUMB, true);
+            ImageLocation thumbLocation = imageReceiver.getThumbLocation();
+            Drawable drawable;
+            if (thumbLocation != null && (MessageObject.isAnimatedStickerDocument(thumbLocation.document) || thumbLocation.lottieAnimation)) {
+                drawable = lottieMemCache.get(imageKey);
+            } else {
+                drawable = memCache.get(thumbKey);
+                if (drawable != null) {
+                    memCache.moveToFront(thumbKey);
+                }
+            }
+            if (drawable != null) {
+                imageReceiver.setImageBitmapByKey(drawable, thumbKey, ImageReceiver.TYPE_THUMB, true, guid);
                 cancelLoadingForImageReceiver(imageReceiver, false);
                 if (imageSet && imageReceiver.isForcePreview()) {
                     return;
@@ -2472,8 +2528,8 @@
         }
 
         if (imageLocation != null && imageLocation.path != null) {
-            createLoadOperationForImageReceiver(imageReceiver, thumbKey, thumbUrl, ext, thumbLocation, thumbFilter, 0, 1, ImageReceiver.TYPE_THUMB, thumbSet ? 2 : 1);
-            createLoadOperationForImageReceiver(imageReceiver, imageKey, imageUrl, ext, imageLocation, imageFilter, imageReceiver.getSize(), 1, ImageReceiver.TYPE_IMAGE, 0);
+            createLoadOperationForImageReceiver(imageReceiver, thumbKey, thumbUrl, ext, thumbLocation, thumbFilter, 0, 1, ImageReceiver.TYPE_THUMB, thumbSet ? 2 : 1, guid);
+            createLoadOperationForImageReceiver(imageReceiver, imageKey, imageUrl, ext, imageLocation, imageFilter, imageReceiver.getSize(), 1, ImageReceiver.TYPE_IMAGE, 0, guid);
         } else if (mediaLocation != null) {
             int mediaCacheType = imageReceiver.getCacheType();
             int imageCacheType = 1;
@@ -2482,20 +2538,20 @@
             }
             int thumbCacheType = mediaCacheType == 0 ? 1 : mediaCacheType;
             if (!thumbSet) {
-                createLoadOperationForImageReceiver(imageReceiver, thumbKey, thumbUrl, ext, thumbLocation, thumbFilter, 0, thumbCacheType, ImageReceiver.TYPE_THUMB, thumbSet ? 2 : 1);
+                createLoadOperationForImageReceiver(imageReceiver, thumbKey, thumbUrl, ext, thumbLocation, thumbFilter, 0, thumbCacheType, ImageReceiver.TYPE_THUMB, thumbSet ? 2 : 1, guid);
             }
             if (!imageSet) {
-                createLoadOperationForImageReceiver(imageReceiver, imageKey, imageUrl, ext, imageLocation, imageFilter, 0, imageCacheType, ImageReceiver.TYPE_IMAGE, 0);
+                createLoadOperationForImageReceiver(imageReceiver, imageKey, imageUrl, ext, imageLocation, imageFilter, 0, imageCacheType, ImageReceiver.TYPE_IMAGE, 0, guid);
             }
-            createLoadOperationForImageReceiver(imageReceiver, mediaKey, mediaUrl, ext, mediaLocation, mediaFilter, imageReceiver.getSize(), mediaCacheType, ImageReceiver.TYPE_MEDIA, 0);
+            createLoadOperationForImageReceiver(imageReceiver, mediaKey, mediaUrl, ext, mediaLocation, mediaFilter, imageReceiver.getSize(), mediaCacheType, ImageReceiver.TYPE_MEDIA, 0, guid);
         } else {
             int imageCacheType = imageReceiver.getCacheType();
             if (imageCacheType == 0 && saveImageToCache) {
                 imageCacheType = 1;
             }
             int thumbCacheType = imageCacheType == 0 ? 1 : imageCacheType;
-            createLoadOperationForImageReceiver(imageReceiver, thumbKey, thumbUrl, ext, thumbLocation, thumbFilter, 0, thumbCacheType, ImageReceiver.TYPE_THUMB, thumbSet ? 2 : 1);
-            createLoadOperationForImageReceiver(imageReceiver, imageKey, imageUrl, ext, imageLocation, imageFilter, imageReceiver.getSize(), imageCacheType, ImageReceiver.TYPE_IMAGE, 0);
+            createLoadOperationForImageReceiver(imageReceiver, thumbKey, thumbUrl, ext, thumbLocation, thumbFilter, 0, thumbCacheType, ImageReceiver.TYPE_THUMB, thumbSet ? 2 : 1, guid);
+            createLoadOperationForImageReceiver(imageReceiver, imageKey, imageUrl, ext, imageLocation, imageFilter, imageReceiver.getSize(), imageCacheType, ImageReceiver.TYPE_IMAGE, 0, guid);
         }
     }
 
@@ -2543,6 +2599,7 @@
                 String filter = img.filters.get(a);
                 int imageType = img.imageTypes.get(a);
                 ImageReceiver imageReceiver = img.imageReceiverArray.get(a);
+                int guid = img.imageReceiverGuidsArray.get(a);
                 CacheImage cacheImage = imageLoadingByKeys.get(key);
                 if (cacheImage == null) {
                     cacheImage = new CacheImage();
@@ -2561,7 +2618,7 @@
                     imageLoadingByKeys.put(key, cacheImage);
                     tasks.add(cacheImage.cacheTask);
                 }
-                cacheImage.addImageReceiver(imageReceiver, key, filter, imageType);
+                cacheImage.addImageReceiver(imageReceiver, key, filter, imageType, guid);
             }
             for (int a = 0; a < tasks.size(); a++) {
                 CacheOutTask task = tasks.get(a);
