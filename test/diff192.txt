testdiff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/LocationActivityAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/LocationActivityAdapter.java
index 9bd1adb..0075641 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/LocationActivityAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/LocationActivityAdapter.java
@@ -19,6 +19,7 @@
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.R;
 import org.telegram.messenger.UserConfig;
+import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.Cells.EmptyCell;
 import org.telegram.ui.Cells.GraySectionCell;
 import org.telegram.ui.Cells.LocationCell;
@@ -34,7 +35,7 @@
 
 import androidx.recyclerview.widget.RecyclerView;
 
-public class LocationActivityAdapter extends BaseLocationAdapter {
+public class LocationActivityAdapter extends BaseLocationAdapter implements LocationController.LocationFetchCallback {
 
     private int currentAccount = UserConfig.selectedAccount;
     private Context mContext;
@@ -42,17 +43,21 @@
     private SendLocationCell sendLocationCell;
     private Location gpsLocation;
     private Location customLocation;
-    private int liveLocationType;
+    private String addressName;
+    private Location previousFetchedLocation;
+    private int locationType;
     private long dialogId;
     private boolean pulledUp;
     private int shareLiveLocationPotistion = -1;
     private MessageObject currentMessageObject;
+    private TLRPC.TL_channelLocation chatLocation;
     private ArrayList<LocationActivity.LiveLocation> currentLiveLocations = new ArrayList<>();
+    private boolean fetchingLocation;
 
-    public LocationActivityAdapter(Context context, int live, long did) {
+    public LocationActivityAdapter(Context context, int type, long did) {
         super();
         mContext = context;
-        liveLocationType = live;
+        locationType = type;
         dialogId = did;
     }
 
@@ -63,13 +68,16 @@
     public void setGpsLocation(Location location) {
         boolean notSet = gpsLocation == null;
         gpsLocation = location;
+        if (customLocation == null) {
+            fetchLocationAddress();
+        }
         if (notSet && shareLiveLocationPotistion > 0) {
             notifyItemChanged(shareLiveLocationPotistion);
         }
         if (currentMessageObject != null) {
             notifyItemChanged(1);
             updateLiveLocations();
-        } else if (liveLocationType != 2) {
+        } else if (locationType != 2) {
             updateCell();
         } else {
             updateLiveLocations();
@@ -84,6 +92,7 @@
 
     public void setCustomLocation(Location location) {
         customLocation = location;
+        fetchLocationAddress();
         updateCell();
     }
 
@@ -104,9 +113,27 @@
         notifyDataSetChanged();
     }
 
+    public void setChatLocation(TLRPC.TL_channelLocation location) {
+        chatLocation = location;
+    }
+
     private void updateCell() {
         if (sendLocationCell != null) {
-            if (customLocation != null) {
+            if (locationType == LocationActivity.LOCATION_TYPE_GROUP) {
+                String address;
+                if (addressName != null) {
+                    address = addressName;
+                } else if (customLocation == null && gpsLocation == null || fetchingLocation) {
+                    address = LocaleController.getString("Loading", R.string.Loading);
+                } else if (customLocation != null) {
+                    address = String.format(Locale.US, "(%f,%f)", customLocation.getLatitude(), customLocation.getLongitude());
+                } else if (gpsLocation != null) {
+                    address = String.format(Locale.US, "(%f,%f)", gpsLocation.getLatitude(), gpsLocation.getLongitude());
+                } else {
+                    address = LocaleController.getString("Loading", R.string.Loading);
+                }
+                sendLocationCell.setText(LocaleController.getString("ChatSetThisLocation", R.string.ChatSetThisLocation), address);
+            } else if (customLocation != null) {
                 sendLocationCell.setText(LocaleController.getString("SendSelectedLocation", R.string.SendSelectedLocation), String.format(Locale.US, "(%f,%f)", customLocation.getLatitude(), customLocation.getLongitude()));
             } else {
                 if (gpsLocation != null) {
@@ -118,17 +145,53 @@
         }
     }
 
+    private String getAddressName() {
+        return addressName;
+    }
+
+    @Override
+    public void onLocationAddressAvailable(String address, String displayAddress, Location location) {
+        fetchingLocation = false;
+        previousFetchedLocation = location;
+        addressName = address;
+        updateCell();
+    }
+
+    public void fetchLocationAddress() {
+        if (locationType != LocationActivity.LOCATION_TYPE_GROUP) {
+            return;
+        }
+        Location location;
+        if (customLocation != null) {
+            location = customLocation;
+        } else if (gpsLocation != null) {
+            location = gpsLocation;
+        } else {
+            return;
+        }
+        if (previousFetchedLocation == null || previousFetchedLocation.distanceTo(location) > 100) {
+            addressName = null;
+        }
+        updateCell();
+        fetchingLocation = true;
+        LocationController.fetchLocationAddress(location, this);
+    }
+
     @Override
     public int getItemCount() {
-        if (currentMessageObject != null) {
+        if (locationType == LocationActivity.LOCATION_TYPE_GROUP_VIEW) {
+            return 2;
+        } else if (locationType == LocationActivity.LOCATION_TYPE_GROUP) {
+            return 2;
+        } else if (currentMessageObject != null) {
             return 2 + (currentLiveLocations.isEmpty() ? 0 : currentLiveLocations.size() + 2);
-        } else if (liveLocationType == 2) {
+        } else if (locationType == 2) {
             return 2 + currentLiveLocations.size();
         } else {
             if (searching || !searching && places.isEmpty()) {
-                return liveLocationType != 0 ? 5 : 4;
+                return locationType != 0 ? 5 : 4;
             }
-            if (liveLocationType == 1) {
+            if (locationType == 1) {
                 return 4 + places.size() + (places.isEmpty() ? 0 : 1);
             } else {
                 return 3 + places.size() + (places.isEmpty() ? 0 : 1);
@@ -165,7 +228,7 @@
                 break;
             case 7:
             default:
-                view = new SharingLiveLocationCell(mContext, true);
+                view = new SharingLiveLocationCell(mContext, true, locationType == LocationActivity.LOCATION_TYPE_GROUP || locationType == LocationActivity.LOCATION_TYPE_GROUP_VIEW ? 16 : 54);
                 break;
         }
         return new RecyclerListView.Holder(view);
@@ -176,7 +239,7 @@
             return;
         }
         pulledUp = true;
-        AndroidUtilities.runOnUIThread(() -> notifyItemChanged(liveLocationType == 0 ? 2 : 3));
+        AndroidUtilities.runOnUIThread(() -> notifyItemChanged(locationType == 0 ? 2 : 3));
     }
 
     public boolean isPulledUp() {
@@ -203,7 +266,7 @@
                 }
                 break;
             case 3:
-                if (liveLocationType == 0) {
+                if (locationType == 0) {
                     ((LocationCell) holder.itemView).setLocation(places.get(position - 3), iconUrls.get(position - 3), true);
                 } else {
                     ((LocationCell) holder.itemView).setLocation(places.get(position - 4), iconUrls.get(position - 4), true);
@@ -216,28 +279,47 @@
                 ((SendLocationCell) holder.itemView).setHasLocation(gpsLocation != null);
                 break;
             case 7:
-                if (currentMessageObject != null && position == 1) {
-                    ((SharingLiveLocationCell) holder.itemView).setDialog(currentMessageObject, gpsLocation);
+                SharingLiveLocationCell locationCell = (SharingLiveLocationCell) holder.itemView;
+                if (chatLocation != null) {
+                    locationCell.setDialog(dialogId, chatLocation);
+                } else if (currentMessageObject != null && position == 1) {
+                    locationCell.setDialog(currentMessageObject, gpsLocation);
                 } else {
-                    ((SharingLiveLocationCell) holder.itemView).setDialog(currentLiveLocations.get(position - (currentMessageObject != null ? 4 : 2)), gpsLocation);
+                    locationCell.setDialog(currentLiveLocations.get(position - (currentMessageObject != null ? 4 : 2)), gpsLocation);
                 }
                 break;
         }
     }
 
     public Object getItem(int i) {
-        if (currentMessageObject != null) {
+        if (locationType == LocationActivity.LOCATION_TYPE_GROUP) {
+            if (addressName == null) {
+                return null;
+            } else {
+                TLRPC.TL_messageMediaVenue venue = new TLRPC.TL_messageMediaVenue();
+                venue.address = addressName;
+                venue.geo = new TLRPC.TL_geoPoint();
+                if (customLocation != null) {
+                    venue.geo.lat = customLocation.getLatitude();
+                    venue.geo._long = customLocation.getLongitude();
+                } else if (gpsLocation != null) {
+                    venue.geo.lat = gpsLocation.getLatitude();
+                    venue.geo._long = gpsLocation.getLongitude();
+                }
+                return venue;
+            }
+        } else if (currentMessageObject != null) {
             if (i == 1) {
                 return currentMessageObject;
             } else if (i > 3 && i < places.size() + 3) {
                 return currentLiveLocations.get(i - 4);
             }
-        } else if (liveLocationType == 2) {
+        } else if (locationType == 2) {
             if (i >= 2) {
                 return currentLiveLocations.get(i - 2);
             }
             return null;
-        } else if (liveLocationType == 1) {
+        } else if (locationType == 1) {
             if (i > 3 && i < places.size() + 4) {
                 return places.get(i - 4);
             }
@@ -254,7 +336,11 @@
         if (position == 0) {
             return 0;
         }
-        if (currentMessageObject != null) {
+        if (locationType == LocationActivity.LOCATION_TYPE_GROUP_VIEW) {
+            return 7;
+        } else if (locationType == LocationActivity.LOCATION_TYPE_GROUP) {
+            return 1;
+        } else if (currentMessageObject != null) {
             if (position == 2) {
                 return 2;
             } else if (position == 3) {
@@ -263,14 +349,14 @@
             } else {
                 return 7;
             }
-        } else if (liveLocationType == 2) {
+        } else if (locationType == 2) {
             if (position == 1) {
                 shareLiveLocationPotistion = position;
                 return 6;
             } else {
                 return 7;
             }
-        } else if (liveLocationType == 1) {
+        } else if (locationType == 1) {
             if (position == 1) {
                 return 1;
             } else if (position == 2) {
