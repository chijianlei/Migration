var . newBodyInvoker ( ) . withContext ( EnvironmentExpander . merge ( getContext . get ( EnvironmentExpander . class ) . class , new ExpanderImpl ( this ) )  . get ( EnvironmentExpander . class ) . class , new ExpanderImpl ( this ) ) . withCallback ( new Callback ( this ) ) . withDisplayName ( null ) . start
if ( var . launch ( ) . cmds ( "" , var . getRemote ( ) ) . envs ( var ) . stdout ( var ) . start . joinWithTimeout ( 1 , TimeUnit . MINUTES , var ) != 0 )
if ( var . startsWith ( var ) )
if ( var . startsWith ( var ) )
var = doKerberosAuth ( var )
var . addHeader ( var , var + "" + var )
var = var . var
appendAssignment ( var , "" , escapeQuotes ( var . toString ( ) ) . toString ( ) )
var . setName ( var )
if ( var == Constants . COLON < 0 || ! HTTP_TOKEN_CHAR [ var ] )
if ( var < 0 || ! HTTP_TOKEN_CHAR [ var ] )
doTestRewrite ( "" , "" , "" , "" )
doTestRewrite ( "" , "" , "" , "" )
doTestRewrite ( "" , "" , "" , "" )
doTestRewrite ( "" , "" , "" , "" )
doTestRewrite ( "" , "" , "" , "" )
doTestRewrite ( "" , "" , "" , "" )
doTestRewrite ( "" , "" , "" , "" )
doTestRewrite ( "" , "" , "" , "" )
doTestRewrite ( "" , "" , "" )
doTestRewrite ( "" , "" , "" )
ByteChunk var = getUrl ( "" + getPort + var )
String var = var . scanName ( )
var . add ( Pattern . compile ( var + var + var ) + var + var )
var . add ( Pattern . compile ( var + var + var ) + var + var )
var . add ( Pattern . compile ( var + var + var ) + var + var )
if ( ! var . isInterface ( ) && var . startsWith ( var ) )
if ( ! var . hasPermission ( Promotion . PROMOTE ) )
if ( var == null || ( ! var . getUsersAsSet ( ) . isEmpty && ! var . isInUsersList ( ) && ! var . isInGroupList ( ) ) )
if ( ! getUsersAsSet . isEmpty && ! isInUsersList && ! isInGroupList )
ListBoxModel var = getCredentialsListBox ( GooglePlayPublisher . class )
ListBoxModel var = getCredentialsListBox ( GooglePlayPublisher . class )
var = readEncryptedDataHeap ( var , var , var )
int var = readEncryptedDataDirect ( var , var , var )
Set < String > var = new LinkedHashSet < String > ( )
var . addAll ( var )
return ( T ) var . unmarshal ( var )
if ( var != null != null )
if ( var != null )
var . setParameter ( FORM_REDIRECT_PARAMETER , "" )
assertEquals ( "" , var . determineTargetUrl ( var , new MockHttpServletResponse ) , new MockHttpServletResponse )
DocumentBuilderFactory var = DocumentBuilderFactory . newInstance ( )
DocumentBuilder var = null
var = var . parse ( var )
int var = 0
HttpServletRequest var
var = false
System . arraycopy ( var , 0 , var , 0 , var )
var [ var ] ++ = var
var = var
String var = var [ var ]
int var = LazyList . size ( var )
var [ var ] = ( Cookie ) LazyList . get ( var , var )
var = 0
var = new CookieCutter ( this )
var = new CookieCutter ( this )
var = File . createTempFile ( "" , "" , workspace )
File var = File . createTempFile ( "" , "" )
File var = File . createTempFile ( "" , "" )
File var = File . createTempFile ( "" , "" )
File var = File . createTempFile ( "" , "" )
File var = File . createTempFile ( "" , "" )
File var = File . createTempFile ( "" , "" )
File var = File . createTempFile ( "" , "" )
var = File . createTempFile ( "" , "" )
if ( var . getResource ( var ) != null )
( ( HttpServletRequest ) var ) . getSession ( true )
var = var . replaceAll ( "" , "" ) . replaceAll ( "" , "" ) . replaceAll ( "" , "" )
var = new File ( var )
assertAcked ( client . admin . cluster . preparePutRepository ( "" ) . setType ( "" ) . setSettings ( ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir . toPath ) , newTempDir . toPath ) . settingsBuilder ( ) . put ( "" , newTempDir . toPath ) , newTempDir . toPath )
assertAcked ( client . admin . cluster . preparePutRepository ( "" ) . setType ( "" ) . setSettings ( ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ( LifecycleScope . SUITE ) . SUITE . getAbsolutePath ) , newTempDir ( LifecycleScope . SUITE ) . SUITE . getAbsolutePath . put ( "" , randomBoolean ) , randomBoolean . put ( "" , randomIntBetween ( 100 , 1000 ) , 1000 ) , randomIntBetween ( 100 , 1000 ) , 1000 ) . settingsBuilder ( ) . put ( "" , newTempDir ( LifecycleScope . SUITE ) . SUITE . getAbsolutePath ) , newTempDir ( LifecycleScope . SUITE ) . SUITE . getAbsolutePath . put ( "" , randomBoolean ) , randomBoolean . put ( "" , randomIntBetween ( 100 , 1000 ) , 1000 ) , randomIntBetween ( 100 , 1000 ) , 1000 )
PutRepositoryResponse var = client . admin . cluster . preparePutRepository ( "" ) . setType ( "" ) . setSettings ( ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir ) . get
PutRepositoryResponse var = client . admin . cluster . preparePutRepository ( "" ) . setType ( "" ) . setSettings ( ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir ) . get
assertAcked ( client . admin . cluster . preparePutRepository ( var ) . setType ( "" ) . setSettings ( ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ( LifecycleScope . SUITE ) . SUITE ) , newTempDir ( LifecycleScope . SUITE ) . SUITE . put ( "" , false ) , false ) . settingsBuilder ( ) . put ( "" , newTempDir ( LifecycleScope . SUITE ) . SUITE ) , newTempDir ( LifecycleScope . SUITE ) . SUITE . put ( "" , false ) , false . get )
PutRepositoryResponse var = var . admin ( ) . cluster . preparePutRepository ( "" ) . setType ( "" ) . setSettings ( ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir ) . execute . actionGet
File var = newTempDir
PutRepositoryResponse var = var . admin ( ) . cluster . preparePutRepository ( "" ) . setType ( MockRepositoryModule . class . getCanonicalName ( ) ) . setSettings ( ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ( LifecycleScope . TEST ) . TEST ) , newTempDir ( LifecycleScope . TEST ) . TEST . put ( "" , randomAsciiOfLength ( 10 ) ) , randomAsciiOfLength ( 10 ) . put ( "" , 200 ) , 200 ) . get
PutRepositoryResponse var = var . admin ( ) . cluster . preparePutRepository ( "" ) . setType ( MockRepositoryModule . class . getCanonicalName ( ) ) . setSettings ( ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ( LifecycleScope . TEST ) . TEST ) , newTempDir ( LifecycleScope . TEST ) . TEST . put ( "" , randomAsciiOfLength ( 10 ) ) , randomAsciiOfLength ( 10 ) . put ( "" , 200 ) , 200 ) . get
PutRepositoryResponse var = client . admin . cluster . preparePutRepository ( "" ) . setType ( "" ) . setSettings ( ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir ) . execute . actionGet
PutRepositoryResponse var = client . admin . cluster . preparePutRepository ( "" ) . setType ( "" ) . setSettings ( ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir ) . execute . actionGet
client . admin . cluster . preparePutRepository ( "" + var ) . setType ( "" ) . setSettings ( ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ( LifecycleScope . SUITE ) . SUITE ) , newTempDir ( LifecycleScope . SUITE ) . SUITE ) . setVerify ( false ) . get
client . admin . cluster . preparePutRepository ( "" ) . setType ( "" ) . setSettings ( ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ( LifecycleScope . SUITE ) . SUITE ) , newTempDir ( LifecycleScope . SUITE ) . SUITE ) . get
assertAcked ( client . admin . cluster . preparePutRepository ( "" ) . setType ( "" ) . setSettings ( ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ( LifecycleScope . SUITE ) . SUITE ) , newTempDir ( LifecycleScope . SUITE ) . SUITE . put ( "" , randomBoolean ) , randomBoolean . put ( "" , randomIntBetween ( 100 , 1000 ) , 1000 ) , randomIntBetween ( 100 , 1000 ) , 1000 ) . settingsBuilder ( ) . put ( "" , newTempDir ( LifecycleScope . SUITE ) . SUITE ) , newTempDir ( LifecycleScope . SUITE ) . SUITE . put ( "" , randomBoolean ) , randomBoolean . put ( "" , randomIntBetween ( 100 , 1000 ) , 1000 ) , randomIntBetween ( 100 , 1000 ) , 1000 )
File var = newTempDir ( LifecycleScope . SUITE )
var = var . admin ( ) . cluster . preparePutRepository ( "" ) . setType ( "" ) . setSettings ( ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ( LifecycleScope . SUITE ) . SUITE ) , newTempDir ( LifecycleScope . SUITE ) . SUITE ) . get
PutRepositoryResponse var = client . admin . cluster . preparePutRepository ( "" ) . setType ( "" ) . setSettings ( ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ( LifecycleScope . SUITE ) . SUITE ) , newTempDir ( LifecycleScope . SUITE ) . SUITE . put ( "" , randomBoolean ) , randomBoolean . put ( "" , randomIntBetween ( 5 , 100 ) , 100 ) , randomIntBetween ( 5 , 100 ) , 100 ) . setTimeout ( "" ) . get
var = client . admin . cluster . preparePutRepository ( "" ) . setType ( "" ) . setSettings ( ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ( LifecycleScope . SUITE ) . SUITE ) , newTempDir ( LifecycleScope . SUITE ) . SUITE . put ( "" , randomBoolean ) , randomBoolean . put ( "" , randomIntBetween ( 5 , 100 ) , 100 ) , randomIntBetween ( 5 , 100 ) , 100 ) . get
Settings var = ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ( LifecycleScope . SUITE ) . SUITE ) . put ( "" , 1.0 ) . build
File var = newTempDir ( LifecycleScope . SUITE )
Settings var = ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ( LifecycleScope . SUITE ) . SUITE ) . put ( "" , 1.0 ) . build
File var = newTempDir ( LifecycleScope . SUITE )
assertAcked ( var . admin ( ) . cluster . preparePutRepository ( "" ) . setType ( "" ) . setSettings ( ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir . put ( "" , randomBoolean ) , randomBoolean . put ( "" , randomIntBetween ( 100 , 1000 ) , 1000 ) , randomIntBetween ( 100 , 1000 ) , 1000 ) . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir . put ( "" , randomBoolean ) , randomBoolean . put ( "" , randomIntBetween ( 100 , 1000 ) , 1000 ) , randomIntBetween ( 100 , 1000 ) , 1000 )
String var = newTempDir . getAbsolutePath
assertAcked ( var . admin ( ) . cluster . preparePutRepository ( "" ) . setType ( "" ) . setSettings ( ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir . put ( "" , randomBoolean ) , randomBoolean . put ( "" , randomIntBetween ( 100 , 1000 ) , 1000 ) , randomIntBetween ( 100 , 1000 ) , 1000 ) . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir . put ( "" , randomBoolean ) , randomBoolean . put ( "" , randomIntBetween ( 100 , 1000 ) , 1000 ) , randomIntBetween ( 100 , 1000 ) , 1000 )
assertAcked ( var . admin ( ) . cluster . preparePutRepository ( "" ) . setType ( "" ) . setSettings ( ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir . put ( "" , randomBoolean ) , randomBoolean . put ( "" , randomIntBetween ( 100 , 1000 ) , 1000 ) , randomIntBetween ( 100 , 1000 ) , 1000 ) . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir . put ( "" , randomBoolean ) , randomBoolean . put ( "" , randomIntBetween ( 100 , 1000 ) , 1000 ) , randomIntBetween ( 100 , 1000 ) , 1000 )
PutRepositoryResponse var = var . admin ( ) . cluster . preparePutRepository ( "" ) . setType ( "" ) . setSettings ( ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir ) . get
assertAcked ( var . admin ( ) . cluster . preparePutRepository ( "" ) . setType ( "" ) . setSettings ( ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir ) . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir )
assertAcked ( var . admin ( ) . cluster . preparePutRepository ( "" ) . setType ( "" ) . setSettings ( ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir ) . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir )
File var = newTempDir
assertAcked ( var . admin ( ) . cluster . preparePutRepository ( "" ) . setType ( MockRepositoryModule . class . getCanonicalName ( ) ) . class . getCanonicalName ( ) . setSettings ( ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir . put ( "" , randomAsciiOfLength ( 10 ) ) , randomAsciiOfLength ( 10 ) . put ( "" , 0.2 ) , 0.2 ) . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir . put ( "" , randomAsciiOfLength ( 10 ) ) , randomAsciiOfLength ( 10 ) . put ( "" , 0.2 ) , 0.2 . setVerify ( false ) )
assertAcked ( var . admin ( ) . cluster . preparePutRepository ( "" ) . setType ( MockRepositoryModule . class . getCanonicalName ( ) ) . class . getCanonicalName ( ) . setSettings ( ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir . put ( "" , randomAsciiOfLength ( 10 ) ) , randomAsciiOfLength ( 10 ) . put ( "" , 0.3 ) , 0.3 ) . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir . put ( "" , randomAsciiOfLength ( 10 ) ) , randomAsciiOfLength ( 10 ) . put ( "" , 0.3 ) , 0.3 )
File var = newTempDir
File var = newTempDir
assertAcked ( var . admin ( ) . cluster . preparePutRepository ( "" ) . setType ( "" ) . setSettings ( ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir ) . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir )
File var = newTempDir
File var = newTempDir
File var = newTempDir
File var = newTempDir
assertAcked ( var . admin ( ) . cluster . preparePutRepository ( "" ) . setType ( "" ) . setSettings ( ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir ) . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir )
assertAcked ( var . admin ( ) . cluster . preparePutRepository ( "" ) . setType ( "" ) . setSettings ( ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir ) . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir )
assertAcked ( var . admin ( ) . cluster . preparePutRepository ( "" ) . setType ( "" ) . setSettings ( ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir ) . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir )
File var = newTempDir
File var = newTempDir
File var = newTempDir
File var = newTempDir
File var = newTempDir
assertAcked ( var . admin ( ) . cluster . preparePutRepository ( "" ) . setType ( "" ) . setSettings ( ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir . put ( "" , randomBoolean ) , randomBoolean . put ( "" , randomIntBetween ( 100 , 1000 ) , 1000 ) , randomIntBetween ( 100 , 1000 ) , 1000 ) . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir . put ( "" , randomBoolean ) , randomBoolean . put ( "" , randomIntBetween ( 100 , 1000 ) , 1000 ) , randomIntBetween ( 100 , 1000 ) , 1000 )
assertAcked ( var . admin ( ) . cluster . preparePutRepository ( "" ) . setType ( "" ) . setSettings ( ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir . put ( "" , randomBoolean ) , randomBoolean . put ( "" , randomIntBetween ( 100 , 1000 ) , 1000 ) , randomIntBetween ( 100 , 1000 ) , 1000 ) . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir . put ( "" , randomBoolean ) , randomBoolean . put ( "" , randomIntBetween ( 100 , 1000 ) , 1000 ) , randomIntBetween ( 100 , 1000 ) , 1000 )
assertAcked ( var . admin ( ) . cluster . preparePutRepository ( "" ) . setType ( "" ) . setSettings ( ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir . put ( "" , randomBoolean ) , randomBoolean . put ( "" , randomIntBetween ( 100 , 1000 ) , 1000 ) , randomIntBetween ( 100 , 1000 ) , 1000 ) . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir . put ( "" , randomBoolean ) , randomBoolean . put ( "" , randomIntBetween ( 100 , 1000 ) , 1000 ) , randomIntBetween ( 100 , 1000 ) , 1000 )
assertAcked ( var . admin ( ) . cluster . preparePutRepository ( "" ) . setType ( MockRepositoryModule . class . getCanonicalName ( ) ) . class . getCanonicalName ( ) . setSettings ( ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir . put ( "" , randomBoolean ) , randomBoolean . put ( "" , randomIntBetween ( 100 , 1000 ) , 1000 ) , randomIntBetween ( 100 , 1000 ) , 1000 . put ( "" , true ) , true ) . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir . put ( "" , randomBoolean ) , randomBoolean . put ( "" , randomIntBetween ( 100 , 1000 ) , 1000 ) , randomIntBetween ( 100 , 1000 ) , 1000 . put ( "" , true ) , true )
assertAcked ( var . admin ( ) . cluster . preparePutRepository ( "" ) . setType ( MockRepositoryModule . class . getCanonicalName ( ) ) . class . getCanonicalName ( ) . setSettings ( ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir . put ( "" , randomBoolean ) , randomBoolean . put ( "" , randomIntBetween ( 100 , 1000 ) , 1000 ) , randomIntBetween ( 100 , 1000 ) , 1000 ) . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir . put ( "" , randomBoolean ) , randomBoolean . put ( "" , randomIntBetween ( 100 , 1000 ) , 1000 ) , randomIntBetween ( 100 , 1000 ) , 1000 )
assertAcked ( var . admin ( ) . cluster . preparePutRepository ( "" ) . setType ( "" ) . setSettings ( ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir . put ( "" , randomBoolean ) , randomBoolean . put ( "" , randomIntBetween ( 100 , 1000 ) , 1000 ) , randomIntBetween ( 100 , 1000 ) , 1000 ) . settingsBuilder ( ) . put ( "" , newTempDir ) , newTempDir . put ( "" , randomBoolean ) , randomBoolean . put ( "" , randomIntBetween ( 100 , 1000 ) , 1000 ) , randomIntBetween ( 100 , 1000 ) , 1000 )
assertAcked ( client . admin . cluster . preparePutRepository ( "" ) . setType ( "" ) . setSettings ( ImmutableSettings . settingsBuilder ( ) . put ( "" , newTempDir ( LifecycleScope . SUITE ) . SUITE . getAbsolutePath ) , newTempDir ( LifecycleScope . SUITE ) . SUITE . getAbsolutePath . put ( "" , randomBoolean ) , randomBoolean . put ( "" , randomIntBetween ( 100 , 1000 ) , 1000 ) , randomIntBetween ( 100 , 1000 ) , 1000 ) . settingsBuilder ( ) . put ( "" , newTempDir ( LifecycleScope . SUITE ) . SUITE . getAbsolutePath ) , newTempDir ( LifecycleScope . SUITE ) . SUITE . getAbsolutePath . put ( "" , randomBoolean ) , randomBoolean . put ( "" , randomIntBetween ( 100 , 1000 ) , 1000 ) , randomIntBetween ( 100 , 1000 ) , 1000 )
final File var = newTempDir ( LifecycleScope . SUITE ) . getAbsoluteFile
super ( var , overrideSettings ( var , var ) , var , var )
if ( var . getKey ( ) . equals ( ClusterName . SETTING ) && var == false )
Digester var = new Digester
var . setClassLoader ( LintParser . class . getClassLoader ( ) )
for ( int var = 2 ; var < var . length ; var ++ )
for ( int var = 2 ; var < var . length ; var ++ )
String var = var [ 0 ] . split ( "" )
String var = var . getIn ( ) . getHeader ( Exchange . OVERRULE_FILE_NAME , String . class )
if ( var != null && ! var . equals ( var ) )
if ( StringHelper . hasStartToken ( var , "" ) )
var . trace ( "" , Exchange . FILE_NAME , var )
template . sendBodyAndHeader ( "" , "" , Exchange . FILE_NAME , "" )
template . sendBodyAndHeader ( "" , "" , Exchange . FILE_NAME , "" )
template . sendBodyAndHeader ( var , var , Exchange . FILE_NAME , var )
createBroker ( true )
var = var . normalizeCertificateChain ( var )
final CertificateAuthorityCouncil var
this . var = new CertificateAuthorityCouncil ( var . getAcceptedIssuers ( ) )
var . add ( "" + var . getCanonicalPath ( ) )
String var = var + var . getSubmittedFileName ( )
File var = new File ( var )
File var = new File ( var )
File var = new File ( var )
ExpiringCode var = var . putIfAbsent ( var , var )
ExpiringCode var = var . remove ( var )
var . values ( ) . stream . filter ( var ) . forEach ( var )
int var = var . var ( var , var , var . getTime ( ) , var , var )
var . update ( var , var )
var . update ( var , var )
Timestamp var = new Timestamp ( var . getLong ( var ++ ) ++ )
jdbcTemplate . queryForObject ( JdbcExpiringCodeStore . select , new JdbcExpiringCodeStore . JdbcExpiringCodeMapper ( ) , "" )
IdentityProvider < UaaIdentityProviderDefinition > var = getWebApplicationContext . getBean ( IdentityProviderProvisioning . class ) . retrieveByOrigin ( UAA , IdentityZone . getUaa ( ) . getId )
if ( StringUtils . hasText ( var ) )
assertThat ( var , startsWith ( "" + var + "" ) + var + "" )
final File var = new File ( var , var )
checkSlip ( var , var )
var = var . getParent ( )
return DocumentBuilderFactory . newInstance ( ) . newDocumentBuilder . parse ( var , var )
var = var . newSchema ( var )
this . var = new URL ( var )
if ( this . var . equals ( var . getIssuer ( ) ) )
public IESCipher ( OldIESEngine var )
this . var = IESUtil . guessParameterSpec ( var . getCipher ( ) )
IESParameters var = new IESWithCipherParameters ( var . getDerivationV ( ) , var . getEncodingV ( ) , var . getMacKeySize ( ) , var . getCipherKeySize ( ) )
public OldIESwithCipher ( BlockCipher var )
super ( new OldIESEngine ( new DHBasicAgreement , new KDF2BytesGenerator ( new SHA1Digest ) SHA1Digest , new HMac ( new SHA1Digest ) SHA1Digest , new PaddedBufferedBlockCipher ( var ) ) DHBasicAgreement , new KDF2BytesGenerator ( new SHA1Digest ) SHA1Digest , new HMac ( new SHA1Digest ) SHA1Digest , new PaddedBufferedBlockCipher ( var ) )
public OldIES
super ( new OldIESEngine ( new DHBasicAgreement , new KDF2BytesGenerator ( new SHA1Digest ) SHA1Digest , new HMac ( new SHA1Digest ) SHA1Digest ) DHBasicAgreement , new KDF2BytesGenerator ( new SHA1Digest ) SHA1Digest , new HMac ( new SHA1Digest ) SHA1Digest )
this . var = IESUtil . guessParameterSpec ( var . getCipher ( ) )
if ( var . length != var )
super ( new CBCBlockCipher ( new AESEngine ) AESEngine , 16 )
public OldECIESwithAESCBC
super ( new CBCBlockCipher ( new AESEngine ) AESEngine , 16 )
return new IESParameterSpec ( null , null , 64 , 64 )
return new IESParameterSpec ( null , null , 80 , 80 )
var . initialize ( 1024 , new SecureRandom )
var = new IESParameterSpec ( var , var , 128 , 192 )
var . initialize ( 512 , new SecureRandom )
var . initialize ( 1024 , new SecureRandom )
var = new IESCipher . IESwithAES ( )
var = new IESCipher . IESwithAES ( )
var = new IESParameterSpec ( var , var , 128 , 128 )
var . initialize ( 512 , new SecureRandom )
var . initialize ( 1024 , new SecureRandom )
var . init ( Cipher . DECRYPT_MODE , var , new SecureRandom )
var . init ( Cipher . DECRYPT_MODE , var , var , new SecureRandom )
var . init ( Cipher . DECRYPT_MODE , var , new SecureRandom )
var = new IESParameterSpec ( var , var , 128 , 128 )
var . initialize ( 192 , new SecureRandom )
doTest ( "" , var , "" , var )
doTest ( "" , var , "" , var )
var = new org . bouncycastle . jcajce . provider . asymmetric . ec . IESCipher . ECIESwithAES ( )
var = new org . bouncycastle . jcajce . provider . asymmetric . ec . IESCipher . ECIESwithAES ( )
var = new IESParameterSpec ( var , var , 128 , 128 )
var . initialize ( 192 , new SecureRandom )
var . initialize ( 256 , new SecureRandom )
var . initialize ( 256 , new SecureRandom )
var . init ( Cipher . DECRYPT_MODE , var , new SecureRandom )
var . init ( Cipher . DECRYPT_MODE , var , var , new SecureRandom )
BigInteger var = var . getG ( ) . modPow ( var , var . getP ( ) ) . mod ( var )
var . init ( true , new ParametersWithRandom ( var . getPrivate ( ) , new TestRandomData ( Hex . decode ( "" ) ) . decode ( "" ) ) . getPrivate ( ) , new TestRandomData ( Hex . decode ( "" ) ) . decode ( "" ) )
var . init ( true , new ParametersWithRandom ( var . getPrivate ( ) , new TestRandomData ( Hex . decode ( "" ) ) . decode ( "" ) ) . getPrivate ( ) , new TestRandomData ( Hex . decode ( "" ) ) . decode ( "" ) )
var . init ( true , new ParametersWithRandom ( var . getPrivate ( ) , new TestRandomData ( Hex . decode ( "" ) ) . decode ( "" ) ) . getPrivate ( ) , new TestRandomData ( Hex . decode ( "" ) ) . decode ( "" ) )
SecureRandom var = new TestRandomBigInteger ( BigIntegers . asUnsignedByteArray ( new BigInteger ( "" ) ) BigInteger ( "" ) )
return new ObjectInputStream ( var )
final TcpSocketServer < ObjectInputStream > var = TcpSocketServer . createSerializedSocketServer ( var . getPort ( ) , var . getBacklog ( ) , var . getLocalBindAddress ( ) )
final UdpSocketServer < ObjectInputStream > var = UdpSocketServer . createSerializedSocketServer ( var . getPort ( ) )
var = var [ 0 ]
var = var
var = var . secureRandomString ( )
assertTrue ( "" , var . getCause ( ) instanceof XPathExpressionException )
var . put ( "" , var )
AuthorizationRequest var = ( AuthorizationRequest ) var . get ( "" )
AuthorizationRequest var = ( AuthorizationRequest ) var . retrieveAttribute ( var , "" )
AuthorizationRequest var = ( AuthorizationRequest ) var . getModelMap ( ) . get ( "" )
Socket . destroy ( var . socket )
SAXReader var = new SAXReader
SAXReader var = new SAXReader
SAXReader var = new SAXReader
XMLStreamReader var = StAXUtils . createXMLStreamReader ( var , var )
var = StAXUtils . createXMLStreamReader ( var , var )
return var . getMostRecentCredentialVersion ( var , var , var )
return var . getAllCredentialVersions ( var , var , var )
return CredentialView . fromEntity ( getVersionByIdentifier ( var , var , var , var :: findByUuid ) , var , var , var :: findByUuid )
Credential var = var . findMostRecent ( var )
var . add ( new EventAuditRecordParameters ( CREDENTIAL_ACCESS , var ) , var )
DataResponse var = var . getAllCredentialVersions ( var , newArrayList , var )
assertThat ( var . get ( 0 ) . getName , equalTo ( var ) )
assertThat ( var . get ( 0 ) . getVersionCreatedAt , equalTo ( var ) )
assertThat ( var . get ( 1 ) . getName , equalTo ( var ) )
assertThat ( var . get ( 1 ) . getVersionCreatedAt , equalTo ( var ) )
DataResponse var = var . getMostRecentCredentialVersion ( var , newArrayList , var )
assertThat ( var . get ( 0 ) . getName , equalTo ( var ) )
assertThat ( var . get ( 0 ) . getVersionCreatedAt , equalTo ( var ) )
CredentialView var = var . getCredentialVersion ( var , newArrayList , var )
var = mock ( CredentialDataService . class )
var = new JsonInterpolationService ( var )
doReturn ( var ) . when ( var ) . findMostRecent ( "" )
var . interpolateCredHubReferences ( deserialize ( var , Map . class ) , Map . class , var )
assertThat ( var , contains ( samePropertyValuesAs ( new EventAuditRecordParameters ( CREDENTIAL_ACCESS , "" ) , "" ) EventAuditRecordParameters ( CREDENTIAL_ACCESS , "" ) , "" ) ( new EventAuditRecordParameters ( CREDENTIAL_ACCESS , "" ) , "" ) EventAuditRecordParameters ( CREDENTIAL_ACCESS , "" ) , "" )
Map < String , Object > var = deserialize ( var , Map . class )
Map < String , Object > var = var . interpolateCredHubReferences ( var , var )
Map < String , Object > var = var . interpolateCredHubReferences ( var , var )
Map < String , Object > var = var . interpolateCredHubReferences ( var , var )
Map < String , Object > var = var . interpolateCredHubReferences ( var , var )
Map < String , Object > var = var . interpolateCredHubReferences ( var , var )
Map < String , Object > var = var . interpolateCredHubReferences ( var , var )
doReturn ( var ) . when ( var ) . findMostRecent ( "" )
doReturn ( var ) . when ( var ) . findMostRecent ( "" )
doReturn ( var ) . when ( var ) . findMostRecent ( "" )
var = var . interpolateCredHubReferences ( var , var )
if ( JVM . is15 ( ) )
if ( JVM . is17 ( ) )
if ( ! "" . equals ( var ) || var . endsWith ( "" ) )
if ( var . getContextPath ( ) != null )
if ( var . getServletPath ( ) != null )
int var = var . indexOf ( "" )
String var = var . getRequestURI ( )
int var = var . indexOf ( "" )
SAXReader var = new SAXReader
SAXReader var = new SAXReader
SAXReader var = new SAXReader
this . var = var
CIMInstance var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( false ) . withCredentialId ( "" ) . build
CIMInstance var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( false ) . withCredentialId ( "" ) . build
CIMInstance var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( false ) . withCredentialId ( "" ) . build
CIMInstance var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( false ) . withCredentialId ( "" ) . build
CIMInstance var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( false ) . withCredentialId ( "" ) . build
CIMInstance var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( false ) . withCredentialId ( "" ) . build
CIMInstance var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( false ) . withCredentialId ( "" ) . build
CIMInstance var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( false ) . withCredentialId ( "" ) . build
CIMInstance var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( false ) . withCredentialId ( "" ) . build
CIMInstance var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( false ) . withCredentialId ( "" ) . build
CIMInstance var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( false ) . withCredentialId ( "" ) . build
CIMInstance var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( false ) . withCredentialId ( "" ) . build
CIMInstance var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( false ) . withCredentialId ( "" ) . build
CIMInstance var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( false ) . withCredentialId ( "" ) . build
CIMInstance var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( false ) . withCredentialId ( "" ) . build
CIMInstance var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( false ) . withCredentialId ( "" ) . build
CIMInstance var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( false ) . withCredentialId ( "" ) . build
CIMInstance var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( false ) . withCredentialId ( "" ) . build
CIMInstance var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8443 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( true ) . withCredentialId ( "" ) . build
CIMInstance var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( true ) . withCredentialId ( "" ) . build
CIMInstance var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( false ) . withCredentialId ( "" ) . build
CIMInstance var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( false ) . withCredentialId ( "" ) . build
CIMInstance var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( false ) . withCredentialId ( "" ) . build
CIMInstance var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( false ) . withCredentialId ( "" ) . build
var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8443 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( true ) . withCredentialId ( "" ) . build
var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( false ) . withCredentialId ( "" ) . build
CIMInstance var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( false ) . withCredentialId ( "" ) . build
CIMInstance var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( true ) . withCredentialId ( "" ) . build
CIMInstance var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( false ) . withCredentialId ( "" ) . build
setCredentialManager ( "" , "" )
CIMInstance var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( false ) . withCredentialId ( "" ) . build
CIMInstance var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( false ) . withCredentialId ( "" ) . build
CIMInstance var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( false ) . withCredentialId ( "" ) . build
var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( false ) . withCredentialId ( "" ) . build
var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( false ) . withCredentialId ( "" ) . build
this . var = var
CIMInstance var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( false ) . withCredentialId ( "" ) . build
var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( false ) . withCredentialId ( "" ) . build
CIMInstance var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( false ) . withCredentialId ( "" ) . build
var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8080 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( false ) . withCredentialId ( "" ) . build
var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8443 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( true ) . withCredentialId ( "" ) . build
var = new CIMInstanceBuilder . withName ( "" ) . withHost ( "" ) . withPort ( 8443 ) . withUser ( "" ) . withPassword ( "" ) . withUseSSL ( true ) . withCredentialId ( "" ) . build
var . setName ( var )
public FeedbackPayload ( AjaxRequestTarget var )
public FeedbackPayload ( AjaxRequestTarget var , int var , String var )
BroadcastUtils . breadth ( var . getPage ( ) , new FeedbackPayload ( var , FeedbackMessage . DEBUG , var ) , FeedbackMessage . DEBUG , var )
BroadcastUtils . breadth ( var . getPage ( ) , new FeedbackPayload ( var , FeedbackMessage . INFO , var ) , FeedbackMessage . INFO , var )
BroadcastUtils . breadth ( var . getPage ( ) , new FeedbackPayload ( var , FeedbackMessage . SUCCESS , var ) , FeedbackMessage . SUCCESS , var )
BroadcastUtils . breadth ( var . getPage ( ) , new FeedbackPayload ( var , FeedbackMessage . WARNING , var ) , FeedbackMessage . WARNING , var )
FeedbackUtils . error ( var , var , var . getMessage ( ) )
BroadcastUtils . breadth ( var . getPage ( ) , new FeedbackPayload ( var , FeedbackMessage . ERROR , var ) , FeedbackMessage . ERROR , var )
FeedbackUtils . fatal ( var , var , var . getMessage ( ) )
BroadcastUtils . breadth ( var . getPage ( ) , new FeedbackPayload ( var , FeedbackMessage . FATAL , var ) , FeedbackMessage . FATAL , var )
BroadcastUtils . breadth ( var . getPage ( ) , new FeedbackPayload ( var ) )
final PolicyFactory var = newPolicyFactory
public ChartPayload ( AjaxRequestTarget var , String var , String var , String var , long var )
final PolicyFactory var = newPolicyFactory
public RefreshPayload ( int var , AjaxRequestTarget var )
for ( int var = 0 ; var < this . var ; var ++ )
var . setAllowJacksonUnmarshallType ( true )
var . perform ( var ) . andExpect ( status . isNotFound ) . andExpect ( content . contentTypeCompatibleWith ( APPLICATION_JSON ) ) . andExpect ( jsonPath ( "" ) . value ( "" + "" ) + "" )
var . perform ( var ) . andExpect ( status . isNotFound ) . andExpect ( content . contentTypeCompatibleWith ( APPLICATION_JSON ) ) . andExpect ( jsonPath ( "" ) . value ( "" + "" ) + "" )
this . var . andExpect ( status . isNotFound ) . andExpect ( content . contentTypeCompatibleWith ( APPLICATION_JSON ) ) . andExpect ( jsonPath ( "" ) . value ( "" + "" ) + "" )
var . perform ( var ) . andExpect ( status . isNotFound ) . andExpect ( content . contentTypeCompatibleWith ( APPLICATION_JSON ) ) . andExpect ( jsonPath ( "" ) . value ( "" + "" ) + "" )
String var = "" + "" + "" + ""
var . perform ( var ) . andDo ( print ) . andExpect ( status . isNotFound ) . andExpect ( jsonPath ( "" , equalTo ( "" ) ) , equalTo ( "" ) )
var . perform ( var ) . andDo ( print ) . andExpect ( status . isNotFound ) . andExpect ( jsonPath ( "" , equalTo ( "" ) ) , equalTo ( "" ) )
JAXBContext var = JAXBContext . newInstance ( ValidationConfigType . class )
JAXBElement < ValidationConfigType > var = var . unmarshal ( var , ValidationConfigType . class )
JAXBContext var = JAXBContext . newInstance ( ConstraintMappingsType . class )
JAXBElement < ConstraintMappingsType > var = var . unmarshal ( var , ConstraintMappingsType . class )
var . append ( getOrderClause ( var , var , var ) , var , var ) . append ( "" )
if ( var [ var ] == Constants . SEMI_COLON )
if ( ( var == Constants . SP ) || ( var == Constants . HT ) ++ = false )
expect ( var . getParameter ( ConfigKey . CALLBACK . getKeyValue ( ) ) . CALLBACK . getKeyValue ( ) ) . andReturn ( var )
expect ( var . getParameter ( ConfigKey . MIME_TYPE . getKeyValue ( ) ) . MIME_TYPE . getKeyValue ( ) ) . andReturn ( "" )
if ( var . getParameter ( ConfigKey . CALLBACK . getKeyValue ( ) ) != null )
String var = Arrays . stream ( path . split ( "" ) ) . filter ( var ) . filter ( var ) . filter ( var ) . collect ( Collectors . joining ( "" ) )
PropertyPath var = PropertyPath . from ( var , var )
var . registerXMLElementWriter ( new IIOPSubsystemParser_2_0 )
final IORSecurityConfigMetaData var = this . createIORSecurityConfigMetaData ( var , var , var )
CorbaPOAService var = new CorbaPOAService ( "" , "" )
final CorbaPOAService var = new CorbaPOAService ( "" , "" , IdAssignmentPolicyValue . USER_ID , null , null , LifespanPolicyValue . PERSISTENT , null , null , null )
final CorbaPOAService var = new CorbaPOAService ( "" , null , IdAssignmentPolicyValue . USER_ID , null , null , LifespanPolicyValue . PERSISTENT , null , null , null )
ResourceTransformationDescriptionBuilder var = var . createBuilder ( CURRENT_MODEL_VERSION , VERSION_1 )
if ( this . var . getValue ( ) != null )
if ( this . var . getOptionalValue ( ) != null )
public CorbaPOAService ( String var , String var )
this ( var , var , null , null , null , null , null , null , null )
public CorbaPOAService ( String var , String var , IdAssignmentPolicyValue var , IdUniquenessPolicyValue var , ImplicitActivationPolicyValue var , LifespanPolicyValue var , RequestProcessingPolicyValue var , ServantRetentionPolicyValue var , ThreadPolicyValue var )
Assert . assertEquals ( "" , var . lookupSsl ( 3729 ) )
var . warn ( "" )
log . warn ( "" )
AuthHeader var = new AuthHeader ( this . var )
var . putHeader ( this . id , var )
log . warn ( "" + var . getSrc ( ) + "" + var )
Message var = new Message ( var ) . setFlag ( Message . Flag . OOB )
if ( log . isDebugEnabled ( ) )
if ( var . handleUpEvent ( var ) == false = false )
Message var = new Message . setBuffer ( var . doFinal ( "" . getBytes ) . getBytes ) . putHeader ( var , new EncryptHeader ( EncryptHeader . ENCRYPT , var ) . ENCRYPT , var )
Message var = new Message . setBuffer ( var . doFinal ( "" . getBytes ) . getBytes ) . putHeader ( var , new EncryptHeader ( EncryptHeader . ENCRYPT , var ) . ENCRYPT , var )
Message var = new Message . setBuffer ( var . doFinal ( "" . getBytes ) . getBytes ) . putHeader ( var , new EncryptHeader ( EncryptHeader . ENCRYPT , var ) . ENCRYPT , var )
Util . assertEquals ( ( EncryptHeader ( ( Message ) var . getArg ( ) ) Message ) var . getArg ( ) . getHeader ( var ) ) . getType , EncryptHeader . KEY_REQUEST )
Util . assertEquals ( ( EncryptHeader ( ( Message ) var . getArg ( ) ) Message ) var . getArg ( ) . getHeader ( var ) ) . getType , EncryptHeader . SECRETKEY )
Message var = new Message . setBuffer ( var . doFinal ( "" . getBytes ) . getBytes ) . putHeader ( var , new EncryptHeader ( EncryptHeader . ENCRYPT , var ) . ENCRYPT , var )
Util . assertEquals ( ( EncryptHeader ( ( Message ) var . getArg ( ) ) Message ) var . getArg ( ) . getHeader ( var ) ) . getType , EncryptHeader . KEY_REQUEST )
Util . assertEquals ( ( EncryptHeader ( ( Message ) var . getArg ( ) ) Message ) var . getArg ( ) . getHeader ( var ) ) . getType , EncryptHeader . SECRETKEY )
ENCRYPT . EncryptHeader var = new ENCRYPT . EncryptHeader ( ( byte ) 1 , new byte )
var = new ENCRYPT . EncryptHeader ( ( byte ) 2 , "" . getBytes )
String var = var . getCanonicalPath ( )
return Items . getAllItems ( var , TopLevelItem . class )
return Items . getAllItems ( var . getOwner ( ) . getItemGroup , TopLevelItem . class )
if ( Functions . isWindows ( ) )
return Kernel32Utils . isJunctionOrSymlink ( var )
String var = var . getName ( )
return Files . isSymbolicLink ( var )
if ( Functions . isWindows ( ) )
if ( var . exists ( ) )
var . delete ( )
var = LIBC . symlink ( var , var . getAbsolutePath ( ) )
if ( var != 0 )
var = Native . getLastError ( )
var = LIBC . strerror ( var )
if ( var . isNative ( ) )
if ( Functions . isWindows ( ) )
var = Items . getAllItems ( ( ModifiableTopLevelItemGroup ) var , TopLevelItem . class )
return Util . encode ( var + getUrl )
long var
if ( var <= 0 1 )
var = getElapsedTime
long var
long var
if ( var < 0 1 )
if ( var <= 0 1 )
boolean var = var . getACL ( ) . hasPermission ( var , Item . DISCOVER )
if ( ! var . getACL ( ) . hasPermission ( var , Item . READ ) = false )
var = Items . getAllItems ( var , TopLevelItem . class )
var = Items . getAllItems ( getOwner . getItemGroup , TopLevelItem . class )
if ( ! getACL . hasPermission ( var , Computer . BUILD ) )
this ( var , var , null )
return new StringParameterValue ( getName , var , getDescription )
List < CanonicalIdResolver > var = new ArrayList < CanonicalIdResolver > ( ExtensionList . lookup ( CanonicalIdResolver . class ) . class )
var = var . resolveCanonicalId ( var , var )
LOGGER . log ( Level . WARNING , "" , new Object )
LOGGER . log ( Level . FINE , String . format ( "" , new Object ) , new Object , var )
File var = getUnsanitizedLegacyConfigFileFor ( var )
LOGGER . log ( Level . WARNING , String . format ( "" , idStrategy . legacyFilenameOf ( var ) , idStrategy . filenameOf ( var ) ) , idStrategy . legacyFilenameOf ( var ) , idStrategy . filenameOf ( var ) , var )
return get ( var , true )
if ( new File ( var , "" ) . exists )
getOrCreate ( var , var , true )
if ( var != null && ! var . equals ( primaryView ) )
if ( ! var . getACL ( ) . hasPermission ( var , Item . BUILD ) )
File var = var . getParentFile ( )
var = File . createTempFile ( "" , null , var )
var . delete ( )
if ( var . exists ( ) )
Util . deleteFile ( var )
var . delete ( )
var . renameTo ( var )
var . delete ( )
public LogOutputStream ( Logger var , Level var , StackTraceElement var )
return var && ! Jenkins . getInstance ( ) . getInstallState . isSetupComplete && isUsingSecurityDefaults
InstallUtil . proceedToNextStateFrom ( InstallState . UNKNOWN )
return User . get ( var )
for ( int var = 1 ; var < var . length ; var ++ )
var . chmod ( 700 )
assertEquals ( 0100755 , var . child ( "" ) . mode )
assertEquals ( 0100644 , var . child ( "" ) . mode )
assertEquals ( 0100755 , var . child ( "" ) . mode )
assertEquals ( 0100644 , var . child ( "" ) . mode )
var . get ( 1 , TimeUnit . SECONDS )
var . get ( 1 , TimeUnit . SECONDS )
assertThat ( var . jenkins . getActiveInstance ( ) . getQueue . isBlockedByShutdown ( var ) , equalTo ( true ) )
assertThat ( var . jenkins . getActiveInstance ( ) . getQueue . isBlockedByShutdown ( var ) , equalTo ( false ) )
assertEquals ( Arrays . asList ( var , var , var , var , var , var , var , var , var ) , var , var , var , var , var , var , var , var , Items . getAllItems ( var , FreeStyleProject . class ) , FreeStyleProject . class )
assertThat ( Items . allItems ( var , FreeStyleProject . class ) , FreeStyleProject . class , containsInAnyOrder ( var , var , var , var , var , var , var , var , var ) , var , var , var , var , var , var , var , var )
assertThat ( Items . allItems ( var , Item . class ) , Item . class , containsInAnyOrder ( ( Item ) var , var , var , var , var , var , var , var , var ) Item ) var , var , var , var , var , var , var , var , var )
assertFalse ( "" , var . jenkins . getView ( "" ) . getACL . hasPermission ( User . get ( "" ) . impersonate , View . READ ) . get ( "" ) . impersonate , View . READ )
assertFalse ( "" , var . isActivated ( ) )
AgentProtocolTest . assertMonitorNotActive ( )
assertTrue ( ! Jenkins . getInstance ( ) . getACL . hasPermission ( Jenkins . ANONYMOUS , Jenkins . READ ) . ANONYMOUS , Jenkins . READ )
public HostsValidator
return InternetDomainName . isValid ( var ) || ip ( var ) || subnet ( var )
var . setFeature ( "" , false )
SAXBuilder var = new SAXBuilder
Document var = var . build ( var )
SAXBuilder var = new SAXBuilder
Document var = var . build ( var )
SAXBuilder var = new SAXBuilder
Document var = var . build ( var )
SAXBuilder var = new SAXBuilder
Document var = var . build ( var )
SAXBuilder var = new SAXBuilder
Document var = var . build ( var )
SAXBuilder var = new SAXBuilder
Document var = var . build ( var )
SAXBuilder var = new SAXBuilder
Document var = var . build ( var )
SAXBuilder var = new SAXBuilder
Document var = var . build ( var )
final String var = var . getMessage ( ) . toLowerCase
if ( var . contains ( "" ) )
fail ( "" + JDOMParseException . class . getName ( ) + "" )
if ( var . contains ( "" ) )
fail ( "" + JDOMParseException . class . getName ( ) + "" )
if ( var . contains ( "" ) )
if ( var . contains ( "" ) )
if ( var . contains ( "" ) )
return var . equals ( UnixCrypt . crypt ( var , var ) , var )
var |= ( var [ var ] != var [ var ] )
if ( var . length != var . var . length )
for ( int var = 0 ; var < var . length ; var ++ )
var |= ( var [ var ] != var . var [ var ] )
return Arrays . equals ( var . toCharArray ( ) , ( char ) var )
return var . var == var || ( null != var && var . equals ( var . var ) )
if ( ( var == null ) || ( var . indexOf ( var . toString ( ) ) == - 1 ) )
var . append ( "" )
var . append ( var . getNamespaceURI ( ) )
var . append ( "" )
var . write ( var . toString ( ) )
var = System . getProperty ( var )
Jenkins . getInstance ( ) . checkPermission ( Jenkins . ADMINISTER )
super ( String . format ( "" , var , var , toDebugString ( var ) ) , var , var , toDebugString ( var ) )
var . setAllowJacksonUnmarshallType ( true )
Object var = var . getValue ( var . getCurrentBean ( ) )
Object var = var . getValue ( var . getCurrentBean ( ) )
var . append ( translateAndEncode ( var ) )
var . append ( translateAndEncode ( var ) )
return TextParseUtil . translateVariables ( var , var )
var = translateAndDecode ( var )
String var = translateAndDecode ( var )
String var = var . translateAndEncode ( "" )
String var = var . translateAndDecode ( "" )
var . getCookies ( ) . recycle
setValidatedValueHandlerToValueContextIfPresent ( var , var , var )
setValidatedValueHandlerToValueContextIfPresent ( var , var , var )
setValidatedValueHandlerToValueContextIfPresent ( var , var , var )
setValidatedValueHandlerToValueContextIfPresent ( var , var , var . getReturnValueMetaData ( ) )
var . append ( DigestAuthorizationToken . DIGEST_URI . getName ( ) ) . append ( "" )
String var = DefaultServer . getDefaultServerURL ( ) + "" + var
String var = createResponse ( "" , var , "" , "" , "" , var )
var . append ( DigestAuthorizationToken . DIGEST_URI . getName ( ) ) . append ( "" )
this . var = var
assertEquals ( Arrays . toString ( var ) , 1 , var . length )
assertEquals ( "" , var . getName ( ) )
assertEquals ( "" , var . getUrl ( ) )
assertThat ( var . getWebResponse ( ) . getContentAsString , not ( containsString ( "" ) ) ( "" ) )
return getSyncManager . getSyncStorageEngine . getCurrentSyncsCopy ( var )
var . add ( new SyncInfo ( var ) )
var = getParentClassLoader . loadClass ( getServletClass )
return ( T ) new DOMSource ( var . getNode ( ) )
if ( SAXSource . class . equals ( var ) )
ByteArrayInputStream var = transformToByteArrayInputStream ( var )
return ( T ) new SAXSource ( new InputSource ( var ) )
return ( T ) new StreamSource ( var )
assertEquals ( 2 , var . getActionMessages ( ) . size )
User var = var . getUser ( var )
XStream var = createXStream
XStream var = createXStream
public IESCipher ( OldIESEngine var )
this . var = IESUtil . guessParameterSpec ( var . getCipher ( ) )
IESParameters var = new IESWithCipherParameters ( var . getDerivationV ( ) , var . getEncodingV ( ) , var . getMacKeySize ( ) , var . getCipherKeySize ( ) )
public OldIESwithCipher ( BlockCipher var )
super ( new OldIESEngine ( new DHBasicAgreement , new KDF2BytesGenerator ( new SHA1Digest ) SHA1Digest , new HMac ( new SHA1Digest ) SHA1Digest , new PaddedBufferedBlockCipher ( var ) ) DHBasicAgreement , new KDF2BytesGenerator ( new SHA1Digest ) SHA1Digest , new HMac ( new SHA1Digest ) SHA1Digest , new PaddedBufferedBlockCipher ( var ) )
public OldIES
super ( new OldIESEngine ( new DHBasicAgreement , new KDF2BytesGenerator ( new SHA1Digest ) SHA1Digest , new HMac ( new SHA1Digest ) SHA1Digest ) DHBasicAgreement , new KDF2BytesGenerator ( new SHA1Digest ) SHA1Digest , new HMac ( new SHA1Digest ) SHA1Digest )
this . var = IESUtil . guessParameterSpec ( var . getCipher ( ) )
if ( var . length != var )
super ( new CBCBlockCipher ( new AESEngine ) AESEngine , 16 )
public OldECIESwithAESCBC
super ( new CBCBlockCipher ( new AESEngine ) AESEngine , 16 )
return new IESParameterSpec ( null , null , 64 , 64 )
return new IESParameterSpec ( null , null , 80 , 80 )
var . initialize ( 1024 , new SecureRandom )
var = new IESParameterSpec ( var , var , 128 , 192 )
var . initialize ( 512 , new SecureRandom )
var . initialize ( 1024 , new SecureRandom )
var = new IESCipher . IESwithAES ( )
var = new IESCipher . IESwithAES ( )
var = new IESParameterSpec ( var , var , 128 , 128 )
var . initialize ( 512 , new SecureRandom )
var . initialize ( 1024 , new SecureRandom )
var . init ( Cipher . DECRYPT_MODE , var , new SecureRandom )
var . init ( Cipher . DECRYPT_MODE , var , var , new SecureRandom )
var . init ( Cipher . DECRYPT_MODE , var , new SecureRandom )
var = new IESParameterSpec ( var , var , 128 , 128 )
var . initialize ( 192 , new SecureRandom )
doTest ( "" , var , "" , var )
doTest ( "" , var , "" , var )
var = new org . bouncycastle . jcajce . provider . asymmetric . ec . IESCipher . ECIESwithAES ( )
var = new org . bouncycastle . jcajce . provider . asymmetric . ec . IESCipher . ECIESwithAES ( )
var = new IESParameterSpec ( var , var , 128 , 128 )
var . initialize ( 192 , new SecureRandom )
var . initialize ( 256 , new SecureRandom )
var . initialize ( 256 , new SecureRandom )
var . init ( Cipher . DECRYPT_MODE , var , new SecureRandom )
var . init ( Cipher . DECRYPT_MODE , var , var , new SecureRandom )
SSLException var = new SSLException ( "" )
PasswordChange var = new PasswordChange ( "" , "" )
when ( var . generateCode ( eq ( JsonUtils . writeValueAsString ( var ) ) . writeValueAsString ( var ) , any ( Timestamp . class ) . class ) ( JsonUtils . writeValueAsString ( var ) ) . writeValueAsString ( var ) , any ( Timestamp . class ) . class ) . thenReturn ( new ExpiringCode ( "" , new Timestamp ( System . currentTimeMillis ( ) + UaaResetPasswordService . PASSWORD_RESET_LIFETIME ) . currentTimeMillis ( ) + UaaResetPasswordService . PASSWORD_RESET_LIFETIME , "" ) , new Timestamp ( System . currentTimeMillis ( ) + UaaResetPasswordService . PASSWORD_RESET_LIFETIME ) . currentTimeMillis ( ) + UaaResetPasswordService . PASSWORD_RESET_LIFETIME , "" )
var = new PasswordChange ( "" , "" )
when ( var . generateCode ( eq ( JsonUtils . writeValueAsString ( var ) ) . writeValueAsString ( var ) , any ( Timestamp . class ) . class ) ( JsonUtils . writeValueAsString ( var ) ) . writeValueAsString ( var ) , any ( Timestamp . class ) . class ) . thenReturn ( new ExpiringCode ( "" , new Timestamp ( System . currentTimeMillis ( ) + UaaResetPasswordService . PASSWORD_RESET_LIFETIME ) . currentTimeMillis ( ) + UaaResetPasswordService . PASSWORD_RESET_LIFETIME , "" ) , new Timestamp ( System . currentTimeMillis ( ) + UaaResetPasswordService . PASSWORD_RESET_LIFETIME ) . currentTimeMillis ( ) + UaaResetPasswordService . PASSWORD_RESET_LIFETIME , "" )
PasswordChange var = new PasswordChange ( var . get ( 0 ) . getId , var . get ( 0 ) . getUserName )
PasswordChange var = new PasswordChange ( var . getId ( ) , var . getUserName ( ) )
List < ScimUser > var = var . query ( "" )
ScimUser var = var . get ( 0 )
Thread . sleep ( 1050 )
var . update ( var . getId ( ) , var )
getMockMvc . perform ( var ) . andExpect ( status . isUnprocessableEntity )
var . param ( "" , var . getCode ( ) ) . param ( "" , var . getPrimaryEmail ( ) ) . param ( "" , var ) . param ( "" , var )
this . var = new byte [ var ] . length + var . length
int var = var . length
Document var = var . read ( var )
Document var = var . read ( var )
Document var = var . read ( var )
SAXReader var = new SAXReader
Document var = var . read ( var )
if ( var . contains ( "" ) )
var . instantiate ( ReplicationPolicy . class , this , true )
getServletContext var . setAttribute ( ServletContext . TEMPDIR , var )
( ( ApplicationContext ) getServletContext var ) . setAttributeReadOnly ( ServletContext . TEMPDIR )
if ( "" . equals ( var . getMessage ( ) ) )
if ( var . equals ( "" ) )
public SQLInputFromChunk ( long var , int var )
var = 0
int var = this . read ( )
if ( var < 0 )
int var = this . read ( )
int var = ( ( var [ 0 ] & 0xff ) << 8 ) | ( var [ 1 ] & 0xff )
return new Date ( this . readLong ( ) )
return Double . longBitsToDouble ( this . readLong ( ) )
return Float . intBitsToFloat ( readInt )
return new String ( this . readBytes ( ) , "" )
return new Time ( this . readLong ( ) )
void close = 0
var = 0
if ( var == 0 )
this . write ( var )
var [ 0 ] = byte ( ( var >> 8 ) & 0xff )
while ( ( var = var . read ( var ) ) > 0 )
var . write ( var , 0 , var )
this . writeString ( var . toString ( ) )
this . writeLong ( Double . doubleToLongBits ( var ) )
this . writeInt ( Float . floatToIntBits ( var ) )
_writeBytes ( var , var , 4 )
this . writeBytes ( var . getBytes ( "" ) )
var [ 0 ] = var
var [ 1 ] = var . getDisplayName ( var )
if ( var [ 1 ] == null )
var [ 3 ] = var . encodeURL ( var . getContextPath ( var ) + "" + var )
var [ 0 ] = var . encodeURL ( var . getContextPath ( var ) + "" + var )
var [ 2 ] = var . encodeURL ( var . getContextPath ( var ) + "" + var )
var [ 4 ] = var . encodeURL ( var . getContextPath ( var ) + "" + var )
var [ 6 ] = var . encodeURL ( var . getContextPath ( var ) + "" + var )
var . print ( var )
var . print ( var )
var . print ( var )
boolean var = Boolean . parseBoolean ( var . getServletContext ( ) . getInitParameter ( Constants . XML_VALIDATION_TLD_INIT_PARAM ) . XML_VALIDATION_TLD_INIT_PARAM )
TldParser var = new TldParser ( true , var , new ImplicitTldRuleSet )
TagPluginParser var = new TagPluginParser ( var )
var = new TldParser ( true , var )
TldScanner var = new TldScanner ( var , true , var )
WebXmlParser var = new WebXmlParser ( false , false )
URL var = getResource ( Constants . WEB_XML_LOCATION )
public TldScanner ( ServletContext var , boolean var , boolean var )
this . var = new TldParser ( var , var )
var = new LocalResolver ( var , var )
public LocalResolver ( Map < String , String > , String var , Map < String , String > , String var )
public TagPluginParser ( ServletContext var )
var = DigesterFactory . newDigester ( false , false , new TagPluginRuleSet )
public TldParser ( boolean var , boolean var )
this ( var , var , new TldRuleSet )
public TldParser ( boolean var , boolean var , RuleSet var )
var = DigesterFactory . newDigester ( var , var , var )
public WebXmlParser ( boolean var , boolean var )
var = DigesterFactory . newDigester ( var , var , var )
var = DigesterFactory . newDigester ( var , var , var )
Digester var = DigesterFactory . newDigester ( true , true , new WebRuleSet ( false ) )
Digester var = DigesterFactory . newDigester ( true , true , new WebRuleSet ( false ) )
Digester var = DigesterFactory . newDigester ( true , true , new WebRuleSet ( false ) )
Digester var = DigesterFactory . newDigester ( true , true , new WebRuleSet ( false ) )
Digester var = DigesterFactory . newDigester ( true , true , new WebRuleSet ( false ) )
Digester var = DigesterFactory . newDigester ( true , true , new WebRuleSet ( false ) )
Digester var = DigesterFactory . newDigester ( true , true , new WebRuleSet ( false ) )
TldScanner var = new TldScanner ( var . getServletContext ( ) , true , true )
var = new TldParser ( true , true )
super ( var )
if ( var < 0 )
if ( var == null && var . getVersion ( ) >= HttpVersion . HTTP_1_1 . getVersion ( ) )
if ( var != EndOfContent . CHUNKED_CONTENT )
assertEquals ( null , _bad )
HttpConnectionFactory var = new HttpConnectionFactory
var . getHttpConfiguration ( ) . setRequestHeaderSize ( 1024 )
var . getHttpConfiguration ( ) . setResponseHeaderSize ( 1024 )
var = checkContains ( var , var , "" , "" ) + 1
Assert . assertEquals ( "" , 2 , var . size ( ) )
assertEquals ( "" , HttpStatus . OK_200 , var . getStatus ( ) )
PropertyUtils . addBeanIntrospector ( SuppressPropertiesBeanIntrospector . SUPPRESS_CLASS )
if ( var != null && ! Boolean . parseBoolean ( var . getProperty ( var ) ) )
var . add ( createDispatcher ( var , var , var , var ) , var , var , var )
public Jsr160RequestDispatcher ( Converters var , ServerHandle var , Restrictor var )
var = createDispatcherPointingToLocalMBeanServer
var . put ( "" , "" )
return new Jsr160RequestDispatcher ( new Converters , new ServerHandle ( null , null , null , null ) , null , null , null , new AllowAllRestrictor )
ExpiringCode var = var . generateCode ( JsonUtils . writeValueAsString ( var ) , new Timestamp ( System . currentTimeMillis ( ) + var ) . currentTimeMillis ( ) + var , null )
when ( var . generateCode ( eq ( "" ) , any ( Timestamp . class ) . class , eq ( null ) ) ( "" ) , any ( Timestamp . class ) . class , eq ( null ) ) . thenReturn ( new ExpiringCode ( "" , var , "" , null ) , var , "" , null )
when ( var . generateCode ( anyString , any ( Timestamp . class ) . class , eq ( null ) )  , any ( Timestamp . class ) . class , eq ( null ) ) . thenReturn ( new ExpiringCode ( "" , var , "" , null ) , var , "" , null )
when ( var . generateCode ( eq ( "" ) , any ( Timestamp . class ) . class , eq ( null ) ) ( "" ) , any ( Timestamp . class ) . class , eq ( null ) ) . thenReturn ( new ExpiringCode ( "" , new Timestamp ( System . currentTimeMillis ( ) + UaaResetPasswordService . PASSWORD_RESET_LIFETIME ) . currentTimeMillis ( ) + UaaResetPasswordService . PASSWORD_RESET_LIFETIME , "" , null ) , new Timestamp ( System . currentTimeMillis ( ) + UaaResetPasswordService . PASSWORD_RESET_LIFETIME ) . currentTimeMillis ( ) + UaaResetPasswordService . PASSWORD_RESET_LIFETIME , "" , null )
when ( var . generateCode ( eq ( JsonUtils . writeValueAsString ( var ) ) . writeValueAsString ( var ) , any ( Timestamp . class ) . class , eq ( null ) ) ( JsonUtils . writeValueAsString ( var ) ) . writeValueAsString ( var ) , any ( Timestamp . class ) . class , eq ( null ) ) . thenReturn ( new ExpiringCode ( "" , new Timestamp ( System . currentTimeMillis ( ) + UaaResetPasswordService . PASSWORD_RESET_LIFETIME ) . currentTimeMillis ( ) + UaaResetPasswordService . PASSWORD_RESET_LIFETIME , JsonUtils . writeValueAsString ( var ) , null ) , new Timestamp ( System . currentTimeMillis ( ) + UaaResetPasswordService . PASSWORD_RESET_LIFETIME ) . currentTimeMillis ( ) + UaaResetPasswordService . PASSWORD_RESET_LIFETIME , JsonUtils . writeValueAsString ( var ) , null )
when ( var . generateCode ( anyString , any ( Timestamp . class ) . class , eq ( null ) )  , any ( Timestamp . class ) . class , eq ( null ) ) . thenReturn ( new ExpiringCode ( "" , new Timestamp ( System . currentTimeMillis ( ) + UaaResetPasswordService . PASSWORD_RESET_LIFETIME ) . currentTimeMillis ( ) + UaaResetPasswordService . PASSWORD_RESET_LIFETIME , JsonUtils . writeValueAsString ( var ) , null ) , new Timestamp ( System . currentTimeMillis ( ) + UaaResetPasswordService . PASSWORD_RESET_LIFETIME ) . currentTimeMillis ( ) + UaaResetPasswordService . PASSWORD_RESET_LIFETIME , JsonUtils . writeValueAsString ( var ) , null )
verify ( var ) . generateCode ( eq ( JsonUtils . writeValueAsString ( var ) ) . writeValueAsString ( var ) , any ( Timestamp . class ) . class , eq ( null ) )
verify ( var ) . generateCode ( eq ( JsonUtils . writeValueAsString ( var ) ) . writeValueAsString ( var ) , any ( Timestamp . class ) . class , eq ( null ) )
when ( var . generateCode ( eq ( JsonUtils . writeValueAsString ( var ) ) . writeValueAsString ( var ) , any ( Timestamp . class ) . class , eq ( null ) ) ( JsonUtils . writeValueAsString ( var ) ) . writeValueAsString ( var ) , any ( Timestamp . class ) . class , eq ( null ) ) . thenReturn ( new ExpiringCode ( "" , new Timestamp ( System . currentTimeMillis ( ) + UaaResetPasswordService . PASSWORD_RESET_LIFETIME ) . currentTimeMillis ( ) + UaaResetPasswordService . PASSWORD_RESET_LIFETIME , JsonUtils . writeValueAsString ( var ) , null ) , new Timestamp ( System . currentTimeMillis ( ) + UaaResetPasswordService . PASSWORD_RESET_LIFETIME ) . currentTimeMillis ( ) + UaaResetPasswordService . PASSWORD_RESET_LIFETIME , JsonUtils . writeValueAsString ( var ) , null )
var += File . separator
var += File . separator
var . put ( var , var . getProperty ( var ) )
return var . get ( var )
TemporaryResources var = new TemporaryResources
var = var . toString ( "" ) . trim
var = CommandLine . parse ( var )
var . setAccessible ( true )
var . set ( var , var . getFirst ( var ) )
if ( var . getType ( ) == int . class )
var . setInt ( var , Integer . parseInt ( var . getFirst ( var ) ) . getFirst ( var ) )
if ( var . getType ( ) == double . class )
var . setDouble ( var , Double . parseDouble ( var . getFirst ( var ) ) . getFirst ( var ) )
var = var . getClass ( ) . getMethod ( var , String . class )
assertNull ( var . resolveEntity ( null , null , "" , var ) , null , "" , var )
if ( var . algorithm == Algorithm . none && var . length == 2 && var . length == 0 )
if ( var . algorithm == Algorithm . none && var . length == 2 && var . isEmpty ( ) )
if ( var == null || ! var . equalsIgnoreCase ( "" ) )
return ( Arrays . equals ( var , var ) )
var . setFeature ( "" , false )
final String var = var . getMessage ( ) . toLowerCase
if ( var . contains ( "" ) )
assertEquals ( 2 , var . getActionMessages ( ) . size )
final Path var = var . resolve ( var )
var = mConnection . makePost ( var , getRequestEntity , getRequestContentType , addPolicyKeyHeaderToRequest )
final String var = var . getRedirectAddress ( )
if ( var != null && var . startsWith ( "" ) )
var = var
final XmlPullParser var = XmlPullParserFactory . newInstance ( ) . newPullParser
String var = var . getIn ( ) . getHeader ( Exchange . OVERRULE_FILE_NAME , String . class )
if ( var != null && ! var . equals ( var ) )
if ( StringHelper . hasStartToken ( var , "" ) )
var . trace ( "" , Exchange . FILE_NAME , var )
template . sendBodyAndHeader ( "" , "" , Exchange . FILE_NAME , "" )
template . sendBodyAndHeader ( "" , "" , Exchange . FILE_NAME , "" )
template . sendBodyAndHeader ( var , var , Exchange . FILE_NAME , var )
String var
var = System . getProperty ( var )
this . var = var . getAsBoolean ( var , true )
Settings var = ImmutableSettings . builder ( ) . put ( var ) . put ( "" , newTempDirPath . toAbsolutePath . toString ) . put ( NodeEnvironment . SETTING_CUSTOM_DATA_PATH_ENABLED , true ) . putArray ( "" , tmpPaths ) . var
Settings var = ImmutableSettings . builder ( ) . put ( var ) . put ( "" , newTempDirPath . toAbsolutePath . toString ) . put ( NodeEnvironment . SETTING_CUSTOM_DATA_PATH_ENABLED , true ) . putArray ( "" , var ) . var
Node var = NodeBuilder . nodeBuilder ( ) . local ( true ) . data ( true ) . settings ( ImmutableSettings . builder ( ) . put ( ClusterName . SETTING , nodeName ) . SETTING , nodeName . put ( "" , nodeName ) , nodeName . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , 1 ) . SETTING_NUMBER_OF_SHARDS , 1 . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , 0 ) . SETTING_NUMBER_OF_REPLICAS , 0 . put ( EsExecutors . PROCESSORS , 1 ) . PROCESSORS , 1 . put ( "" , false ) , false . put ( "" , true ) , true ) . var
if ( var > var . length )
if ( var > var . length )
if ( var > var . length )
if ( var > var . length )
if ( var > var . length )
if ( var > var . length )
if ( ! var )
this . var = var
var . setHostKeyCheck ( var )
this . var = var
var . setHostKeyCheck ( var )
var . setHostKeyChecking ( var . isHostKeyChecking ( ) )
var . setHostKeyChecking ( var . isHostKeyChecking ( ) )
var . setHostKeyChecking ( var . isHostKeyChecking ( ) )
var . setHostKeyCheck ( false )
assertThat ( "" , var . hostKeyChecking , is ( false ) )
assertThat ( "" , var . hostKeyChecking , is ( false ) )
assertThat ( "" , var . hostKeyChecking , is ( false ) )
var = var [ var ] [ ( ] var + var ) >> 1
RecipientProviderUtilities . addUsers ( var , var . getListener ( ) , var , var , var , var , var )
RecipientProviderUtilities . addUsers ( var , var . getListener ( ) , var , var , var , var , var )
RecipientProviderUtilities . addUsers ( var , var . getListener ( ) , var , var , var , var , var )
RecipientProviderUtilities . addUsers ( var , var . getListener ( ) , var , var , var , var , var )
RecipientProviderUtilities . addUsers ( var , var . getListener ( ) , var , var , var , var , var )
addUserTriggeringTheBuild ( var , var , var , var , var , var . getListener ( ) , var )
addUpstreamCommittersTriggeringBuild ( var , var , var , var , var , var . getListener ( ) , var )
var . getLogger ( ) . print ( "" )
JdkSslContext var = SslUtils . createNettySslContext ( var , var . sniDomainsConfiguration ( ) . get ( "" ) )
DomainMappingBuilder < JdkSslContext > var = new DomainMappingBuilder ( var )
if ( ! "" . equals ( var ) )
String var = SslContextFactory . getEngine ( var , false , false ) . getSupportedCipherSuites
RestConnectorResource . SECURITY_DOMAIN . parseAndSetParameter ( var , var , var )
public RestService ( String var , ModelNode var )
var = NettyRestServer . createServer ( var . build ( ) , var . getValue ( ) )
final RestService var = new RestService ( getServiceName ( var ) , var )
if ( var . hasDefined ( ModelKeys . SECURITY_DOMAIN ) )
EndpointUtils . addSecurityDomainDependency ( var , RestConnectorResource . SECURITY_DOMAIN . resolveModelAttribute ( var , var ) , var . asString , var . getSecurityDomainContextInjector ( ) )
var . setCredentials ( new AuthScope ( var . get ( 0 ) . getHostname , var ) . get ( 0 ) . getHostname , var , var )
put ( securedClient ( var ) , keyAddressUnsecured ( var ) , HttpStatus . SC_UNAUTHORIZED )
delete ( securedClient ( var ) , keyAddress ( var ) , HttpStatus . SC_FORBIDDEN )
delete ( securedClient ( var ) , keyAddress ( var ) , HttpStatus . SC_OK )
delete ( securedClient ( var ) , keyAddress ( var ) , HttpStatus . SC_OK )
put ( securedClient ( var ) , keyAddress ( var ) , HttpStatus . SC_FORBIDDEN )
put ( securedClient ( var ) , keyAddressUnsecured ( var ) , HttpStatus . SC_UNAUTHORIZED )
URL var = var . getResource ( "" )
var . setKeyStoreURL ( var . getPath ( ) )
setupHandlers ( var , createRequestDispatcher ( false ) , RestEasyHttpRequestDecoder . Protocol . HTTP )
setupHandlers ( var , createRequestDispatcher ( true ) , RestEasyHttpRequestDecoder . Protocol . HTTPS )
setupHandlers ( var , createRequestDispatcher ( true ) , RestEasyHttpRequestDecoder . Protocol . HTTPS )
SniConfiguration var = new SniConfiguration ( SslUtils . createJdkSslContext ( var , var . sniDomainsConfiguration ( ) . get ( "" ) ) , var . sniDomainsConfiguration ( ) . get ( "" ) )
String var = HttpHeaders . getHost ( var , "" )
String var = var . getUri ( )
public SniConfiguration ( SSLContext var )
var = new DomainNameMappingBuilder ( createContext ( var ) )
var . add ( var , createContext ( var ) )
return new JdkSslContext ( var , false , Arrays . asList ( var ) , IdentityCipherSuiteFilter . INSTANCE , null , ClientAuth . OPTIONAL )
return findPropertiesToIgnore ( var , true )
public DeserializationConfig ( BaseSettings var , SubtypeResolver var , SimpleMixInResolver var , RootNameLookup var )
super ( var , var , var , var )
protected DeserializationConfig ( DeserializationConfig var , SimpleMixInResolver var , RootNameLookup var )
super ( var , var , var )
if ( var != null )
private Reference ( Reference var , String var , Object var )
var . append ( var )
var . append ( '.' )
var . append ( var . getSimpleName ( ) )
return new JsonMappingException ( var , var )
return new JsonMappingException ( var , var , var )
SimpleMixInResolver var = var . var . copy ( )
var = var
var = new SerializationConfig ( var . var , var , var )
var = new DeserializationConfig ( var . var , var , var )
var = new SerializationConfig ( var , var , var , var )
var = new DeserializationConfig ( var , var , var , var )
boolean var = false
var . disable ( JsonGenerator . Feature . AUTO_CLOSE_JSON_CONTENT )
SerializationConfig var = getSerializationConfig . withView ( var )
var = true
var . close ( )
if ( var != null )
var . disable ( JsonGenerator . Feature . AUTO_CLOSE_JSON_CONTENT )
var . close ( )
_initForMultiRead ( var )
_initForMultiRead ( var )
JsonToken var = _initForReading ( var )
var = var . var
var . disable ( JsonGenerator . Feature . AUTO_CLOSE_JSON_CONTENT )
var . close ( )
var . disable ( JsonGenerator . Feature . AUTO_CLOSE_JSON_CONTENT )
var . close ( )
public SerializationConfig ( BaseSettings var , SubtypeResolver var , SimpleMixInResolver var , RootNameLookup var )
super ( var , var , var , var )
protected SerializationConfig ( SerializationConfig var , SimpleMixInResolver var , RootNameLookup var )
super ( var , var , var )
return JsonMappingException . from ( this , var )
protected MapperConfigBase ( BaseSettings var , SubtypeResolver var , SimpleMixInResolver var , RootNameLookup var )
protected MapperConfigBase ( MapperConfigBase < CFG , T > , T var , SimpleMixInResolver var , RootNameLookup var )
if ( var . getBeanClass ( ) == JsonLocation . class )
if ( ( var == 1 ) && ! var )
JavaType var = var . resolveType ( var )
if ( var != var )
var = var . withType ( var )
int var = var . getParameterCount ( )
if ( var . isAssignableFrom ( var ) )
var = EnumDeserializer . deserializerForCreator ( var , var , var )
return _createEnumKeyDeserializer ( var , var )
Object var = var . getAnnotationIntrospector ( ) . findDeserializer ( var )
Object var = var . getAnnotationIntrospector ( ) . findKeyDeserializer ( var )
var = ( T ) var . refineDeserializationType ( var . getConfig ( ) , var , var )
if ( var instanceof AnnotatedMember )
var = findPropertyTypeDeserializer ( var . getConfig ( ) , var , ( AnnotatedMember ) var )
var = findTypeDeserializer ( var . getConfig ( ) , var )
return EnumResolver . constructUnsafeUsingMethod ( var , var )
public BeanDeserializer ( BeanDeserializerBase var , HashSet < String > var )
wrapInstantiationProblem ( var , var )
if ( _anySetter != null )
if ( _anySetter != null )
wrapInstantiationProblem ( var , var )
if ( _anySetter != null )
wrapInstantiationProblem ( var , var )
final protected HashSet < String > var
protected BeanDeserializerBase ( BeanDeserializerBuilder var , BeanDescription var , BeanPropertyMap var , Map < String , SettableBeanProperty > , SettableBeanProperty var , HashSet < String > var , boolean var , boolean var )
public BeanDeserializerBase ( BeanDeserializerBase var , HashSet < String > var )
var = var . var
var = findDeserializer ( var , var . getType ( ) , var )
var = var . withValueDeserializer ( var )
var = var . build ( )
JsonDeserializer < ? > var = var . findContextualValueDeserializer ( var , var )
String var = var . findPropertiesToIgnore ( var , false )
if ( var != null && var . length != 0 )
JsonFormat . Value var = var . findFormat ( ( Annotated ) var )
if ( var != null )
Object var = var . createUsingDelegate ( var , var . deserialize ( var , var ) , var )
if ( ! var . canCreateFromInt ( ) )
if ( var != null )
return var . createUsingDelegate ( var , var . deserialize ( var , var ) , var )
if ( var != null )
Object var = var . createUsingArrayDelegate ( var , var . deserialize ( var , var ) , var )
if ( var != null )
Object var = var . createUsingArrayDelegate ( var , var . deserialize ( var , var ) , var )
final protected boolean var
var = var . isEnabled ( MapperFeature . DEFAULT_VIEW_INCLUSION )
var = var . isEnabled ( MapperFeature . ACCEPT_CASE_INSENSITIVE_PROPERTIES )
boolean var = ! var
boolean var = ! var
if ( var . isAbstract ( ) && ! var . isPrimitive ( ) )
return new NoClassDefFoundDeserializer < Object > ( var )
var . setIgnoreUnknownProperties ( var . booleanValue ( ) )
if ( var == null )
final boolean var = ( var . isEnabled ( MapperFeature . USE_GETTERS_AS_SETTERS ) && var . isEnabled ( MapperFeature . AUTO_DETECT_GETTERS ) )
if ( var == null )
if ( ( var != null ) && ( isIgnorableType ( var . getConfig ( ) , var , var , var ) ) )
SimpleBeanPropertyDefinition var = SimpleBeanPropertyDefinition . construct ( var . getConfig ( ) , var )
boolean var = var . canOverrideAccessModifiers ( )
var . fixAccess ( var . isEnabled ( MapperFeature . OVERRIDE_PUBLIC_ACCESS_MODIFIERS ) . OVERRIDE_PUBLIC_ACCESS_MODIFIERS )
var = modifyTypeByAnnotation ( var , var , var )
var . fixAccess ( var . isEnabled ( MapperFeature . OVERRIDE_PUBLIC_ACCESS_MODIFIERS ) . OVERRIDE_PUBLIC_ACCESS_MODIFIERS )
JavaType var = resolveType ( var , var , var , var )
var = var . withType ( var )
JsonDeserializer < Object > var = findDeserializerFromAnnotation ( var , var )
var = modifyTypeByAnnotation ( var , var , var )
if ( var . canOverrideAccessModifiers ( ) )
var . fixAccess ( var . isEnabled ( MapperFeature . OVERRIDE_PUBLIC_ACCESS_MODIFIERS ) . OVERRIDE_PUBLIC_ACCESS_MODIFIERS )
JavaType var = var . getType ( )
JsonDeserializer < Object > var = findDeserializerFromAnnotation ( var , var )
public BuilderBasedDeserializer ( BeanDeserializerBuilder var , BeanDescription var , BeanPropertyMap var , Map < String , SettableBeanProperty > , SettableBeanProperty var , HashSet < String > var , boolean var , boolean var )
public BuilderBasedDeserializer ( BuilderBasedDeserializer var , HashSet < String > var )
wrapInstantiationProblem ( var , var )
wrapInstantiationProblem ( var , var )
if ( var . assignParameter ( var , var . deserialize ( var , var ) , var ) )
wrapAndThrow ( var , _beanType . getRawClass ( ) , var , var )
wrapInstantiationProblem ( var , var )
set ( var , deserialize ( var , var ) , var )
return setAndReturn ( var , deserialize ( var , var ) , var )
if ( _hasCustomValueHandler ( var ) )
boolean var = ! _hasCustomValueHandler ( var ) && var . isCachable ( )
if ( var == null || var . getShape ( ) != JsonFormat . Shape . OBJECT )
return ( var . getValueHandler ( ) != null ) || ( var . getTypeHandler ( ) != null )
final protected AnnotatedMethod var
public SettableAnyProperty ( BeanProperty var , AnnotatedMethod var , JavaType var , JsonDeserializer < Object > var , TypeDeserializer var )
var . getAnnotated ( ) . invoke ( var , var , var )
this ( new PropertyName ( var ) , var , var , var , var , PropertyMetadata . construct ( var , null , null , null ) , null , null , null )
return canCreateUsingDefault || canCreateUsingDelegate || canCreateFromObjectWith || canCreateFromString || canCreateFromInt || canCreateFromLong || canCreateFromDouble || canCreateFromBoolean
wrapInstantiationProblem ( var , var )
return _valueInstantiator . createUsingDelegate ( var , _delegateDeserializer . deserialize ( var , var ) , var )
wrapInstantiationProblem ( var , var )
return _valueInstantiator . createUsingDelegate ( var , _delegateDeserializer . deserialize ( var , var ) , var )
wrapInstantiationProblem ( var , var )
if ( var == Collection . class || var == List . class || var == ArrayList . class )
if ( var == Map . class || var == LinkedHashMap . class )
if ( var == var )
public Vanilla ( int var ) = var
return ArrayList . class . getName ( )
return LinkedHashMap . class . getName ( )
return HashMap . class . getName ( )
return Object . class . getName ( )
if ( ! var [ var ] . hasDefaultType )
SettableBeanProperty var = var [ var ] . getProperty
if ( var . findCreatorProperty ( var . getName ( ) ) == null )
protected PropertyBasedCreator ( ValueInstantiator var , SettableBeanProperty var )
return new PropertyBasedCreator ( var , var )
Object var = var . createFromObjectWith ( var , var . getParameters ( var ) )
var [ var ] = var
return new AtomicReferenceDeserializer ( var , var , var )
JsonFormat . Value var = var . getAnnotationIntrospector ( ) . findFormat ( ( Annotated ) var . getMember ( ) )
return new FactoryBasedDeserializer ( var , var , var )
if ( var . length ( ) == 0 )
if ( var . isEnabled ( DeserializationFeature . UNWRAP_SINGLE_VALUE_ARRAYS ) && var . isExpectedStartArrayToken ( ) )
var = var . deserialize ( var , var )
JsonToken var = var . getCurrentToken ( )
if ( var == JsonToken . VALUE_STRING || var == JsonToken . FIELD_NAME )
return var . deserializeTypedFromAny ( var , var )
if ( var . getCurrentToken ( ) == JsonToken . START_ARRAY && var . isEnabled ( DeserializationFeature . UNWRAP_SINGLE_VALUE_ARRAYS ) )
if ( var . nextToken ( ) != JsonToken . END_ARRAY )
T var = _deserialize ( var , var )
if ( var . getCurrentToken ( ) == JsonToken . VALUE_EMBEDDED_OBJECT )
return JsonLocation . class . getName ( )
if ( var == JsonParser . NumberType . BIG_DECIMAL || var . isEnabled ( DeserializationFeature . USE_BIG_DECIMAL_FOR_FLOATS ) )
protected MapDeserializer ( MapDeserializer var , KeyDeserializer var , JsonDeserializer < Object > var , TypeDeserializer var , HashSet < String > var )
HashSet < String > var = var
String var = var . findPropertiesToIgnore ( var , false )
if ( var != null )
return Double . valueOf ( var . getDoubleValue ( ) )
if ( var . getCurrentToken ( ) == JsonToken . VALUE_STRING && var == Byte . class )
if ( var != JsonToken . VALUE_STRING )
if ( var != JsonToken . VALUE_NULL )
if ( var != JsonToken . VALUE_NULL )
var = ( byte ) 0
return Boolean . valueOf ( _parseBooleanFromOther ( var , var ) , var )
if ( var . getNumberType ( ) == NumberType . LONG )
var = var . getText ( ) . trim
if ( var . isEnabled ( DeserializationFeature . UNWRAP_SINGLE_VALUE_ARRAYS ) )
if ( var == JsonToken . START_ARRAY && var . isEnabled ( DeserializationFeature . UNWRAP_SINGLE_VALUE_ARRAYS ) )
Object var = var . deserialize ( var . getParser ( ) , var )
var = EnumResolver . constructUnsafeUsingToString ( var . getEnumClass ( ) )
return var != null
return var != null
String var = String . format ( "" , getValueTypeDesc , var . getClass ( ) . getName , var . getMessage ( ) )
return JsonMappingException . from ( var . getParser ( ) , var , var )
if ( ( var == JsonToken . START_ARRAY ) && var . isEnabled ( DeserializationFeature . UNWRAP_SINGLE_VALUE_ARRAYS ) )
var . nextToken ( )
_badFormat ( var , var )
return var . getDoubleValue ( )
return Double . valueOf ( var . getDoubleValue ( ) )
return Double . valueOf ( var . getDoubleValue ( ) )
return Double . valueOf ( var . getDoubleValue ( ) )
Logger . getLogger ( "" ) . log ( Level . INFO , "" )
Class < ? > var = null
var = Class . forName ( "" )
if ( ( var != null ) && var . isAssignableFrom ( var ) )
if ( ( var != null ) && var . isAssignableFrom ( var ) )
JsonDeserializer < ? >
private AnnotatedClass ( JavaType var , Class < ? > var , TypeBindings var , List < JavaType > var , AnnotationIntrospector var , MixInResolver var , TypeFactory var , AnnotationMap var )
return new AnnotatedClass ( var , var , var . getBindings ( ) , ClassUtil . findSuperTypes ( var , null , false ) , null , false , var , ( MixInResolver ) var , var . getTypeFactory ( ) , null )
return new AnnotatedClass ( var , var , var . getBindings ( ) , ClassUtil . findSuperTypes ( var , null , false ) , null , false , var , var , var . getTypeFactory ( ) , null )
return var . annotations
return var . size > 0
ClassUtil . checkAndFixAccess ( getMember , var )
if ( isFactoryMethod ( var ) )
if ( 1 == var . getParameterCount ( ) )
if ( var == null || var . isEmpty ( ) )
List < PropertyName > var = new ArrayList < PropertyName > ( )
var . add ( var )
JsonFormat . Value var = var
var = Java7Support . class . newInstance ( )
if ( var . allowGetters ( ) )
if ( var . allowSetters ( ) )
return var . value ( )
JsonIgnoreProperties var = _findAnnotation ( var , JsonIgnoreProperties . class )
AnnotatedMember var = new VirtualAnnotatedMember ( var , var . getRawType ( ) , var , var . getRawClass ( ) )
AnnotatedMember var = new VirtualAnnotatedMember ( var , var . getRawType ( ) , var . getSimpleName ( ) , var . getRawClass ( ) )
Transient var = var . getAnnotation ( Transient . class )
AnnotatedWithParams var = var . getOwner ( )
if ( var != null )
var . removeNonVisible ( var )
var . put ( var . getName ( ) , var )
return _anyExplicits ( var ) || _anyExplicits ( var ) || _anyExplicits ( var ) || _anyExplicits ( var )
return PropertyMetadata . construct ( var . booleanValue ( ) , var , var , var )
public AsArrayTypeDeserializer ( JavaType var , TypeIdResolver var , String var , boolean var , Class < ? > var )
var = JsonParserSequence . createFlattened ( var . asParser ( var ) , var )
public AsExternalTypeDeserializer ( JavaType var , TypeIdResolver var , String var , boolean var , Class < ? > var )
public AsPropertyTypeDeserializer ( JavaType var , TypeIdResolver var , String var , boolean var , Class < ? > var )
public AsPropertyTypeDeserializer ( JavaType var , TypeIdResolver var , String var , boolean var , Class < ? > var , As var )
var = JsonParserSequence . createFlattened ( var . asParser ( var ) , var )
if ( var . getCurrentToken ( ) == JsonToken . START_ARRAY )
public AsWrapperTypeDeserializer ( JavaType var , TypeIdResolver var , String var , boolean var , Class < ? > var )
var = JsonParserSequence . createFlattened ( var . asParser ( var ) , var )
return _idFrom ( var , var . getClass ( ) )
return _idFrom ( var , var )
if ( var instanceof DeserializationConfig )
DeserializationConfig var = ( DeserializationConfig ) var
if ( var . startsWith ( "" ) . indexOf ( '$' ) >= 0 )
var = _typeFactory . constructCollectionType ( EnumSet . class , var ) . toCanonical
var = _typeFactory . constructMapType ( EnumMap . class , var , var ) . toCanonical
String var = var . substring ( 9 )
return new AsArrayTypeDeserializer ( var , var , var , var , var )
return new AsExternalTypeDeserializer ( var , var , var , var , var )
protected TypeDeserializerBase ( JavaType var , TypeIdResolver var , String var , boolean var , Class < ? > var )
var = var . forcedNarrowBy ( var )
var = _handleUnknownTypeId ( var , var , var , var )
var = ( ( TypeIdResolverBase ) var ) . getDescForKnownTypeIds
var . append ( '[' ) . append ( getClass . getName )
var . append ( "" ) . append ( var )
var . writeStartObject ( )
( ( BaseJsonNode ) var . getValue ( ) ) . serialize ( var , var )
( ( BaseJsonNode ) var . getValue ( ) ) . serialize ( var , var )
var . writeTypeSuffixForObject ( this , var )
JavaType var = var . containedType ( 0 )
JavaType var = var . containedType ( 1 )
MapSerializer var = MapSerializer . construct ( var . findPropertiesToIgnore ( var . getClassInfo ( ) , true ) . getClassInfo ( ) , true , var , var , var , var , var , var )
if ( var != null && var != var )
protected BeanSerializer ( BeanSerializerBase var , String var )
var = MapSerializer . construct ( null , var , var , var , null , null , null )
AnnotatedClass var = var . getClassInfo ( )
String var = var . findPropertiesToIgnore ( var , true )
if ( var != null && var . length > 0 )
HashSet < String > var = ArrayBuilders . arrayToSet ( var )
BeanPropertyWriter var = var . buildWriter ( var , var , var , var , var , var , var , var )
var = var . findPropertyInclusion ( var . getDefaultPropertyInclusion ( ) )
var = getPropertyDefaultValue ( var . getName ( ) , var , var )
protected BeanAsArraySerializer ( BeanSerializerBase var , String var )
var . writeStartObject ( )
var . setCurrentValue ( var )
protected UnwrappingBeanSerializer ( UnwrappingBeanSerializer var , String var )
JsonFormat . Value var = var . findPropertyFormat ( var . getConfig ( ) , _handledType )
JsonFormat . Value var = var . findPropertyFormat ( var . getConfig ( ) , _handledType )
if ( var == null )
var = _findCachedSerializer ( var , var . getClass ( ) )
protected BeanSerializerBase ( BeanSerializerBase var , String var )
if ( var . contains ( var . getName ( ) ) )
JsonFormat . Value var = var . findFormat ( ( Annotated ) var )
if ( var != null )
if ( var != var )
String var = null
var = var . findPropertiesToIgnore ( var , true )
if ( var != null && var . length != 0 )
var . writeStartObject ( )
if ( var != null )
SimpleDateFormat var = new SimpleDateFormat ( var , var )
Boolean var = _isShapeWrittenUsingIndex ( var , var , true )
JsonFormat . Value var = var . getAnnotationIntrospector ( ) . findFormat ( ( Annotated ) var . getMember ( ) )
Boolean var = _isShapeWrittenUsingIndex ( var . getType ( ) . getRawClass , var , false )
if ( var == Shape . STRING )
super ( var . getReturnType ( ) , false )
if ( var . isEnabled ( MapperFeature . USE_STATIC_TYPING ) || Modifier . isFinal ( var . getReturnType ( ) . getModifiers ) )
JavaType var = var . constructType ( var . getGenericReturnType ( ) )
Object var = var . invoke ( var )
var = var . invoke ( var )
var . writeTypePrefixForScalar ( var , var )
var . serialize ( var , var , var )
var . writeTypeSuffixForScalar ( var , var )
var . serializeWithType ( var , var , var , var )
var = var . getDeclaringClass ( )
if ( ( var != null ) && ( var . isEnum ( ) ) )
var . add ( String . valueOf ( var . invoke ( var ) ) . invoke ( var ) )
JsonInclude . Value var = var . findPropertyInclusion ( var . getConfig ( ) , Map . class )
HashSet < String > var = var
if ( var != null && var != null )
String var = var . findPropertiesToIgnore ( var , true )
if ( var != null )
Object var = this . var
var = _orderEntries ( var )
if ( var != null && var . contains ( var ) )
final HashSet < String > var = var
final HashSet < String > var = var
final HashSet < String > var = var
final HashSet < String > var = var
ObjectNode var = createSchemaNode ( "" , true )
if ( var . containsKey ( null ) )
if ( var != null )
final JsonSerializer < ? > var = new IntegerSerializer
var . put ( Integer . class . getName ( ) , var )
var . put ( Integer . TYPE . getName ( ) , var )
var . put ( Long . class . getName ( ) , LongSerializer . instance )
var . put ( Long . TYPE . getName ( ) , LongSerializer . instance )
var . put ( Double . class . getName ( ) , DoubleSerializer . instance )
var . put ( Double . TYPE . getName ( ) , DoubleSerializer . instance )
JsonFormat . Value var = var . getAnnotationIntrospector ( ) . findFormat ( var )
public IntegerSerializer
super ( Integer . class , JsonParser . NumberType . INT , "" )
public LongSerializer
super ( Long . class , JsonParser . NumberType . LONG , "" )
public DoubleSerializer
super ( Double . class , JsonParser . NumberType . DOUBLE , "" )
JsonFormat . Value var = var . findPropertyFormat ( var . getConfig ( ) , _handledType )
JsonFormat . Value var = var . findPropertyFormat ( var . getConfig ( ) , _handledType )
var . writeTypeSuffixForArray ( var , var )
var . writeTypePrefixForScalar ( var , var )
var . writeStartArray ( var )
var . writeEndArray ( )
var . writeStartArray ( var )
var . writeEndArray ( )
var . writeStartArray ( var )
var . writeEndArray ( )
var = var . toString ( )
PropertyFilter var = var . findPropertyFilter ( var , var )
return "" + _class . getName ( ) + "" + var + "" + var + ""
protected ReferenceType ( Class < ? > var , TypeBindings var , JavaType var , JavaType var , JavaType var , Object var , Object var , boolean var )
return new ReferenceType ( var , var , var , var , var , null , null , false )
return new ReferenceType ( var , TypeBindings . emptyBindings ( ) , null , null , var , null , null , false )
return new ReferenceType ( _class , _bindings , _superClass , _superInterfaces , var , _valueHandler , _typeHandler , _asStatic )
return new ReferenceType ( _class , _bindings , _superClass , _superInterfaces , var , _valueHandler , var , _asStatic )
return new ReferenceType ( _class , _bindings , _superClass , _superInterfaces , var . withTypeHandler ( var ) , _valueHandler , _typeHandler , _asStatic )
return new ReferenceType ( _class , _bindings , _superClass , _superInterfaces , var , var , _typeHandler , _asStatic )
return new ReferenceType ( _class , _bindings , _superClass , _superInterfaces , var , _valueHandler , _typeHandler , _asStatic )
return new ReferenceType ( _class , _bindings , _superClass , _superInterfaces , var . withStaticTyping ( ) , _valueHandler , _typeHandler , true )
return new ReferenceType ( var , _bindings , var , var , var , _valueHandler , _typeHandler , _asStatic )
return new ReferenceType ( var , _bindings , _superClass , _superInterfaces , var , _valueHandler , _typeHandler , _asStatic )
if ( var . getClass ( ) != getClass )
this ( var , var , null )
protected TypeFactory ( TypeParser var , TypeModifier var , ClassLoader var )
return new TypeFactory ( var , var , var )
var = _fromClass ( null , var , TypeBindings . emptyBindings ( ) )
var = _fromClass ( null , var , TypeBindings . emptyBindings ( ) )
int var = var . containedTypeCount ( )
if ( var == 1 )
if ( var == 2 )
List < JavaType > var = new ArrayList < JavaType > ( var )
return TypeBindings . emptyBindings ( )
var = null
if ( var != null )
JavaType var
var = new JavaType [ var ]
var = var . trim ( )
MyTokenizer var = new MyTokenizer ( var )
return var . _fromClass ( null , var , null )
return new IllegalArgumentException ( "" + var . getAllInput ( ) + "" + var . getRemainingInput ( ) + "" + var )
return new EnumResolver ( var , var , var )
return new EnumResolver ( var , var , var )
return new EnumResolver ( var , var , var )
Class < ? > var = var . getClass ( )
return var . writer ( )
return var . reader ( )
return var . readerFor ( var )
return serializeAsString ( var , var )
return asJSONObjectValueString ( var , var )
return readAndMapFromString ( var , var , var )
fail ( "" + Arrays . asList ( var ) + "" + var + "" )
JsonNodeFactory var = JsonNodeFactory . instance
return new MyContextualDeserializer ( var )
double var = ( ( Number ) var ) . longValue
double var = ( ( Number ) var ) . longValue
double var = ( ( Number ) var ) . doubleValue
double var = ( ( Number ) var ) . doubleValue
static Point
public Point
public Point ( int var , int var , int var )
Point var = var . convertValue ( var , Point . class )
final Point var = new Point ( 1 , 2 , 3 )
Point var = var . convertValue ( var , Point . class )
new ObjectMapper . readerFor ( Bean . class ) . withValueToUpdate ( var ) . readValue ( "" )
ObjectMapper var = new ObjectMapper
static Untyped989
ObjectReader var = var . readerFor ( Untyped989 . class )
if ( var . getCurrentToken ( ) == JsonToken . VALUE_STRING )
final Issues1327Bean var = new Issues1327Bean
String var = PropertyNamingStrategy . UPPER_CAMEL_CASE . nameForField ( null , null , "" )
var = PropertyNamingStrategy . UPPER_CAMEL_CASE . nameForField ( null , null , "" )
var = PropertyNamingStrategy . UPPER_CAMEL_CASE . nameForField ( null , null , "" )
var = PropertyNamingStrategy . UPPER_CAMEL_CASE . nameForField ( null , null , "" )
List < Parent > var = ( List < Parent > ) var . getResult ( )
assertEquals ( "" , serializeAsString ( var , new JSONPObject ( "" , "" ) , "" ) , new JSONPObject ( "" , "" ) , "" )
assertEquals ( "" , serializeAsString ( var , new JSONPObject ( "" , Integer . valueOf ( 123 ) ) , Integer . valueOf ( 123 ) ) , new JSONPObject ( "" , Integer . valueOf ( 123 ) ) , Integer . valueOf ( 123 ) )
assertEquals ( "" , serializeAsString ( var , new JSONPObject ( "" , null ) , null ) , new JSONPObject ( "" , null ) , null )
assertEquals ( "" , serializeAsString ( var , new JSONPObject ( "" , new Impl ( "" , "" ) , "" ) , new Impl ( "" , "" ) , "" ) , new JSONPObject ( "" , new Impl ( "" , "" ) , "" ) , new Impl ( "" , "" ) , "" )
assertEquals ( "" , serializeAsString ( var , new JSONPObject ( "" , var , var ) , var , var ) , new JSONPObject ( "" , var , var ) , var , var )
ObjectReader var = var . readerFor ( POJO . class ) . at ( "" )
ObjectMapper var = new ObjectMapper
var . enable ( SerializationFeature . WRITE_ENUMS_USING_TO_STRING )
var = var . writeValueAsString ( var )
assertEquals ( "" , var . writeValueAsString ( PoAsArray . A ) . A )
assertEquals ( "" , var . writeValueAsString ( new PoOverrideAsNumber ) PoOverrideAsNumber )
EnumSetWrapper var = var . readValue ( var , EnumSetWrapper . class )
static Pojo
public Pojo
public Pojo ( String var , int var , int var , boolean var )
var = new PojoValue ( var , var , var , var )
public PojoValue
public PojoValue ( String var , int var , int var , boolean var )
Pojo var = var . readValue ( var , Pojo . class )
String var = var . writeValueAsString ( new Pojo ( "" , 42 , 13 , true ) , 42 , 13 , true )
if ( ! var . getTypeDesc ( ) . equals ( var . getTypeDesc ( ) ) )
JsonParserSequence var = JsonParserSequence . createFlattened ( var . asParser ( ) , var )
JsonParserSequence var = JsonParserSequence . createFlattened ( var . asParser ( ) , var . asParser ( ) )
JsonParserSequence var = JsonParserSequence . createFlattened ( var . asParser ( ) , var . asParser ( ) )
JsonParserSequence var = JsonParserSequence . createFlattened ( var , var )
assertEquals ( "" , serializeAsString ( new ImplicitBean ) ImplicitBean )
MyWrapper var = var . readValue ( "" , MyWrapper . class )
var = var . replace ( "" , "" )
String var = createTemplate ( var , var )
return new ModelAndView ( new SpelView ( var ) , var )
var = var . replace ( "" , createScopes ( var , var ) , var ) . replace ( "" , "" )
var = var . replace ( "" , "" ) . replace ( "" , DENIAL )
var = var . replace ( "" , CSRF )
var = var . replace ( "" , "" )
var . put ( "" , var )
return new ModelAndView ( new SpelView ( var ) , var )
if ( var . lastIndexOf ( '/' ) > 0 )
var = "" + var . substring ( 1 ) . replace ( '/' , '#' )
var = ExpandWar . expand ( var , var , var )
ExpandWar . delete ( var )
if ( ( var != - 1 ) && ( var != 0 ) && ( var != null ) )
return var . delete ( )
deleteDir ( var )
return var . delete ( var )
var = doKerberosAuth ( var )
var . addHeader ( var , var + "" + var )
var = var . var
var . setNamespace ( var )
assertEquals ( null , var . getMethod ( ) )
assertEquals ( null , var . getMethod ( ) )
Map var = new HashMap
assertEquals ( null , var . getMethod ( ) )
ActionMapping var = new ActionMapping ( "" , "" , null , new HashMap )
Map var = new HashMap
Map var = new HashMap
Map var = new HashMap
Map var = new HashMap
Map var = new HashMap
Map var = new HashMap
Map var = new HashMap
Map var = new HashMap
Map var = new HashMap
Map var = new HashMap
Map var = new HashMap
Map var = new HashMap
Map var = new HashMap
Map var = new HashMap
assertTrue ( "" + var , "" . equals ( var ) )
assertTrue ( "" + var , "" . equals ( var ) )
assertTrue ( "" + var , "" . equals ( var ) )
assertTrue ( "" + var , "" . equals ( var ) )
assertTrue ( "" + var , "" . equals ( var ) )
assertTrue ( "" + var , "" . equals ( var ) )
assertEquals ( Arrays . asList ( "" ) , var . extensions )
assertEquals ( Arrays . asList ( "" ) , var . extensions )
var . setNamespace ( var )
if ( var . validate ( var , var , var ) )
if ( var != null )
String var = parseUsername ( var )
register ( var , var , var , Constants . DIGEST_METHOD , var , null )
return ( true )
setAuthenticateHeader ( var , var , var , var , var . isNonceStale ( ) )
return ( false )
return var + "" + var . encode ( var )
if ( size > getCnonceCacheSize )
if ( ! this . var . equals ( var ) )
if ( var . length ( ) != 8 )
if ( var == null )
var = new NonceInfo
if ( var <= var . getCount ( ) )
var . setCount ( var )
return System . getProperty ( var )
System . clearProperty ( InvokerTransformer . DESERIALIZE )
int var = new int [ 257 ]
var = getEclass
var = var . nextSetBit ( var )
assertFalse ( var . blockSort ( var , var . length - 1 ) , var . length - 1 )
assertEquals ( 0 , var . origPtr )
return Ognl . getValue ( compile ( var ) , var , var , var )
return Ognl . parseExpression ( var )
Object var = compile ( var . getName ( ) )
if ( var . isSecure ( ) )
var . setSecure ( true )
return findPropertiesToIgnore ( var , true )
public DeserializationConfig ( BaseSettings var , SubtypeResolver var , SimpleMixInResolver var , RootNameLookup var )
super ( var , var , var , var )
protected DeserializationConfig ( DeserializationConfig var , SimpleMixInResolver var , RootNameLookup var )
super ( var , var , var )
if ( var != null )
private Reference ( Reference var , String var , Object var )
var . append ( var )
var . append ( '.' )
var . append ( var . getSimpleName ( ) )
return new JsonMappingException ( var , var )
return new JsonMappingException ( var , var , var )
SimpleMixInResolver var = var . var . copy ( )
var = var
var = new SerializationConfig ( var . var , var , var )
var = new DeserializationConfig ( var . var , var , var )
var = new SerializationConfig ( var , var , var , var )
var = new DeserializationConfig ( var , var , var , var )
boolean var = false
var . disable ( JsonGenerator . Feature . AUTO_CLOSE_JSON_CONTENT )
SerializationConfig var = getSerializationConfig . withView ( var )
var = true
var . close ( )
if ( var != null )
var . disable ( JsonGenerator . Feature . AUTO_CLOSE_JSON_CONTENT )
var . close ( )
_initForMultiRead ( var )
_initForMultiRead ( var )
JsonToken var = _initForReading ( var )
var = var . var
var . disable ( JsonGenerator . Feature . AUTO_CLOSE_JSON_CONTENT )
var . close ( )
var . disable ( JsonGenerator . Feature . AUTO_CLOSE_JSON_CONTENT )
var . close ( )
public SerializationConfig ( BaseSettings var , SubtypeResolver var , SimpleMixInResolver var , RootNameLookup var )
super ( var , var , var , var )
protected SerializationConfig ( SerializationConfig var , SimpleMixInResolver var , RootNameLookup var )
super ( var , var , var )
return JsonMappingException . from ( this , var )
protected MapperConfigBase ( BaseSettings var , SubtypeResolver var , SimpleMixInResolver var , RootNameLookup var )
protected MapperConfigBase ( MapperConfigBase < CFG , T > , T var , SimpleMixInResolver var , RootNameLookup var )
final boolean var = ClassUtil . var ( var . getBeanClass ( ) )
if ( ( var == 1 ) && ! var )
JavaType var = var . resolveType ( var )
if ( var != var )
var = var . withType ( var )
int var = var . getParameterCount ( )
if ( var . isAssignableFrom ( var ) )
var = EnumDeserializer . deserializerForCreator ( var , var , var )
return _createEnumKeyDeserializer ( var , var )
Object var = var . getAnnotationIntrospector ( ) . findDeserializer ( var )
Object var = var . getAnnotationIntrospector ( ) . findKeyDeserializer ( var )
var = ( T ) var . refineDeserializationType ( var . getConfig ( ) , var , var )
if ( var instanceof AnnotatedMember )
var = findPropertyTypeDeserializer ( var . getConfig ( ) , var , ( AnnotatedMember ) var )
var = findTypeDeserializer ( var . getConfig ( ) , var )
return EnumResolver . constructUnsafeUsingMethod ( var , var )
public BeanDeserializer ( BeanDeserializerBase var , HashSet < String > var )
wrapInstantiationProblem ( var , var )
if ( _anySetter != null )
if ( _anySetter != null )
wrapInstantiationProblem ( var , var )
if ( _anySetter != null )
wrapInstantiationProblem ( var , var )
final protected HashSet < String > var
protected BeanDeserializerBase ( BeanDeserializerBuilder var , BeanDescription var , BeanPropertyMap var , Map < String , SettableBeanProperty > , SettableBeanProperty var , HashSet < String > var , boolean var , boolean var )
public BeanDeserializerBase ( BeanDeserializerBase var , HashSet < String > var )
var = var . var
var = findDeserializer ( var , var . getType ( ) , var )
var = var . withValueDeserializer ( var )
var = var . build ( )
JsonDeserializer < ? > var = var . findContextualValueDeserializer ( var , var )
String var = var . findPropertiesToIgnore ( var , false )
if ( var != null && var . length != 0 )
JsonFormat . Value var = var . findFormat ( ( Annotated ) var )
if ( var != null )
Object var = var . createUsingDelegate ( var , var . deserialize ( var , var ) , var )
if ( ! var . canCreateFromInt ( ) )
if ( var != null )
return var . createUsingDelegate ( var , var . deserialize ( var , var ) , var )
if ( var != null )
Object var = var . createUsingArrayDelegate ( var , var . deserialize ( var , var ) , var )
if ( var != null )
Object var = var . createUsingArrayDelegate ( var , var . deserialize ( var , var ) , var )
final protected boolean var
var = var . isEnabled ( MapperFeature . DEFAULT_VIEW_INCLUSION )
var = var . isEnabled ( MapperFeature . ACCEPT_CASE_INSENSITIVE_PROPERTIES )
boolean var = ! var
boolean var = ! var
if ( var . isAbstract ( ) && ! var . isPrimitive ( ) )
return new NoClassDefFoundDeserializer < Object > ( var )
Boolean var = var . findIgnoreUnknownProperties ( var . getClassInfo ( ) )
var . setIgnoreUnknownProperties ( var . booleanValue ( ) )
if ( var == null )
final boolean var = ( var . isEnabled ( MapperFeature . USE_GETTERS_AS_SETTERS ) && var . isEnabled ( MapperFeature . AUTO_DETECT_GETTERS ) )
if ( var == null )
if ( ( var != null ) && ( isIgnorableType ( var . getConfig ( ) , var , var , var ) ) )
SimpleBeanPropertyDefinition var = SimpleBeanPropertyDefinition . construct ( var . getConfig ( ) , var )
boolean var = var . canOverrideAccessModifiers ( )
var . fixAccess ( var . isEnabled ( MapperFeature . OVERRIDE_PUBLIC_ACCESS_MODIFIERS ) . OVERRIDE_PUBLIC_ACCESS_MODIFIERS )
var = modifyTypeByAnnotation ( var , var , var )
var . fixAccess ( var . isEnabled ( MapperFeature . OVERRIDE_PUBLIC_ACCESS_MODIFIERS ) . OVERRIDE_PUBLIC_ACCESS_MODIFIERS )
JavaType var = resolveType ( var , var , var , var )
var = var . withType ( var )
var = modifyTypeByAnnotation ( var , var , var )
if ( var . canOverrideAccessModifiers ( ) )
var . fixAccess ( var . isEnabled ( MapperFeature . OVERRIDE_PUBLIC_ACCESS_MODIFIERS ) . OVERRIDE_PUBLIC_ACCESS_MODIFIERS )
JavaType var = var . getType ( )
JsonDeserializer < Object > var = findDeserializerFromAnnotation ( var , var )
Class < ? > var = var . getRawClass ( )
public BuilderBasedDeserializer ( BeanDeserializerBuilder var , BeanDescription var , BeanPropertyMap var , Map < String , SettableBeanProperty > , SettableBeanProperty var , HashSet < String > var , boolean var , boolean var )
public BuilderBasedDeserializer ( BuilderBasedDeserializer var , HashSet < String > var )
wrapInstantiationProblem ( var , var )
wrapInstantiationProblem ( var , var )
if ( var . assignParameter ( var , var . deserialize ( var , var ) , var ) )
wrapAndThrow ( var , _beanType . getRawClass ( ) , var , var )
wrapInstantiationProblem ( var , var )
set ( var , deserialize ( var , var ) , var )
return setAndReturn ( var , deserialize ( var , var ) , var )
if ( var == null || var . getShape ( ) != JsonFormat . Shape . OBJECT )
final protected AnnotatedMethod var
public SettableAnyProperty ( BeanProperty var , AnnotatedMethod var , JavaType var , JsonDeserializer < Object > var , TypeDeserializer var )
var . getAnnotated ( ) . invoke ( var , var , var )
this ( new PropertyName ( var ) , var , var , var , var , PropertyMetadata . construct ( var , null , null , null ) , null , null , null )
wrapInstantiationProblem ( var , var )
return _valueInstantiator . createUsingDelegate ( var , _delegateDeserializer . deserialize ( var , var ) , var )
wrapInstantiationProblem ( var , var )
return _valueInstantiator . createUsingDelegate ( var , _delegateDeserializer . deserialize ( var , var ) , var )
wrapInstantiationProblem ( var , var )
if ( var == Collection . class || var == List . class || var == ArrayList . class )
if ( var == Map . class || var == LinkedHashMap . class )
if ( var == var )
public Vanilla ( int var ) = var
return ArrayList . class . getName ( )
return LinkedHashMap . class . getName ( )
return HashMap . class . getName ( )
return Object . class . getName ( )
if ( ! var [ var ] . hasDefaultType )
SettableBeanProperty var = var [ var ] . getProperty
if ( var . findCreatorProperty ( var . getName ( ) ) == null )
protected PropertyBasedCreator ( ValueInstantiator var , SettableBeanProperty var )
return new PropertyBasedCreator ( var , var )
Object var = var . createFromObjectWith ( var , var . getParameters ( var ) )
var [ var ] = var
return new AtomicReferenceDeserializer ( var , var , var )
JsonFormat . Value var = var . getAnnotationIntrospector ( ) . findFormat ( ( Annotated ) var . getMember ( ) )
return new FactoryBasedDeserializer ( var , var , var )
if ( var . length ( ) == 0 )
if ( var . isEnabled ( DeserializationFeature . UNWRAP_SINGLE_VALUE_ARRAYS ) && var . isExpectedStartArrayToken ( ) )
var = var . deserialize ( var , var )
JsonToken var = var . getCurrentToken ( )
if ( var == JsonToken . VALUE_STRING || var == JsonToken . FIELD_NAME )
return var . deserializeTypedFromAny ( var , var )
if ( var . getCurrentToken ( ) == JsonToken . START_ARRAY && var . isEnabled ( DeserializationFeature . UNWRAP_SINGLE_VALUE_ARRAYS ) )
if ( var . nextToken ( ) != JsonToken . END_ARRAY )
if ( var . getCurrentToken ( ) == JsonToken . VALUE_EMBEDDED_OBJECT )
return JsonLocation . class . getName ( )
if ( var == JsonParser . NumberType . BIG_DECIMAL || var . isEnabled ( DeserializationFeature . USE_BIG_DECIMAL_FOR_FLOATS ) )
protected MapDeserializer ( MapDeserializer var , KeyDeserializer var , JsonDeserializer < Object > var , TypeDeserializer var , HashSet < String > var )
HashSet < String > var = var
String var = var . findPropertiesToIgnore ( var , false )
if ( var != null )
return Double . valueOf ( var . getDoubleValue ( ) )
if ( var . getCurrentToken ( ) == JsonToken . VALUE_STRING && var == Byte . class )
if ( var != JsonToken . VALUE_STRING )
if ( var != JsonToken . VALUE_NULL )
if ( var != JsonToken . VALUE_NULL )
var = ( byte ) 0
return Boolean . valueOf ( _parseBooleanFromOther ( var , var ) , var )
if ( var . getNumberType ( ) == NumberType . LONG )
var = var . getText ( ) . trim
if ( var . isEnabled ( DeserializationFeature . UNWRAP_SINGLE_VALUE_ARRAYS ) )
if ( var == JsonToken . START_ARRAY && var . isEnabled ( DeserializationFeature . UNWRAP_SINGLE_VALUE_ARRAYS ) )
Object var = var . deserialize ( var . getParser ( ) , var )
var = EnumResolver . constructUnsafeUsingToString ( var . getEnumClass ( ) )
String var = String . format ( "" , getValueTypeDesc , var . getClass ( ) . getName , var . getMessage ( ) )
return JsonMappingException . from ( var . getParser ( ) , var , var )
if ( ( var == JsonToken . START_ARRAY ) && var . isEnabled ( DeserializationFeature . UNWRAP_SINGLE_VALUE_ARRAYS ) )
var . nextToken ( )
_badFormat ( var , var )
return var . getDoubleValue ( )
return Double . valueOf ( var . getDoubleValue ( ) )
return Double . valueOf ( var . getDoubleValue ( ) )
return Double . valueOf ( var . getDoubleValue ( ) )
Class < ? > var = null
var = Class . forName ( "" )
if ( ( var != null ) && var . isAssignableFrom ( var ) )
if ( ( var != null ) && var . isAssignableFrom ( var ) )
JsonDeserializer < ? >
private AnnotatedClass ( JavaType var , Class < ? > var , TypeBindings var , List < JavaType > var , AnnotationIntrospector var , MixInResolver var , TypeFactory var , AnnotationMap var )
return new AnnotatedClass ( var , var , var . getBindings ( ) , ClassUtil . findSuperTypes ( var , null , false ) , null , false , var , ( MixInResolver ) var , var . getTypeFactory ( ) , null )
return new AnnotatedClass ( var , var , var . getBindings ( ) , ClassUtil . findSuperTypes ( var , null , false ) , null , false , var , var , var . getTypeFactory ( ) , null )
return var . annotations
return var . size > 0
ClassUtil . checkAndFixAccess ( getMember , var )
if ( isFactoryMethod ( var ) )
if ( 1 == var . getParameterCount ( ) )
if ( var == null || var . isEmpty ( ) )
List < PropertyName > var = new ArrayList < PropertyName > ( )
var . add ( var )
JsonFormat . Value var = var
var = Java7Support . class . newInstance ( )
if ( var . allowGetters ( ) )
if ( var . allowSetters ( ) )
return var . value ( )
JsonIgnoreProperties var = _findAnnotation ( var , JsonIgnoreProperties . class )
AnnotatedMember var = new VirtualAnnotatedMember ( var , var . getRawType ( ) , var , var . getRawClass ( ) )
AnnotatedMember var = new VirtualAnnotatedMember ( var , var . getRawType ( ) , var . getSimpleName ( ) , var . getRawClass ( ) )
Transient var = var . getAnnotation ( Transient . class )
AnnotatedWithParams var = var . getOwner ( )
if ( var != null )
var . removeNonVisible ( var )
var . put ( var . getName ( ) , var )
return _anyExplicits ( var ) || _anyExplicits ( var ) || _anyExplicits ( var ) || _anyExplicits ( var )
return PropertyMetadata . construct ( var . booleanValue ( ) , var , var , var )
public AsArrayTypeDeserializer ( JavaType var , TypeIdResolver var , String var , boolean var , Class < ? > var )
var = JsonParserSequence . createFlattened ( var . asParser ( var ) , var )
public AsExternalTypeDeserializer ( JavaType var , TypeIdResolver var , String var , boolean var , Class < ? > var )
public AsPropertyTypeDeserializer ( JavaType var , TypeIdResolver var , String var , boolean var , Class < ? > var )
public AsPropertyTypeDeserializer ( JavaType var , TypeIdResolver var , String var , boolean var , Class < ? > var , As var )
var = JsonParserSequence . createFlattened ( var . asParser ( var ) , var )
if ( var . getCurrentToken ( ) == JsonToken . START_ARRAY )
public AsWrapperTypeDeserializer ( JavaType var , TypeIdResolver var , String var , boolean var , Class < ? > var )
var = JsonParserSequence . createFlattened ( var . asParser ( var ) , var )
return _idFrom ( var , var . getClass ( ) )
return _idFrom ( var , var )
JavaType var = var . constructFromCanonical ( var )
if ( var instanceof DeserializationConfig )
DeserializationConfig var = ( DeserializationConfig ) var
var = _typeFactory . constructCollectionType ( EnumSet . class , var ) . toCanonical
var = _typeFactory . constructMapType ( EnumMap . class , var , var ) . toCanonical
return new AsArrayTypeDeserializer ( var , var , var , var , var )
return new AsExternalTypeDeserializer ( var , var , var , var , var )
protected TypeDeserializerBase ( JavaType var , TypeIdResolver var , String var , boolean var , Class < ? > var )
var = var . forcedNarrowBy ( var )
var = _handleUnknownTypeId ( var , var , var , var )
var = ( ( TypeIdResolverBase ) var ) . getDescForKnownTypeIds
var . append ( '[' ) . append ( getClass . getName )
var . append ( "" ) . append ( var )
var . writeStartObject ( )
( ( BaseJsonNode ) var . getValue ( ) ) . serialize ( var , var )
( ( BaseJsonNode ) var . getValue ( ) ) . serialize ( var , var )
var . writeTypeSuffixForObject ( this , var )
JavaType var = var . containedType ( 0 )
JavaType var = var . containedType ( 1 )
MapSerializer var = MapSerializer . construct ( var . findPropertiesToIgnore ( var . getClassInfo ( ) , true ) . getClassInfo ( ) , true , var , var , var , var , var , var )
if ( var != null && var != var )
protected BeanSerializer ( BeanSerializerBase var , String var )
var = MapSerializer . construct ( null , var , var , var , null , null , null )
AnnotatedClass var = var . getClassInfo ( )
String var = var . findPropertiesToIgnore ( var , true )
if ( var != null && var . length > 0 )
HashSet < String > var = ArrayBuilders . arrayToSet ( var )
BeanPropertyWriter var = var . buildWriter ( var , var , var , var , var , var , var , var )
var = var . findPropertyInclusion ( var . getDefaultPropertyInclusion ( ) )
var = getPropertyDefaultValue ( var . getName ( ) , var , var )
protected BeanAsArraySerializer ( BeanSerializerBase var , String var )
protected UnwrappingBeanSerializer ( UnwrappingBeanSerializer var , String var )
JsonFormat . Value var = var . findPropertyFormat ( var . getConfig ( ) , _handledType )
JsonFormat . Value var = var . findPropertyFormat ( var . getConfig ( ) , _handledType )
if ( var == null )
var = _findCachedSerializer ( var , var . getClass ( ) )
protected BeanSerializerBase ( BeanSerializerBase var , String var )
if ( var . contains ( var . getName ( ) ) )
JsonFormat . Value var = var . findFormat ( ( Annotated ) var )
if ( var != null )
if ( var != var )
String var = null
var = var . findPropertiesToIgnore ( var , true )
if ( var != null && var . length != 0 )
var . writeStartObject ( )
JsonFormat . Value var = var . getAnnotationIntrospector ( ) . findFormat ( ( Annotated ) var . getMember ( ) )
Boolean var = _isShapeWrittenUsingIndex ( var , var , true )
JsonFormat . Value var = var . getAnnotationIntrospector ( ) . findFormat ( ( Annotated ) var . getMember ( ) )
Boolean var = _isShapeWrittenUsingIndex ( var . getType ( ) . getRawClass , var , false )
if ( var == Shape . STRING )
super ( var . getReturnType ( ) , false )
if ( var . isEnabled ( MapperFeature . USE_STATIC_TYPING ) || Modifier . isFinal ( var . getReturnType ( ) . getModifiers ) )
JavaType var = var . constructType ( var . getGenericReturnType ( ) )
Object var = var . invoke ( var )
var = var . invoke ( var )
var . writeTypePrefixForScalar ( var , var )
var . serialize ( var , var , var )
var . writeTypeSuffixForScalar ( var , var )
var . serializeWithType ( var , var , var , var )
var = var . getDeclaringClass ( )
if ( ( var != null ) && ( var . isEnum ( ) ) )
var . add ( String . valueOf ( var . invoke ( var ) ) . invoke ( var ) )
JsonInclude . Value var = var . findPropertyInclusion ( var . getConfig ( ) , Map . class )
HashSet < String > var = var
if ( var != null && var != null )
String var = var . findPropertiesToIgnore ( var , true )
if ( var != null )
Object var = this . var
var = _orderEntries ( var )
if ( var != null && var . contains ( var ) )
final HashSet < String > var = var
final HashSet < String > var = var
final HashSet < String > var = var
final HashSet < String > var = var
ObjectNode var = createSchemaNode ( "" , true )
if ( var . containsKey ( null ) )
if ( var != null )
final JsonSerializer < ? > var = new IntegerSerializer
var . put ( Integer . class . getName ( ) , var )
var . put ( Integer . TYPE . getName ( ) , var )
var . put ( Long . class . getName ( ) , LongSerializer . instance )
var . put ( Long . TYPE . getName ( ) , LongSerializer . instance )
var . put ( Double . class . getName ( ) , DoubleSerializer . instance )
var . put ( Double . TYPE . getName ( ) , DoubleSerializer . instance )
JsonFormat . Value var = var . getAnnotationIntrospector ( ) . findFormat ( var )
public IntegerSerializer
super ( Integer . class , JsonParser . NumberType . INT , "" )
public LongSerializer
super ( Long . class , JsonParser . NumberType . LONG , "" )
public DoubleSerializer
super ( Double . class , JsonParser . NumberType . DOUBLE , "" )
JsonFormat . Value var = var . findPropertyFormat ( var . getConfig ( ) , _handledType )
JsonFormat . Value var = var . findPropertyFormat ( var . getConfig ( ) , _handledType )
var . writeTypeSuffixForArray ( var , var )
var . writeTypePrefixForScalar ( var , var )
var . writeStartArray ( var )
var . writeEndArray ( )
var . writeStartArray ( var )
var . writeEndArray ( )
var . writeStartArray ( var )
var . writeEndArray ( )
var = var . toString ( )
PropertyFilter var = var . findPropertyFilter ( var , var )
return "" + _class . getName ( ) + "" + var + "" + var + ""
protected ReferenceType ( Class < ? > var , TypeBindings var , JavaType var , JavaType var , JavaType var , Object var , Object var , boolean var )
return new ReferenceType ( var , var , var , var , var , null , null , false )
return new ReferenceType ( var , TypeBindings . emptyBindings ( ) , null , null , var , null , null , false )
return new ReferenceType ( _class , _bindings , _superClass , _superInterfaces , var , _valueHandler , _typeHandler , _asStatic )
return new ReferenceType ( _class , _bindings , _superClass , _superInterfaces , var , _valueHandler , var , _asStatic )
return new ReferenceType ( _class , _bindings , _superClass , _superInterfaces , var . withTypeHandler ( var ) , _valueHandler , _typeHandler , _asStatic )
return new ReferenceType ( _class , _bindings , _superClass , _superInterfaces , var , var , _typeHandler , _asStatic )
return new ReferenceType ( _class , _bindings , _superClass , _superInterfaces , var , _valueHandler , _typeHandler , _asStatic )
return new ReferenceType ( _class , _bindings , _superClass , _superInterfaces , var . withStaticTyping ( ) , _valueHandler , _typeHandler , true )
return new ReferenceType ( var , _bindings , var , var , var , _valueHandler , _typeHandler , _asStatic )
return new ReferenceType ( var , _bindings , _superClass , _superInterfaces , var , _valueHandler , _typeHandler , _asStatic )
return ( ( ResolvedRecursiveType ) var ) . getSelfReferencedType . equals ( getSelfReferencedType )
this ( var , var , null )
protected TypeFactory ( TypeParser var , TypeModifier var , ClassLoader var )
return new TypeFactory ( var , var , var )
var = null
if ( var != null )
return new EnumResolver ( var , var , var )
return new EnumResolver ( var , var , var )
return new EnumResolver ( var , var , var )
return var . writer ( )
return var . reader ( )
return var . readerFor ( var )
JsonNodeFactory var = JsonNodeFactory . instance
return new MyContextualDeserializer ( var )
double var = ( ( Number ) var ) . longValue
double var = ( ( Number ) var ) . longValue
double var = ( ( Number ) var ) . doubleValue
double var = ( ( Number ) var ) . doubleValue
static Point
public Point
public Point ( int var , int var , int var )
Point var = var . convertValue ( var , Point . class )
final Point var = new Point ( 1 , 2 , 3 )
Point var = var . convertValue ( var , Point . class )
new ObjectMapper . readerFor ( Bean . class ) . withValueToUpdate ( var ) . readValue ( "" )
ObjectMapper var = new ObjectMapper
static Untyped989
ObjectReader var = var . readerFor ( Untyped989 . class )
if ( var . getCurrentToken ( ) == JsonToken . VALUE_STRING )
final Issues1327Bean var = new Issues1327Bean
List < Parent > var = ( List < Parent > ) var . getResult ( )
assertEquals ( "" , serializeAsString ( var , new JSONPObject ( "" , "" ) , "" ) , new JSONPObject ( "" , "" ) , "" )
assertEquals ( "" , serializeAsString ( var , new JSONPObject ( "" , Integer . valueOf ( 123 ) ) , Integer . valueOf ( 123 ) ) , new JSONPObject ( "" , Integer . valueOf ( 123 ) ) , Integer . valueOf ( 123 ) )
assertEquals ( "" , serializeAsString ( var , new JSONPObject ( "" , null ) , null ) , new JSONPObject ( "" , null ) , null )
assertEquals ( "" , serializeAsString ( var , new JSONPObject ( "" , new Impl ( "" , "" ) , "" ) , new Impl ( "" , "" ) , "" ) , new JSONPObject ( "" , new Impl ( "" , "" ) , "" ) , new Impl ( "" , "" ) , "" )
assertEquals ( "" , serializeAsString ( var , new JSONPObject ( "" , var , var ) , var , var ) , new JSONPObject ( "" , var , var ) , var , var )
ObjectReader var = var . readerFor ( POJO . class ) . at ( "" )
ObjectMapper var = new ObjectMapper
var . enable ( SerializationFeature . WRITE_ENUMS_USING_TO_STRING )
var = var . writeValueAsString ( var )
assertEquals ( "" , var . writeValueAsString ( PoAsArray . A ) . A )
assertEquals ( "" , var . writeValueAsString ( new PoOverrideAsNumber ) PoOverrideAsNumber )
EnumSetWrapper var = var . readValue ( var , EnumSetWrapper . class )
static Pojo
public Pojo
public Pojo ( String var , int var , int var , boolean var )
var = new PojoValue ( var , var , var , var )
public PojoValue
public PojoValue ( String var , int var , int var , boolean var )
Pojo var = var . readValue ( var , Pojo . class )
String var = var . writeValueAsString ( new Pojo ( "" , 42 , 13 , true ) , 42 , 13 , true )
if ( ! var . getTypeDesc ( ) . equals ( var . getTypeDesc ( ) ) )
JsonParserSequence var = JsonParserSequence . createFlattened ( var . asParser ( ) , var )
JsonParserSequence var = JsonParserSequence . createFlattened ( var . asParser ( ) , var . asParser ( ) )
JsonParserSequence var = JsonParserSequence . createFlattened ( var . asParser ( ) , var . asParser ( ) )
JsonParserSequence var = JsonParserSequence . createFlattened ( var , var )
MyWrapper var = var . readValue ( "" , MyWrapper . class )
this . var = Scrambler . scramble ( var )
return new SVNSSHAuthentication ( var , Scrambler . descramble ( var ) , - 1 , false )
return new SVNPasswordAuthentication ( var , Scrambler . descramble ( var ) , false )
this . var = Scrambler . scramble ( var )
return new SVNSSHAuthentication ( var , var . toCharArray ( ) , Scrambler . descramble ( var ) , - 1 , false )
this . var = Scrambler . scramble ( var )
SVNSSLAuthentication var = new SVNSSLAuthentication ( Base64 . decode ( var . getPlainText ( ) . toCharArray ) . getPlainText ( ) . toCharArray , Scrambler . descramble ( var ) , false )
String var = getExecutable
var = Runtime . getRuntime ( ) . exec ( getShellCommandline , var )
var = Runtime . getRuntime ( ) . exec ( getShellCommandline , var , var )
if ( var . getExecutable ( ) == null )
setExecutableQuoteDelimiter ( "" )
return unifyQuotes ( super . getExecutable ( ) )
var . append ( unifyQuotes ( var ) )
return StringUtils . escape ( var )
return StringUtils . quoteAndEscape ( var , "" , var )
var . addAll ( getCommandLine ( getExecutable , var )  , var )
CuratorFramework var = Utils . newCurator ( var , var , var , ( String ) var . get ( Config . STORM_ZOOKEEPER_ROOT ) . STORM_ZOOKEEPER_ROOT , var )
var = BlobStoreUtils . createZKClient ( var )
CuratorFramework var = BlobStoreUtils . createZKClient ( var )
ACL var = new ACL ( ZooDefs . Perms . READ , new Id ( "" , DigestAuthenticationProvider . generateDigest ( var ) ) , DigestAuthenticationProvider . generateDigest ( var ) )
var . mkdirs ( ClusterUtils . workerbeatStormRoot ( var ) , var )
var . set_data ( ClusterUtils . logConfigPath ( var ) , Utils . serialize ( var ) , var )
var . mkdirs ( ClusterUtils . backpressureStormRoot ( var ) , var )
var . set_data ( var , Utils . serialize ( var ) , var )
var . set_data ( ClusterUtils . assignmentPath ( var ) , Utils . serialize ( var ) , var )
List < ACL > var = ClusterUtils . mkTopoOnlyAcls ( var )
CuratorFramework var = mkZk
var = mkZk ( new ZkWatcherCallBack )
var = mkZk ( new ZkWatcherCallBack )
return Zookeeper . mkClient ( var , ( List < String > ) var . get ( Config . STORM_ZOOKEEPER_SERVERS ) . STORM_ZOOKEEPER_SERVERS , var . get ( Config . STORM_ZOOKEEPER_PORT ) . STORM_ZOOKEEPER_PORT , "" , new DefaultWatcherCallBack , var )
return Zookeeper . mkClient ( var , ( List < String > ) var . get ( Config . STORM_ZOOKEEPER_SERVERS ) . STORM_ZOOKEEPER_SERVERS , var . get ( Config . STORM_ZOOKEEPER_PORT ) . STORM_ZOOKEEPER_PORT , String . valueOf ( var . get ( Config . STORM_ZOOKEEPER_ROOT ) . STORM_ZOOKEEPER_ROOT ) . get ( Config . STORM_ZOOKEEPER_ROOT ) . STORM_ZOOKEEPER_ROOT , var , var )
var . add ( ZooDefs . Ids . CREATOR_ALL_ACL . get ( 0 ) )
CuratorFramework var = Utils . newCuratorStarted ( var , var , var , var )
var = Utils . newCuratorStarted ( var , var , var , var , var )
CuratorFramework var = Utils . newCuratorStarted ( var , var , var , var )
var = Utils . newCuratorStarted ( var , var , var , var , var )
return newCurator ( var , var , var , var , null )
return newCurator ( var , var , var , "" , var )
CuratorFramework var = newCurator ( var , var , var , var )
return mkClientImpl ( var , var , var , "" , new DefaultWatcherCallBack , var )
return mkClientImpl ( var , var , var , var , new DefaultWatcherCallBack , var )
return var . mkClientImpl ( var , var , var , var , var , var )
var = Utils . newCurator ( var , var , var , var , new ZookeeperAuthInfo ( var ) )
return mkClientImpl ( var , var , var , var , var , null )
return var . zkLeaderElectorImpl ( var , var )
CuratorFramework var = mkClientImpl ( var , var , var , "" , var )
ObjectInputStream var = new ObjectInputStream ( var . getInputStream ( ) )
var . send ( new Hello ( var . getSecret ( ) , "" ) . getSecret ( ) , "" )
if ( var == null )
if ( ! var )
this . exitTypeDescriptor = CodeFlow . toDescriptor ( var . getPropertyType ( ) )
this . var . exitTypeDescriptor = CodeFlow . toDescriptor ( ( ( CompilablePropertyAccessor ) var ) . getPropertyType )
SpelExpressionParser var = new SpelExpressionParser ( new SpelParserConfiguration ( SpelCompilerMode . IMMEDIATE , getClass . getClassLoader ) . IMMEDIATE , getClass . getClassLoader )
if ( this . var )
bsW ( 24 , this . var )
final int var = var . var
final boolean var = this . var
if ( this . var && ( this . var > this . var ) )
final int var = var . var
final int var = var . var
if ( mainSimpleSort ( var , var , var , var ) )
final int var = new int [ var ]
final int var = new int [ var ]
final int var = new int [ var ]
int var = Math . min ( var . remaining ( ) , var )
URL var = var . getResource ( var )
var . put ( var , var )
private static final CacheKey
if ( ! var . containsKey ( var ) )
if ( var . isEmpty ( ) || var . contains ( "" ) || var . contains ( "" ) || var . contains ( "" ) || var . contains ( "" ) )
if ( var == null )
this . var = var
this . var = new byte [ var ]
hashed = var . crypt_raw ( passwordb , saltb , var )
if ( var > 31 )
if ( var > 31 )
assertNull ( var . resolveEntity ( null , null , "" , var ) , null , "" , var )
Digester var = new Digester
var . setClassLoader ( CcmParser . class . getClassLoader ( ) )
SAXParser var = SAXParserFactory . newInstance ( ) . newSAXParser
var . put ( "" , var )
AuthorizationRequest var = ( AuthorizationRequest ) var . get ( "" )
AuthorizationRequest var = ( AuthorizationRequest ) var . retrieveAttribute ( var , "" )
AuthorizationRequest var = ( AuthorizationRequest ) var . getModelMap ( ) . get ( "" )
if ( ! isProbablePrime ( var ) )
if ( var != null && var . startsWith ( "" ) && ! var != null && var . equals ( MessageProperties . CONTENT_TYPE_SERIALIZED_OBJECT ) || var )
if ( var != null && var . equals ( MessageProperties . CONTENT_TYPE_SERIALIZED_OBJECT ) || var )
var . serialize ( var , var )
Assert . notNull ( var , "" )
return this . var . hashCode ( )
String var = var . getFileName ( )
DefaultAttachment var = new DefaultAttachment ( var . getDataHandler ( ) )
return new BlockSort . blockSort ( var , var )
final char var = var . var
final int var = var . var
final int var = var . var
final int var = var . var
final int var = var . mainSort_runningOrder
final int var = var . mainSort_copy
final boolean var = var . mainSort_bigDone
final int var = var . var
final char var = var . var
return findPropertiesToIgnore ( var , true )
public DeserializationConfig ( BaseSettings var , SubtypeResolver var , SimpleMixInResolver var , RootNameLookup var )
super ( var , var , var , var )
protected DeserializationConfig ( DeserializationConfig var , SimpleMixInResolver var , RootNameLookup var )
super ( var , var , var )
if ( var != null )
private Reference ( Reference var , String var , Object var )
var . append ( var )
var . append ( '.' )
var . append ( var . getSimpleName ( ) )
return new JsonMappingException ( var , var )
return new JsonMappingException ( var , var , var )
SimpleMixInResolver var = var . var . copy ( )
var = var
var = new SerializationConfig ( var . var , var , var )
var = new DeserializationConfig ( var . var , var , var )
var = new SerializationConfig ( var , var , var , var )
var = new DeserializationConfig ( var , var , var , var )
boolean var = false
var . disable ( JsonGenerator . Feature . AUTO_CLOSE_JSON_CONTENT )
SerializationConfig var = getSerializationConfig . withView ( var )
var = true
var . close ( )
if ( var != null )
var . disable ( JsonGenerator . Feature . AUTO_CLOSE_JSON_CONTENT )
var . close ( )
_initForMultiRead ( var )
_initForMultiRead ( var )
JsonToken var = _initForReading ( var )
var = var . var
var . disable ( JsonGenerator . Feature . AUTO_CLOSE_JSON_CONTENT )
var . close ( )
var . disable ( JsonGenerator . Feature . AUTO_CLOSE_JSON_CONTENT )
var . close ( )
public SerializationConfig ( BaseSettings var , SubtypeResolver var , SimpleMixInResolver var , RootNameLookup var )
super ( var , var , var , var )
protected SerializationConfig ( SerializationConfig var , SimpleMixInResolver var , RootNameLookup var )
super ( var , var , var )
return JsonMappingException . from ( this , var )
protected MapperConfigBase ( BaseSettings var , SubtypeResolver var , SimpleMixInResolver var , RootNameLookup var )
protected MapperConfigBase ( MapperConfigBase < CFG , T > , T var , SimpleMixInResolver var , RootNameLookup var )
final boolean var = ClassUtil . var ( var . getBeanClass ( ) )
if ( ( var == 1 ) && ! var )
JavaType var = var . resolveType ( var )
if ( var != var )
var = var . withType ( var )
int var = var . getParameterCount ( )
if ( var . isAssignableFrom ( var ) )
var = EnumDeserializer . deserializerForCreator ( var , var , var )
return _createEnumKeyDeserializer ( var , var )
Object var = var . getAnnotationIntrospector ( ) . findDeserializer ( var )
Object var = var . getAnnotationIntrospector ( ) . findKeyDeserializer ( var )
var = ( T ) var . refineDeserializationType ( var . getConfig ( ) , var , var )
if ( var instanceof AnnotatedMember )
var = findPropertyTypeDeserializer ( var . getConfig ( ) , var , ( AnnotatedMember ) var )
var = findTypeDeserializer ( var . getConfig ( ) , var )
return EnumResolver . constructUnsafeUsingMethod ( var , var )
public BeanDeserializer ( BeanDeserializerBase var , HashSet < String > var )
wrapInstantiationProblem ( var , var )
if ( _anySetter != null )
if ( _anySetter != null )
wrapInstantiationProblem ( var , var )
if ( _anySetter != null )
wrapInstantiationProblem ( var , var )
final protected HashSet < String > var
protected BeanDeserializerBase ( BeanDeserializerBuilder var , BeanDescription var , BeanPropertyMap var , Map < String , SettableBeanProperty > , SettableBeanProperty var , HashSet < String > var , boolean var , boolean var )
public BeanDeserializerBase ( BeanDeserializerBase var , HashSet < String > var )
var = var . var
var = findDeserializer ( var , var . getType ( ) , var )
var = var . withValueDeserializer ( var )
var = var . build ( )
JsonDeserializer < ? > var = var . findContextualValueDeserializer ( var , var )
String var = var . findPropertiesToIgnore ( var , false )
if ( var != null && var . length != 0 )
JsonFormat . Value var = var . findFormat ( ( Annotated ) var )
if ( var != null )
Object var = var . createUsingDelegate ( var , var . deserialize ( var , var ) , var )
if ( ! var . canCreateFromInt ( ) )
if ( var != null )
return var . createUsingDelegate ( var , var . deserialize ( var , var ) , var )
if ( var != null )
Object var = var . createUsingArrayDelegate ( var , var . deserialize ( var , var ) , var )
if ( var != null )
Object var = var . createUsingArrayDelegate ( var , var . deserialize ( var , var ) , var )
final protected boolean var
var = var . isEnabled ( MapperFeature . DEFAULT_VIEW_INCLUSION )
var = var . isEnabled ( MapperFeature . ACCEPT_CASE_INSENSITIVE_PROPERTIES )
boolean var = ! var
boolean var = ! var
if ( var . isAbstract ( ) && ! var . isPrimitive ( ) )
return new NoClassDefFoundDeserializer < Object > ( var )
Boolean var = var . findIgnoreUnknownProperties ( var . getClassInfo ( ) )
var . setIgnoreUnknownProperties ( var . booleanValue ( ) )
if ( var == null )
final boolean var = ( var . isEnabled ( MapperFeature . USE_GETTERS_AS_SETTERS ) && var . isEnabled ( MapperFeature . AUTO_DETECT_GETTERS ) )
if ( var == null )
if ( ( var != null ) && ( isIgnorableType ( var . getConfig ( ) , var , var , var ) ) )
SimpleBeanPropertyDefinition var = SimpleBeanPropertyDefinition . construct ( var . getConfig ( ) , var )
boolean var = var . canOverrideAccessModifiers ( )
var . fixAccess ( var . isEnabled ( MapperFeature . OVERRIDE_PUBLIC_ACCESS_MODIFIERS ) . OVERRIDE_PUBLIC_ACCESS_MODIFIERS )
var = modifyTypeByAnnotation ( var , var , var )
var . fixAccess ( var . isEnabled ( MapperFeature . OVERRIDE_PUBLIC_ACCESS_MODIFIERS ) . OVERRIDE_PUBLIC_ACCESS_MODIFIERS )
JavaType var = resolveType ( var , var , var , var )
var = var . withType ( var )
var = modifyTypeByAnnotation ( var , var , var )
if ( var . canOverrideAccessModifiers ( ) )
var . fixAccess ( var . isEnabled ( MapperFeature . OVERRIDE_PUBLIC_ACCESS_MODIFIERS ) . OVERRIDE_PUBLIC_ACCESS_MODIFIERS )
JavaType var = var . getType ( )
JsonDeserializer < Object > var = findDeserializerFromAnnotation ( var , var )
Class < ? > var = var . getRawClass ( )
public BuilderBasedDeserializer ( BeanDeserializerBuilder var , BeanDescription var , BeanPropertyMap var , Map < String , SettableBeanProperty > , SettableBeanProperty var , HashSet < String > var , boolean var , boolean var )
public BuilderBasedDeserializer ( BuilderBasedDeserializer var , HashSet < String > var )
wrapInstantiationProblem ( var , var )
wrapInstantiationProblem ( var , var )
if ( var . assignParameter ( var , var . deserialize ( var , var ) , var ) )
wrapAndThrow ( var , _beanType . getRawClass ( ) , var , var )
wrapInstantiationProblem ( var , var )
set ( var , deserialize ( var , var ) , var )
return setAndReturn ( var , deserialize ( var , var ) , var )
if ( var == null || var . getShape ( ) != JsonFormat . Shape . OBJECT )
final protected AnnotatedMethod var
public SettableAnyProperty ( BeanProperty var , AnnotatedMethod var , JavaType var , JsonDeserializer < Object > var , TypeDeserializer var )
var . getAnnotated ( ) . invoke ( var , var , var )
this ( new PropertyName ( var ) , var , var , var , var , PropertyMetadata . construct ( var , null , null , null ) , null , null , null )
wrapInstantiationProblem ( var , var )
return _valueInstantiator . createUsingDelegate ( var , _delegateDeserializer . deserialize ( var , var ) , var )
wrapInstantiationProblem ( var , var )
return _valueInstantiator . createUsingDelegate ( var , _delegateDeserializer . deserialize ( var , var ) , var )
wrapInstantiationProblem ( var , var )
if ( var == Collection . class || var == List . class || var == ArrayList . class )
if ( var == Map . class || var == LinkedHashMap . class )
if ( var == var )
public Vanilla ( int var ) = var
return ArrayList . class . getName ( )
return LinkedHashMap . class . getName ( )
return HashMap . class . getName ( )
return Object . class . getName ( )
if ( ! var [ var ] . hasDefaultType )
SettableBeanProperty var = var [ var ] . getProperty
if ( var . findCreatorProperty ( var . getName ( ) ) == null )
protected PropertyBasedCreator ( ValueInstantiator var , SettableBeanProperty var )
return new PropertyBasedCreator ( var , var )
Object var = var . createFromObjectWith ( var , var . getParameters ( var ) )
var [ var ] = var
return new AtomicReferenceDeserializer ( var , var , var )
JsonFormat . Value var = var . getAnnotationIntrospector ( ) . findFormat ( ( Annotated ) var . getMember ( ) )
return new FactoryBasedDeserializer ( var , var , var )
if ( var . length ( ) == 0 )
if ( var . isEnabled ( DeserializationFeature . UNWRAP_SINGLE_VALUE_ARRAYS ) && var . isExpectedStartArrayToken ( ) )
var = var . deserialize ( var , var )
JsonToken var = var . getCurrentToken ( )
if ( var == JsonToken . VALUE_STRING || var == JsonToken . FIELD_NAME )
return var . deserializeTypedFromAny ( var , var )
if ( var . getCurrentToken ( ) == JsonToken . START_ARRAY && var . isEnabled ( DeserializationFeature . UNWRAP_SINGLE_VALUE_ARRAYS ) )
if ( var . nextToken ( ) != JsonToken . END_ARRAY )
if ( var . getCurrentToken ( ) == JsonToken . VALUE_EMBEDDED_OBJECT )
return JsonLocation . class . getName ( )
if ( var == JsonParser . NumberType . BIG_DECIMAL || var . isEnabled ( DeserializationFeature . USE_BIG_DECIMAL_FOR_FLOATS ) )
protected MapDeserializer ( MapDeserializer var , KeyDeserializer var , JsonDeserializer < Object > var , TypeDeserializer var , HashSet < String > var )
HashSet < String > var = var
String var = var . findPropertiesToIgnore ( var , false )
if ( var != null )
return Double . valueOf ( var . getDoubleValue ( ) )
if ( var . getCurrentToken ( ) == JsonToken . VALUE_STRING && var == Byte . class )
if ( var != JsonToken . VALUE_STRING )
if ( var != JsonToken . VALUE_NULL )
if ( var != JsonToken . VALUE_NULL )
var = ( byte ) 0
return Boolean . valueOf ( _parseBooleanFromOther ( var , var ) , var )
if ( var . getNumberType ( ) == NumberType . LONG )
var = var . getText ( ) . trim
if ( var . isEnabled ( DeserializationFeature . UNWRAP_SINGLE_VALUE_ARRAYS ) )
if ( var == JsonToken . START_ARRAY && var . isEnabled ( DeserializationFeature . UNWRAP_SINGLE_VALUE_ARRAYS ) )
Object var = var . deserialize ( var . getParser ( ) , var )
var = EnumResolver . constructUnsafeUsingToString ( var . getEnumClass ( ) )
String var = String . format ( "" , getValueTypeDesc , var . getClass ( ) . getName , var . getMessage ( ) )
return JsonMappingException . from ( var . getParser ( ) , var , var )
if ( ( var == JsonToken . START_ARRAY ) && var . isEnabled ( DeserializationFeature . UNWRAP_SINGLE_VALUE_ARRAYS ) )
var . nextToken ( )
_badFormat ( var , var )
return var . getDoubleValue ( )
return Double . valueOf ( var . getDoubleValue ( ) )
return Double . valueOf ( var . getDoubleValue ( ) )
return Double . valueOf ( var . getDoubleValue ( ) )
Class < ? > var = null
var = Class . forName ( "" )
if ( ( var != null ) && var . isAssignableFrom ( var ) )
if ( ( var != null ) && var . isAssignableFrom ( var ) )
JsonDeserializer < ? >
private AnnotatedClass ( JavaType var , Class < ? > var , TypeBindings var , List < JavaType > var , AnnotationIntrospector var , MixInResolver var , TypeFactory var , AnnotationMap var )
var = var
return new AnnotatedClass ( var , var , var . getBindings ( ) , ClassUtil . findSuperTypes ( var , null , false ) , null , false , var , ( MixInResolver ) var , var . getTypeFactory ( ) , null )
return new AnnotatedClass ( var , var , var . getBindings ( ) , ClassUtil . findSuperTypes ( var , null , false ) , null , false , var , var , var . getTypeFactory ( ) , null )
return var . annotations
return var . size > 0
ClassUtil . checkAndFixAccess ( getMember , var )
if ( isFactoryMethod ( var ) )
if ( 1 == var . getParameterCount ( ) )
if ( var == null || var . isEmpty ( ) )
List < PropertyName > var = new ArrayList < PropertyName > ( )
var . add ( var )
JsonFormat . Value var = var
var = Java7Support . class . newInstance ( )
if ( var . allowGetters ( ) )
if ( var . allowSetters ( ) )
return var . value ( )
JsonIgnoreProperties var = _findAnnotation ( var , JsonIgnoreProperties . class )
AnnotatedMember var = new VirtualAnnotatedMember ( var , var . getRawType ( ) , var , var . getRawClass ( ) )
AnnotatedMember var = new VirtualAnnotatedMember ( var , var . getRawType ( ) , var . getSimpleName ( ) , var . getRawClass ( ) )
Transient var = var . getAnnotation ( Transient . class )
AnnotatedWithParams var = var . getOwner ( )
if ( var != null )
var . removeNonVisible ( var )
var . put ( var . getName ( ) , var )
return _anyExplicits ( var ) || _anyExplicits ( var ) || _anyExplicits ( var ) || _anyExplicits ( var )
return PropertyMetadata . construct ( var . booleanValue ( ) , var , var , var )
public AsArrayTypeDeserializer ( JavaType var , TypeIdResolver var , String var , boolean var , Class < ? > var )
var = JsonParserSequence . createFlattened ( var . asParser ( var ) , var )
public AsExternalTypeDeserializer ( JavaType var , TypeIdResolver var , String var , boolean var , Class < ? > var )
public AsPropertyTypeDeserializer ( JavaType var , TypeIdResolver var , String var , boolean var , Class < ? > var )
public AsPropertyTypeDeserializer ( JavaType var , TypeIdResolver var , String var , boolean var , Class < ? > var , As var )
var = JsonParserSequence . createFlattened ( var . asParser ( var ) , var )
if ( var . getCurrentToken ( ) == JsonToken . START_ARRAY )
public AsWrapperTypeDeserializer ( JavaType var , TypeIdResolver var , String var , boolean var , Class < ? > var )
var = JsonParserSequence . createFlattened ( var . asParser ( var ) , var )
return _idFrom ( var , var . getClass ( ) )
return _idFrom ( var , var )
JavaType var = var . constructFromCanonical ( var )
if ( var instanceof DeserializationConfig )
DeserializationConfig var = ( DeserializationConfig ) var
var = _typeFactory . constructCollectionType ( EnumSet . class , var ) . toCanonical
var = _typeFactory . constructMapType ( EnumMap . class , var , var ) . toCanonical
return new AsArrayTypeDeserializer ( var , var , var , var , var )
return new AsExternalTypeDeserializer ( var , var , var , var , var )
protected TypeDeserializerBase ( JavaType var , TypeIdResolver var , String var , boolean var , Class < ? > var )
var = var . forcedNarrowBy ( var )
var = _handleUnknownTypeId ( var , var , var , var )
var = ( ( TypeIdResolverBase ) var ) . getDescForKnownTypeIds
var . append ( '[' ) . append ( getClass . getName )
var . append ( "" ) . append ( var )
var . writeStartObject ( )
( ( BaseJsonNode ) var . getValue ( ) ) . serialize ( var , var )
( ( BaseJsonNode ) var . getValue ( ) ) . serialize ( var , var )
var . writeTypeSuffixForObject ( this , var )
JavaType var = var . containedType ( 0 )
JavaType var = var . containedType ( 1 )
MapSerializer var = MapSerializer . construct ( var . findPropertiesToIgnore ( var . getClassInfo ( ) , true ) . getClassInfo ( ) , true , var , var , var , var , var , var )
if ( var != null && var != var )
protected BeanSerializer ( BeanSerializerBase var , String var )
var = MapSerializer . construct ( null , var , var , var , null , null , null )
AnnotatedClass var = var . getClassInfo ( )
String var = var . findPropertiesToIgnore ( var , true )
if ( var != null && var . length > 0 )
HashSet < String > var = ArrayBuilders . arrayToSet ( var )
BeanPropertyWriter var = var . buildWriter ( var , var , var , var , var , var , var , var )
var = var . findPropertyInclusion ( var . getDefaultPropertyInclusion ( ) )
var = getPropertyDefaultValue ( var . getName ( ) , var , var )
protected BeanAsArraySerializer ( BeanSerializerBase var , String var )
var . writeStartObject ( )
var . setCurrentValue ( var )
protected UnwrappingBeanSerializer ( UnwrappingBeanSerializer var , String var )
JsonFormat . Value var = var . findPropertyFormat ( var . getConfig ( ) , _handledType )
JsonFormat . Value var = var . findPropertyFormat ( var . getConfig ( ) , _handledType )
if ( var == null )
var = _findCachedSerializer ( var , var . getClass ( ) )
protected BeanSerializerBase ( BeanSerializerBase var , String var )
if ( var . contains ( var . getName ( ) ) )
JsonFormat . Value var = var . findFormat ( ( Annotated ) var )
if ( var != null )
if ( var != var )
String var = null
var = var . findPropertiesToIgnore ( var , true )
if ( var != null && var . length != 0 )
var . writeStartObject ( )
JsonFormat . Value var = var . getAnnotationIntrospector ( ) . findFormat ( ( Annotated ) var . getMember ( ) )
Boolean var = _isShapeWrittenUsingIndex ( var , var , true )
JsonFormat . Value var = var . getAnnotationIntrospector ( ) . findFormat ( ( Annotated ) var . getMember ( ) )
Boolean var = _isShapeWrittenUsingIndex ( var . getType ( ) . getRawClass , var , false )
if ( var == Shape . STRING )
super ( var . getReturnType ( ) , false )
if ( var . isEnabled ( MapperFeature . USE_STATIC_TYPING ) || Modifier . isFinal ( var . getReturnType ( ) . getModifiers ) )
JavaType var = var . constructType ( var . getGenericReturnType ( ) )
Object var = var . invoke ( var )
var = var . invoke ( var )
var . writeTypePrefixForScalar ( var , var )
var . serialize ( var , var , var )
var . writeTypeSuffixForScalar ( var , var )
var . serializeWithType ( var , var , var , var )
var = var . getDeclaringClass ( )
if ( ( var != null ) && ( var . isEnum ( ) ) )
var . add ( String . valueOf ( var . invoke ( var ) ) . invoke ( var ) )
JsonInclude . Value var = var . findPropertyInclusion ( var . getConfig ( ) , Map . class )
HashSet < String > var = var
if ( var != null && var != null )
String var = var . findPropertiesToIgnore ( var , true )
if ( var != null )
Object var = this . var
var = _orderEntries ( var )
if ( var != null && var . contains ( var ) )
final HashSet < String > var = var
final HashSet < String > var = var
final HashSet < String > var = var
final HashSet < String > var = var
ObjectNode var = createSchemaNode ( "" , true )
if ( var . containsKey ( null ) )
if ( var != null )
final JsonSerializer < ? > var = new IntegerSerializer
var . put ( Integer . class . getName ( ) , var )
var . put ( Integer . TYPE . getName ( ) , var )
var . put ( Long . class . getName ( ) , LongSerializer . instance )
var . put ( Long . TYPE . getName ( ) , LongSerializer . instance )
var . put ( Double . class . getName ( ) , DoubleSerializer . instance )
var . put ( Double . TYPE . getName ( ) , DoubleSerializer . instance )
JsonFormat . Value var = var . getAnnotationIntrospector ( ) . findFormat ( var )
public IntegerSerializer
super ( Integer . class , JsonParser . NumberType . INT , "" )
public LongSerializer
super ( Long . class , JsonParser . NumberType . LONG , "" )
public DoubleSerializer
super ( Double . class , JsonParser . NumberType . DOUBLE , "" )
JsonFormat . Value var = var . findPropertyFormat ( var . getConfig ( ) , _handledType )
JsonFormat . Value var = var . findPropertyFormat ( var . getConfig ( ) , _handledType )
var . writeTypeSuffixForArray ( var , var )
var . writeTypePrefixForScalar ( var , var )
var . writeStartArray ( var )
var . writeEndArray ( )
var . writeStartArray ( var )
var . writeEndArray ( )
var . writeStartArray ( var )
var . writeEndArray ( )
var = var . toString ( )
PropertyFilter var = var . findPropertyFilter ( var , var )
return "" + _class . getName ( ) + "" + var + "" + var + ""
protected ReferenceType ( Class < ? > var , TypeBindings var , JavaType var , JavaType var , JavaType var , Object var , Object var , boolean var )
return new ReferenceType ( var , var , var , var , var , null , null , false )
return new ReferenceType ( var , TypeBindings . emptyBindings ( ) , null , null , var , null , null , false )
return new ReferenceType ( _class , _bindings , _superClass , _superInterfaces , var , _valueHandler , _typeHandler , _asStatic )
return new ReferenceType ( _class , _bindings , _superClass , _superInterfaces , var , _valueHandler , var , _asStatic )
return new ReferenceType ( _class , _bindings , _superClass , _superInterfaces , var . withTypeHandler ( var ) , _valueHandler , _typeHandler , _asStatic )
return new ReferenceType ( _class , _bindings , _superClass , _superInterfaces , var , var , _typeHandler , _asStatic )
return new ReferenceType ( _class , _bindings , _superClass , _superInterfaces , var , _valueHandler , _typeHandler , _asStatic )
return new ReferenceType ( _class , _bindings , _superClass , _superInterfaces , var . withStaticTyping ( ) , _valueHandler , _typeHandler , true )
return new ReferenceType ( var , _bindings , var , var , var , _valueHandler , _typeHandler , _asStatic )
return new ReferenceType ( var , _bindings , _superClass , _superInterfaces , var , _valueHandler , _typeHandler , _asStatic )
return ( ( ResolvedRecursiveType ) var ) . getSelfReferencedType . equals ( getSelfReferencedType )
this ( var , var , null )
protected TypeFactory ( TypeParser var , TypeModifier var , ClassLoader var )
return new TypeFactory ( var , var , var )
var = null
if ( var != null )
return new EnumResolver ( var , var , var )
return new EnumResolver ( var , var , var )
return new EnumResolver ( var , var , var )
return var . writer ( )
return var . reader ( )
return var . readerFor ( var )
JsonNodeFactory var = JsonNodeFactory . instance
return new MyContextualDeserializer ( var )
double var = ( ( Number ) var ) . longValue
double var = ( ( Number ) var ) . longValue
double var = ( ( Number ) var ) . doubleValue
double var = ( ( Number ) var ) . doubleValue
static Point
public Point
public Point ( int var , int var , int var )
Point var = var . convertValue ( var , Point . class )
final Point var = new Point ( 1 , 2 , 3 )
Point var = var . convertValue ( var , Point . class )
new ObjectMapper . readerFor ( Bean . class ) . withValueToUpdate ( var ) . readValue ( "" )
ObjectMapper var = new ObjectMapper
static Untyped989
ObjectReader var = var . readerFor ( Untyped989 . class )
if ( var . getCurrentToken ( ) == JsonToken . VALUE_STRING )
final Issues1327Bean var = new Issues1327Bean
List < Parent > var = ( List < Parent > ) var . getResult ( )
assertEquals ( "" , serializeAsString ( var , new JSONPObject ( "" , "" ) , "" ) , new JSONPObject ( "" , "" ) , "" )
assertEquals ( "" , serializeAsString ( var , new JSONPObject ( "" , Integer . valueOf ( 123 ) ) , Integer . valueOf ( 123 ) ) , new JSONPObject ( "" , Integer . valueOf ( 123 ) ) , Integer . valueOf ( 123 ) )
assertEquals ( "" , serializeAsString ( var , new JSONPObject ( "" , null ) , null ) , new JSONPObject ( "" , null ) , null )
assertEquals ( "" , serializeAsString ( var , new JSONPObject ( "" , new Impl ( "" , "" ) , "" ) , new Impl ( "" , "" ) , "" ) , new JSONPObject ( "" , new Impl ( "" , "" ) , "" ) , new Impl ( "" , "" ) , "" )
assertEquals ( "" , serializeAsString ( var , new JSONPObject ( "" , var , var ) , var , var ) , new JSONPObject ( "" , var , var ) , var , var )
ObjectReader var = var . readerFor ( POJO . class ) . at ( "" )
ObjectMapper var = new ObjectMapper
var . enable ( SerializationFeature . WRITE_ENUMS_USING_TO_STRING )
var = var . writeValueAsString ( var )
assertEquals ( "" , var . writeValueAsString ( PoAsArray . A ) . A )
assertEquals ( "" , var . writeValueAsString ( new PoOverrideAsNumber ) PoOverrideAsNumber )
EnumSetWrapper var = var . readValue ( var , EnumSetWrapper . class )
static Pojo
public Pojo
public Pojo ( String var , int var , int var , boolean var )
var = new PojoValue ( var , var , var , var )
public PojoValue
public PojoValue ( String var , int var , int var , boolean var )
Pojo var = var . readValue ( var , Pojo . class )
String var = var . writeValueAsString ( new Pojo ( "" , 42 , 13 , true ) , 42 , 13 , true )
if ( ! var . getTypeDesc ( ) . equals ( var . getTypeDesc ( ) ) )
JsonParserSequence var = JsonParserSequence . createFlattened ( var . asParser ( ) , var )
JsonParserSequence var = JsonParserSequence . createFlattened ( var . asParser ( ) , var . asParser ( ) )
JsonParserSequence var = JsonParserSequence . createFlattened ( var . asParser ( ) , var . asParser ( ) )
JsonParserSequence var = JsonParserSequence . createFlattened ( var , var )
MyWrapper var = var . readValue ( "" , MyWrapper . class )
CommandLauncher var = new CommandLauncher ( var )
( ( HttpServletRequest ) var ) . getSession ( true )
assertTrue ( "" , var . isInMemory ( ) )
assertTrue ( "" , var . isInMemory ( ) )
FileItemFactory var = new DiskFileItemFactory ( var , null )
final AuthenticationResult var = var . handleResponse ( var . getBytes ( ) )
final AuthenticationResult var = var . handleResponse ( var . getBytes ( ) )
final AuthenticationResult var = var . handleResponse ( var . getBytes ( ) )
var = new ObjectInputStream ( var )
var . setExpandEntityReferences ( isExpandingEntityRefs )
int var = RangerBizUtil . getDBFlavor ( )
if ( var == AppConstants . DB_FLAVOR_ORACLE )
Query var = getEntityManager . createNativeQuery ( var , tClass ) . setMaxResults ( 1 )
return ( XXDataHist ) var . getSingleResult ( )
var . setUserRoleList ( var . getXXPortalUser ( ) . findXPortalUserRolebyXPortalUserId ( var . getId ( ) ) . getId ( ) )
if ( var == null )
final Map < K , V > var = new HashMap
var = var . getParentFile ( ) . getCanonicalPath
if ( var . isDirectory ( ) && var . getParent ( ) . contains ( var . getCanonicalPath ( ) ) )
var . add ( IterUtil . toMap ( aliasHeader ( var ) , var ) ( var ) , var )
String var = createTemplate ( var , var )
return new ModelAndView ( new SpelView ( var ) , var )
var = var . replace ( "" , createScopes ( var , var ) , var ) . replace ( "" , "" )
var = var . replace ( "" , "" ) . replace ( "" , DENIAL )
var = var . replace ( "" , CSRF )
var = var . replace ( "" , "" )
var . put ( "" , var )
return new ModelAndView ( new SpelView ( var ) , var )
final String var = reportSyncopeOperations . exportExecutionResult ( var , var . lastParameter ( ) )
DocumentBuilderFactory var = DocumentBuilderFactory . newInstance ( )
var . setFeature ( javax . xml . XMLConstants . FEATURE_SECURE_PROCESSING , true )
var . setFeature ( javax . xml . XMLConstants . FEATURE_SECURE_PROCESSING , true )
this . var = new HashMap < String , Object > ( var )
return ( SAXTransformerFactory ) TransformerFactory . newInstance ( )
final SAXTransformerFactory var = ( SAXTransformerFactory ) SAXTransformerFactory . newInstance ( )
var . setFeature ( javax . xml . XMLConstants . FEATURE_SECURE_PROCESSING , true )
var . setFeature ( javax . xml . XMLConstants . FEATURE_SECURE_PROCESSING , true )
var . setFeature ( javax . xml . XMLConstants . FEATURE_SECURE_PROCESSING , true )
var . setFeature ( javax . xml . XMLConstants . FEATURE_SECURE_PROCESSING , true )
Document var = var . parse ( var . getInputStream ( ) )
execute ( var . getKey ( ) )
String var = execute ( var . getKey ( ) )
String var = execute ( var . getKey ( ) )
String var = execute ( var . getKey ( ) )
var . setFeature ( javax . xml . XMLConstants . FEATURE_SECURE_PROCESSING , true )
final DocumentBuilderFactory var = DocumentBuilderFactory . newInstance ( )
final DocumentBuilder var = var . newDocumentBuilder ( )
TokenValidation var = validateToken ( var )
TokenValidation var = validateToken ( var )
expectedException . expectMessage ( "" )
var . expectMessage ( "" )
TokenValidation var = validate ( getToken ) . checkSignature ( var ) . checkIssuer ( "" ) . checkClient ( var ) . checkExpiry ( var ) . checkUser ( var ) . checkScopesInclude ( "" ) . checkScopesWithin ( "" , "" ) . checkRevocationSignature ( Collections . singletonList ( "" ) ) . checkAudience ( "" , "" ) . checkRevocableTokenStore ( var )
int var = var . var
Utils . unpack ( new File ( var ) , new File ( var ) )
final JarEntry var = var . nextElement ( )
InputStream var = var . getInputStream ( var )
var . close ( )
var . close ( )
var . close ( )
var . write ( buf , 0 , var )
unTarUsingJava ( var , var , var )
unpackEntries ( var , var , var )
var . flush ( var )
var . close ( var )
if ( var . endsWith ( "" ) )
if ( var . endsWith ( "" ) || var . endsWith ( "" ) || var . endsWith ( "" ) )
unTar ( var , var )
while ( var . hasMoreElements ( ) )
OutputStream var = new FileOutputStream ( var )
byte var = new byte [ 8192 ]
while ( ( var = var . read ( var ) ) != - 1 )
var . write ( var , 0 , var )
var . close ( )
var . close ( )
Enumeration < JarEntry > var = var . entries ( )
JarEntry var = var . nextElement ( )
LOG . info ( "" , var )
return var + FILE_PATH_SEPARATOR + ""
return var + FILE_PATH_SEPARATOR + ""
_instance . forceDeleteImpl ( var )
return _instance . addToClasspathImpl ( var , var )
return StringUtils . join ( var , CLASS_PATH_SEPARATOR )
LOG . error ( "" , var )
LOG . error ( "" , var )
LOG . warn ( "" , var , var . get_storm_version ( ) )
if ( var . lastIndexOf ( '/' ) > 0 )
var = "" + var . substring ( 1 ) . replace ( '/' , '#' )
var = ExpandWar . expand ( var , var , var )
ExpandWar . delete ( var )
if ( ( var != - 1 ) && ( var != 0 ) && ( var != null ) )
return var . delete ( )
deleteDir ( var )
return var . delete ( var )
this . var = var
if ( var != null )
this . var = new LinkedList
this . var . add ( var )
this . var = new LinkedList
this . var = new LinkedHashMap
return "" + var + ""
if ( ! "" . equals ( var ) || var . endsWith ( "" ) )
if ( var . getContextPath ( ) != null )
if ( var . getServletPath ( ) != null )
int var = var . indexOf ( "" )
String var = var . getRequestURI ( )
int var = var . indexOf ( "" )
if ( ! var . startsWith ( var ) )
if ( isInvalidPath ( var ) )
var . error ( "" , var )
String var = createTemplate ( var , var )
return new ModelAndView ( new SpelView ( var ) , var )
var = var . replace ( "" , createScopes ( var , var ) , var ) . replace ( "" , "" )
var = var . replace ( "" , "" ) . replace ( "" , DENIAL )
var = var . replace ( "" , CSRF )
var = var . replace ( "" , "" )
var . put ( "" , var )
return new ModelAndView ( new SpelView ( var ) , var )
List < org . dom4j . Node > var = ( List < org . dom4j . Node > ) new XPath ( var ) . selectNodes ( var )
List var = new XPath ( var ) . selectNodes ( var )
ObjectInputStream var = new ObjectInputStream ( var . getInputStream ( ) )
var . send ( new Hello ( var . getSecret ( ) , "" ) . getSecret ( ) , "" )
var . checkPermission ( Jenkins . ADMINISTER )
Digester var = new Digester
var . setClassLoader ( PmdParser . class . getClassLoader ( ) )
return XMLInputFactory . newInstance ( )
return findPropertiesToIgnore ( var , true )
public DeserializationConfig ( BaseSettings var , SubtypeResolver var , SimpleMixInResolver var , RootNameLookup var )
super ( var , var , var , var )
protected DeserializationConfig ( DeserializationConfig var , SimpleMixInResolver var , RootNameLookup var )
super ( var , var , var )
if ( var != null )
private Reference ( Reference var , String var , Object var )
var . append ( var )
var . append ( '.' )
var . append ( var . getSimpleName ( ) )
return new JsonMappingException ( var , var )
return new JsonMappingException ( var , var , var )
SimpleMixInResolver var = var . var . copy ( )
var = var
var = new SerializationConfig ( var . var , var , var )
var = new DeserializationConfig ( var . var , var , var )
var = new SerializationConfig ( var , var , var , var )
var = new DeserializationConfig ( var , var , var , var )
boolean var = false
var . disable ( JsonGenerator . Feature . AUTO_CLOSE_JSON_CONTENT )
SerializationConfig var = getSerializationConfig . withView ( var )
var = true
var . close ( )
if ( var != null )
var . disable ( JsonGenerator . Feature . AUTO_CLOSE_JSON_CONTENT )
var . close ( )
_initForMultiRead ( var )
_initForMultiRead ( var )
JsonToken var = _initForReading ( var )
var = var . var
var . disable ( JsonGenerator . Feature . AUTO_CLOSE_JSON_CONTENT )
var . close ( )
var . disable ( JsonGenerator . Feature . AUTO_CLOSE_JSON_CONTENT )
var . close ( )
public SerializationConfig ( BaseSettings var , SubtypeResolver var , SimpleMixInResolver var , RootNameLookup var )
super ( var , var , var , var )
protected SerializationConfig ( SerializationConfig var , SimpleMixInResolver var , RootNameLookup var )
super ( var , var , var )
return JsonMappingException . from ( this , var )
protected MapperConfigBase ( BaseSettings var , SubtypeResolver var , SimpleMixInResolver var , RootNameLookup var )
protected MapperConfigBase ( MapperConfigBase < CFG , T > , T var , SimpleMixInResolver var , RootNameLookup var )
final boolean var = ClassUtil . var ( var . getBeanClass ( ) )
if ( ( var == 1 ) && ! var )
JavaType var = var . resolveType ( var )
if ( var != var )
var = var . withType ( var )
int var = var . getParameterCount ( )
if ( var . isAssignableFrom ( var ) )
var = EnumDeserializer . deserializerForCreator ( var , var , var )
return _createEnumKeyDeserializer ( var , var )
Object var = var . getAnnotationIntrospector ( ) . findDeserializer ( var )
Object var = var . getAnnotationIntrospector ( ) . findKeyDeserializer ( var )
var = ( T ) var . refineDeserializationType ( var . getConfig ( ) , var , var )
if ( var instanceof AnnotatedMember )
var = findPropertyTypeDeserializer ( var . getConfig ( ) , var , ( AnnotatedMember ) var )
var = findTypeDeserializer ( var . getConfig ( ) , var )
return EnumResolver . constructUnsafeUsingMethod ( var , var )
public BeanDeserializer ( BeanDeserializerBase var , HashSet < String > var )
wrapInstantiationProblem ( var , var )
if ( _anySetter != null )
if ( _anySetter != null )
wrapInstantiationProblem ( var , var )
if ( _anySetter != null )
wrapInstantiationProblem ( var , var )
final protected HashSet < String > var
protected BeanDeserializerBase ( BeanDeserializerBuilder var , BeanDescription var , BeanPropertyMap var , Map < String , SettableBeanProperty > , SettableBeanProperty var , HashSet < String > var , boolean var , boolean var )
public BeanDeserializerBase ( BeanDeserializerBase var , HashSet < String > var )
var = var . var
var = findDeserializer ( var , var . getType ( ) , var )
var = var . withValueDeserializer ( var )
var = var . build ( )
JsonDeserializer < ? > var = var . findContextualValueDeserializer ( var , var )
String var = var . findPropertiesToIgnore ( var , false )
if ( var != null && var . length != 0 )
JsonFormat . Value var = var . findFormat ( ( Annotated ) var )
if ( var != null )
Object var = var . createUsingDelegate ( var , var . deserialize ( var , var ) , var )
if ( ! var . canCreateFromInt ( ) )
if ( var != null )
return var . createUsingDelegate ( var , var . deserialize ( var , var ) , var )
if ( var != null )
Object var = var . createUsingArrayDelegate ( var , var . deserialize ( var , var ) , var )
if ( var != null )
Object var = var . createUsingArrayDelegate ( var , var . deserialize ( var , var ) , var )
final protected boolean var
var = var . isEnabled ( MapperFeature . DEFAULT_VIEW_INCLUSION )
var = var . isEnabled ( MapperFeature . ACCEPT_CASE_INSENSITIVE_PROPERTIES )
boolean var = ! var
boolean var = ! var
if ( var . isAbstract ( ) && ! var . isPrimitive ( ) )
return new NoClassDefFoundDeserializer < Object > ( var )
Boolean var = var . findIgnoreUnknownProperties ( var . getClassInfo ( ) )
var . setIgnoreUnknownProperties ( var . booleanValue ( ) )
if ( var == null )
final boolean var = ( var . isEnabled ( MapperFeature . USE_GETTERS_AS_SETTERS ) && var . isEnabled ( MapperFeature . AUTO_DETECT_GETTERS ) )
if ( var == null )
if ( ( var != null ) && ( isIgnorableType ( var . getConfig ( ) , var , var , var ) ) )
SimpleBeanPropertyDefinition var = SimpleBeanPropertyDefinition . construct ( var . getConfig ( ) , var )
boolean var = var . canOverrideAccessModifiers ( )
var . fixAccess ( var . isEnabled ( MapperFeature . OVERRIDE_PUBLIC_ACCESS_MODIFIERS ) . OVERRIDE_PUBLIC_ACCESS_MODIFIERS )
var = modifyTypeByAnnotation ( var , var , var )
var . fixAccess ( var . isEnabled ( MapperFeature . OVERRIDE_PUBLIC_ACCESS_MODIFIERS ) . OVERRIDE_PUBLIC_ACCESS_MODIFIERS )
JavaType var = resolveType ( var , var , var , var )
var = var . withType ( var )
var = modifyTypeByAnnotation ( var , var , var )
if ( var . canOverrideAccessModifiers ( ) )
var . fixAccess ( var . isEnabled ( MapperFeature . OVERRIDE_PUBLIC_ACCESS_MODIFIERS ) . OVERRIDE_PUBLIC_ACCESS_MODIFIERS )
JavaType var = var . getType ( )
JsonDeserializer < Object > var = findDeserializerFromAnnotation ( var , var )
Class < ? > var = var . getRawClass ( )
public BuilderBasedDeserializer ( BeanDeserializerBuilder var , BeanDescription var , BeanPropertyMap var , Map < String , SettableBeanProperty > , SettableBeanProperty var , HashSet < String > var , boolean var , boolean var )
public BuilderBasedDeserializer ( BuilderBasedDeserializer var , HashSet < String > var )
wrapInstantiationProblem ( var , var )
wrapInstantiationProblem ( var , var )
if ( var . assignParameter ( var , var . deserialize ( var , var ) , var ) )
wrapAndThrow ( var , _beanType . getRawClass ( ) , var , var )
wrapInstantiationProblem ( var , var )
set ( var , deserialize ( var , var ) , var )
return setAndReturn ( var , deserialize ( var , var ) , var )
if ( var == null || var . getShape ( ) != JsonFormat . Shape . OBJECT )
final protected AnnotatedMethod var
public SettableAnyProperty ( BeanProperty var , AnnotatedMethod var , JavaType var , JsonDeserializer < Object > var , TypeDeserializer var )
var . getAnnotated ( ) . invoke ( var , var , var )
this ( new PropertyName ( var ) , var , var , var , var , PropertyMetadata . construct ( var , null , null , null ) , null , null , null )
wrapInstantiationProblem ( var , var )
return _valueInstantiator . createUsingDelegate ( var , _delegateDeserializer . deserialize ( var , var ) , var )
wrapInstantiationProblem ( var , var )
return _valueInstantiator . createUsingDelegate ( var , _delegateDeserializer . deserialize ( var , var ) , var )
wrapInstantiationProblem ( var , var )
if ( var == Collection . class || var == List . class || var == ArrayList . class )
if ( var == Map . class || var == LinkedHashMap . class )
if ( var == var )
public Vanilla ( int var ) = var
return ArrayList . class . getName ( )
return LinkedHashMap . class . getName ( )
return HashMap . class . getName ( )
return Object . class . getName ( )
if ( ! var [ var ] . hasDefaultType )
SettableBeanProperty var = var [ var ] . getProperty
if ( var . findCreatorProperty ( var . getName ( ) ) == null )
protected PropertyBasedCreator ( ValueInstantiator var , SettableBeanProperty var )
return new PropertyBasedCreator ( var , var )
Object var = var . createFromObjectWith ( var , var . getParameters ( var ) )
var [ var ] = var
return new AtomicReferenceDeserializer ( var , var , var )
JsonFormat . Value var = var . getAnnotationIntrospector ( ) . findFormat ( ( Annotated ) var . getMember ( ) )
return new FactoryBasedDeserializer ( var , var , var )
if ( var . length ( ) == 0 )
if ( var . isEnabled ( DeserializationFeature . UNWRAP_SINGLE_VALUE_ARRAYS ) && var . isExpectedStartArrayToken ( ) )
var = var . deserialize ( var , var )
JsonToken var = var . getCurrentToken ( )
if ( var == JsonToken . VALUE_STRING || var == JsonToken . FIELD_NAME )
return var . deserializeTypedFromAny ( var , var )
if ( var . getCurrentToken ( ) == JsonToken . START_ARRAY && var . isEnabled ( DeserializationFeature . UNWRAP_SINGLE_VALUE_ARRAYS ) )
if ( var . nextToken ( ) != JsonToken . END_ARRAY )
if ( var . getCurrentToken ( ) == JsonToken . VALUE_EMBEDDED_OBJECT )
return JsonLocation . class . getName ( )
if ( var == JsonParser . NumberType . BIG_DECIMAL || var . isEnabled ( DeserializationFeature . USE_BIG_DECIMAL_FOR_FLOATS ) )
protected MapDeserializer ( MapDeserializer var , KeyDeserializer var , JsonDeserializer < Object > var , TypeDeserializer var , HashSet < String > var )
HashSet < String > var = var
String var = var . findPropertiesToIgnore ( var , false )
if ( var != null )
return Double . valueOf ( var . getDoubleValue ( ) )
if ( var . getCurrentToken ( ) == JsonToken . VALUE_STRING && var == Byte . class )
if ( var != JsonToken . VALUE_STRING )
if ( var != JsonToken . VALUE_NULL )
if ( var != JsonToken . VALUE_NULL )
var = ( byte ) 0
return Boolean . valueOf ( _parseBooleanFromOther ( var , var ) , var )
if ( var . getNumberType ( ) == NumberType . LONG )
var = var . getText ( ) . trim
if ( var . isEnabled ( DeserializationFeature . UNWRAP_SINGLE_VALUE_ARRAYS ) )
if ( var == JsonToken . START_ARRAY && var . isEnabled ( DeserializationFeature . UNWRAP_SINGLE_VALUE_ARRAYS ) )
Object var = var . deserialize ( var . getParser ( ) , var )
var = EnumResolver . constructUnsafeUsingToString ( var . getEnumClass ( ) )
String var = String . format ( "" , getValueTypeDesc , var . getClass ( ) . getName , var . getMessage ( ) )
return JsonMappingException . from ( var . getParser ( ) , var , var )
if ( ( var == JsonToken . START_ARRAY ) && var . isEnabled ( DeserializationFeature . UNWRAP_SINGLE_VALUE_ARRAYS ) )
var . nextToken ( )
_badFormat ( var , var )
return var . getDoubleValue ( )
return Double . valueOf ( var . getDoubleValue ( ) )
return Double . valueOf ( var . getDoubleValue ( ) )
return Double . valueOf ( var . getDoubleValue ( ) )
Class < ? > var = null
var = Class . forName ( "" )
if ( ( var != null ) && var . isAssignableFrom ( var ) )
if ( ( var != null ) && var . isAssignableFrom ( var ) )
JsonDeserializer < ? >
private AnnotatedClass ( JavaType var , Class < ? > var , TypeBindings var , List < JavaType > var , AnnotationIntrospector var , MixInResolver var , TypeFactory var , AnnotationMap var )
var = var
return new AnnotatedClass ( var , var , var . getBindings ( ) , ClassUtil . findSuperTypes ( var , null , false ) , null , false , var , ( MixInResolver ) var , var . getTypeFactory ( ) , null )
return new AnnotatedClass ( var , var , var . getBindings ( ) , ClassUtil . findSuperTypes ( var , null , false ) , null , false , var , var , var . getTypeFactory ( ) , null )
return var . annotations
return var . size > 0
ClassUtil . checkAndFixAccess ( getMember , var )
if ( isFactoryMethod ( var ) )
if ( 1 == var . getParameterCount ( ) )
if ( var == null || var . isEmpty ( ) )
List < PropertyName > var = new ArrayList < PropertyName > ( )
var . add ( var )
JsonFormat . Value var = var
var = Java7Support . class . newInstance ( )
if ( var . allowGetters ( ) )
if ( var . allowSetters ( ) )
return var . value ( )
JsonIgnoreProperties var = _findAnnotation ( var , JsonIgnoreProperties . class )
AnnotatedMember var = new VirtualAnnotatedMember ( var , var . getRawType ( ) , var , var . getRawClass ( ) )
AnnotatedMember var = new VirtualAnnotatedMember ( var , var . getRawType ( ) , var . getSimpleName ( ) , var . getRawClass ( ) )
Transient var = var . getAnnotation ( Transient . class )
AnnotatedWithParams var = var . getOwner ( )
if ( var != null )
var . removeNonVisible ( var )
var . put ( var . getName ( ) , var )
return _anyExplicits ( var ) || _anyExplicits ( var ) || _anyExplicits ( var ) || _anyExplicits ( var )
return PropertyMetadata . construct ( var . booleanValue ( ) , var , var , var )
public AsArrayTypeDeserializer ( JavaType var , TypeIdResolver var , String var , boolean var , Class < ? > var )
var = JsonParserSequence . createFlattened ( var . asParser ( var ) , var )
public AsExternalTypeDeserializer ( JavaType var , TypeIdResolver var , String var , boolean var , Class < ? > var )
public AsPropertyTypeDeserializer ( JavaType var , TypeIdResolver var , String var , boolean var , Class < ? > var )
public AsPropertyTypeDeserializer ( JavaType var , TypeIdResolver var , String var , boolean var , Class < ? > var , As var )
var = JsonParserSequence . createFlattened ( var . asParser ( var ) , var )
if ( var . getCurrentToken ( ) == JsonToken . START_ARRAY )
public AsWrapperTypeDeserializer ( JavaType var , TypeIdResolver var , String var , boolean var , Class < ? > var )
var = JsonParserSequence . createFlattened ( var . asParser ( var ) , var )
return _idFrom ( var , var . getClass ( ) )
return _idFrom ( var , var )
JavaType var = var . constructFromCanonical ( var )
if ( var instanceof DeserializationConfig )
DeserializationConfig var = ( DeserializationConfig ) var
var = _typeFactory . constructCollectionType ( EnumSet . class , var ) . toCanonical
var = _typeFactory . constructMapType ( EnumMap . class , var , var ) . toCanonical
return new AsArrayTypeDeserializer ( var , var , var , var , var )
return new AsExternalTypeDeserializer ( var , var , var , var , var )
protected TypeDeserializerBase ( JavaType var , TypeIdResolver var , String var , boolean var , Class < ? > var )
var = var . forcedNarrowBy ( var )
var = _handleUnknownTypeId ( var , var , var , var )
var = ( ( TypeIdResolverBase ) var ) . getDescForKnownTypeIds
var . append ( '[' ) . append ( getClass . getName )
var . append ( "" ) . append ( var )
var . writeStartObject ( )
( ( BaseJsonNode ) var . getValue ( ) ) . serialize ( var , var )
( ( BaseJsonNode ) var . getValue ( ) ) . serialize ( var , var )
var . writeTypeSuffixForObject ( this , var )
JavaType var = var . containedType ( 0 )
JavaType var = var . containedType ( 1 )
MapSerializer var = MapSerializer . construct ( var . findPropertiesToIgnore ( var . getClassInfo ( ) , true ) . getClassInfo ( ) , true , var , var , var , var , var , var )
if ( var != null && var != var )
protected BeanSerializer ( BeanSerializerBase var , String var )
var = MapSerializer . construct ( null , var , var , var , null , null , null )
AnnotatedClass var = var . getClassInfo ( )
String var = var . findPropertiesToIgnore ( var , true )
if ( var != null && var . length > 0 )
HashSet < String > var = ArrayBuilders . arrayToSet ( var )
BeanPropertyWriter var = var . buildWriter ( var , var , var , var , var , var , var , var )
var = var . findPropertyInclusion ( var . getDefaultPropertyInclusion ( ) )
var = getPropertyDefaultValue ( var . getName ( ) , var , var )
protected BeanAsArraySerializer ( BeanSerializerBase var , String var )
protected UnwrappingBeanSerializer ( UnwrappingBeanSerializer var , String var )
JsonFormat . Value var = var . findPropertyFormat ( var . getConfig ( ) , _handledType )
JsonFormat . Value var = var . findPropertyFormat ( var . getConfig ( ) , _handledType )
if ( var == null )
var = _findCachedSerializer ( var , var . getClass ( ) )
protected BeanSerializerBase ( BeanSerializerBase var , String var )
if ( var . contains ( var . getName ( ) ) )
JsonFormat . Value var = var . findFormat ( ( Annotated ) var )
if ( var != null )
if ( var != var )
String var = null
var = var . findPropertiesToIgnore ( var , true )
if ( var != null && var . length != 0 )
var . writeStartObject ( )
JsonFormat . Value var = var . getAnnotationIntrospector ( ) . findFormat ( ( Annotated ) var . getMember ( ) )
Boolean var = _isShapeWrittenUsingIndex ( var , var , true )
JsonFormat . Value var = var . getAnnotationIntrospector ( ) . findFormat ( ( Annotated ) var . getMember ( ) )
Boolean var = _isShapeWrittenUsingIndex ( var . getType ( ) . getRawClass , var , false )
if ( var == Shape . STRING )
super ( var . getReturnType ( ) , false )
if ( var . isEnabled ( MapperFeature . USE_STATIC_TYPING ) || Modifier . isFinal ( var . getReturnType ( ) . getModifiers ) )
JavaType var = var . constructType ( var . getGenericReturnType ( ) )
Object var = var . invoke ( var )
var = var . invoke ( var )
var . writeTypePrefixForScalar ( var , var )
var . serialize ( var , var , var )
var . writeTypeSuffixForScalar ( var , var )
var . serializeWithType ( var , var , var , var )
var = var . getDeclaringClass ( )
if ( ( var != null ) && ( var . isEnum ( ) ) )
var . add ( String . valueOf ( var . invoke ( var ) ) . invoke ( var ) )
JsonInclude . Value var = var . findPropertyInclusion ( var . getConfig ( ) , Map . class )
HashSet < String > var = var
if ( var != null && var != null )
String var = var . findPropertiesToIgnore ( var , true )
if ( var != null )
Object var = this . var
var = _orderEntries ( var )
if ( var != null && var . contains ( var ) )
final HashSet < String > var = var
final HashSet < String > var = var
final HashSet < String > var = var
final HashSet < String > var = var
ObjectNode var = createSchemaNode ( "" , true )
if ( var . containsKey ( null ) )
if ( var != null )
final JsonSerializer < ? > var = new IntegerSerializer
var . put ( Integer . class . getName ( ) , var )
var . put ( Integer . TYPE . getName ( ) , var )
var . put ( Long . class . getName ( ) , LongSerializer . instance )
var . put ( Long . TYPE . getName ( ) , LongSerializer . instance )
var . put ( Double . class . getName ( ) , DoubleSerializer . instance )
var . put ( Double . TYPE . getName ( ) , DoubleSerializer . instance )
JsonFormat . Value var = var . getAnnotationIntrospector ( ) . findFormat ( var )
public IntegerSerializer
super ( Integer . class , JsonParser . NumberType . INT , "" )
public LongSerializer
super ( Long . class , JsonParser . NumberType . LONG , "" )
public DoubleSerializer
super ( Double . class , JsonParser . NumberType . DOUBLE , "" )
JsonFormat . Value var = var . findPropertyFormat ( var . getConfig ( ) , _handledType )
JsonFormat . Value var = var . findPropertyFormat ( var . getConfig ( ) , _handledType )
var . writeTypeSuffixForArray ( var , var )
var . writeTypePrefixForScalar ( var , var )
var . writeStartArray ( var )
var . writeEndArray ( )
var . writeStartArray ( var )
var . writeEndArray ( )
var . writeStartArray ( var )
var . writeEndArray ( )
var = var . toString ( )
PropertyFilter var = var . findPropertyFilter ( var , var )
return "" + _class . getName ( ) + "" + var + "" + var + ""
protected ReferenceType ( Class < ? > var , TypeBindings var , JavaType var , JavaType var , JavaType var , Object var , Object var , boolean var )
return new ReferenceType ( var , var , var , var , var , null , null , false )
return new ReferenceType ( var , TypeBindings . emptyBindings ( ) , null , null , var , null , null , false )
return new ReferenceType ( _class , _bindings , _superClass , _superInterfaces , var , _valueHandler , _typeHandler , _asStatic )
return new ReferenceType ( _class , _bindings , _superClass , _superInterfaces , var , _valueHandler , var , _asStatic )
return new ReferenceType ( _class , _bindings , _superClass , _superInterfaces , var . withTypeHandler ( var ) , _valueHandler , _typeHandler , _asStatic )
return new ReferenceType ( _class , _bindings , _superClass , _superInterfaces , var , var , _typeHandler , _asStatic )
return new ReferenceType ( _class , _bindings , _superClass , _superInterfaces , var , _valueHandler , _typeHandler , _asStatic )
return new ReferenceType ( _class , _bindings , _superClass , _superInterfaces , var . withStaticTyping ( ) , _valueHandler , _typeHandler , true )
return new ReferenceType ( var , _bindings , var , var , var , _valueHandler , _typeHandler , _asStatic )
return new ReferenceType ( var , _bindings , _superClass , _superInterfaces , var , _valueHandler , _typeHandler , _asStatic )
return ( ( ResolvedRecursiveType ) var ) . getSelfReferencedType . equals ( getSelfReferencedType )
this ( var , var , null )
protected TypeFactory ( TypeParser var , TypeModifier var , ClassLoader var )
return new TypeFactory ( var , var , var )
var = null
if ( var != null )
return new EnumResolver ( var , var , var )
return new EnumResolver ( var , var , var )
return new EnumResolver ( var , var , var )
return var . writer ( )
return var . reader ( )
return var . readerFor ( var )
JsonNodeFactory var = JsonNodeFactory . instance
return new MyContextualDeserializer ( var )
double var = ( ( Number ) var ) . longValue
double var = ( ( Number ) var ) . longValue
double var = ( ( Number ) var ) . doubleValue
double var = ( ( Number ) var ) . doubleValue
static Point
public Point
public Point ( int var , int var , int var )
Point var = var . convertValue ( var , Point . class )
final Point var = new Point ( 1 , 2 , 3 )
Point var = var . convertValue ( var , Point . class )
new ObjectMapper . readerFor ( Bean . class ) . withValueToUpdate ( var ) . readValue ( "" )
ObjectMapper var = new ObjectMapper
static Untyped989
ObjectReader var = var . readerFor ( Untyped989 . class )
if ( var . getCurrentToken ( ) == JsonToken . VALUE_STRING )
final Issues1327Bean var = new Issues1327Bean
List < Parent > var = ( List < Parent > ) var . getResult ( )
assertEquals ( "" , serializeAsString ( var , new JSONPObject ( "" , "" ) , "" ) , new JSONPObject ( "" , "" ) , "" )
assertEquals ( "" , serializeAsString ( var , new JSONPObject ( "" , Integer . valueOf ( 123 ) ) , Integer . valueOf ( 123 ) ) , new JSONPObject ( "" , Integer . valueOf ( 123 ) ) , Integer . valueOf ( 123 ) )
assertEquals ( "" , serializeAsString ( var , new JSONPObject ( "" , null ) , null ) , new JSONPObject ( "" , null ) , null )
assertEquals ( "" , serializeAsString ( var , new JSONPObject ( "" , new Impl ( "" , "" ) , "" ) , new Impl ( "" , "" ) , "" ) , new JSONPObject ( "" , new Impl ( "" , "" ) , "" ) , new Impl ( "" , "" ) , "" )
assertEquals ( "" , serializeAsString ( var , new JSONPObject ( "" , var , var ) , var , var ) , new JSONPObject ( "" , var , var ) , var , var )
ObjectReader var = var . readerFor ( POJO . class ) . at ( "" )
ObjectMapper var = new ObjectMapper
var . enable ( SerializationFeature . WRITE_ENUMS_USING_TO_STRING )
var = var . writeValueAsString ( var )
assertEquals ( "" , var . writeValueAsString ( PoAsArray . A ) . A )
assertEquals ( "" , var . writeValueAsString ( new PoOverrideAsNumber ) PoOverrideAsNumber )
EnumSetWrapper var = var . readValue ( var , EnumSetWrapper . class )
static Pojo
public Pojo
public Pojo ( String var , int var , int var , boolean var )
var = new PojoValue ( var , var , var , var )
public PojoValue
public PojoValue ( String var , int var , int var , boolean var )
Pojo var = var . readValue ( var , Pojo . class )
String var = var . writeValueAsString ( new Pojo ( "" , 42 , 13 , true ) , 42 , 13 , true )
if ( ! var . getTypeDesc ( ) . equals ( var . getTypeDesc ( ) ) )
JsonParserSequence var = JsonParserSequence . createFlattened ( var . asParser ( ) , var )
JsonParserSequence var = JsonParserSequence . createFlattened ( var . asParser ( ) , var . asParser ( ) )
JsonParserSequence var = JsonParserSequence . createFlattened ( var . asParser ( ) , var . asParser ( ) )
JsonParserSequence var = JsonParserSequence . createFlattened ( var , var )
MyWrapper var = var . readValue ( "" , MyWrapper . class )
var . setDiscardZeroesData ( ( int ) var . get ( "" ) > 0 )
testDiscardFieldsParsing ( Version . v4_1 , 1024L , true )
var . keepAlive = keepAlive
var . keepAlive = keepAlive
var . keepAlive = keepAlive
if ( var . keepAlive )
if ( var . keepAlive )
if ( ! isInline )
var . doneInline = true
if ( var . keepAlive )
return new ArrayList < String > ( )
validateAudienceRestrictions ( var . getAudience ( ) , var . getRequestURL ( ) . toString )
var = new GZIPInputStream ( var )
parseUsingXmlPullParser ( var )
var = var . next ( )
var . put ( "" , var )
AuthorizationRequest var = ( AuthorizationRequest ) var . get ( "" )
AuthorizationRequest var = ( AuthorizationRequest ) var . retrieveAttribute ( var , "" )
AuthorizationRequest var = ( AuthorizationRequest ) var . getModelMap ( ) . get ( "" )
IllegalArgumentException var = new IllegalArgumentException ( "" + var )
IllegalArgumentException var = new IllegalArgumentException ( "" + var )
IllegalArgumentException var = new IllegalArgumentException ( "" + var )
var . println ( var . next ( ) )
String var = getParamName ( var , var , var )
WebService . NewAction var = var . createAction ( "" ) . setDescription ( "" + "" + "" ) . setSince ( "" ) . setChangelog ( new Change ( "" , "" ) , "" , new Change ( "" , "" ) , "" , new Change ( "" , "" ) , "" ) . setHandler ( this ) . setResponseExample ( getClass . getResource ( "" ) )
if ( var . contains ( var ) )
this ( CacheFactory . getAnyInstance ( ) )
public CreateRegionFunction ( Cache var )
this . var = var
public TouchPartitionedRegionEntriesFunction ( Cache var )
if ( this . var . getLogger ( ) . fineEnabled )
this . var . getLogger ( ) . fine ( var . toString ( ) )
public TouchReplicatedRegionEntriesFunction ( Cache var )
if ( this . var . getLogger ( ) . fineEnabled )
this . var . getLogger ( ) . fine ( var . toString ( ) )
Region var = this . var . getRegion ( var )
return Collections . singletonList ( new ResourcePermission ( ResourcePermission . Resource . DATA , ResourcePermission . Operation . READ , var ) . Resource . DATA , ResourcePermission . Operation . READ , var )
FunctionService . registerFunction ( new BootstrappingFunction )
FunctionService . registerFunction ( new CreateRegionFunction )
FunctionService . registerFunction ( new RegionSizeFunction )
FunctionService . registerFunction ( new TouchPartitionedRegionEntriesFunction )
FunctionService . registerFunction ( new TouchReplicatedRegionEntriesFunction )
var . executeAndAssertThat ( "" + CreateRegionFunction . ID ) . tableHasColumnWithExactValuesInAnyOrder ( var , "" ) . statusIsError
var . executeAndAssertThat ( "" + TouchReplicatedRegionEntriesFunction . ID ) . tableHasColumnWithExactValuesInAnyOrder ( var , "" ) . statusIsError
FunctionService . registerFunction ( var )
FunctionService . registerFunction ( var )
FunctionService . registerFunction ( var )
FunctionService . registerFunction ( var )
FunctionService . registerFunction ( var )
FunctionService . registerFunction ( var )
FunctionService . registerFunction ( var )
FunctionService . registerFunction ( var )
FunctionService . registerFunction ( var )
FunctionService . registerFunction ( var )
FunctionService . registerFunction ( var )
var . executeAndAssertThat ( "" + var . getId ( ) ) . containsOutput ( "" ) . statusIsError
var . executeAndAssertThat ( "" + var . getId ( ) ) . containsOutput ( "" ) . statusIsError
var . executeAndAssertThat ( "" + var . getId ( ) ) . containsOutput ( "" ) . statusIsError
var . executeAndAssertThat ( "" + var . getId ( ) ) . containsOutput ( "" ) . statusIsError
var . executeAndAssertThat ( "" + var . getId ( ) ) . containsOutput ( "" ) . statusIsError
var . executeAndAssertThat ( "" + var . getId ( ) ) . containsOutput ( "" ) . statusIsError
var . debug ( "" , this . var . getId ( ) , var )
var . invoke ( "" , )
assertNotAuthorized ( , "" )
var . invoke ( "" , )
ResultCollector var = onServer ( var . getDefaultPool ( ) ) . execute ( var . getId ( ) )
assertNotAuthorized ( , "" )
assertNotAuthorized ( , "" )
failWithMessage ( "" + var )
FunctionService . registerFunction ( var )
Function var = var
var . executeAndAssertThat ( "" + var . getId ( ) ) . doesNotContainOutput ( "" ) . statusIsSuccess
var . executeAndAssertThat ( "" + var . getId ( ) ) . doesNotContainOutput ( "" ) . statusIsSuccess
var . executeAndAssertThat ( "" + var . getId ( ) ) . doesNotContainOutput ( "" ) . statusIsSuccess
var . executeAndAssertThat ( "" + var . getId ( ) ) . doesNotContainOutput ( "" ) . statusIsSuccess
var . executeAndAssertThat ( "" + var + "" + var . getId ( ) ) . doesNotContainOutput ( "" ) . statusIsSuccess
var . executeAndAssertThat ( "" + var . getId ( ) ) . doesNotContainOutput ( "" ) . statusIsSuccess
var . executeAndAssertThat ( "" + var . getId ( ) ) . containsOutput ( "" + var . toString ( ) ) . statusIsError
var . executeAndAssertThat ( "" + var . getId ( ) ) . containsOutput ( "" + var . toString ( ) ) . statusIsError
var . executeAndAssertThat ( "" + var . getId ( ) ) . containsOutput ( "" + var . toString ( ) ) . statusIsError
Condition < String > var = new Condition ( var , "" , var )
Condition < String > var = new Condition ( var , "" , var )
var . executeAndAssertThat ( "" + var + "" + var . getId ( ) ) . containsOutput ( "" + var . toString ( ) ) . statusIsError
var . executeAndAssertThat ( "" + var + "" + var . getId ( ) ) . containsOutput ( "" + var . toString ( ) ) . statusIsError
var . executeAndAssertThat ( "" + var . getId ( ) ) . containsOutput ( "" + var . toString ( ) ) . statusIsError
var . executeAndAssertThat ( "" + var + "" + var . getId ( ) ) . containsOutput ( "" + var . toString ( ) ) . statusIsError
var . executeAndAssertThat ( "" + var . getId ( ) ) . containsOutput ( "" + var . toString ( ) ) . statusIsError
var . executeAndAssertThat ( "" + var + "" + var . getId ( ) ) . containsOutput ( "" + var . toString ( ) ) . statusIsError
var . executeAndAssertThat ( "" + var . getId ( ) ) . containsOutput ( "" + var . toString ( ) ) . statusIsError
var . executeAndAssertThat ( "" + var + "" + var . getId ( ) ) . containsOutput ( "" + var . toString ( ) ) . statusIsError
var . executeAndAssertThat ( "" + var . getId ( ) ) . containsOutput ( "" + var . toString ( ) ) . statusIsError
var . executeAndAssertThat ( "" + var + "" + var . getId ( ) ) . containsOutput ( "" + var . toString ( ) ) . statusIsError
int var = 0
for ( int var = 0 ; var < var . length ( ) ; var ++ )
var = 31 * var + var . charAt ( var )
final boolean var = blockSort
return var . blockSort ( var , var )
boolean blockSort ( final BZip2CompressorOutputStream . Data var , final int var )
assertFalse ( var . s . blockSort ( var . data , var . length - 1 ) . data , var . length - 1 )
assertFalse ( var . s . blockSort ( var . data , var . length - 1 ) . data , var . length - 1 )
Jenkins var = Jenkins . getInstance ( )
if ( var . exists ( ) )
return Jenkins . getInstance ( ) . getRootUrl + getUrl
List < UserProperty > var = new ArrayList < UserProperty > ( var )
ImpersonatingUserDetailsService var = new ImpersonatingUserDetailsService ( Jenkins . getInstance ( ) . getSecurityRealm . getSecurityComponents . userDetails )
if ( var == null )
byNameLock . readLock ( ) . lock
byNameLock . readLock ( ) . unlock
Files . move ( var . toPath ( ) , var . toPath ( ) )
if ( var == null && ( var || var . exists ( ) ) )
var = AllUsers . byName ( ) . putIfAbsent ( var , var = var )
if ( LOGGER . isLoggable ( Level . FINE ) && ! var . equals ( var . getFullName ( ) ) )
if ( ! var . equals ( var ) && ! var . exists ( ) )
LOGGER . log ( Level . WARNING , null , var )
if ( ! var . startsWith ( var + File . separator ) )
LOGGER . log ( Level . WARNING , String . format ( "" , var . getAbsolutePath ( ) ) , var . getAbsolutePath ( ) , var )
return getById ( var , true )
byNameLock . readLock ( ) . lock
ArrayList < User > var
var = new ArrayList < User > ( AllUsers . byName ( ) . values )
UserDetailsCache . get ( ) . invalidateAll
AllUsers . byName ( ) . clear
final IdStrategy var = idStrategy
byNameLock . writeLock ( ) . lock
if ( ! var . equals ( var . getKey ( ) ) )
Set < AbstractProject < ? , ? > , ? > var = new HashSet < AbstractProject < ? , ? > , ? > ( )
if ( var == null || StringUtils . isBlank ( var ) )
getConfigFile . write ( this )
SaveableListener . fireOnChange ( this , getConfigFile )
byNameLock . readLock ( ) . lock
AllUsers . byName ( ) . remove ( var . keyFor ( id ) )
byNameLock . readLock ( ) . unlock
List < UserProperty > var = new ArrayList < UserProperty > ( )
final List < Run > var = new ArrayList < Run > ( )
ACL var = Jenkins . getInstance ( ) . getAuthorizationStrategy . getACL ( this )
return hasPermission ( Jenkins . ADMINISTER ) && ! var . equals ( id , Jenkins . getAuthentication ( ) . getName ) && new File ( getRootDir , var . filenameOf ( id ) ) . exists
if ( ! Jenkins . getInstance ( ) . hasPermission ( Jenkins . ADMINISTER ) )
List < String > var = new ArrayList < String > ( )
Collections . sort ( var , String . CASE_INSENSITIVE_ORDER )
if ( ! Jenkins . getInstance ( ) . hasPermission ( Jenkins . READ ) )
final Set < String > var = new HashSet
var . addAll ( Arrays . asList ( ILLEGAL_PERSISTED_USERNAMES ) )
if ( var . exists ( ) )
getOrCreate ( var , var , true , var )
return ExtensionList . lookupSingleton ( AllUsers . class ) . var
int var = getPriority
return Jenkins . getInstance ( ) . getDescriptorList ( IdStrategy . class )
return "" + var . substring ( 1 )
StringBuilder var = new StringBuilder ( var . length ( ) + 16 )
return "" + var . substring ( 1 )
StringBuilder var = new StringBuilder ( var . length ( ) + 16 )
var . append ( var )
var . append ( var )
var . append ( var )
if ( 'A' <= var && var <= 'Z' )
var . append ( '~' )
var . append ( Character . toLowerCase ( var ) )
var . append ( '$' )
var . append ( StringUtils . leftPad ( Integer . toHexString ( var & 0xffff ) & 0xffff , 4 , '0' ) . toHexString ( var & 0xffff ) & 0xffff , 4 , '0' )
var = new IdStrategy . CaseInsensitive ( )
assertEquals ( "" , var . idFromFilename ( "" ) )
assertEquals ( "" , var . idFromFilename ( "" ) )
assertEquals ( "" , var . idFromFilename ( "" ) )
var = new IdStrategy . CaseSensitive ( )
assertEquals ( "" , var . filenameOf ( "" ) )
assertEquals ( "" , var . idFromFilename ( var . filenameOf ( "" ) ) . filenameOf ( "" ) )
assertRoundTrip ( "" , "" )
assertEquals ( var , var . filenameOf ( var ) )
assertEquals ( var , var . filenameOf ( var ) )
var . setFullName ( "" )
assertThat ( var . getFullName ( ) , equalTo ( "" ) )
assertThat ( var . getFullName ( ) , equalTo ( "" ) )
var = new File ( var . getInstance ( ) . getRootDir + "" + TEST_FILE )
writeStringToFile ( getUserFile , String . valueOf ( currentTimeMillis )  , true )
final File var = new File ( Jenkins . getInstance ( ) . getRootDir , "" )
assertEquals ( "" , User . get ( "" ) . getFullName )
assertEquals ( "" , User . get ( "" ) . getFullName )
User var = User . get ( "" , true , Collections . emptyMap ( ) )
String var = var . getConfigFile ( ) . asString
var . print ( var )
User var = User . get ( "" , false , Collections . emptyMap ( ) )
assertEquals ( "" , "" , var . getFullName ( ) )
assertFalse ( "" , var . getConfigFile ( ) . exists )
assertCorrectConfig ( User . getById ( "" , true ) , true , "" )
assertCorrectConfig ( User . getById ( "" , true ) , true , "" )
File var = new File ( Jenkins . getInstance ( ) . getRootDir , "" )
User var = User . getById ( "" , false )
assertThat ( var . getFullName ( ) , equalTo ( "" ) )
assertThat ( var . getFullName ( ) , equalTo ( "" ) )
User var = User . getById ( "" , false )
assertThat ( var . getFullName ( ) , equalTo ( "" ) )
assertThat ( var . getFullName ( ) , equalTo ( "" ) )
assertThat ( var . getFullName ( ) , equalTo ( "" ) )
assertThat ( var . getFullName ( ) , equalTo ( "" ) )
assertThat ( var . getFullName ( ) , equalTo ( "" ) )
assertFalse ( new File ( var , "" ) , "" . exists )
assertThat ( var . getFullName ( ) , equalTo ( "" ) )
var . setFullName ( "" )
assertEquals ( "" , var . getFullName ( ) )
assertEquals ( "" , User . getById ( "" , false ) , false . getFullName )
if ( ! var && ( var . equals ( var ) || var . equals ( var ) ) )
var = var . getBlockNext ( )
if ( StrUtil . isBlank ( var ) )
return new File ( var , var )
var = new File ( var , var )
var = new File ( var )
var = new File ( var , var )
var = new File ( var , var . getName ( ) )
this . var = var . getAsBoolean ( var , true )
Node var = NodeBuilder . nodeBuilder ( ) . local ( true ) . data ( true ) . settings ( ImmutableSettings . builder ( ) . put ( ClusterName . SETTING , nodeName ) . SETTING , nodeName . put ( "" , nodeName ) , nodeName . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , 1 ) . SETTING_NUMBER_OF_SHARDS , 1 . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , 0 ) . SETTING_NUMBER_OF_REPLICAS , 0 . put ( EsExecutors . PROCESSORS , 1 ) . PROCESSORS , 1 . put ( "" , false ) , false . put ( "" , "" ) , "" . put ( "" , true ) , true . put ( "" , "" ) , "" ) . var
return new String ( var . toByteArray ( ) , GeneralConstants . SAML_CHARSET )
ResolvedMethod var = var . getMemberMethods ( )
var = findPrincipal ( var , var , context . getRealm ( ) )
String var = generateNOnce ( var )
setAuthenticateHeader ( var , var , var , var )
if ( ! var . startsWith ( "" ) null ) )
return ( var . authenticate ( var , var , var , var , var , var , var , var ) )
String var = var . getRemoteAddr ( ) + "" + var + "" + var
byte var = null
var = var . encode ( var )
var = var . digest ( var . getBytes ( ) )
String var = "" + var + "" + "" + var + "" + "" + var . encode ( var ) + ""
if ( extract ( var , var , var ) )
if ( extract ( var , var , var ) )
if ( var && var . exists ( ) )
var . put ( var , var )
var . put ( "" , encodeUrl ( var ) )
var . put ( "" , encodeUrl ( this . var ) . var )
if ( MediaType . APPLICATION_JAVA_OBJECT . equals ( var ) || MediaType . APPLICATION_JAVA_OBJECT_XML . equals ( var ) . APPLICATION_WWW_FORM . equals ( var ) )
if ( MediaType . APPLICATION_JAVA_OBJECT . equals ( var . getMediaType ( ) ) = 1.0F . APPLICATION_JAVA_OBJECT . isCompatible ( var . getMediaType ( ) ) = 0.6F . APPLICATION_JAVA_OBJECT_XML . equals ( var . getMediaType ( ) ) = 1.0F . APPLICATION_JAVA_OBJECT_XML . isCompatible ( var . getMediaType ( ) ) = 0.6F )
if ( MediaType . APPLICATION_JAVA_OBJECT_XML . equals ( var . getMediaType ( ) ) = 1.0F )
if ( MediaType . APPLICATION_JAVA_OBJECT_XML . isCompatible ( var . getMediaType ( ) ) = 0.6F )
if ( MediaType . APPLICATION_JAVA_OBJECT . equals ( var . getMediaType ( ) ) = 1.0F . APPLICATION_JAVA_OBJECT . isCompatible ( var . getMediaType ( ) ) = 0.6F . APPLICATION_JAVA_OBJECT_XML . equals ( var . getMediaType ( ) ) = 1.0F . APPLICATION_JAVA_OBJECT_XML . isCompatible ( var . getMediaType ( ) ) = 0.6F = 0.5F )
if ( MediaType . APPLICATION_JAVA_OBJECT_XML . equals ( var . getMediaType ( ) ) = 1.0F )
if ( MediaType . APPLICATION_JAVA_OBJECT_XML . isCompatible ( var . getMediaType ( ) ) = 0.6F )
if ( var == 0 null ) )
return ( null )
cf = new ActiveMQConnectionFactory ( var . getPublishableConnectString ( ) )
String var = "" + var . getHost ( ) + "" + var . getPort ( )
final NetworkConnector var = var . addNetworkConnector ( "" + var . getTransportConnectorByScheme ( "" ) . getPublishableConnectString . replace ( "" , "" ) , "" + "" )
var . setBrokerURL ( var )
basicSendReceive ( "" + var . getConnectorByName ( "" ) . getConnectUri . getPort )
basicSendReceive ( "" + var . getConnectorByName ( "" ) . getConnectUri . getPort )
byte var = new byte [ BaseBlock ] . BaseBlockSize
byte var = new byte [ var ]
byte var = new byte [ BlockHeader ] . blockHeaderSize
byte var = new byte [ SubBlockHeader ] . SubBlockHeaderSize
byte var = new byte [ MacInfoHeader ] . MacInfoHeaderSize
byte var = new byte [ EAHeader ] . EAHeaderSize
byte var = new byte [ var ]
return SaltAPIBuilder . DescriptorImpl . doFillCredentialsIdItems ( var , var , var )
Path var = var . getAbsoluteFile ( ) . toPath . normalize
File var = Util . resolveSymlinkToFile ( var )
if ( var == null = var = var )
var = var
Path var = var . getAbsoluteFile ( ) . toPath . normalize
while ( var != null && ! var . equals ( var . getParentFile ( ) ) )
var = var . getParentFile ( )
if ( var . length ( ) > 0 )
return new FilePathVF ( var )
FilePathVF ( FilePath var )
var [ var ] = forFilePath ( var . get ( var ) )
return forFilePath ( var . child ( var ) )
var . createWebClient ( ) . assertFails ( var . getUrl ( ) + "" , HttpURLConnection . HTTP_NOT_FOUND )
DocumentBuilder var = DocumentBuilderFactory . newInstance ( ) . newDocumentBuilder
SchemaFactory var = SchemaFactory . newInstance ( XMLConstants . W3C_XML_SCHEMA_NS_URI )
var . put ( "" , var )
AuthorizationRequest var = ( AuthorizationRequest ) var . get ( "" )
AuthorizationRequest var = ( AuthorizationRequest ) var . retrieveAttribute ( var , "" )
AuthorizationRequest var = ( AuthorizationRequest ) var . getModelMap ( ) . get ( "" )
